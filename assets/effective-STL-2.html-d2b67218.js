import{_ as a,V as t,W as e,X as n,Y as p,$ as o,a0 as c,F as l}from"./framework-9a29aaa0.js";const i={},u=c(`<h1 id="effective-stl-02-小心对-容器无关代码-的幻想" tabindex="-1"><a class="header-anchor" href="#effective-stl-02-小心对-容器无关代码-的幻想" aria-hidden="true">#</a> effective STL-02 小心对&quot;容器无关代码&quot;的幻想</h1><p>STL是建立在泛化的基础上的。</p><ul><li>数组泛化为容器，参数泛化所包含对象的类型。</li><li>函数泛化为算法，参数泛化所用的迭代器类型。</li><li>指针泛化为迭代器，参数泛化所指向的对象的类型。</li></ul><p>不同容器是不同的，优点和缺点大不相同，不要去对它们做包装</p><ul><li>序列容器支持push_front、push_back，但关联容器不支持</li><li>关联容器提供logN复杂度的lower_bound、upper_bound和equal_range，（N叉树）</li><li>不同的容器是不同的，优缺点有重大不同。它们不被设计成可互换的，而且你做不了什么包装的工作</li></ul><p>尽量用typedef来代替冗长的<code>container&lt;class&gt;</code> 以及<code>container&lt;class&gt;::iterator</code>代码,使用typedef的好处还有，换另一种容器方便(以及更换allocator等其他template参数的时候)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span> WidgetContainer<span class="token punctuation">;</span> <span class="token comment">//只修改一处</span>
<span class="token keyword">typedef</span> WidgetContainer<span class="token double-colon punctuation">::</span>iterator WCIterator<span class="token punctuation">;</span> <span class="token comment">//只修改一处</span>
<span class="token comment">//using WCIterator =WidgetContainer::iterator C++11</span>
WidgetContainer cw<span class="token punctuation">;</span>
Widget bestWidget<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
WCIterator i <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>cw<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cw<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bestWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果问题的改变是简单的加上用户的allocator时特别方便</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token comment">// 关于为什么这里需要一个template</span>
SpecialAllocator <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 请参见条款10</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>Widget<span class="token punctuation">,</span> SpecialAllocator<span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> WidgetContainer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> WidgetContainer<span class="token double-colon punctuation">::</span>iterator WCIterator<span class="token punctuation">;</span>
WidgetContainer cw<span class="token punctuation">;</span> <span class="token comment">// 仍然能用</span>
Widget bestWidget<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
WCIterator i <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>cw<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cw<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bestWidget<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仍然能用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.如果不想对用户暴露所使用容器的类型，则把容器进行封装，把容器类型定义在private域，只提供相应的接口给用户</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">CustomerList</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> list<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span> CustomerContainer<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> CustomerContainer<span class="token double-colon punctuation">::</span>iterator CCIterator<span class="token punctuation">;</span>
    CustomerContainer customers<span class="token punctuation">;</span><span class="token comment">//隐藏</span>
<span class="token keyword">public</span><span class="token operator">:</span> <span class="token comment">// 通过这个接口</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 限制list特殊信息的可见性</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文章：</p>`,12),r={href:"https://www.cnblogs.com/yan1345/p/Note_of_Effective_STL.html#02-%E5%B0%8F%E5%BF%83%E5%AF%B9%E5%AE%B9%E5%99%A8%E6%97%A0%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B9%BB%E6%83%B3",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=l("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",r,[p("https://www.cnblogs.com/yan1345/p/Note_of_Effective_STL.html#02-小心对容器无关代码的幻想"),o(s)])])])}const b=a(i,[["render",d],["__file","effective-STL-2.html.vue"]]);export{b as default};
