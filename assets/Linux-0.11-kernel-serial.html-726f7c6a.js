import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},e=t(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95serialc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录serial.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#init">init</a></li><li><a href="#rs_init">rs_init</a></li><li><a href="#rs_write">rs_write</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录serial-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录serial-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录serial.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 设置线路控制寄存器的DLAB位(位7)</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* set DLAB of line control reg */</span>
    <span class="token comment">// 发送波特率因子低字节，0x30 -&gt; 2400bps</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* LS of divisor (48 -&gt; 2400 bps */</span>
    <span class="token comment">// 发送波特率因子高字节，0x00</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* MS of divisor */</span>
    <span class="token comment">// 复位DLAB位,数据位为8位</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* reset DLAB */</span>
    <span class="token comment">// 设置DTR,RTS,辅助用户输出2</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* set DTR,RTS, OUT_2 */</span>
    <span class="token comment">// 除了写(写保持空)以外，允许所有中断源中断</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* enable all intrs but writes */</span>
    <span class="token comment">// 读数据口，以进行复位操作(?)</span>
	<span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">inb</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* read data port to reset things (?) */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rs-init" tabindex="-1"><a class="header-anchor" href="#rs-init" aria-hidden="true">#</a> rs_init</h3><p>初始化串行中断程序和串行接口中断描述符表IDT中的门描述符设置宏set_intr_gate()在include/asm/system.h中实现</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rs_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 下面两句用于设置两个串行口的中断门描述符。rsl_interrupt是串口1的中断处理过程指正。</span>
    <span class="token comment">// 串口1使用的中断是int 0x24，串口2的是int 0x23.</span>
	<span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span>rs1_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置串行口1的中断门向量(IRQ4信号)</span>
	<span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span>rs2_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置串行口2的中断门向量(IRQ3信号)</span>
	<span class="token function">init</span><span class="token punctuation">(</span>tty_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>read_q<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 初始化串行口1(.data是端口基地址)</span>
	<span class="token function">init</span><span class="token punctuation">(</span>tty_table<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>read_q<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 初始化串行口2</span>
	<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 允许主8259A响应IRQ3、IRQ4中断请求</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rs-write" tabindex="-1"><a class="header-anchor" href="#rs-write" aria-hidden="true">#</a> rs_write</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rs_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">.</span>data<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x02</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">.</span>data<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","Linux-0.11-kernel-serial.html.vue"]]);export{r as default};
