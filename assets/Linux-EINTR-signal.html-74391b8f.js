const e=JSON.parse('{"key":"v-424a6368","path":"/posts/Linux/application-dev/Linux-EINTR-signal.html","title":"socket编程中的EINTR是什么?","lang":"zh-CN","frontmatter":{"category":["Linux"],"description":"socket编程中的EINTR是什么? 在socket编程中，我们时常在accept/read/write等接口调用的异常处理的部分看到对于EINTR的处理，例如下面这样的语句： repeat: if(read(fd, buff, size) &lt; 0) { if(errno == EINTR) goto repeat; else printf(\\"read failed\\"); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/application-dev/Linux-EINTR-signal.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"socket编程中的EINTR是什么?"}],["meta",{"property":"og:description","content":"socket编程中的EINTR是什么? 在socket编程中，我们时常在accept/read/write等接口调用的异常处理的部分看到对于EINTR的处理，例如下面这样的语句： repeat: if(read(fd, buff, size) &lt; 0) { if(errno == EINTR) goto repeat; else printf(\\"read failed\\"); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-06T07:24:16.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-06T07:24:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"socket编程中的EINTR是什么?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-06T07:24:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"慢系统调用","slug":"慢系统调用","link":"#慢系统调用","children":[]},{"level":2,"title":"慢系统调用与EINTR","slug":"慢系统调用与eintr","link":"#慢系统调用与eintr","children":[]},{"level":2,"title":"如何避免EINTR带来的问题。","slug":"如何避免eintr带来的问题。","link":"#如何避免eintr带来的问题。","children":[]}],"git":{"createdTime":1699255456000,"updatedTime":1699255456000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":7.08,"words":2123},"filePathRelative":"posts/Linux/application-dev/Linux-EINTR-signal.md","localizedDate":"2023年11月6日","excerpt":"<h1> socket编程中的EINTR是什么?</h1>\\n<p>在socket编程中，我们时常在accept/read/write等接口调用的异常处理的部分看到对于EINTR的处理，例如下面这样的语句：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>repeat<span class=\\"token operator\\">:</span>\\n<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span>fd<span class=\\"token punctuation\\">,</span> buff<span class=\\"token punctuation\\">,</span> size<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>errno <span class=\\"token operator\\">==</span> EINTR<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">goto</span> repeat<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"read failed\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
