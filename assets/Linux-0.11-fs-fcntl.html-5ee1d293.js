import{_ as n,V as s,W as a,a0 as e}from"./framework-c954d91f.js";const p={},t=e(`<h1 id="linux-0-11-文件系统fcntl-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统fcntl-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统fcntl.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>本模块实现了文件描述符复制的系统调用dup和dup2。除此以外还包含了fcntl这个可以修改已经打开的文件的状态。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="dupfd" tabindex="-1"><a class="header-anchor" href="#dupfd" aria-hidden="true">#</a> dupfd</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dupfd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于复制文件描述符。</p><p>入参fd代表计划复制的文件描述符。 arg代表新的文件描述符的最小值。</p><p>首先检查参数的有效性，如果fd大于进程最大可以打开的文件数，或者fd对应文件结构不存在，则返回-EBADF。如果arg大于了NR_OPEN，则返回EINVAL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span> <span class="token operator">!</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">&gt;=</span> NR_OPEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，从arg开始遍历，寻找合适的文件描述符用于复制。如果没有找到，则返回EMFILE。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>arg <span class="token operator">&lt;</span> NR_OPEN<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>arg<span class="token punctuation">]</span><span class="token punctuation">)</span>
        arg<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">&gt;=</span> NR_OPEN<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EMFILE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来复位close_on_exec中该句柄位。将fd对应的文件指针拷贝到arg对应的文件指针中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>current<span class="token operator">-&gt;</span>close_on_exec <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>arg<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>f_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> arg<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-dup2" tabindex="-1"><a class="header-anchor" href="#sys-dup2" aria-hidden="true">#</a> sys_dup2</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_dup2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> oldfd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> newfd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数与sys_dup函数类似，区别是其在进行文件描述符的复制时，如果newfd已经打开，其会进行关闭。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">sys_close</span><span class="token punctuation">(</span>newfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token function">dupfd</span><span class="token punctuation">(</span>oldfd<span class="token punctuation">,</span>newfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-dup" tabindex="-1"><a class="header-anchor" href="#sys-dup" aria-hidden="true">#</a> sys_dup</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_dup</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fildes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是复制文件描述符dup的系统调用。</p><p>其内部调用sys_dup函数，新的文件描述符从0开始寻找。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">return</span> <span class="token function">dupfd</span><span class="token punctuation">(</span>fildes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-fcntl" tabindex="-1"><a class="header-anchor" href="#sys-fcntl" aria-hidden="true">#</a> sys_fcntl</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_fcntl</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数时文件控制系统调用的函数。其具有多个功能。</p><p>首先检查函数的入参，如果大于进程最大可以打开的文件数或者fd对应的文件结构体不存在，则返回-EBADF。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>filp <span class="token operator">=</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，根据cmd的不同类型，实现不同的功能。</p><p>如果cmd是F_DUPFD，则调用dupfd进行文件描述符的拷贝。</p><p>如果cmd是F_GETFD，则用于获取fd对应的执行时关闭的标志。</p><p>如果cmd是F_SETFD，则用于设置fd对应的执行时关闭的标志。</p><p>如果cmd是F_GETFL，则用于返回文件的状态标志和访问模式。</p><p>如果cmd是F_SETFL, 则用于设置文件的状态标志和访问模式。</p><p>cmd等于F_GETLK/F_SETLK/F_SETLKW，还没有实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> F_DUPFD<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token function">dupfd</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> F_GETFD<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>close_on_exec<span class="token operator">&gt;&gt;</span>fd<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> F_SETFD<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
            current<span class="token operator">-&gt;</span>close_on_exec <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            current<span class="token operator">-&gt;</span>close_on_exec <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> F_GETFL<span class="token operator">:</span>
        <span class="token keyword">return</span> filp<span class="token operator">-&gt;</span>f_flags<span class="token punctuation">;</span>
    <span class="token keyword">case</span> F_SETFL<span class="token operator">:</span>
        filp<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>O_APPEND <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filp<span class="token operator">-&gt;</span>f_flags <span class="token operator">|=</span> arg <span class="token operator">&amp;</span> <span class="token punctuation">(</span>O_APPEND <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> F_GETLK<span class="token operator">:</span>	<span class="token keyword">case</span> F_SETLK<span class="token operator">:</span>	<span class="token keyword">case</span> F_SETLKW<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,37),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","Linux-0.11-fs-fcntl.html.vue"]]);export{d as default};
