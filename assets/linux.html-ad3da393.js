import{_ as e,V as l,W as c,a0 as i}from"./framework-9a29aaa0.js";const o={},d=i('<h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h1><h2 id="介绍几个gcc的优化参数" tabindex="-1"><a class="header-anchor" href="#介绍几个gcc的优化参数" aria-hidden="true">#</a> 介绍几个GCC的优化参数</h2><p>以下是一些常用的GCC优化参数：</p><ul><li>-O0禁用所有优化，编译速度最快，但代码运行速度最慢。</li><li>-O1启用基本优化，编译速度适中，代码运行速度适度提升。</li><li>-O3启用所有可用优化，编译速度最慢，代码运行速度最快。</li><li>-Os优化代码大小，编译速度较快，代码运行速度略微提升。</li><li>-0g优化调试体验，编译速度适中，代码运行速度略微提升。</li></ul><p>其他常见优化参数：</p><ul><li>-march=指定目标体系架构，例如<code>-march=native</code>使用当前机器的最佳指令集</li><li>-mtune=指定目标处理器，例如<code>-mtune=corei7</code>使用针对Corei7处理器的优化。</li><li>-format-frame-pointer省略帧指针，减少代码大小，但可能影响测试。</li><li>-finline-functions内联函数，减少函数调用开销</li><li>-fno-builtin禁用内建函数，例如memcpy、strlen等。</li></ul><p><code>-march</code>和<code>-mtune</code>的区别：</p><ul><li><p>如果您使用 <code>-march</code>，那么 GCC 将可以自由生成在指定 CPU 上运行的指令，但（通常）不能在架构系列中的早期 CPU 上运行。</p></li><li><p>如果您只使用 <code>-mtune</code>，那么编译器将生成适用于其中任何一个的代码，但会优先考虑在您指定的特定 CPU 上运行速度最快的指令序列。例如为该 CPU 适当地设置循环展开启发式。</p></li></ul><p>一般来说，这两个参数会这样使用，使得代码在旧版本的CPU上能够运行，同时在当前CPU上运行可以得到优化:</p><ul><li><code>-march=&lt;您想要运行的最老的 CPU&gt;</code></li><li><code>-mtune=generic</code></li></ul><h2 id="在shell中-使用source执行一个脚本和不使用source执行一个脚本有什么区别" tabindex="-1"><a class="header-anchor" href="#在shell中-使用source执行一个脚本和不使用source执行一个脚本有什么区别" aria-hidden="true">#</a> 在shell中，使用source执行一个脚本和不使用source执行一个脚本有什么区别？</h2><p>在shell中，使用<code>source</code>命令执行一个脚本会导致该脚本在当前<code>shell</code>环境中执行。这意味着脚本中的变量、函数以及其他定义会影响当前的<code>shell</code>会话。</p><p>如果不使用<code>source</code>命令，而是简单地执行脚本，则会启动一个新的子<code>shell</code>来执行该脚本。在子<code>shell</code>中执行的所有更改（例如定义的变量、函数等）都不会影响父<code>shell</code>或当前的<code>shell</code>会话。这意味着在不使用<code>source</code>命令的情况下，脚本中的更改只会在子<code>shell</code>中生效，执行完脚本后不会影响到当前<code>shell</code>的环境。</p><p>简而言之，<code>source</code>命令用于在当前shell环境中执行脚本，而不使用<code>source</code>则会在一个新的子<code>shell</code>中执行脚本。</p><h2 id="cpu-飙升该如何排查" tabindex="-1"><a class="header-anchor" href="#cpu-飙升该如何排查" aria-hidden="true">#</a> CPU 飙升该如何排查？</h2><p>CPU飙升是一个常见的性能问题，排查方法主要依赖于系统监控工具。以下是一些常见的排查步骤:</p><ul><li>1.<strong>监控系统指标</strong>：使用系统监控工具 (如<code>top</code>，<code>htop</code>，<code>perf</code>等)监控CPU使用率、进程占用CPU时间、系统负载等指标，初步判断CPU飙升的原因。</li><li>2.<strong>定位高负载进程</strong>： 确定哪个进程或线程占用了大部分CPU资源，并分析该进程的功能和代码，判断是否为正常运行导致CPU飙升。</li><li>3.<strong>分析代码</strong>: 仔细检查高负载进程的代码，寻找可能导致CPU占用率高的原因，例如 <ul><li>1.死循环或者递归调用</li><li>2.繁重计算操作</li><li>3.系统调用频繁</li></ul></li><li>4.检查系统资源： 检查系统资源是否充足，例如内存、磁盘空间、网络带宽等。资源不足也会导致CPU负载过高。</li><li>5.排查硬件问题：检查硬件是否出现故障，例如CPU过热、主板故障等。</li><li>6.使用性能分析工具：使用性能分析工具(如<code>perf</code>，<code>valgrind</code>等)对代码进行分析，定位性能瓶颈，并针对性地优化代码。</li><li>7.优化代码。根据性能分析结果，优化代码，降低CPU占用率。例如： <ul><li>1.使用更高效地算法和数据结构</li><li>2.减少不必要地计算操作</li><li>3.优化系统调用</li><li>4.使用缓存技术</li><li>5.并发处理任务</li></ul></li><li>8.调整系统配置：调整系统配置，例如限制进程地CPU占用率、调整内核参数等。</li></ul>',17),r=[d];function s(a,n){return l(),c("div",null,r)}const t=e(o,[["render",s],["__file","linux.html.vue"]]);export{t as default};
