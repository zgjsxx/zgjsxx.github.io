import{_ as t,V as p,W as o,X as n,Y as s,$ as c,a0 as a,F as l}from"./framework-c954d91f.js";const i={},u=a(`<h1 id="linux-0-11-kernel目录ll-rw-blk-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录ll-rw-blk-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录ll_rw_blk.c详解</h1><h2 id="lock-buffer" tabindex="-1"><a class="header-anchor" href="#lock-buffer" aria-hidden="true">#</a> lock_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">lock_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="unlock-buffer" tabindex="-1"><a class="header-anchor" href="#unlock-buffer" aria-hidden="true">#</a> unlock_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="add-request" tabindex="-1"><a class="header-anchor" href="#add-request" aria-hidden="true">#</a> add_request</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add_request</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blk_dev_struct</span> <span class="token operator">*</span> dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将块设备读写请求插入到电梯队列中。</p><p>如果当前设备的请求为空，就将入参中的请求作为设备电梯队列的头节点。并且立即调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> dev<span class="token operator">-&gt;</span>current_request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dev<span class="token operator">-&gt;</span>current_request <span class="token operator">=</span> req<span class="token punctuation">;</span>
    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>request_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IN_ORDER</span><span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd<span class="token operator">&lt;</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd<span class="token operator">==</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">&amp;&amp;</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">==</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">&amp;&amp;</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sector <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码是比较难懂的，可以使用if-else来帮助理解</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">inorder</span><span class="token punctuation">(</span>request <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> request <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>cmd <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>cmd<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>cmd <span class="token operator">==</span> s2<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>dev <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>dev<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>dev <span class="token operator">==</span> s2<span class="token punctuation">.</span>dev<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>sector <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>sector<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//s1.sector &gt; s2.sector</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//s1.dev &gt; s2.dev</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//s1.cmd &gt; s2.cmd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>展开上面的if-else结构逻辑就清晰了很多，IN_ORDER实际上就是一次对操作类型，设备号， 扇区号作比较， 并且操作类型优先级大于设备号，设备号优先级大于扇区号。</p><p>对于操作类型而言，读操作优先级大于写操作。对于设备号而言，设备号小的设备优先级大于设备号大的设备的优先级。对于扇区而言，扇区序号小的扇区优先级高于扇区序号大的扇区。</p>`,15),r={href:"https://blog.csdn.net/suppercoder/article/details/19619777",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="make-request" tabindex="-1"><a class="header-anchor" href="#make-request" aria-hidden="true">#</a> make_request</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">make_request</span><span class="token punctuation">(</span><span class="token keyword">int</span> major<span class="token punctuation">,</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ll-rw-block" tabindex="-1"><a class="header-anchor" href="#ll-rw-block" aria-hidden="true">#</a> ll_rw_block</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ll_rw_block</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="blk-dev-init" tabindex="-1"><a class="header-anchor" href="#blk-dev-init" aria-hidden="true">#</a> blk_dev_init</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">blk_dev_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6);function k(v,m){const e=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("参考: "),n("a",r,[s("https://blog.csdn.net/suppercoder/article/details/19619777"),c(e)])]),d])}const h=t(i,[["render",k],["__file","Linux-0.11-kernel-ll-rw-blk.html.vue"]]);export{h as default};
