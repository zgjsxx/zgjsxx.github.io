const t=JSON.parse('{"key":"v-118d4873","path":"/posts/Program_language/cpp/effective-cpp-03.html","title":"effective c++ 03 尽可能使用const","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 03 尽可能使用const 总结 将某些东西声明为const可以帮助编译器检查出错误用法。const可被施加于任何作用域的对象，函数参数，函数返回值类型，成员函数本体。 编译器强制实施比特常量性bitwise constness， 但你编写的程序应该使用概念上的常量性（conceptual constness） 当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp-03.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 03 尽可能使用const"}],["meta",{"property":"og:description","content":"effective c++ 03 尽可能使用const 总结 将某些东西声明为const可以帮助编译器检查出错误用法。const可被施加于任何作用域的对象，函数参数，函数返回值类型，成员函数本体。 编译器强制实施比特常量性bitwise constness， 但你编写的程序应该使用概念上的常量性（conceptual constness） 当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-07T08:11:52.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-07T08:11:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 03 尽可能使用const\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-07T08:11:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683447112000,"updatedTime":1683447112000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"posts/Program_language/cpp/effective-cpp-03.md","localizedDate":"2023年5月7日","excerpt":"<h1> effective c++ 03 尽可能使用const</h1>\\n<h2> 总结</h2>\\n<ul>\\n<li>将某些东西声明为const可以帮助编译器检查出错误用法。const可被施加于任何作用域的对象，函数参数，函数返回值类型，成员函数本体。</li>\\n<li>编译器强制实施比特常量性bitwise constness， 但你编写的程序应该使用概念上的常量性（conceptual constness）</li>\\n<li>当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。</li>\\n</ul>\\n","autoDesc":true}');export{t as data};
