import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const t={},p=e(`<h1 id="list的实现" tabindex="-1"><a class="header-anchor" href="#list的实现" aria-hidden="true">#</a> list的实现</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>mystl<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> l1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="list数据部分的定义" tabindex="-1"><a class="header-anchor" href="#list数据部分的定义" aria-hidden="true">#</a> list数据部分的定义</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> list_iterator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>                         iterator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进行展开</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> list_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>                       iterator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">iterator</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> mystl<span class="token double-colon punctuation">::</span>bidirectional_iterator_tag    iterator_category<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span>                                  value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span>                                 pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>                                 reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                        difference_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">list_iterator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> mystl<span class="token double-colon punctuation">::</span><span class="token class-name">iterator</span><span class="token operator">&lt;</span>mystl<span class="token double-colon punctuation">::</span><span class="token class-name">bidirectional_iterator_tag</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span>                                 value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span>                                pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>                                reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>base_ptr base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>node_ptr node_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> list_iterator_int                  self<span class="token punctuation">;</span>

  base_ptr node_<span class="token punctuation">;</span>  <span class="token comment">// 指向当前节点</span>

  <span class="token comment">//methods</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">list_node_base</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>base_ptr base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>node_ptr node_ptr<span class="token punctuation">;</span>

  base_ptr prev<span class="token punctuation">;</span>  <span class="token comment">// 前一节点</span>
  base_ptr next<span class="token punctuation">;</span>  <span class="token comment">// 下一节点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">list_node_base</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>base_ptr base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>node_ptr node_ptr<span class="token punctuation">;</span>

  <span class="token keyword">int</span> value<span class="token punctuation">;</span>  <span class="token comment">// 数据域</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">node_traits</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> list_node_base<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">*</span> base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> list_node<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">*</span>      node_ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/open_source_project/MyTinySTL/list.png" alt="list" tabindex="0" loading="lazy"><figcaption>list</figcaption></figure><h3 id="fill-init" tabindex="-1"><a class="header-anchor" href="#fill-init" aria-hidden="true">#</a> fill_init</h3><p>fill_init在list的构造函数中被调用，其作用是进行list的初始化。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">fill_init</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    node_ <span class="token operator">=</span> base_allocator<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node_<span class="token operator">-&gt;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_ <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>n<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> node <span class="token operator">=</span> <span class="token function">create_node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">link_nodes_at_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span><span class="token function">as_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span><span class="token function">as_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        base_allocator<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>node_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(t,[["render",l],["__file","list.html.vue"]]);export{d as default};
