import{_ as e,V as a,W as r,a0 as h}from"./framework-9a29aaa0.js";const n={},i=h('<h1 id="sofware-license" tabindex="-1"><a class="header-anchor" href="#sofware-license" aria-hidden="true">#</a> sofware license</h1><h2 id="gpl" tabindex="-1"><a class="header-anchor" href="#gpl" aria-hidden="true">#</a> GPL</h2><p>GPL最典型的例子就是Linux。</p><p>GPL协议的主要内容是只要在一个软件中使用(“使用&quot;指<strong>类库引用</strong>，<strong>修改后的代码</strong>或者<strong>衍生代码</strong>)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p><p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>GPL具有传染性。产品对外分发或销售时链接的相关代码要开源，因此商用时要进程隔离。</p><h2 id="lgpl" tabindex="-1"><a class="header-anchor" href="#lgpl" aria-hidden="true">#</a> LGPL</h2><p>和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>具有传染性。产品对外分发或销售时静态链接的相关代码要开源，因此商用时需要动态链接使用.</p><h2 id="mpl" tabindex="-1"><a class="header-anchor" href="#mpl" aria-hidden="true">#</a> MPL</h2><p>无修改无需开源，修改部分要开源。</p><h2 id="bsd" tabindex="-1"><a class="header-anchor" href="#bsd" aria-hidden="true">#</a> BSD</h2><p>可商用无风险。</p><h2 id="apache" tabindex="-1"><a class="header-anchor" href="#apache" aria-hidden="true">#</a> APACHE</h2><p>可商用无风险。</p><h2 id="mit" tabindex="-1"><a class="header-anchor" href="#mit" aria-hidden="true">#</a> MIT</h2><p>可商用无风险。</p>',17),d=[i];function s(t,c){return a(),r("div",null,d)}const p=e(n,[["render",s],["__file","license.html.vue"]]);export{p as default};
