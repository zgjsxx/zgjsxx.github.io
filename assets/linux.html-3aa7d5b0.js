import{_ as e,V as c,W as l,a0 as o}from"./framework-9a29aaa0.js";const d={},i=o('<h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h1><h2 id="介绍几个gcc的优化参数" tabindex="-1"><a class="header-anchor" href="#介绍几个gcc的优化参数" aria-hidden="true">#</a> 介绍几个GCC的优化参数</h2><p>以下是一些常用的GCC优化参数：</p><ul><li>-O0禁用所有优化，编译速度最快，但代码运行速度最慢。</li><li>-O1启用基本优化，编译速度适中，代码运行速度适度提升。</li><li>-O3启用所有可用优化，编译速度最慢，代码运行速度最快。</li><li>-Os优化代码大小，编译速度较快，代码运行速度略微提升。</li><li>-0g优化调试体验，编译速度适中，代码运行速度略微提升。</li></ul><p>其他常见优化参数：</p><ul><li>-march=指定目标体系架构，例如<code>-march=native</code>使用当前机器的最佳指令集</li><li>-mtune=指定目标处理器，例如<code>-mtune=corei7</code>使用针对Corei7处理器的优化。</li><li>-format-frame-pointer省略帧指针，减少代码大小，但可能影响测试。</li><li>-finline-functions内联函数，减少函数调用开销</li><li>-fno-builtin禁用内建函数，例如memcpy、strlen等。</li></ul><p><code>-march</code>和<code>-mtune</code>的区别：</p><ul><li><p>如果您使用 <code>-march</code>，那么 GCC 将可以自由生成在指定 CPU 上运行的指令，但（通常）不能在架构系列中的早期 CPU 上运行。</p></li><li><p>如果您只使用 <code>-mtune</code>，那么编译器将生成适用于其中任何一个的代码，但会优先考虑在您指定的特定 CPU 上运行速度最快的指令序列。例如为该 CPU 适当地设置循环展开启发式。</p></li></ul><p>一般来说，这两个参数会这样使用，使得代码在旧版本的CPU上能够运行，同时在当前CPU上运行可以得到优化:</p><ul><li><code>-march=&lt;您想要运行的最老的 CPU&gt;</code></li><li><code>-mtune=generic</code></li></ul><h2 id="在shell中-使用source执行一个脚本和不使用source执行一个脚本有什么区别" tabindex="-1"><a class="header-anchor" href="#在shell中-使用source执行一个脚本和不使用source执行一个脚本有什么区别" aria-hidden="true">#</a> 在shell中，使用source执行一个脚本和不使用source执行一个脚本有什么区别？</h2><p>在shell中，使用<code>source</code>命令执行一个脚本会导致该脚本在当前<code>shell</code>环境中执行。这意味着脚本中的变量、函数以及其他定义会影响当前的<code>shell</code>会话。</p><p>如果不使用<code>source</code>命令，而是简单地执行脚本，则会启动一个新的子<code>shell</code>来执行该脚本。在子<code>shell</code>中执行的所有更改（例如定义的变量、函数等）都不会影响父<code>shell</code>或当前的<code>shell</code>会话。这意味着在不使用<code>source</code>命令的情况下，脚本中的更改只会在子<code>shell</code>中生效，执行完脚本后不会影响到当前<code>shell</code>的环境。</p><p>简而言之，<code>source</code>命令用于在当前shell环境中执行脚本，而不使用<code>source</code>则会在一个新的子<code>shell</code>中执行脚本。</p>',14),r=[i];function s(a,h){return c(),l("div",null,r)}const t=e(d,[["render",s],["__file","linux.html.vue"]]);export{t as default};
