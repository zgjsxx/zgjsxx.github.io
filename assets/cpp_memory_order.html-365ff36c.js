const e=JSON.parse('{"key":"v-dc094c8c","path":"/posts/Program_language/cpp/cpp_memory_order.html","title":"c++原子变量中的内存序","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"c++原子变量中的内存序 gcc提供的： __ATOMIC_RELAXED：最低约束等级，表示没有线程间排序约束 __ATOMIC_CONSUME：官方表示因为C++11的memory_order_consume语义不足，当前使用更强的__ATOMIC_ACQUIRE来实现。 __ATOMIC_ACQUIRE：对获取操作创建线程间happens-before限制，防止代码在操作前的意外hoisting __ATOMIC_RELEASE：对释放操作创建线程间happens-before限制，防止代码在操作后的意外sinking","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_memory_order.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++原子变量中的内存序"}],["meta",{"property":"og:description","content":"c++原子变量中的内存序 gcc提供的： __ATOMIC_RELAXED：最低约束等级，表示没有线程间排序约束 __ATOMIC_CONSUME：官方表示因为C++11的memory_order_consume语义不足，当前使用更强的__ATOMIC_ACQUIRE来实现。 __ATOMIC_ACQUIRE：对获取操作创建线程间happens-before限制，防止代码在操作前的意外hoisting __ATOMIC_RELEASE：对释放操作创建线程间happens-before限制，防止代码在操作后的意外sinking"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-24T05:50:46.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-24T05:50:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++原子变量中的内存序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-24T05:50:46.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1684907446000,"updatedTime":1684907446000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.69,"words":508},"filePathRelative":"posts/Program_language/cpp/cpp_memory_order.md","localizedDate":"2023年5月24日","excerpt":"<h1> c++原子变量中的内存序</h1>\\n<p>gcc提供的：\\n__ATOMIC_RELAXED：最低约束等级，表示没有线程间排序约束</p>\\n<p>__ATOMIC_CONSUME：官方表示因为C++11的memory_order_consume语义不足，当前使用更强的__ATOMIC_ACQUIRE来实现。</p>\\n<p>__ATOMIC_ACQUIRE：对获取操作创建线程间happens-before限制，防止代码在操作前的意外hoisting</p>\\n<p>__ATOMIC_RELEASE：对释放操作创建线程间happens-before限制，防止代码在操作后的意外sinking</p>","autoDesc":true}');export{e as data};
