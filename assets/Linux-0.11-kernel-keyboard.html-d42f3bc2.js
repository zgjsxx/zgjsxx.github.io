import{_ as a,V as e,W as t,X as n,Y as o,$ as p,a0 as c,F as l}from"./framework-9a29aaa0.js";const i={},d=c(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95keyboards%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录keyboard.S详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3">方法详解</a><ul><li><a href="#keyboard_interrupt">keyboard_interrupt:</a></li><li><a href="#lshift">lshift</a></li><li><a href="#unlshift">unlshift</a></li><li><a href="#rshift">rshift</a></li><li><a href="#unrshift">unrshift</a></li><li><a href="#caps">caps</a></li><li><a href="#do_self">do_self</a></li><li><a href="#minus">minus</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h1 id="linux-0-11-kernel目录keyboard-s详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录keyboard-s详解" aria-hidden="true">#</a> Linux-0.11 kernel目录keyboard.S详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>该键盘驱动汇编程序主要包括键盘中断处理程序。</p><p>该程序首先根据键盘特殊键(例如Alt，Shift, Ctrl, Caps键)的状态设置程序后面要用到的状态标志变量mode的值。然后根据引起键盘中断的按键扫描码，调用已经编排成跳转表的相应扫描码处理子程序，把扫描码对应的字符放入读字符队列(<code>read_q</code>)中。接下来调用c处理函数<code>do_tty_interrupt</code>,该函数仅包含一个对行规程函数<code>copy_to_cooked</code>的调用。</p><p>这个行规程函数的主要作用就是把<code>read_q</code>读缓冲队列中的字符经过适当处理后放入规范模式队列(<code>secondary</code>)，并且在处理过程中，若相应终端设备设置了回显标志，还会把字符直接放入写队列<code>write_q</code>中，从而终端屏幕上会显示出刚刚键入的字符。</p><p>程序中使用mode表示特殊键的按下状态标志：</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>mode:	.byte 0		/* caps, alt, ctrl and shift mode */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>比特位</th><th>含义</th></tr></thead><tbody><tr><td>7</td><td>caps键被按下</td></tr><tr><td>6</td><td>caps键的状态</td></tr><tr><td>5</td><td>右alt键按下</td></tr><tr><td>4</td><td>左alt键按下</td></tr><tr><td>3</td><td>右ctrl按下</td></tr><tr><td>2</td><td>左ctrl按下</td></tr><tr><td>1</td><td>右shift键按下</td></tr><tr><td>0</td><td>左shift键按下</td></tr></tbody></table><p>使用<code>leds</code>来表示键盘指示灯的状态标志。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>leds:	.byte 2		/* num-lock, caps, scroll-lock mode (nom-lock on) */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>比特位</th><th>含义</th></tr></thead><tbody><tr><td>2</td><td>caps-lock</td></tr><tr><td>1</td><td>num-lock 初始置1</td></tr><tr><td>0</td><td>scroll-lock</td></tr></tbody></table><p>对于AT键盘的扫描码，当键被按下时，则键的扫描码被送出，当键松开时，将会发送两个字节，第一个是0xf0，第2个还是按下时的扫描码。为了向下的兼容性，设计人员将AT键盘发出的扫描码转成了老式的PC/XT标准键盘的扫描码。因此ketboard.S中仅对PC/XT的扫描码进行了处理。</p><p>PC/XT标准键盘的样子是这样的，和现在大家使用的键盘的格局不太一样。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/keyboard/IBM_Model_F_XT_kbd.jpg" alt="IBM_Model_F_XT_kbd" tabindex="0" loading="lazy"><figcaption>IBM_Model_F_XT_kbd</figcaption></figure><p>其扫描码如下所示:</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/keyboard/scan-code.png" alt="scan-code.png" tabindex="0" loading="lazy"><figcaption>scan-code.png</figcaption></figure><p>键盘上每一个键都有一个包含在字节低7位中相应的扫描码。在高位7表示是按下按键还是松开按键。位7=0表示刚将键按下的扫描码，位7=1表示键松开的扫描码。例如ESC按下时传输给系统的扫描码是1，当该键释放时将产生<code>1 + 0x80 = 129</code>扫描码。</p><p>对于PC/XT标准83键键盘而言，按下按键的扫描码用1个字节可以完全表示。 而对于像AT机使用的84/101/102扩展键盘而言，其存在一些扩展键。当一个扩展键被按下时，将产生一个中断并且键盘端口将输出一个扩展的扫描码0xe0,而在下一个中断中则会给出真是的扫描码。例如，对于PC/XT标准键盘， 左边的控制键ctrl的扫描码是29(<code>0x1d</code>), 而右边的扩展的控制键ctrl则具有一个扩展的扫描码序列<code>0xe0,0x1d</code>。这个规则同样适合于alt和箭头键。</p><p>PrtScn键和Pause/Break键的处理也比较特别。</p><p>按下PrtScn键将会向键盘中断程序发送2个扩展字符，42(0x2a)和55(0x37)。所以实际的序列将会是<code>0xe0,0x2a,0xe0,0x37</code>。在键重复产生时还会发送扩展字符0xaa， 即产生序列<code>0xe0,0x2a,0xe0,0x37,0xe0,0xaa</code>。当键松开时，又重新发送两个扩展的加上0x80的码(<code>0xe0,0xb7,0xe0,0xaa</code>)。当prtcan按下时，如果shift或者ctrl也按下了，则仅发送0xe0，0x37，并且松开时，仅发送0xe0,0xb7。如果按下了alt键，那么按下了alt键，那么Prtscn键就如同一个具有扫描码0x54的普通键。</p><p>对于Pause/Break键。如果你在按下该键的同时也按下了任意一个控制键ctrl，则将类似于扩展键70(0x46)。而在其他情况下，它将发送字符序列<code>0xe1，0x1d, 0x45, 0xe1, 0x9d, 0xc5</code>。将键盘一直按下并不会产生重复的扫描码，而松开键也并不会产生任何扫描码。</p><p>因此梳理起来两种特殊情况，扫描码<code>0xe0</code>表示后面还会跟随一个字符，扫描码<code>0xe1</code>表示后面还会跟随两个字符。</p><h2 id="方法详解" tabindex="-1"><a class="header-anchor" href="#方法详解" aria-hidden="true">#</a> 方法详解</h2><h3 id="keyboard-interrupt" tabindex="-1"><a class="header-anchor" href="#keyboard-interrupt" aria-hidden="true">#</a> keyboard_interrupt:</h3><p>当键盘控制器接收到用户的一个按键操作时，就会向中断控制器发出一个键盘中断请求信号IRQ1。当CPU响应该请求时就会执行键盘中断处理程序。</p><p>该程序首先会从<code>0x60</code>端口读取当前按键的扫描码，判断是否是<code>0xe0</code>或者<code>0xe1</code>。如果是，则立即对键盘控制器做出应答，并向中断控制器发送终端结束EOI信号，以允许键盘控制器能继续产生中断信号。</p><p>程序的开始和其他中断处理函数类似，是一段保存寄存器上下文的操作。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %edx
	push %ds
	push %es
	movl $0x10,%eax
	mov %ax,%ds
	mov %ax,%es
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来将键盘扫描码读取到<code>al</code>中，判断其是否是<code>0xe0</code>还是<code>0xe1</code>。</p><p>如果扫描码是<code> 0xe0</code> 或者 <code>0xe1</code>，那说明这个键的扫描码是有多个字节的，需要先保存下来等待接下来的扫描码组合成完整的扫描码。</p><p>若是<code>0xe0</code>，则跳转到<code>set_e0</code>处执行,若是<code>0xe1</code>，则跳转到<code>set_e1</code>处执行。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>	xor %al,%al		/* %eax is scan code */
	inb $0x60,%al
	cmpb $0xe0,%al
	je set_e0
	cmpb $0xe1,%al
	je set_e1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，如果是<code>0xe0</code>，则设置<code>e0 = 0</code>，如果是<code>0xe1</code>，则设置<code>e0 = 1</code>。</p><p><code>e0_e1</code>处的代码针对使用8255A的PC标准键盘电路进行硬件复位处理。端口0x61是8255A输出口B的地址，该输出端口的第7为用于禁止和允许对键盘数据的处理。处理扫描码的过程很简单，就是先禁止键盘，然后立即重新允许键盘。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>e0_e1:	inb $0x61,%al
	jmp 1f
1:	jmp 1f
1:	orb $0x80,%al
	jmp 1f
1:	jmp 1f
1:	outb %al,$0x61
	jmp 1f
1:	jmp 1f
1:	andb $0x7F,%al
	outb %al,$0x61
	movb $0x20,%al
	outb %al,$0x20
	pushl $0
	call do_tty_interrupt
	addl $4,%esp
	pop %es
	pop %ds
	popl %edx
	popl %ecx
	popl %ebx
	popl %eax
	iret
set_e0:	movb $1,e0
	jmp e0_e1
set_e1:	movb $2,e0
	jmp e0_e1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果收到的不是扫描码，则调用响应按键的处理程序。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>	je set_e1
	call key_table(,%eax,4)
	movb $0,e0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>key_table</code>是将扫描码作为index的函数指针数组。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>key_table<span class="token operator">:</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 00-03 s0 esc 1 2 */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 04-07 3 4 5 6 */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 08-0B 7 8 9 0 */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 0C-0F + &#39; bs tab */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 10-13 q w e r */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 14-17 t y u i */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 18-1B o p } ^ */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>ctrl<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 1C-1F enter ctrl a s */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 20-23 d f g h */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 24-27 j k l | */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>lshift<span class="token punctuation">,</span>do_self	<span class="token comment">/* 28-2B { para lshift , */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 2C-2F z x c v */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>do_self	<span class="token comment">/* 30-33 b n m , */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> do_self<span class="token punctuation">,</span>minus<span class="token punctuation">,</span>rshift<span class="token punctuation">,</span>do_self	<span class="token comment">/* 34-37 . - rshift * */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> alt<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>caps<span class="token punctuation">,</span>func		<span class="token comment">/* 38-3B alt sp caps f1 */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> func<span class="token punctuation">,</span>func<span class="token punctuation">,</span>func<span class="token punctuation">,</span>func		<span class="token comment">/* 3C-3F f2 f3 f4 f5 */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> func<span class="token punctuation">,</span>func<span class="token punctuation">,</span>func<span class="token punctuation">,</span>func		<span class="token comment">/* 40-43 f6 f7 f8 f9 */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> func<span class="token punctuation">,</span>num<span class="token punctuation">,</span>scroll<span class="token punctuation">,</span>cursor		<span class="token comment">/* 44-47 f10 num scr home */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> cursor<span class="token punctuation">,</span>cursor<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>cursor	<span class="token comment">/* 48-4B up pgup - left */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> cursor<span class="token punctuation">,</span>cursor<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>cursor	<span class="token comment">/* 4C-4F n5 right + end */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> cursor<span class="token punctuation">,</span>cursor<span class="token punctuation">,</span>cursor<span class="token punctuation">,</span>cursor	<span class="token comment">/* 50-53 dn pgdn ins del */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>do_self<span class="token punctuation">,</span>func		<span class="token comment">/* 54-57 sysreq ? &lt; f11 */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> func<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 58-5B f12 ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 5C-5F ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 60-63 ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 64-67 ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 68-6B ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 6C-6F ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 70-73 ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 74-77 ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 78-7B ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 7C-7F ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 80-83 ? br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 84-87 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 88-8B br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 8C-8F br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 90-93 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 94-97 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 98-9B br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>unctrl<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* 9C-9F br unctrl br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* A0-A3 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* A4-A7 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>unlshift<span class="token punctuation">,</span>none		<span class="token comment">/* A8-AB br br unlshift br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* AC-AF br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* B0-B3 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>unrshift<span class="token punctuation">,</span>none		<span class="token comment">/* B4-B7 br br unrshift br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> unalt<span class="token punctuation">,</span>none<span class="token punctuation">,</span>uncaps<span class="token punctuation">,</span>none		<span class="token comment">/* B8-BB unalt br uncaps br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* BC-BF br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* C0-C3 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* C4-C7 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* C8-CB br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* CC-CF br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* D0-D3 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* D4-D7 br br br br */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* D8-DB br ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* DC-DF ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* E0-E3 e0 e1 ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* E4-E7 ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* E8-EB ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* EC-EF ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* F0-F3 ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* F4-F7 ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* F8-FB ? ? ? ? */</span>
	<span class="token punctuation">.</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none<span class="token punctuation">,</span>none		<span class="token comment">/* FC-FF ? ? ? ? */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lshift" tabindex="-1"><a class="header-anchor" href="#lshift" aria-hidden="true">#</a> lshift</h3><p>左shift键被按下，设置mode中的位0。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>	orb $0x01,mode
	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unlshift" tabindex="-1"><a class="header-anchor" href="#unlshift" aria-hidden="true">#</a> unlshift</h3><p>左边shift键松开，复位mode中位0。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>unlshift:
	andb $0xfe,mode
	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rshift" tabindex="-1"><a class="header-anchor" href="#rshift" aria-hidden="true">#</a> rshift</h3><p>右边的shift键被按下，设置mode中位1。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>rshift:
	orb $0x02,mode
	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unrshift" tabindex="-1"><a class="header-anchor" href="#unrshift" aria-hidden="true">#</a> unrshift</h3><p>右边的shift键被按下，复位mode中位1。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>unrshift:
	andb $0xfd,mode
	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="caps" tabindex="-1"><a class="header-anchor" href="#caps" aria-hidden="true">#</a> caps</h3><p>这段代码对收到caps键扫描码进行处理。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>caps:	testb $0x80,mode // 测试mode中位7是否已经被按下
	jne 1f               // 如果是，则跳转至1f。
	xorb $4,leds         // 翻转leds标志中caps-lock比特位(位2)
	xorb $0x40,mode      // 翻转mode标志中caps键按下的比特位
	orb $0x80,mode       // 设置mode标志中caps键已按下标志位
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-self" tabindex="-1"><a class="header-anchor" href="#do-self" aria-hidden="true">#</a> do_self</h3><p><code>do_self</code>用于处理普通按键，即含义没有任何变化并且只有一个字符返回的键。</p><p>程序的开始，判断是否同时按下了alt键或者shift键，并取出对应的映射表。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>do_self:
	lea alt_map,%ebx        // 取alt键同时按下时的映射表基址alt_map
	testb $0x20,mode		// 右边的alt是否同时被按下了
	jne 1f                  // 如果是，则testb $0x20 mode结果不为0，向前跳转到标号1。
	lea shift_map,%ebx      // 取shift键同时按下时的映射表shift_map
	testb $0x03,mode        // 是否shift键同时按下了
	jne 1f                  // 如果是， 向前跳转到标号1。
	lea key_map,%ebx        // 否则使用普通映射表key_map
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来根据扫描码映射表对应的ASCII字符。若没有对应字符，则返回none。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>1:	movb (%ebx,%eax),%al    // 将扫描码作为索引值， 取出对应的ASCII码，放入al中。
	orb %al,%al             // 检测al中是否为0，如果为0， 则跳转到none。
	je none
	testb $0x4c,mode		// 如果ctrl键已经按下，或者caps键被锁定，
	je 2f
	cmpb $&#39;a,%al            // 并且字符在0x61-0x7D范围内，则将其转成大写字符，0x41-0x5D
	jb 2f
	cmpb $&#39;},%al
	ja 2f
	subb $32,%al          
2:	testb $0x0c,mode		// 如果ctrl被按下，并且字符在0x40- 0x5f之间，将其转换为控制字符
	je 3f
	cmpb $64,%al
	jb 3f
	cmpb $64+32,%al
	jae 3f
	subb $64,%al
3:	testb $0x10,mode		// 如果左alt键同时被按下，则将字符的位8置位。即此时生成值大于0x7f扩展字符集中的字符
	je 4f
	orb $0x80,%al
4:	andl $0xff,%eax         // 清楚eax的高位(ah和高word)
	xorl %ebx,%ebx          // 由于放入队列字符数&lt;=4，因此需把ebx清零。
	call put_queue          // 将字符放入缓冲队列中
none:	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="minus" tabindex="-1"><a class="header-anchor" href="#minus" aria-hidden="true">#</a> minus</h3><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>minus:	cmpb $1,e0     // e0 标志置位了码
	jne do_self        // 没有，调用do_self进行普通处理
	movl $&#39;/,%eax      // 否则用&#39;/&#39;替换减号&#39;-&#39;
	xorl %ebx,%ebx     // 由于放入队列字符数&lt;=4，因此需把ebx清零。
	jmp put_queue      // 将字符放入缓冲队列中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,64),u={href:"https://dosdays.co.uk/topics/xt_vs_at_keyboards.php",target:"_blank",rel:"noopener noreferrer"};function r(k,m){const s=l("ExternalLinkIcon");return e(),t("div",null,[d,n("p",null,[n("a",u,[o("https://dosdays.co.uk/topics/xt_vs_at_keyboards.php"),p(s)])])])}const b=a(i,[["render",r],["__file","Linux-0.11-kernel-keyboard.html.vue"]]);export{b as default};
