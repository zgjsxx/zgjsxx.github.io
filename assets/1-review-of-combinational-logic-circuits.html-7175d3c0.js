import{_ as a,V as e,W as i,a0 as r}from"./framework-9a29aaa0.js";const E={},h=r('<ul><li><a href="#%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84-%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%9B%9E%E9%A1%BE">计算机基本架构-组合逻辑电路回顾</a><ul><li><a href="#1%E9%80%BB%E8%BE%91%E9%97%A8">1.逻辑门</a><ul><li><a href="#%E4%B8%8E%E9%97%A8and">与门(AND)</a></li></ul></li><li><a href="#2%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0">2.布尔代数</a></li><li><a href="#3%E4%BD%BF%E7%94%A8%E7%9C%9F%E5%80%BC%E8%A1%A8%E8%AE%BE%E8%AE%A1%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF">3.使用真值表设计组合电路</a></li><li><a href="#4%E4%BD%BF%E7%94%A8%E5%8D%A1%E8%AF%BA%E5%9B%BE%E8%AE%BE%E8%AE%A1%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF">4.使用卡诺图设计组合电路</a></li><li><a href="#5%E5%9F%BA%E6%9C%AC%E9%80%BB%E8%BE%91%E5%9D%97">5.基本逻辑块</a></li><li><a href="#6%E5%B8%B8%E7%94%A8%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF">6.常用组合电路</a></li></ul></li></ul><h1 id="计算机基本架构-组合逻辑电路回顾" tabindex="-1"><a class="header-anchor" href="#计算机基本架构-组合逻辑电路回顾" aria-hidden="true">#</a> 计算机基本架构-组合逻辑电路回顾</h1><p>逻辑门是数字设计的基本元素，最终构成了数字系统的构建块。读者在深入了解计算机体系结构和设计细节之前，需要具备从基本逻辑门设计复杂逻辑块的扎实理解，并掌握设计过程中需要结合的设计工具和技术。</p><p>本章从定义逻辑门和真值表的概念开始，然后引出基本逻辑电路的实现。在本章后面，引入卡诺图的概念，以减少门电路数量，从而完成组合逻辑设计的基本要求。在最小化技术之后，介绍了各种基本逻辑模块，如多路复用器、编码器、解码器和一位加法器，以便它们可以用于构建更大规模的组合逻辑电路。本章的最后一部分专门介绍了巨型单元的设计。这些包括不同类型的加法器，如波纹进位加法器、前瞻进位加法器、选择进位加法器，以及根据设计目标（门数、电路速度和功耗）的组合类型。减法器、线性和桶形移位器、阵列和布斯乘法器构成本章的其余部分。</p><p>读者在学习本章及本书其余章节时，还需要投入时间学习硬件描述语言，如<code>Verilog</code>。这是至关重要的。结合<code>Verilog</code>的仿真平台和一套与<code>Verilog</code>配套的工具，如设计综合、静态时序分析和验证，是检查预期设计是否正确的有效方式。在专业设计环境中尝试各种设计理念，了解什么有效、什么无效，并使用不同的工具集，最重要的是从错误中学习，这是非常宝贵的经验。本书末尾附有一个附录，介绍<code>Verilog</code>的基本原理，供读者参考。</p><h2 id="_1-逻辑门" tabindex="-1"><a class="header-anchor" href="#_1-逻辑门" aria-hidden="true">#</a> 1.逻辑门</h2><h3 id="与门-and" tabindex="-1"><a class="header-anchor" href="#与门-and" aria-hidden="true">#</a> 与门(AND)</h3><h2 id="_2-布尔代数" tabindex="-1"><a class="header-anchor" href="#_2-布尔代数" aria-hidden="true">#</a> 2.布尔代数</h2><p>能够重新配置逻辑门以符合我们德设计目标是至关重要的。逻辑重配置可能像重新分组单个门的输入或对多个门的输入取反这样简单，以达到设计目标。</p><p>恒等律、交换律、结合律、分配律以及德摩根定律用于执行逻辑操作。下面这张表展示了这些定律。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/computer-base/Fundamentals-of-Computer-Architecture-and-Design/1/algebra.png" alt="恒等律、交换律、结合律、分配律以及德摩根定律 " tabindex="0" loading="lazy"><figcaption>恒等律、交换律、结合律、分配律以及德摩根定律 </figcaption></figure><h2 id="_3-使用真值表设计组合电路" tabindex="-1"><a class="header-anchor" href="#_3-使用真值表设计组合电路" aria-hidden="true">#</a> 3.使用真值表设计组合电路</h2><h2 id="_4-使用卡诺图设计组合电路" tabindex="-1"><a class="header-anchor" href="#_4-使用卡诺图设计组合电路" aria-hidden="true">#</a> 4.使用卡诺图设计组合电路</h2><h2 id="_5-基本逻辑块" tabindex="-1"><a class="header-anchor" href="#_5-基本逻辑块" aria-hidden="true">#</a> 5.基本逻辑块</h2><h2 id="_6-常用组合电路" tabindex="-1"><a class="header-anchor" href="#_6-常用组合电路" aria-hidden="true">#</a> 6.常用组合电路</h2>',15),d=[h];function n(t,c){return e(),i("div",null,d)}const o=a(E,[["render",n],["__file","1-review-of-combinational-logic-circuits.html.vue"]]);export{o as default};
