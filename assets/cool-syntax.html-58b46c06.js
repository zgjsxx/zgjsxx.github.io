import{_ as e,V as a,W as i,a0 as l}from"./framework-9a29aaa0.js";const d={},n=l(`<h1 id="cool语言语法" tabindex="-1"><a class="header-anchor" href="#cool语言语法" aria-hidden="true">#</a> cool语言语法</h1><p>COOL（Classroom Object-Oriented Language）是一种用于编译器课程的教学语言，其语法相对简单，但包含了面向对象编程语言的基本特性。以下是 COOL 语言的一些基本语法规则：</p><h2 id="类定义" tabindex="-1"><a class="header-anchor" href="#类定义" aria-hidden="true">#</a> 类定义</h2><p>COOL 中的类定义由以下部分组成：</p><div class="language-cool line-numbers-mode" data-ext="cool"><pre class="language-cool"><code>class ClassName {
    feature1;
    feature2;
    // 其他特性
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，ClassName 是类的名称，feature1、feature2 是类的特性（例如属性或方法）。每个特性以分号结尾。</p><h2 id="方法定义" tabindex="-1"><a class="header-anchor" href="#方法定义" aria-hidden="true">#</a> 方法定义</h2><p>COOL 中的方法定义形式如下：</p><div class="language-cool line-numbers-mode" data-ext="cool"><pre class="language-cool"><code>method MethodName(param1: Type1, param2: Type2): ReturnType {
    // 方法体
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，MethodName 是方法的名称，param1: Type1, param2: Type2 是方法的参数列表，ReturnType 是方法的返回类型。方法体可以是一系列语句，以分号结束。</p><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><p>COOL 中支持的表达式包括变量引用、常量、算术运算、逻辑运算、函数调用等。例如：</p><ul><li>变量引用：x</li><li>常量：5, &quot;Hello&quot;</li><li>算术运算：x + 5, y * 10</li><li>逻辑运算：x &lt; y, not x</li><li>方法调用：object.method(param1, param2)</li></ul><h2 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流" aria-hidden="true">#</a> 控制流</h2><p>COOL 中的控制流包括条件语句和循环语句：</p><p>条件语句</p><div class="language-cool line-numbers-mode" data-ext="cool"><pre class="language-cool"><code>if condition then
    // 条件成立时执行的代码
else
    // 条件不成立时执行的代码
fi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环语句</p><div class="language-cool line-numbers-mode" data-ext="cool"><pre class="language-cool"><code>while condition loop
    // 循环体
pool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>COOL 中的注释使用 -- 开始，直到行尾：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 这是一条注释
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p>COOL 中的类型包括基本类型和用户自定义类型。例如：</p><ul><li>整数类型：Int</li><li>字符串类型：String</li><li>布尔类型：Bool</li><li>类型引用：TypeName</li></ul><h2 id="赋值语句" tabindex="-1"><a class="header-anchor" href="#赋值语句" aria-hidden="true">#</a> 赋值语句</h2><p>在 COOL（Classroom Object-Oriented Language）中，赋值语句的语法形式类似于其他面向对象的编程语言，例如 Java 或 C++。在 COOL 中，赋值语句用来将一个值赋给一个变量。赋值语句的一般形式是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>variable <span class="token operator">&lt;</span>- expression
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>variable</code>是要赋值的变量名，而<code>expression</code>是一个表达式，它的值将被赋给变量。在 COOL 中，表达式可以是变量、常量、方法调用等。</p><p>例如，假设我们有一个变量 x，我们要将一个整数值 5 赋给它，赋值语句可以写成：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>x <span class="token operator">&lt;</span>- <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，变量 x 的值就被设置为 5。</p><p>另外，COOL 还支持在赋值语句中使用复杂的表达式。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>y <span class="token operator">&lt;</span>- x + <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将计算变量 x 的值加上 10，并将结果赋给变量 y。</p><p>需要注意的是，COOL 是一种教学语言，其语法和语义都被设计成相对简单易懂，以方便学生理解和实现编译器的各个组成部分。</p><h2 id="比较语句" tabindex="-1"><a class="header-anchor" href="#比较语句" aria-hidden="true">#</a> 比较语句</h2><p>在 COOL（Classroom Object-Oriented Language）中，<code>=</code>符号通常用于比较两个值是否相等，而不是用于赋值。这是 COOL 语言设计的一个特点，旨在减少因赋值操作符和相等比较操作符混淆而导致的错误。</p><p>在 COOL 中，赋值操作符使用箭头符号 &lt;-，而相等比较操作符使用等号 =。例如：</p><ul><li>赋值操作：<code>x &lt;- 5</code> 表示将值 5 赋给变量 x。</li><li>相等比较操作：<code>x = 5</code> 表示比较变量 x 的值是否等于 5。</li></ul><p>这种语法设计可以帮助减少代码中的错误，因为它强制使用不同的符号来表示赋值和相等比较这两种不同的操作。</p><h2 id="条件分支" tabindex="-1"><a class="header-anchor" href="#条件分支" aria-hidden="true">#</a> 条件分支</h2><p>在 Cool 语言中，条件语句的形式如下所示：</p><div class="language-cool line-numbers-mode" data-ext="cool"><pre class="language-cool"><code>if &lt;expr&gt; then &lt;expr&gt; else &lt;expr&gt; fi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>&lt;expr&gt;</code> 是一个布尔表达式，用于决定条件是否成立。</li><li>第一个 <code>&lt;expr&gt;</code> 是条件为真时执行的表达式。</li><li>第二个 <code>&lt;expr&gt;</code> 是条件为假时执行的表达式。</li></ul><p>在 Cool 中，条件语句以关键字 &quot;if&quot; 开头，以关键字 &quot;fi&quot; 结尾。条件语句是控制流结构之一，用于根据条件的成立与否来执行不同的代码分支。</p><h2 id="let表达式" tabindex="-1"><a class="header-anchor" href="#let表达式" aria-hidden="true">#</a> let表达式</h2><div class="language-cool line-numbers-mode" data-ext="cool"><pre class="language-cool"><code>    let &lt;id1&gt; : &lt;type1&gt; [ &lt;- &lt;expr1&gt; ], 
        ..., 
        &lt;idn&gt; : &lt;typen&gt; [ &lt;- &lt;exprn&gt; ] 
    in &lt;expr&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="case" tabindex="-1"><a class="header-anchor" href="#case" aria-hidden="true">#</a> case</h2><div class="language-cool line-numbers-mode" data-ext="cool"><pre class="language-cool"><code>case &lt;expr0&gt; of
&lt;id1&gt; : &lt;type1&gt; =&gt; &lt;expr1&gt;;
. . .
&lt;idn&gt; : &lt;typen&gt; =&gt; &lt;exprn&gt;;
esac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),s=[n];function r(c,o){return a(),i("div",null,s)}const u=e(d,[["render",r],["__file","cool-syntax.html.vue"]]);export{u as default};
