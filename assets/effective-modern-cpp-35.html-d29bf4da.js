const e=JSON.parse('{"key":"v-30067906","path":"/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-35.html","title":"Item35：优先考虑基于任务的编程而非基于线程的编程","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["effective modern c++读书笔记"],"description":"Item35：优先考虑基于任务的编程而非基于线程的编程 通常我们想执行一个异步任务的时候，通常会采用线程的方法。本节介绍了一种新的方法，即std::async。其和std::thread有很大的相似性。 std::async的一个调用的例子如下所示： auto fut = std::async(doAsyncWork); //\\"fut\\"表示\\"future\\"","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-35.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Item35：优先考虑基于任务的编程而非基于线程的编程"}],["meta",{"property":"og:description","content":"Item35：优先考虑基于任务的编程而非基于线程的编程 通常我们想执行一个异步任务的时候，通常会采用线程的方法。本节介绍了一种新的方法，即std::async。其和std::thread有很大的相似性。 std::async的一个调用的例子如下所示： auto fut = std::async(doAsyncWork); //\\"fut\\"表示\\"future\\""}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T07:03:43.000Z"}],["meta",{"property":"article:tag","content":"effective modern c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-11T07:03:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Item35：优先考虑基于任务的编程而非基于线程的编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T07:03:43.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788623000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":1.95,"words":585},"filePathRelative":"posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-35.md","localizedDate":"2023年5月11日","excerpt":"<h1> Item35：优先考虑基于任务的编程而非基于线程的编程</h1>\\n<p>通常我们想执行一个异步任务的时候，通常会采用线程的方法。本节介绍了一种新的方法，即<code>std::async</code>。其和<code>std::thread</code>有很大的相似性。</p>\\n<p><code>std::async</code>的一个调用的例子如下所示：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">auto</span> fut <span class=\\"token operator\\">=</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">async</span><span class=\\"token punctuation\\">(</span>doAsyncWork<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//\\"fut\\"表示\\"future\\"</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
