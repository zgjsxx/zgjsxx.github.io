const n=JSON.parse(`{"key":"v-784ea9f6","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-10.html","title":"effective c++ 10 令operator= 返回一个reference to * this","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 10 令operator= 返回一个reference to * this 本章节也是作者的一个建议，并无强制性，不这样做并不会造成编译上的问题。 作者建议我们在operator=的运算符返回指向自身的引用，这样可以使用连等形式的运算。 分析 看下面的一个例子，为了能让w3 = w2 = w1的表达式成立，我们需要在赋值运算符中返回*this。 #include &lt;iostream&gt; class Widget { public: Widget(int a):a_(a){} Widget():a_(0){} public: \\t// Standard copy assignment operators. \\tWidget&amp; operator=(const Widget&amp; rhs) \\t{ a_ = rhs.a_; \\t\\treturn *this; \\t} \\t// Convention applies to +=, -=, *=, etc. \\tWidget&amp; operator+=(const Widget&amp; rhs) \\t{ a_ += rhs.a_; \\t\\treturn *this; \\t} \\t// Applies even if operator's parameter is unconventional. \\tWidget&amp; operator=(int rhs) \\t{ a_ += rhs; \\t\\treturn *this; \\t} int getA() const { return a_; } private: int a_{}; }; int main() { Widget w1(1); Widget w2; Widget w3; w3 = w2 = w1; std::cout &lt;&lt; w3.getA() &lt;&lt; std::endl; std::cout &lt;&lt; w2.getA() &lt;&lt; std::endl; std::cout &lt;&lt; w1.getA() &lt;&lt; std::endl; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-10.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 10 令operator= 返回一个reference to * this"}],["meta",{"property":"og:description","content":"effective c++ 10 令operator= 返回一个reference to * this 本章节也是作者的一个建议，并无强制性，不这样做并不会造成编译上的问题。 作者建议我们在operator=的运算符返回指向自身的引用，这样可以使用连等形式的运算。 分析 看下面的一个例子，为了能让w3 = w2 = w1的表达式成立，我们需要在赋值运算符中返回*this。 #include &lt;iostream&gt; class Widget { public: Widget(int a):a_(a){} Widget():a_(0){} public: \\t// Standard copy assignment operators. \\tWidget&amp; operator=(const Widget&amp; rhs) \\t{ a_ = rhs.a_; \\t\\treturn *this; \\t} \\t// Convention applies to +=, -=, *=, etc. \\tWidget&amp; operator+=(const Widget&amp; rhs) \\t{ a_ += rhs.a_; \\t\\treturn *this; \\t} \\t// Applies even if operator's parameter is unconventional. \\tWidget&amp; operator=(int rhs) \\t{ a_ += rhs; \\t\\treturn *this; \\t} int getA() const { return a_; } private: int a_{}; }; int main() { Widget w1(1); Widget w2; Widget w3; w3 = w2 = w1; std::cout &lt;&lt; w3.getA() &lt;&lt; std::endl; std::cout &lt;&lt; w2.getA() &lt;&lt; std::endl; std::cout &lt;&lt; w1.getA() &lt;&lt; std::endl; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-12T02:18:42.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-12T02:18:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 10 令operator= 返回一个reference to * this\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-12T02:18:42.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683857922000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.9,"words":271},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-10.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 10 令operator= 返回一个reference to * this</h1>\\n<p>本章节也是作者的一个建议，并无强制性，不这样做并不会造成编译上的问题。</p>\\n<p>作者建议我们在operator=的运算符返回指向自身的引用，这样可以使用连等形式的运算。</p>\\n<h2> 分析</h2>\\n<p>看下面的一个例子，为了能让<code>w3 = w2 = w1</code>的表达式成立，我们需要在赋值运算符中返回<code>*this</code>。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Widget</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">Widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">a_</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">Widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">a_</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// Standard copy assignment operators.</span>\\n\\tWidget<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Widget<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n        a_ <span class=\\"token operator\\">=</span> rhs<span class=\\"token punctuation\\">.</span>a_<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">// Convention applies to +=, -=, *=, etc.</span>\\n\\tWidget<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">+=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Widget<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n        a_ <span class=\\"token operator\\">+=</span> rhs<span class=\\"token punctuation\\">.</span>a_<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">// Applies even if operator's parameter is unconventional.</span>\\n\\tWidget<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> rhs<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n        a_ <span class=\\"token operator\\">+=</span> rhs<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getA</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> a_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> \\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> a_<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Widget <span class=\\"token function\\">w1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Widget w2<span class=\\"token punctuation\\">;</span>\\n    Widget w3<span class=\\"token punctuation\\">;</span>\\n\\n    w3 <span class=\\"token operator\\">=</span> w2 <span class=\\"token operator\\">=</span> w1<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> w3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getA</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> w2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getA</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> w1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getA</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
