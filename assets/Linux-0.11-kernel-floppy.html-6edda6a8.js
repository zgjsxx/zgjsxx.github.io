import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},e=t(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95floppyc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录floppy.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#floppy_deselect">floppy_deselect</a></li><li><a href="#floppy_change">floppy_change</a></li><li><a href="#setup_dma">setup_DMA</a></li><li><a href="#output_byte">output_byte</a></li><li><a href="#result">result</a></li><li><a href="#bad_flp_intr">bad_flp_intr</a></li><li><a href="#rw_interrupt">rw_interrupt</a></li><li><a href="#setup_rw_floppy">setup_rw_floppy</a></li><li><a href="#seek_interrupt">seek_interrupt</a></li><li><a href="#transfer">transfer</a></li><li><a href="#recal_interrupt">recal_interrupt</a></li><li><a href="#unexpected_floppy_interrupt">unexpected_floppy_interrupt</a></li><li><a href="#recalibrate_floppy">recalibrate_floppy</a></li><li><a href="#reset_interrupt">reset_interrupt</a></li><li><a href="#reset_floppy">reset_floppy</a></li><li><a href="#floppy_on_interrupt">floppy_on_interrupt</a></li><li><a href="#do_fd_request">do_fd_request</a></li></ul></li><li><a href="#floppy_init">floppy_init</a></li></ul></li></ul><h1 id="linux-0-11-kernel目录floppy-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录floppy-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录floppy.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>程序的开始定义了软盘的结构。软盘参数有：</p><ul><li>size：大小，扇区数</li><li>sect：每磁道扇区数</li><li>head：磁头数</li><li>track： 磁道数/柱面数</li><li>stretch: 对磁道是否要特殊处理</li><li>gap：扇区间隙长度</li><li>rate 数据传输速率，0表示500kbps， 1表示300kbps， 2表示250kbps。</li><li>specl 参数(高4位步进速率，f=1ms， e=2ms， d=3ms。低4为磁头卸载时间， 1=16ms， 2=32ms)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">floppy_struct</span> <span class="token punctuation">{</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> sect<span class="token punctuation">,</span> head<span class="token punctuation">,</span> track<span class="token punctuation">,</span> stretch<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> gap<span class="token punctuation">,</span>rate<span class="token punctuation">,</span>spec1<span class="token punctuation">;</span>
<span class="token punctuation">}</span> floppy_type<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* no testing */</span>
	<span class="token punctuation">{</span>  <span class="token number">720</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xDF</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* 360kB PC diskettes */</span>
	<span class="token punctuation">{</span> <span class="token number">2400</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xDF</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* 1.2 MB AT-diskettes */</span>
	<span class="token punctuation">{</span>  <span class="token number">720</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xDF</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* 360kB in 720kB drive */</span>
	<span class="token punctuation">{</span> <span class="token number">1440</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xDF</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* 3.5&quot; 720kB diskette */</span>
	<span class="token punctuation">{</span>  <span class="token number">720</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xDF</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* 360kB in 1.2MB drive */</span>
	<span class="token punctuation">{</span> <span class="token number">1440</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xDF</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* 720kB in 1.2MB drive */</span>
	<span class="token punctuation">{</span> <span class="token number">2880</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xCF</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">/* 1.44MB diskette */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="floppy-deselect" tabindex="-1"><a class="header-anchor" href="#floppy-deselect" aria-hidden="true">#</a> floppy_deselect</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">floppy_deselect</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是取消指定软驱。</p><p>首先判断指定的软驱nr有没有被选中，如果没有被选中，则显示警告信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">!=</span> <span class="token punctuation">(</span>current_DOR <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;floppy_deselect: drive not selected\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里再回顾一下<code>current_DOR</code>的作用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 位7-4：分别控制驱动器D-A马达的启动。1-启动；0-关闭。</span>
<span class="token comment">// 位3：1 - 允许DMA和中断请求；0 - 禁止DMA和中断请求。</span>
<span class="token comment">// 位2：1 - 允许软盘控制器；0 - 复位软盘控制器。</span>
<span class="token comment">// 位1-0：00-11，用于选择控制的软驱A-D。</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> current_DOR <span class="token operator">=</span> <span class="token number">0x0C</span><span class="token punctuation">;</span>       <span class="token comment">// 允许DMA中断请求、启动FDC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来复位软驱已选定标志selected，并唤醒等待选择该软驱的任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	selected <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_on_floppy_select<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floppy-change" tabindex="-1"><a class="header-anchor" href="#floppy-change" aria-hidden="true">#</a> floppy_change</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">floppy_change</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法用于检测指定软驱中软盘的更换情况。</p><p>首先启动等待指定软驱nr。</p><p>在软盘启动之后，我们来查看一下当前选择的软驱是不是函数参数指定的软驱nr，并且已经选定了其他软驱，则让当前任务进入可中断等待状态。</p><p>如果当前没有选择其他软驱或者其他软驱被取消选定而使当前任务被唤醒时，当前软驱仍然不是指定的软驱nr，则跳转到函数开始处重新循环等待。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>repeat<span class="token operator">:</span>
	<span class="token function">floppy_on</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current_DOR <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">!=</span> nr <span class="token operator">&amp;&amp;</span> selected<span class="token punctuation">)</span>
		<span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_on_floppy_select<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current_DOR <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">!=</span> nr<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择软盘控制器已选定我们指定的软驱nr。于是取数字输入寄存器DIR的值。如果其最高位7置位，则表示软盘已经更换。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span>FD_DIR<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">floppy_off</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">floppy_off</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setup-dma" tabindex="-1"><a class="header-anchor" href="#setup-dma" aria-hidden="true">#</a> setup_DMA</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── setup_rw_floppy
  └── setup_DMA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="output-byte" tabindex="-1"><a class="header-anchor" href="#output-byte" aria-hidden="true">#</a> output_byte</h3><h3 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> result</h3><h3 id="bad-flp-intr" tabindex="-1"><a class="header-anchor" href="#bad-flp-intr" aria-hidden="true">#</a> bad_flp_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bad_flp_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>软盘读写出错处理函数。</p><p>如果出错次数大于最大出错次数(8次)，则不再对当前请求项作进一步的操作尝试。如果读写出错次数超过MAX_ERRORS/2，则需要对软驱作复位处理，于是设置复位标志。否则只需要校正一下磁头位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	CURRENT<span class="token operator">-&gt;</span>errors<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;</span> MAX_ERRORS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">floppy_deselect</span><span class="token punctuation">(</span>current_drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;</span> MAX_ERRORS<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
		reset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		recalibrate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rw-interrupt" tabindex="-1"><a class="header-anchor" href="#rw-interrupt" aria-hidden="true">#</a> rw_interrupt</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">7</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ST0 <span class="token operator">&amp;</span> <span class="token number">0xf8</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ST1 <span class="token operator">&amp;</span> <span class="token number">0xbf</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ST2 <span class="token operator">&amp;</span> <span class="token number">0x73</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ST1 <span class="token operator">&amp;</span> <span class="token number">0x02</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Drive %d is write protected\\n\\r&quot;</span><span class="token punctuation">,</span>current_drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">floppy_deselect</span><span class="token punctuation">(</span>current_drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span>
			<span class="token function">bad_flp_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">do_fd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> FD_READ <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0x100000</span><span class="token punctuation">)</span>
		<span class="token function">copy_buffer</span><span class="token punctuation">(</span>tmp_floppy_area<span class="token punctuation">,</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">floppy_deselect</span><span class="token punctuation">(</span>current_drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">do_fd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setup-rw-floppy" tabindex="-1"><a class="header-anchor" href="#setup-rw-floppy" aria-hidden="true">#</a> setup_rw_floppy</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">setup_rw_floppy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法用于设置DMA通道2并向软盘控制器输出命令和参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">setup_DMA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	do_floppy <span class="token operator">=</span> rw_interrupt<span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span>head<span class="token operator">&lt;&lt;</span><span class="token number">2</span> <span class="token operator">|</span> current_drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span>sector<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* sector size = 512 */</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span>floppy<span class="token operator">-&gt;</span>sect<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span>floppy<span class="token operator">-&gt;</span>gap<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output_byte</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* sector size (0xff when n!=0 ?) */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>
		<span class="token function">do_fd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="seek-interrupt" tabindex="-1"><a class="header-anchor" href="#seek-interrupt" aria-hidden="true">#</a> seek_interrupt</h3><h3 id="transfer" tabindex="-1"><a class="header-anchor" href="#transfer" aria-hidden="true">#</a> transfer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法是读写数据传输函数。</p><p>如果当前驱动器参数不是指定的驱动器的参数，发送设置驱动器参数命令。然后判断当前数据传输速率是否与指定驱动器一致，若不是就发送指定软驱的速率到数据传输速率控制器<code>FD_DCR</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>cur_spec1 <span class="token operator">!=</span> floppy<span class="token operator">-&gt;</span>spec1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cur_spec1 <span class="token operator">=</span> floppy<span class="token operator">-&gt;</span>spec1<span class="token punctuation">;</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span>FD_SPECIFY<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span>cur_spec1<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* hut etc */</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">/* Head load time =6ms, DMA */</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>cur_rate <span class="token operator">!=</span> floppy<span class="token operator">-&gt;</span>rate<span class="token punctuation">)</span>
		<span class="token function">outb_p</span><span class="token punctuation">(</span>cur_rate <span class="token operator">=</span> floppy<span class="token operator">-&gt;</span>rate<span class="token punctuation">,</span>FD_DCR<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若上面任何一个<code>output_byte</code>操作执行错误，则复位标志reset就会被置位。因此我们需要检测一下reset标志。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">do_fd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要寻道，则设置DMA并向软盘控制器发送相应的操作命令。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seek<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">setup_rw_floppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>否则就执行寻道处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	do_floppy <span class="token operator">=</span> seek_interrupt<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>seek_track<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//起始磁道号不为0</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span>FD_SEEK<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span>head<span class="token operator">&lt;&lt;</span><span class="token number">2</span> <span class="token operator">|</span> current_drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span>seek_track<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//起始磁道号为0</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span>FD_RECALIBRATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送重新校正命令</span>
		<span class="token function">output_byte</span><span class="token punctuation">(</span>head<span class="token operator">&lt;&lt;</span><span class="token number">2</span> <span class="token operator">|</span> current_drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>
		<span class="token function">do_fd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recal-interrupt" tabindex="-1"><a class="header-anchor" href="#recal-interrupt" aria-hidden="true">#</a> recal_interrupt</h3><h3 id="unexpected-floppy-interrupt" tabindex="-1"><a class="header-anchor" href="#unexpected-floppy-interrupt" aria-hidden="true">#</a> unexpected_floppy_interrupt</h3><h3 id="recalibrate-floppy" tabindex="-1"><a class="header-anchor" href="#recalibrate-floppy" aria-hidden="true">#</a> recalibrate_floppy</h3><h3 id="reset-interrupt" tabindex="-1"><a class="header-anchor" href="#reset-interrupt" aria-hidden="true">#</a> reset_interrupt</h3><h3 id="reset-floppy" tabindex="-1"><a class="header-anchor" href="#reset-floppy" aria-hidden="true">#</a> reset_floppy</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reset_floppy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法的作用是复位软盘控制器。</p><p>该函数首先设置参数和标志，把复位标志清0，然后把软驱变量cur_spec1和cur_rate设置为无效。因为复位后，这两个参数就需要重新设置。接着设置重新校正标志。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	reset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	cur_spec1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	cur_rate <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	recalibrate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来设置软盘中断处理函数为reset_interrupt，并设置FDC执行复位操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Reset-floppy called\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	do_floppy <span class="token operator">=</span> reset_interrupt<span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span>current_DOR <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x04</span><span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;nop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb</span><span class="token punctuation">(</span>current_DOR<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floppy-on-interrupt" tabindex="-1"><a class="header-anchor" href="#floppy-on-interrupt" aria-hidden="true">#</a> floppy_on_interrupt</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">floppy_on_interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>软驱启动定时中断调用函数。</p><p>如果当前驱动器号与数字输出寄存器中断DOR中的不同，则需要重新设置DOR。否则直接调用读写软盘传输函数<code>transfer</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	selected <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//设置已经选定当前驱动器标志</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>current_drive <span class="token operator">!=</span> <span class="token punctuation">(</span>current_DOR <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
		current_DOR <span class="token operator">&amp;=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span>
		current_DOR <span class="token operator">|=</span> current_drive<span class="token punctuation">;</span>
		<span class="token function">outb</span><span class="token punctuation">(</span>current_DOR<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>transfer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span>
		<span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-fd-request" tabindex="-1"><a class="header-anchor" href="#do-fd-request" aria-hidden="true">#</a> do_fd_request</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_fd_request</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>软盘读写请求项处理函数。</p><p>首先检查是否有复位标志或重新校正标志置位，若有，则仅执行相关标志的处理功能后就返回。如果复位标志已置位，则执行软盘复位操作并返回。如果重新校正标志已置位，则执行软盘重新校正操作并返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> block<span class="token punctuation">;</span>

	seek <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">reset_floppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>recalibrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">recalibrate_floppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里再回顾一下将绝对的块号block转换为磁盘的(柱面C， 磁头H ，扇区S)公式。</p><p>其中， <code>block</code>与<code>(C，H，S)</code>的换算公式如下所示:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>	<span class="token assign-left variable">block</span><span class="token operator">=</span>C*总磁头数*每磁道扇区数+H*每磁道扇区数+S
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此：</p><ul><li>扇区号 = block%每磁道扇区数</li><li>磁头号 = (block/每磁道扇区数)%磁头数</li><li>磁道号/柱面号 = (block/每磁道扇区数)/磁头数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	sector <span class="token operator">=</span> block <span class="token operator">%</span> floppy<span class="token operator">-&gt;</span>sect<span class="token punctuation">;</span>
	block <span class="token operator">/=</span> floppy<span class="token operator">-&gt;</span>sect<span class="token punctuation">;</span>
	head <span class="token operator">=</span> block <span class="token operator">%</span> floppy<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
	track <span class="token operator">=</span> block <span class="token operator">/</span> floppy<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
	seek_track <span class="token operator">=</span> track <span class="token operator">&lt;&lt;</span> floppy<span class="token operator">-&gt;</span>stretch<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看是否还需要首先执行寻道操作。如果寻道号与当前磁头所在磁道号不同，则需要进行寻道操作。于是设置需要寻道标志seek。最后我们设置执行的软盘命令command。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>seek_track <span class="token operator">!=</span> current_track<span class="token punctuation">)</span>
		seek <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	sector<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> READ<span class="token punctuation">)</span>
		command <span class="token operator">=</span> FD_READ<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> WRITE<span class="token punctuation">)</span>
		command <span class="token operator">=</span> FD_WRITE<span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;do_fd_request: unknown command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token function">ticks_to_floppy_on</span><span class="token punctuation">(</span>current_drive<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>floppy_on_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="floppy-init" tabindex="-1"><a class="header-anchor" href="#floppy-init" aria-hidden="true">#</a> floppy_init</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">floppy_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法的作用是对软盘进行初始化。</p><p>首先设置了软盘块设备请求项处理函数为<code>do_fd_request</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn <span class="token operator">=</span> DEVICE_REQUEST<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外设置软盘中断(0x26)处理函数为<code>floppy_interrupt</code>。</p><p><code>outb(inb_p(0x21)&amp;~0x40,0x21)</code>:</p><p><code>0x21</code>是主片命令字<code>OCW1</code>的端口地址， <code>~0x40 = ~01000000 = 10111111</code>， 即将主片IR6的位置复位， 主片的IR6用于接受软盘的中断，因此该语句的作用是<strong>允许软盘的中断</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>floppy_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 设置陷阱门描述符</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">~</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 复位软盘中断请求屏蔽位</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,90),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-kernel-floppy.html.vue"]]);export{r as default};
