import{d as defineAsyncComponent,r as ref,a as readonly,b as reactive,c as defineComponent,i as isString$2,e as isArray,f as dedupeHead,g as resolveLocalePath,o as onMounted,h as computed,j as h$4,k as isLinkHttp,l as removeLeadingSlash,m as inject,n as getCurrentInstance,p as isPlainObject,q as camelize,s as capitalize,t as isFunction$2,u as unref,w as watch,v as nextTick,x as getCurrentScope,y as onScopeDispose,z as shallowRef,A as watchEffect,T as Transition,B as useRouter,C as onBeforeUnmount,D as useRoute,E as isLinkMailto,F as resolveComponent,G as toRef,R as RouterLink,H as isLinkTel,I as isLinkExternal,J as ensureEndingSlash,K as provide,L as TransitionGroup,M as removeEndingSlash,N as useLink,O as createSSRApp,P as RouterView,Q as createRouter,S as START_LOCATION_NORMALIZED,U as createWebHistory}from"./framework-9a29aaa0.js";const scriptRel="modulepreload",assetsURL=function(b){return"/"+b},seen={},__vitePreload=function($,j,Z){if(!j||j.length===0)return $();const U=document.getElementsByTagName("link");return Promise.all(j.map(G=>{if(G=assetsURL(G),G in seen)return;seen[G]=!0;const W=G.endsWith(".css"),Y=W?'[rel="stylesheet"]':"";if(!!Z)for(let an=U.length-1;an>=0;an--){const tn=U[an];if(tn.href===G&&(!W||tn.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${G}"]${Y}`))return;const nn=document.createElement("link");if(nn.rel=W?"stylesheet":scriptRel,W||(nn.as="script",nn.crossOrigin=""),nn.href=G,document.head.appendChild(nn),W)return new Promise((an,tn)=>{nn.addEventListener("load",an),nn.addEventListener("error",()=>tn(new Error(`Unable to preload CSS for ${G}`)))})})).then(()=>$())},pagesData$1={"v-8daa1a0e":()=>__vitePreload(()=>import("./index.html-4783daa9.js"),[]).then(({data:b})=>b),"v-184f4da6":()=>__vitePreload(()=>import("./intro.html-cbb32efa.js"),[]).then(({data:b})=>b),"v-2e3eac9e":()=>__vitePreload(()=>import("./slides.html-d0fabeca.js"),[]).then(({data:b})=>b),"v-c9504c8e":()=>__vitePreload(()=>import("./cpp.html-e412f3c9.js"),[]).then(({data:b})=>b),"v-2efa750a":()=>__vitePreload(()=>import("./database.html-b8201f0e.js"),[]).then(({data:b})=>b),"v-7893963a":()=>__vitePreload(()=>import("./datastructure_algorithm.html-314d0bb0.js"),[]).then(({data:b})=>b),"v-221fd50a":()=>__vitePreload(()=>import("./designPattern.html-6449c3e1.js"),[]).then(({data:b})=>b),"v-fbb8d2e4":()=>__vitePreload(()=>import("./network.html-222ef549.js"),[]).then(({data:b})=>b),"v-8999d71c":()=>__vitePreload(()=>import("./os.html-edaace28.js"),[]).then(({data:b})=>b),"v-68d68bba":()=>__vitePreload(()=>import("./about.html-96fb724b.js"),[]).then(({data:b})=>b),"v-5f688ebf":()=>__vitePreload(()=>import("./index.html-6875ebd8.js"),[]).then(({data:b})=>b),"v-65d16685":()=>__vitePreload(()=>import("./bubble-sort.html-4f445da3.js"),[]).then(({data:b})=>b),"v-2dd55e63":()=>__vitePreload(()=>import("./bucket-sort.html-68531514.js"),[]).then(({data:b})=>b),"v-7dd6beec":()=>__vitePreload(()=>import("./counting-sort.html-6f65c493.js"),[]).then(({data:b})=>b),"v-b411f97a":()=>__vitePreload(()=>import("./heapsort-sort.html-6fb43426.js"),[]).then(({data:b})=>b),"v-6a1935c6":()=>__vitePreload(()=>import("./heapsort-stable.html-9b4a3e62.js"),[]).then(({data:b})=>b),"v-62bb3f1c":()=>__vitePreload(()=>import("./insert-sort.html-fa10e0ab.js"),[]).then(({data:b})=>b),"v-2f79de8a":()=>__vitePreload(()=>import("./merge-sort.html-69f63ff7.js"),[]).then(({data:b})=>b),"v-28526711":()=>__vitePreload(()=>import("./quicksort-stable.html-f44f5562.js"),[]).then(({data:b})=>b),"v-33473187":()=>__vitePreload(()=>import("./radix-sort.html-64c969ba.js"),[]).then(({data:b})=>b),"v-55b5ca16":()=>__vitePreload(()=>import("./select-sort.html-ffa7f28d.js"),[]).then(({data:b})=>b),"v-1501f717":()=>__vitePreload(()=>import("./shell-sort-stable.html-c807a049.js"),[]).then(({data:b})=>b),"v-49e1ca10":()=>__vitePreload(()=>import("./Interpreter.html-bce91cbc.js"),[]).then(({data:b})=>b),"v-52652ba3":()=>__vitePreload(()=>import("./adapter.html-b0d537f7.js"),[]).then(({data:b})=>b),"v-e683e5b2":()=>__vitePreload(()=>import("./command.html-d4ebd90e.js"),[]).then(({data:b})=>b),"v-db9b3b8e":()=>__vitePreload(()=>import("./index.html-1b726f57.js"),[]).then(({data:b})=>b),"v-04538fad":()=>__vitePreload(()=>import("./strategy.html-1f1a58bc.js"),[]).then(({data:b})=>b),"v-6370e458":()=>__vitePreload(()=>import("./electrical_experiment.html-9fd75d76.js"),[]).then(({data:b})=>b),"v-6c1fae1c":()=>__vitePreload(()=>import("./Witness_for_the_Prosecution.html-3ce37c5c.js"),[]).then(({data:b})=>b),"v-38cd66fc":()=>__vitePreload(()=>import("./docker-network.html-d8be719f.js"),[]).then(({data:b})=>b),"v-483131d1":()=>__vitePreload(()=>import("./modbus-tcp.html-626da287.js"),[]).then(({data:b})=>b),"v-16c8a73f":()=>__vitePreload(()=>import("./mqtt.html-acbb4d43.js"),[]).then(({data:b})=>b),"v-b6b78c94":()=>__vitePreload(()=>import("./index.html-823e0e43.js"),[]).then(({data:b})=>b),"v-cba98e84":()=>__vitePreload(()=>import("./sock5.html-14720404.js"),[]).then(({data:b})=>b),"v-e928ce0e":()=>__vitePreload(()=>import("./virtual-machine-network-mode.html-c05d5ea8.js"),[]).then(({data:b})=>b),"v-530ce597":()=>__vitePreload(()=>import("./awesome-class.html-12a9287e.js"),[]).then(({data:b})=>b),"v-08691c96":()=>__vitePreload(()=>import("./how-to-control-stop-flow-in-systemd.html-b88d1c5e.js"),[]).then(({data:b})=>b),"v-5ad41c0c":()=>__vitePreload(()=>import("./license.html-b77688c7.js"),[]).then(({data:b})=>b),"v-099747c2":()=>__vitePreload(()=>import("./index.html-85593275.js"),[]).then(({data:b})=>b),"v-476ace43":()=>__vitePreload(()=>import("./utf8-gbk.html-94952e27.js"),[]).then(({data:b})=>b),"v-78524d46":()=>__vitePreload(()=>import("./vim-usefull-key.html-8bbde5fe.js"),[]).then(({data:b})=>b),"v-bcb672aa":()=>__vitePreload(()=>import("./cpp11_condition_var_issue.html-9e2cb41a.js"),[]).then(({data:b})=>b),"v-48644d60":()=>__vitePreload(()=>import("./cpp11_thread.html-42627ead.js"),[]).then(({data:b})=>b),"v-87c26978":()=>__vitePreload(()=>import("./cpp11_threadpool.html-a1de6247.js"),[]).then(({data:b})=>b),"v-62851eba":()=>__vitePreload(()=>import("./cpp_align.html-f32007e7.js"),[]).then(({data:b})=>b),"v-03bd7406":()=>__vitePreload(()=>import("./cpp_cpp11_small_feature.html-759ca02b.js"),[]).then(({data:b})=>b),"v-8aba11ba":()=>__vitePreload(()=>import("./cpp_cpp14_small_feature.html-b3776231.js"),[]).then(({data:b})=>b),"v-ee2c91dc":()=>__vitePreload(()=>import("./cpp_cpp17_any.html-0590eed2.js"),[]).then(({data:b})=>b),"v-71887a40":()=>__vitePreload(()=>import("./cpp_cpp17_small_feature.html-137e134f.js"),[]).then(({data:b})=>b),"v-40696b34":()=>__vitePreload(()=>import("./cpp_decltype.html-46e50ce6.js"),[]).then(({data:b})=>b),"v-9f0e5862":()=>__vitePreload(()=>import("./cpp_detect_public_protect_private.html-ecf424ee.js"),[]).then(({data:b})=>b),"v-1b557605":()=>__vitePreload(()=>import("./cpp_externC.html-e84900d6.js"),[]).then(({data:b})=>b),"v-21ba21da":()=>__vitePreload(()=>import("./cpp_googlestyle_static_global_var.html-5567b4bf.js"),[]).then(({data:b})=>b),"v-7c1a7ba3":()=>__vitePreload(()=>import("./cpp_lambda.html-750a178d.js"),[]).then(({data:b})=>b),"v-dc094c8c":()=>__vitePreload(()=>import("./cpp_memory_order.html-a8103394.js"),[]).then(({data:b})=>b),"v-3e8a84f0":()=>__vitePreload(()=>import("./cpp_noexcept.html-74a4ed61.js"),[]).then(({data:b})=>b),"v-10d3936a":()=>__vitePreload(()=>import("./cpp_optional.html-ac60b8aa.js"),[]).then(({data:b})=>b),"v-4b1e4810":()=>__vitePreload(()=>import("./cpp_pimpl.html-d382b0a0.js"),[]).then(({data:b})=>b),"v-22b98e3f":()=>__vitePreload(()=>import("./cpp_realize_defer.html-0a3a8887.js"),[]).then(({data:b})=>b),"v-98d0ba14":()=>__vitePreload(()=>import("./cpp_shared_ptr.html-e6b71f2e.js"),[]).then(({data:b})=>b),"v-00d2774a":()=>__vitePreload(()=>import("./cpp_singleton_summarize.html-72c413f6.js"),[]).then(({data:b})=>b),"v-47df4fec":()=>__vitePreload(()=>import("./cpp_special_function.html-8aaa1ba5.js"),[]).then(({data:b})=>b),"v-cbd9a754":()=>__vitePreload(()=>import("./cpp_std_function.html-2bc89380.js"),[]).then(({data:b})=>b),"v-ca742b06":()=>__vitePreload(()=>import("./cpp_std_move.html-a6ec2898.js"),[]).then(({data:b})=>b),"v-52aaa766":()=>__vitePreload(()=>import("./cpp_stl_memory_release.html-2afd846b.js"),[]).then(({data:b})=>b),"v-617c5d0a":()=>__vitePreload(()=>import("./cpp_unique_ptr.html-9e3cc282.js"),[]).then(({data:b})=>b),"v-1d2b7397":()=>__vitePreload(()=>import("./cpp_virtual_destructor_with_override.html-4a073e17.js"),[]).then(({data:b})=>b),"v-a111f632":()=>__vitePreload(()=>import("./placement_operator_new.html-2f37f553.js"),[]).then(({data:b})=>b),"v-3ebbce5a":()=>__vitePreload(()=>import("./index.html-61e39d91.js"),[]).then(({data:b})=>b),"v-b7b35d00":()=>__vitePreload(()=>import("./index.html-63d73394.js"),[]).then(({data:b})=>b),"v-9a249a36":()=>__vitePreload(()=>import("./monitor.html-03105a25.js"),[]).then(({data:b})=>b),"v-b1aa3aa8":()=>__vitePreload(()=>import("./shiftRegister.html-78c4d0af.js"),[]).then(({data:b})=>b),"v-424a6368":()=>__vitePreload(()=>import("./Linux-EINTR-signal.html-74391b8f.js"),[]).then(({data:b})=>b),"v-c72fa816":()=>__vitePreload(()=>import("./Linux-cpu-cache-line.html-98b45a07.js"),[]).then(({data:b})=>b),"v-bf0b1b8a":()=>__vitePreload(()=>import("./Linux-cpu-cache-mesi.html-b6d65079.js"),[]).then(({data:b})=>b),"v-3096a586":()=>__vitePreload(()=>import("./Linux-glibc-sem.html-4ee0364c.js"),[]).then(({data:b})=>b),"v-f92c0794":()=>__vitePreload(()=>import("./Linux-max-filefd.html-0714b90a.js"),[]).then(({data:b})=>b),"v-341bce10":()=>__vitePreload(()=>import("./atomic-principle.html-82145895.js"),[]).then(({data:b})=>b),"v-f8c6564a":()=>__vitePreload(()=>import("./exit-unlock-mutex.html-6dce2a18.js"),[]).then(({data:b})=>b),"v-7911f9e9":()=>__vitePreload(()=>import("./how-to-get-environ.html-a51ace56.js"),[]).then(({data:b})=>b),"v-373f7f8a":()=>__vitePreload(()=>import("./linux-glibc-barrier.html-c5663150.js"),[]).then(({data:b})=>b),"v-489a808c":()=>__vitePreload(()=>import("./linux-glibc-condition-var.html-34009487.js"),[]).then(({data:b})=>b),"v-0cd8f0c2":()=>__vitePreload(()=>import("./linux-glibc-mutex.html-5419e2b9.js"),[]).then(({data:b})=>b),"v-114cb350":()=>__vitePreload(()=>import("./memory-order.html-73a9f63d.js"),[]).then(({data:b})=>b),"v-23ded876":()=>__vitePreload(()=>import("./mutex-with-fork.html-1a720465.js"),[]).then(({data:b})=>b),"v-50c2cb0a":()=>__vitePreload(()=>import("./mutex-with-fork2.html-697e0130.js"),[]).then(({data:b})=>b),"v-d6087b44":()=>__vitePreload(()=>import("./read-write-mutex-deadlock.html-0c5d911e.js"),[]).then(({data:b})=>b),"v-7f0a63b2":()=>__vitePreload(()=>import("./index.html-155afdf7.js"),[]).then(({data:b})=>b),"v-39aec4ca":()=>__vitePreload(()=>import("./duplicate_symbol_in_so.html-d8f49ed5.js"),[]).then(({data:b})=>b),"v-6461b009":()=>__vitePreload(()=>import("./dynamic_fpic.html-104d7471.js"),[]).then(({data:b})=>b),"v-4cc38e03":()=>__vitePreload(()=>import("./dynamic_lib_loading.html-d6be056a.js"),[]).then(({data:b})=>b),"v-ccbe3652":()=>__vitePreload(()=>import("./elf-relocation.html-31202a81.js"),[]).then(({data:b})=>b),"v-d190b8c0":()=>__vitePreload(()=>import("./got_plt.html-14228607.js"),[]).then(({data:b})=>b),"v-2a7d4f2b":()=>__vitePreload(()=>import("./ldconfig-soname.html-77c62307.js"),[]).then(({data:b})=>b),"v-5eb4dd6c":()=>__vitePreload(()=>import("./index.html-4d092bad.js"),[]).then(({data:b})=>b),"v-09ea77fb":()=>__vitePreload(()=>import("./relocation_rel_text.html-def2557e.js"),[]).then(({data:b})=>b),"v-60f2aa2e":()=>__vitePreload(()=>import("./stackful-stackless.html-90b23592.js"),[]).then(({data:b})=>b),"v-e3803fe8":()=>__vitePreload(()=>import("./mysql-bin-log-parse.html-92c30870.js"),[]).then(({data:b})=>b),"v-29447cd9":()=>__vitePreload(()=>import("./mysql-data-line.html-78642159.js"),[]).then(({data:b})=>b),"v-3dbda982":()=>__vitePreload(()=>import("./mysql_b_tree_index.html-54415b25.js"),[]).then(({data:b})=>b),"v-3c64f81c":()=>__vitePreload(()=>import("./mysql_ibd_file_format.html-f902a40e.js"),[]).then(({data:b})=>b),"v-0e77baf2":()=>__vitePreload(()=>import("./mysql_mvcc.html-b04a88ca.js"),[]).then(({data:b})=>b),"v-571ee3bc":()=>__vitePreload(()=>import("./mysql_source_code_build.html-9b9c45ff.js"),[]).then(({data:b})=>b),"v-82706408":()=>__vitePreload(()=>import("./sqlite-cmd.html-33103b17.js"),[]).then(({data:b})=>b),"v-e1e3fc24":()=>__vitePreload(()=>import("./ROM.html-3014cf5d.js"),[]).then(({data:b})=>b),"v-98409ff2":()=>__vitePreload(()=>import("./nonblock-block.html-b3819730.js"),[]).then(({data:b})=>b),"v-357b5e82":()=>__vitePreload(()=>import("./trigger.html-5a363e93.js"),[]).then(({data:b})=>b),"v-eba6b246":()=>__vitePreload(()=>import("./cmos.html-7e5995bd.js"),[]).then(({data:b})=>b),"v-0e7fe57d":()=>__vitePreload(()=>import("./triode.html-5c546bf6.js"),[]).then(({data:b})=>b),"v-767de411":()=>__vitePreload(()=>import("./self-judge.html-1930416e.js"),[]).then(({data:b})=>b),"v-59c305ab":()=>__vitePreload(()=>import("./algobase.html-a5d3efe3.js"),[]).then(({data:b})=>b),"v-518f27a8":()=>__vitePreload(()=>import("./construct.html-b5b5180c.js"),[]).then(({data:b})=>b),"v-47c314d7":()=>__vitePreload(()=>import("./exceptdef.html-4aeed5f7.js"),[]).then(({data:b})=>b),"v-22834b21":()=>__vitePreload(()=>import("./iterator.html-2db40bce.js"),[]).then(({data:b})=>b),"v-2607abf1":()=>__vitePreload(()=>import("./list.html-08e3412e.js"),[]).then(({data:b})=>b),"v-4bd99572":()=>__vitePreload(()=>import("./map.html-7e449196.js"),[]).then(({data:b})=>b),"v-2bd87fee":()=>__vitePreload(()=>import("./memory.html-098eb7f9.js"),[]).then(({data:b})=>b),"v-78fad7f6":()=>__vitePreload(()=>import("./rb_tree.html-0e4776c1.js"),[]).then(({data:b})=>b),"v-3ba2891b":()=>__vitePreload(()=>import("./stack.html-1409d923.js"),[]).then(({data:b})=>b),"v-93560ec4":()=>__vitePreload(()=>import("./uninitiallized.html-d6f951f6.js"),[]).then(({data:b})=>b),"v-ec75fe1c":()=>__vitePreload(()=>import("./unordered_map.html-376fcaba.js"),[]).then(({data:b})=>b),"v-971129e6":()=>__vitePreload(()=>import("./util.html-ad9fce76.js"),[]).then(({data:b})=>b),"v-0c109628":()=>__vitePreload(()=>import("./vector.html-80ef9842.js"),[]).then(({data:b})=>b),"v-331152ca":()=>__vitePreload(()=>import("./workflow-threadpool.html-79962151.js"),[]).then(({data:b})=>b),"v-3b52279e":()=>__vitePreload(()=>import("./cmake.html-a4ffcec6.js"),[]).then(({data:b})=>b),"v-025645a8":()=>__vitePreload(()=>import("./makefile-knowledge.html-a9096fb2.js"),[]).then(({data:b})=>b),"v-ffec0bb6":()=>__vitePreload(()=>import("./gdb_cmd.html-c103a358.js"),[]).then(({data:b})=>b),"v-813bc77e":()=>__vitePreload(()=>import("./gdb_multithread_multiprocess.html-5ad1bf64.js"),[]).then(({data:b})=>b),"v-1bae868b":()=>__vitePreload(()=>import("./git-merge-git-rebase.html-0cca1ace.js"),[]).then(({data:b})=>b),"v-5ad99f25":()=>__vitePreload(()=>import("./git-proxy.html-d11e4249.js"),[]).then(({data:b})=>b),"v-781d1713":()=>__vitePreload(()=>import("./git-submodule-usage.html-4a5f2dcd.js"),[]).then(({data:b})=>b),"v-e6061940":()=>__vitePreload(()=>import("./how-to-configure-git-with-multiple-user.html-56fbd7fb.js"),[]).then(({data:b})=>b),"v-8ed49434":()=>__vitePreload(()=>import("./linux-frequently-used-cmd.html-f046de8b.js"),[]).then(({data:b})=>b),"v-422e9a49":()=>__vitePreload(()=>import("./linux-iostat-cmd.html-a44a8468.js"),[]).then(({data:b})=>b),"v-051d8b78":()=>__vitePreload(()=>import("./linux-iptables.html-a10dd898.js"),[]).then(({data:b})=>b),"v-1ceae136":()=>__vitePreload(()=>import("./linux-lsof-cmd.html-f769c9cd.js"),[]).then(({data:b})=>b),"v-46314d5a":()=>__vitePreload(()=>import("./linux-mitm-proxy.html-035e743f.js"),[]).then(({data:b})=>b),"v-02e4930c":()=>__vitePreload(()=>import("./linux-perf-cmd.html-e4349da1.js"),[]).then(({data:b})=>b),"v-0e5bbbf6":()=>__vitePreload(()=>import("./linux-pidstat-cmd.html-d89f4ee4.js"),[]).then(({data:b})=>b),"v-7376518c":()=>__vitePreload(()=>import("./linux-route-cmd.html-6724eb69.js"),[]).then(({data:b})=>b),"v-6cf506de":()=>__vitePreload(()=>import("./linux-sar-cmd.html-fc103974.js"),[]).then(({data:b})=>b),"v-0d260640":()=>__vitePreload(()=>import("./linux-top-cmd.html-8c720b35.js"),[]).then(({data:b})=>b),"v-ef348746":()=>__vitePreload(()=>import("./linux-valgrind.html-2ad0f609.js"),[]).then(({data:b})=>b),"v-0e976c58":()=>__vitePreload(()=>import("./linux-vmstat-cmd.html-100dc334.js"),[]).then(({data:b})=>b),"v-7f055018":()=>__vitePreload(()=>import("./Group-Assignment1-greet-the-user.html-a5135b49.js"),[]).then(({data:b})=>b),"v-535a440e":()=>__vitePreload(()=>import("./Lecture1-computer-organization-assembly-language.html-ab18699f.js"),[]).then(({data:b})=>b),"v-a0280be2":()=>__vitePreload(()=>import("./Lecture14-structure-strcuture-packing.html-3ea2a3de.js"),[]).then(({data:b})=>b),"v-78553716":()=>__vitePreload(()=>import("./Lecture18-Memory-management.html-51dd8e38.js"),[]).then(({data:b})=>b),"v-ca5a5eb8":()=>__vitePreload(()=>import("./Lecture2-digital-circuits.html-d136a3ca.js"),[]).then(({data:b})=>b),"v-77b6e668":()=>__vitePreload(()=>import("./Lecture3-register-numeric-representations.html-e9200532.js"),[]).then(({data:b})=>b),"v-4ab9f3e6":()=>__vitePreload(()=>import("./Lecture4-twos-complement-arithmetic-instructions.html-db5cd226.js"),[]).then(({data:b})=>b),"v-0a0aeea4":()=>__vitePreload(()=>import("./Lecture5-branch.html-cfc175ca.js"),[]).then(({data:b})=>b),"v-5bc2b0c3":()=>__vitePreload(()=>import("./Lecture6-calling-c-functions.html-08e0cf21.js"),[]).then(({data:b})=>b),"v-250d4089":()=>__vitePreload(()=>import("./cpp_SFINAE.html-67a7da2b.js"),[]).then(({data:b})=>b),"v-38f5dc4c":()=>__vitePreload(()=>import("./cpp_T_T__t__.html-774502f1.js"),[]).then(({data:b})=>b),"v-63709ed8":()=>__vitePreload(()=>import("./cpp_enable_if.html-04e43f70.js"),[]).then(({data:b})=>b),"v-9c64b522":()=>__vitePreload(()=>import("./cpp_if_constexpr.html-da8568f3.js"),[]).then(({data:b})=>b),"v-b8ccb92a":()=>__vitePreload(()=>import("./cpp_cpp20_atomic_wait.html-b228bbdf.js"),[]).then(({data:b})=>b),"v-dd28cada":()=>__vitePreload(()=>import("./cpp_cpp20_concepts.html-a91c1b95.js"),[]).then(({data:b})=>b),"v-26a743bc":()=>__vitePreload(()=>import("./cpp_cpp20_coroutine.html-a04dbde9.js"),[]).then(({data:b})=>b),"v-1d55d840":()=>__vitePreload(()=>import("./cpp_cpp20_jthread.html-e140255e.js"),[]).then(({data:b})=>b),"v-3cd1f112":()=>__vitePreload(()=>import("./cpp_cpp20_module.html-85779bb0.js"),[]).then(({data:b})=>b),"v-50fccc12":()=>__vitePreload(()=>import("./cpp_cpp20_range.html-cd774cd8.js"),[]).then(({data:b})=>b),"v-f44eddd4":()=>__vitePreload(()=>import("./cpp_cpp20_small_feature.html-12f0ec5d.js"),[]).then(({data:b})=>b),"v-0d78042d":()=>__vitePreload(()=>import("./effective-STL-1.html-ece01491.js"),[]).then(({data:b})=>b),"v-b5b591da":()=>__vitePreload(()=>import("./effective-STL-12.html-2476a784.js"),[]).then(({data:b})=>b),"v-a4a51ba4":()=>__vitePreload(()=>import("./effective-STL-17.html-dfd8130e.js"),[]).then(({data:b})=>b),"v-0f2cdccc":()=>__vitePreload(()=>import("./effective-STL-2.html-0b2f0be1.js"),[]).then(({data:b})=>b),"v-10e1b56b":()=>__vitePreload(()=>import("./effective-STL-3.html-ef644bd8.js"),[]).then(({data:b})=>b),"v-12968e0a":()=>__vitePreload(()=>import("./effective-STL-4.html-bf665280.js"),[]).then(({data:b})=>b),"v-42231037":()=>__vitePreload(()=>import("./effective-STL-41.html-d09924fe.js"),[]).then(({data:b})=>b),"v-43d7e8d6":()=>__vitePreload(()=>import("./effective-STL-42.html-d8de200a.js"),[]).then(({data:b})=>b),"v-458cc175":()=>__vitePreload(()=>import("./effective-STL-43.html-59ed78b2.js"),[]).then(({data:b})=>b),"v-47419a14":()=>__vitePreload(()=>import("./effective-STL-44.html-9c52d647.js"),[]).then(({data:b})=>b),"v-4e14fc90":()=>__vitePreload(()=>import("./effective-STL-48.html-70fc6b62.js"),[]).then(({data:b})=>b),"v-144b66a9":()=>__vitePreload(()=>import("./effective-STL-5.html-26712ebf.js"),[]).then(({data:b})=>b),"v-16003f48":()=>__vitePreload(()=>import("./effective-STL-6.html-89c69bff.js"),[]).then(({data:b})=>b),"v-17b517e7":()=>__vitePreload(()=>import("./effective-STL-7.html-7299c538.js"),[]).then(({data:b})=>b),"v-1969f086":()=>__vitePreload(()=>import("./effective-STL-8.html-3b984697.js"),[]).then(({data:b})=>b),"v-068e46e5":()=>__vitePreload(()=>import("./index.html-c152e056.js"),[]).then(({data:b})=>b),"v-deb16f3a":()=>__vitePreload(()=>import("./effective-cpp-01.html-615bc98c.js"),[]).then(({data:b})=>b),"v-db47bdfc":()=>__vitePreload(()=>import("./effective-cpp-02.html-001d49f7.js"),[]).then(({data:b})=>b),"v-d7de0cbe":()=>__vitePreload(()=>import("./effective-cpp-03.html-72c8b203.js"),[]).then(({data:b})=>b),"v-d4745b80":()=>__vitePreload(()=>import("./effective-cpp-04.html-3f2b0ee8.js"),[]).then(({data:b})=>b),"v-d10aaa42":()=>__vitePreload(()=>import("./effective-cpp-05.html-c25e2f7e.js"),[]).then(({data:b})=>b),"v-cda0f904":()=>__vitePreload(()=>import("./effective-cpp-06.html-1c591c5e.js"),[]).then(({data:b})=>b),"v-ca3747c6":()=>__vitePreload(()=>import("./effective-cpp-07.html-652cbe1d.js"),[]).then(({data:b})=>b),"v-c6cd9688":()=>__vitePreload(()=>import("./effective-cpp-08.html-4c7ac4c9.js"),[]).then(({data:b})=>b),"v-c363e54a":()=>__vitePreload(()=>import("./effective-cpp-09.html-c4cfcd97.js"),[]).then(({data:b})=>b),"v-784ea9f6":()=>__vitePreload(()=>import("./effective-cpp-10.html-e3327d6f.js"),[]).then(({data:b})=>b),"v-74e4f8b8":()=>__vitePreload(()=>import("./effective-cpp-11.html-9ae8607f.js"),[]).then(({data:b})=>b),"v-717b477a":()=>__vitePreload(()=>import("./effective-cpp-12.html-ab3c4ab6.js"),[]).then(({data:b})=>b),"v-6e11963c":()=>__vitePreload(()=>import("./effective-cpp-13.html-532dc881.js"),[]).then(({data:b})=>b),"v-6aa7e4fe":()=>__vitePreload(()=>import("./effective-cpp-14.html-658ced0d.js"),[]).then(({data:b})=>b),"v-673e33c0":()=>__vitePreload(()=>import("./effective-cpp-15.html-fa5bbef4.js"),[]).then(({data:b})=>b),"v-63d48282":()=>__vitePreload(()=>import("./effective-cpp-16.html-e51ad292.js"),[]).then(({data:b})=>b),"v-606ad144":()=>__vitePreload(()=>import("./effective-cpp-17.html-51eb2fb4.js"),[]).then(({data:b})=>b),"v-5d012006":()=>__vitePreload(()=>import("./effective-cpp-18.html-427baf8a.js"),[]).then(({data:b})=>b),"v-59976ec8":()=>__vitePreload(()=>import("./effective-cpp-19.html-6fcd7a57.js"),[]).then(({data:b})=>b),"v-0e823374":()=>__vitePreload(()=>import("./effective-cpp-20.html-604ddcce.js"),[]).then(({data:b})=>b),"v-0b188236":()=>__vitePreload(()=>import("./effective-cpp-21.html-a2f473d6.js"),[]).then(({data:b})=>b),"v-07aed0f8":()=>__vitePreload(()=>import("./effective-cpp-22.html-dffbc33d.js"),[]).then(({data:b})=>b),"v-04451fba":()=>__vitePreload(()=>import("./effective-cpp-23.html-7edf8f3e.js"),[]).then(({data:b})=>b),"v-00db6e7c":()=>__vitePreload(()=>import("./effective-cpp-24.html-8b6d90c4.js"),[]).then(({data:b})=>b),"v-01472161":()=>__vitePreload(()=>import("./effective-cpp-25.html-4bd2ff7c.js"),[]).then(({data:b})=>b),"v-02fbfa00":()=>__vitePreload(()=>import("./effective-cpp-26.html-517739f6.js"),[]).then(({data:b})=>b),"v-04b0d29f":()=>__vitePreload(()=>import("./effective-cpp-27.html-52231edb.js"),[]).then(({data:b})=>b),"v-0665ab3e":()=>__vitePreload(()=>import("./effective-cpp-28.html-5f3debc2.js"),[]).then(({data:b})=>b),"v-081a83dd":()=>__vitePreload(()=>import("./effective-cpp-29.html-696d6419.js"),[]).then(({data:b})=>b),"v-2da52187":()=>__vitePreload(()=>import("./effective-cpp-30.html-a6ac5d7f.js"),[]).then(({data:b})=>b),"v-2f59fa26":()=>__vitePreload(()=>import("./effective-cpp-31.html-37be2178.js"),[]).then(({data:b})=>b),"v-310ed2c5":()=>__vitePreload(()=>import("./effective-cpp-32.html-b0b9433e.js"),[]).then(({data:b})=>b),"v-32c3ab64":()=>__vitePreload(()=>import("./effective-cpp-33.html-f831532d.js"),[]).then(({data:b})=>b),"v-34788403":()=>__vitePreload(()=>import("./effective-cpp-34.html-804ca7f9.js"),[]).then(({data:b})=>b),"v-362d5ca2":()=>__vitePreload(()=>import("./effective-cpp-35.html-1f9ff9ad.js"),[]).then(({data:b})=>b),"v-37e23541":()=>__vitePreload(()=>import("./effective-cpp-36.html-e8b5f758.js"),[]).then(({data:b})=>b),"v-39970de0":()=>__vitePreload(()=>import("./effective-cpp-37.html-a30a361d.js"),[]).then(({data:b})=>b),"v-3b4be67f":()=>__vitePreload(()=>import("./effective-cpp-38.html-7e66e4a0.js"),[]).then(({data:b})=>b),"v-3d00bf1e":()=>__vitePreload(()=>import("./effective-cpp-39.html-a32c52eb.js"),[]).then(({data:b})=>b),"v-628b5cc8":()=>__vitePreload(()=>import("./effective-cpp-40.html-2171f098.js"),[]).then(({data:b})=>b),"v-64403567":()=>__vitePreload(()=>import("./effective-cpp-41.html-aa04d165.js"),[]).then(({data:b})=>b),"v-65f50e06":()=>__vitePreload(()=>import("./effective-cpp-42.html-4271762b.js"),[]).then(({data:b})=>b),"v-67a9e6a5":()=>__vitePreload(()=>import("./effective-cpp-43.html-5e6e25f8.js"),[]).then(({data:b})=>b),"v-695ebf44":()=>__vitePreload(()=>import("./effective-cpp-44.html-600c8cf5.js"),[]).then(({data:b})=>b),"v-6b1397e3":()=>__vitePreload(()=>import("./effective-cpp-45.html-2fafa2f8.js"),[]).then(({data:b})=>b),"v-6cc87082":()=>__vitePreload(()=>import("./effective-cpp-46.html-66326066.js"),[]).then(({data:b})=>b),"v-6e7d4921":()=>__vitePreload(()=>import("./effective-cpp-47.html-2e59c599.js"),[]).then(({data:b})=>b),"v-703221c0":()=>__vitePreload(()=>import("./effective-cpp-48.html-7c5a4d60.js"),[]).then(({data:b})=>b),"v-71e6fa5f":()=>__vitePreload(()=>import("./effective-cpp-49.html-bbcc1343.js"),[]).then(({data:b})=>b),"v-d11ccfee":()=>__vitePreload(()=>import("./effective-cpp-50.html-a5182054.js"),[]).then(({data:b})=>b),"v-cdb31eb0":()=>__vitePreload(()=>import("./effective-cpp-51.html-6d54b737.js"),[]).then(({data:b})=>b),"v-ca496d72":()=>__vitePreload(()=>import("./effective-cpp-52.html-dafd4b19.js"),[]).then(({data:b})=>b),"v-c6dfbc34":()=>__vitePreload(()=>import("./effective-cpp-53.html-16976487.js"),[]).then(({data:b})=>b),"v-c3760af6":()=>__vitePreload(()=>import("./effective-cpp-54.html-f5372b40.js"),[]).then(({data:b})=>b),"v-c00c59b8":()=>__vitePreload(()=>import("./effective-cpp-55.html-478eb62c.js"),[]).then(({data:b})=>b),"v-eaff3672":()=>__vitePreload(()=>import("./effective-modern-cpp-01.html-4c755d32.js"),[]).then(({data:b})=>b),"v-e7958534":()=>__vitePreload(()=>import("./effective-modern-cpp-02.html-23ceef2c.js"),[]).then(({data:b})=>b),"v-e42bd3f6":()=>__vitePreload(()=>import("./effective-modern-cpp-03.html-3da2f1b6.js"),[]).then(({data:b})=>b),"v-e0c222b8":()=>__vitePreload(()=>import("./effective-modern-cpp-04.html-f683c531.js"),[]).then(({data:b})=>b),"v-dd58717a":()=>__vitePreload(()=>import("./effective-modern-cpp-05.html-becc7ec2.js"),[]).then(({data:b})=>b),"v-d6850efe":()=>__vitePreload(()=>import("./effective-modern-cpp-07.html-3111b3b8.js"),[]).then(({data:b})=>b),"v-7dc90eb2":()=>__vitePreload(()=>import("./effective-modern-cpp-12.html-045f7379.js"),[]).then(({data:b})=>b),"v-6cb8987c":()=>__vitePreload(()=>import("./effective-modern-cpp-17.html-004b98a1.js"),[]).then(({data:b})=>b),"v-694ee73e":()=>__vitePreload(()=>import("./effective-modern-cpp-18.html-abf3bb2d.js"),[]).then(({data:b})=>b),"v-13fc9830":()=>__vitePreload(()=>import("./effective-modern-cpp-22.html-02e7b6e7.js"),[]).then(({data:b})=>b),"v-1092e6f2":()=>__vitePreload(()=>import("./effective-modern-cpp-23.html-21f633f8.js"),[]).then(({data:b})=>b),"v-30067906":()=>__vitePreload(()=>import("./effective-modern-cpp-35.html-d29bf4da.js"),[]).then(({data:b})=>b),"v-31bb51a5":()=>__vitePreload(()=>import("./effective-modern-cpp-36.html-b3bd9c88.js"),[]).then(({data:b})=>b),"v-33702a44":()=>__vitePreload(()=>import("./effective-modern-cpp-37.html-1f3c9fc6.js"),[]).then(({data:b})=>b),"v-352502e3":()=>__vitePreload(()=>import("./effective-modern-cpp-38.html-cb3bdac3.js"),[]).then(({data:b})=>b),"v-36d9db82":()=>__vitePreload(()=>import("./effective-modern-cpp-39.html-7edd9ae6.js"),[]).then(({data:b})=>b),"v-5c64792c":()=>__vitePreload(()=>import("./effective-modern-cpp-40.html-2d6b0189.js"),[]).then(({data:b})=>b),"v-5fce2a6a":()=>__vitePreload(()=>import("./effective-modern-cpp-42.html-f6d1167f.js"),[]).then(({data:b})=>b),"v-14745f7c":()=>__vitePreload(()=>import("./1.html-691c2e06.js"),[]).then(({data:b})=>b),"v-110aae3e":()=>__vitePreload(()=>import("./2.html-c461c821.js"),[]).then(({data:b})=>b),"v-0fdec5fc":()=>__vitePreload(()=>import("./4-1multiplexer.html-6cedb008.js"),[]).then(({data:b})=>b),"v-b0244f86":()=>__vitePreload(()=>import("./HDLbits.html-ad8e2194.js"),[]).then(({data:b})=>b),"v-31ce37c6":()=>__vitePreload(()=>import("./Linux-0.11-assemble-language.html-4f62a80b.js"),[]).then(({data:b})=>b),"v-660e9229":()=>__vitePreload(()=>import("./Linux-0.11-boot-bootsect.html-9c250607.js"),[]).then(({data:b})=>b),"v-541c5c44":()=>__vitePreload(()=>import("./Linux-0.11-boot-head.html-a4833bc4.js"),[]).then(({data:b})=>b),"v-0dd9b637":()=>__vitePreload(()=>import("./Linux-0.11-boot-setup.html-394e70cf.js"),[]).then(({data:b})=>b),"v-2b83240a":()=>__vitePreload(()=>import("./Linux-0.11-fs-bitmap.html-0f6adb55.js"),[]).then(({data:b})=>b),"v-63326e56":()=>__vitePreload(()=>import("./Linux-0.11-fs-block_dev.html-2eb09d28.js"),[]).then(({data:b})=>b),"v-f9de78ce":()=>__vitePreload(()=>import("./Linux-0.11-fs-buffer.html-95555a85.js"),[]).then(({data:b})=>b),"v-60f8afad":()=>__vitePreload(()=>import("./Linux-0.11-fs-char_dev.html-a45ed9e2.js"),[]).then(({data:b})=>b),"v-493b69e8":()=>__vitePreload(()=>import("./Linux-0.11-fs-exec.html-66e7c5ce.js"),[]).then(({data:b})=>b),"v-39a875f0":()=>__vitePreload(()=>import("./Linux-0.11-fs-fcntl.html-1aeecdcb.js"),[]).then(({data:b})=>b),"v-324c5847":()=>__vitePreload(()=>import("./Linux-0.11-fs-file_dev.html-7bf4086a.js"),[]).then(({data:b})=>b),"v-f9fdca64":()=>__vitePreload(()=>import("./Linux-0.11-fs-inode.html-26d6c8f8.js"),[]).then(({data:b})=>b),"v-d9e5e078":()=>__vitePreload(()=>import("./Linux-0.11-fs-ioctl.html-da534e2f.js"),[]).then(({data:b})=>b),"v-2cedf15b":()=>__vitePreload(()=>import("./Linux-0.11-fs-namei.html-d2847109.js"),[]).then(({data:b})=>b),"v-30b8b062":()=>__vitePreload(()=>import("./Linux-0.11-fs-open.html-630184aa.js"),[]).then(({data:b})=>b),"v-496e6a2a":()=>__vitePreload(()=>import("./Linux-0.11-fs-pipe.html-9ae420de.js"),[]).then(({data:b})=>b),"v-088d2da3":()=>__vitePreload(()=>import("./Linux-0.11-fs-read_write.html-abb0599f.js"),[]).then(({data:b})=>b),"v-0ede3e05":()=>__vitePreload(()=>import("./Linux-0.11-fs-stat.html-8801f1f1.js"),[]).then(({data:b})=>b),"v-62961184":()=>__vitePreload(()=>import("./Linux-0.11-fs-super.html-0c71fa51.js"),[]).then(({data:b})=>b),"v-6b3e1233":()=>__vitePreload(()=>import("./Linux-0.11-fs-truncate.html-21bfb015.js"),[]).then(({data:b})=>b),"v-372d937a":()=>__vitePreload(()=>import("./Linux-0.11-init-main.html-bd878d42.js"),[]).then(({data:b})=>b),"v-51b12ace":()=>__vitePreload(()=>import("./Linux-0.11-kernel-asm.html-6047dbd5.js"),[]).then(({data:b})=>b),"v-44e1262a":()=>__vitePreload(()=>import("./Linux-0.11-kernel-exit.html-59bb76f0.js"),[]).then(({data:b})=>b),"v-d0b48072":()=>__vitePreload(()=>import("./Linux-0.11-kernel-fork.html-b6b1be18.js"),[]).then(({data:b})=>b),"v-ecf6a066":()=>__vitePreload(()=>import("./Linux-0.11-kernel-hd.html-d408017d.js"),[]).then(({data:b})=>b),"v-232bad63":()=>__vitePreload(()=>import("./Linux-0.11-kernel-ll-rw-blk.html-ace5745f.js"),[]).then(({data:b})=>b),"v-4a77de84":()=>__vitePreload(()=>import("./Linux-0.11-kernel-mktime.html-1ce5ecfa.js"),[]).then(({data:b})=>b),"v-1a1b9452":()=>__vitePreload(()=>import("./Linux-0.11-kernel-panic.html-35c7be72.js"),[]).then(({data:b})=>b),"v-6c720eab":()=>__vitePreload(()=>import("./Linux-0.11-kernel-printk.html-54ad099a.js"),[]).then(({data:b})=>b),"v-4354b7dc":()=>__vitePreload(()=>import("./Linux-0.11-kernel-sched.html-881b53ee.js"),[]).then(({data:b})=>b),"v-febe7cbe":()=>__vitePreload(()=>import("./Linux-0.11-kernel-signal.html-61e53b30.js"),[]).then(({data:b})=>b),"v-31ae6c88":()=>__vitePreload(()=>import("./Linux-0.11-kernel-sys.html-342c7dc3.js"),[]).then(({data:b})=>b),"v-7dca628a":()=>__vitePreload(()=>import("./Linux-0.11-kernel-system_call.html-aa8b5f6a.js"),[]).then(({data:b})=>b),"v-7045a43c":()=>__vitePreload(()=>import("./Linux-0.11-kernel-trap.html-b5054110.js"),[]).then(({data:b})=>b),"v-4da11e0f":()=>__vitePreload(()=>import("./Linux-0.11-kernel-tty-io.html-fed13c56.js"),[]).then(({data:b})=>b),"v-5f435f4c":()=>__vitePreload(()=>import("./Linux-0.11-kernel-tty_ioctl.html-c49509da.js"),[]).then(({data:b})=>b),"v-aa8f706a":()=>__vitePreload(()=>import("./Linux-0.11-mm-memory.html-4a10b317.js"),[]).then(({data:b})=>b),"v-78a6a3bd":()=>__vitePreload(()=>import("./Linux-0.11-mm-page.html-06ead498.js"),[]).then(({data:b})=>b),"v-9b30b154":()=>__vitePreload(()=>import("./index.html-ccd3559a.js"),[]).then(({data:b})=>b),"v-0cb8674d":()=>__vitePreload(()=>import("./intro.html-5d29c8a4.js"),[]).then(({data:b})=>b),"v-ccb0bf46":()=>__vitePreload(()=>import("./childrenday.html-f008b2ad.js"),[]).then(({data:b})=>b),"v-5c48a706":()=>__vitePreload(()=>import("./dragon_day_travel.html-c7d28bf6.js"),[]).then(({data:b})=>b),"v-3706649a":()=>__vitePreload(()=>import("./404.html-030e6896.js"),[]).then(({data:b})=>b),"v-416ddfa3":()=>__vitePreload(()=>import("./index.html-ba72fc80.js"),[]).then(({data:b})=>b),"v-e1e3da16":()=>__vitePreload(()=>import("./index.html-b291c678.js"),[]).then(({data:b})=>b),"v-082e9577":()=>__vitePreload(()=>import("./index.html-38f9ebad.js"),[]).then(({data:b})=>b),"v-2f6732ea":()=>__vitePreload(()=>import("./index.html-8ab1a76e.js"),[]).then(({data:b})=>b),"v-636ab15a":()=>__vitePreload(()=>import("./index.html-bf61c48f.js"),[]).then(({data:b})=>b),"v-79f5fc98":()=>__vitePreload(()=>import("./index.html-6586176c.js"),[]).then(({data:b})=>b),"v-0287a2e8":()=>__vitePreload(()=>import("./index.html-8a081043.js"),[]).then(({data:b})=>b),"v-16687167":()=>__vitePreload(()=>import("./index.html-bd4e9744.js"),[]).then(({data:b})=>b),"v-5b57f026":()=>__vitePreload(()=>import("./index.html-905b1fb2.js"),[]).then(({data:b})=>b),"v-d7d9ec10":()=>__vitePreload(()=>import("./index.html-66d2ca3c.js"),[]).then(({data:b})=>b),"v-3689fde0":()=>__vitePreload(()=>import("./index.html-24b1d7bf.js"),[]).then(({data:b})=>b),"v-6c608567":()=>__vitePreload(()=>import("./index.html-f4a2cb90.js"),[]).then(({data:b})=>b),"v-1eeb974c":()=>__vitePreload(()=>import("./index.html-25d5c7d9.js"),[]).then(({data:b})=>b),"v-244063f8":()=>__vitePreload(()=>import("./index.html-87694c9c.js"),[]).then(({data:b})=>b),"v-176e85c5":()=>__vitePreload(()=>import("./index.html-a5e64ff4.js"),[]).then(({data:b})=>b),"v-615aed9c":()=>__vitePreload(()=>import("./index.html-6a94d4f7.js"),[]).then(({data:b})=>b),"v-4d540f9e":()=>__vitePreload(()=>import("./index.html-0887aab9.js"),[]).then(({data:b})=>b),"v-1c8e46ae":()=>__vitePreload(()=>import("./index.html-9b0cbc6d.js"),[]).then(({data:b})=>b),"v-84d81b12":()=>__vitePreload(()=>import("./index.html-8890e20e.js"),[]).then(({data:b})=>b),"v-c4b7d21c":()=>__vitePreload(()=>import("./index.html-cafbb4a2.js"),[]).then(({data:b})=>b),"v-0923aede":()=>__vitePreload(()=>import("./index.html-06cd90db.js"),[]).then(({data:b})=>b),"v-dafeeb6c":()=>__vitePreload(()=>import("./index.html-ec43e682.js"),[]).then(({data:b})=>b),"v-1c197e5a":()=>__vitePreload(()=>import("./index.html-dccebc83.js"),[]).then(({data:b})=>b),"v-8e35b194":()=>__vitePreload(()=>import("./index.html-59d82a36.js"),[]).then(({data:b})=>b),"v-41034476":()=>__vitePreload(()=>import("./index.html-7073d29d.js"),[]).then(({data:b})=>b),"v-5979ec6c":()=>__vitePreload(()=>import("./index.html-015a9fbc.js"),[]).then(({data:b})=>b),"v-597a015f":()=>__vitePreload(()=>import("./index.html-5e5f01fa.js"),[]).then(({data:b})=>b),"v-0ba026a0":()=>__vitePreload(()=>import("./index.html-85b7c20d.js"),[]).then(({data:b})=>b),"v-6adb003a":()=>__vitePreload(()=>import("./index.html-7986adfd.js"),[]).then(({data:b})=>b),"v-48eeaa85":()=>__vitePreload(()=>import("./index.html-ded96a00.js"),[]).then(({data:b})=>b),"v-5e686550":()=>__vitePreload(()=>import("./index.html-a29446b8.js"),[]).then(({data:b})=>b),"v-3dc0a7c1":()=>__vitePreload(()=>import("./index.html-c42211fc.js"),[]).then(({data:b})=>b),"v-0686937d":()=>__vitePreload(()=>import("./index.html-9747d2c3.js"),[]).then(({data:b})=>b),"v-878f927e":()=>__vitePreload(()=>import("./index.html-4427b19a.js"),[]).then(({data:b})=>b),"v-430bdc7a":()=>__vitePreload(()=>import("./index.html-b98a374a.js"),[]).then(({data:b})=>b),"v-dd9a2efc":()=>__vitePreload(()=>import("./index.html-11dd6ca4.js"),[]).then(({data:b})=>b),"v-c8dcbd40":()=>__vitePreload(()=>import("./index.html-26c87303.js"),[]).then(({data:b})=>b),"v-eb2516be":()=>__vitePreload(()=>import("./index.html-f6919570.js"),[]).then(({data:b})=>b),"v-5a843c8d":()=>__vitePreload(()=>import("./index.html-11824b4f.js"),[]).then(({data:b})=>b),"v-5bc93818":()=>__vitePreload(()=>import("./index.html-7befd283.js"),[]).then(({data:b})=>b),"v-744d024e":()=>__vitePreload(()=>import("./index.html-3f6a7dbf.js"),[]).then(({data:b})=>b),"v-e52c881c":()=>__vitePreload(()=>import("./index.html-e51e4141.js"),[]).then(({data:b})=>b),"v-154dc4c4":()=>__vitePreload(()=>import("./index.html-9b235056.js"),[]).then(({data:b})=>b),"v-01560935":()=>__vitePreload(()=>import("./index.html-20a8c983.js"),[]).then(({data:b})=>b),"v-a9f4e09e":()=>__vitePreload(()=>import("./index.html-05b02efe.js"),[]).then(({data:b})=>b),"v-ac7a9398":()=>__vitePreload(()=>import("./index.html-3480dfaa.js"),[]).then(({data:b})=>b),"v-6af60407":()=>__vitePreload(()=>import("./index.html-ae652762.js"),[]).then(({data:b})=>b),"v-ec2c71de":()=>__vitePreload(()=>import("./index.html-7e3394fa.js"),[]).then(({data:b})=>b),"v-41590e77":()=>__vitePreload(()=>import("./index.html-d1f6d659.js"),[]).then(({data:b})=>b),"v-05b88e01":()=>__vitePreload(()=>import("./index.html-c00d4651.js"),[]).then(({data:b})=>b),"v-a074e84e":()=>__vitePreload(()=>import("./index.html-16c134d0.js"),[]).then(({data:b})=>b),"v-29350809":()=>__vitePreload(()=>import("./index.html-45ca81a9.js"),[]).then(({data:b})=>b),"v-9c48d85a":()=>__vitePreload(()=>import("./index.html-a9d6722d.js"),[]).then(({data:b})=>b),"v-b314c74c":()=>__vitePreload(()=>import("./index.html-e1660797.js"),[]).then(({data:b})=>b),"v-58c4e07f":()=>__vitePreload(()=>import("./index.html-99da4436.js"),[]).then(({data:b})=>b),"v-66cda8af":()=>__vitePreload(()=>import("./index.html-5102e3d4.js"),[]).then(({data:b})=>b),"v-63dde429":()=>__vitePreload(()=>import("./index.html-0743f8d8.js"),[]).then(({data:b})=>b),"v-4c56b96d":()=>__vitePreload(()=>import("./index.html-66a5627c.js"),[]).then(({data:b})=>b),"v-65eddd24":()=>__vitePreload(()=>import("./index.html-fd26ccc7.js"),[]).then(({data:b})=>b),"v-046d1644":()=>__vitePreload(()=>import("./index.html-e9488432.js"),[]).then(({data:b})=>b),"v-2ac2e0ae":()=>__vitePreload(()=>import("./index.html-196712bc.js"),[]).then(({data:b})=>b),"v-46f2f307":()=>__vitePreload(()=>import("./index.html-4432c73e.js"),[]).then(({data:b})=>b),"v-73142956":()=>__vitePreload(()=>import("./index.html-347a984e.js"),[]).then(({data:b})=>b),"v-61c98e96":()=>__vitePreload(()=>import("./index.html-51d8cffd.js"),[]).then(({data:b})=>b),"v-fc60e8d0":()=>__vitePreload(()=>import("./index.html-0eec70d1.js"),[]).then(({data:b})=>b),"v-1d6ab4a3":()=>__vitePreload(()=>import("./index.html-55f7ee62.js"),[]).then(({data:b})=>b),"v-7e88e46b":()=>__vitePreload(()=>import("./index.html-bfc923d7.js"),[]).then(({data:b})=>b),"v-9717cc36":()=>__vitePreload(()=>import("./index.html-52deee36.js"),[]).then(({data:b})=>b),"v-8f1cfe08":()=>__vitePreload(()=>import("./index.html-c0d73c2e.js"),[]).then(({data:b})=>b),"v-09679e8b":()=>__vitePreload(()=>import("./index.html-ee649845.js"),[]).then(({data:b})=>b),"v-6a871c0f":()=>__vitePreload(()=>import("./index.html-6d9d4812.js"),[]).then(({data:b})=>b),"v-5b0c0eb8":()=>__vitePreload(()=>import("./index.html-862e5805.js"),[]).then(({data:b})=>b),"v-19d09bed":()=>__vitePreload(()=>import("./index.html-d9f43e5a.js"),[]).then(({data:b})=>b),"v-65efc1c2":()=>__vitePreload(()=>import("./index.html-71caa433.js"),[]).then(({data:b})=>b),"v-65efd6b5":()=>__vitePreload(()=>import("./index.html-f62a4afa.js"),[]).then(({data:b})=>b),"v-ed9cde38":()=>__vitePreload(()=>import("./index.html-ee6dbc97.js"),[]).then(({data:b})=>b),"v-6cf551b2":()=>__vitePreload(()=>import("./index.html-0dc9bc7b.js"),[]).then(({data:b})=>b)},siteData$1=JSON.parse('{"base":"/","lang":"en-US","title":"","description":"","head":[],"locales":{"/":{"lang":"zh-CN","title":"Code Building","description":"Every day, code needs building"}}}'),pagesComponents={"v-8daa1a0e":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-19162fd1.js"),["assets/index.html-19162fd1.js","assets/framework-9a29aaa0.js"])),"v-184f4da6":defineAsyncComponent(()=>__vitePreload(()=>import("./intro.html-924eec8e.js"),["assets/intro.html-924eec8e.js","assets/framework-9a29aaa0.js"])),"v-2e3eac9e":defineAsyncComponent(()=>__vitePreload(()=>import("./slides.html-c6fc96a3.js"),["assets/slides.html-c6fc96a3.js","assets/framework-9a29aaa0.js"])),"v-c9504c8e":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp.html-4c67031e.js"),["assets/cpp.html-4c67031e.js","assets/framework-9a29aaa0.js"])),"v-2efa750a":defineAsyncComponent(()=>__vitePreload(()=>import("./database.html-96e0d072.js"),["assets/database.html-96e0d072.js","assets/framework-9a29aaa0.js"])),"v-7893963a":defineAsyncComponent(()=>__vitePreload(()=>import("./datastructure_algorithm.html-62bc5288.js"),["assets/datastructure_algorithm.html-62bc5288.js","assets/framework-9a29aaa0.js"])),"v-221fd50a":defineAsyncComponent(()=>__vitePreload(()=>import("./designPattern.html-3e47dd5b.js"),["assets/designPattern.html-3e47dd5b.js","assets/framework-9a29aaa0.js"])),"v-fbb8d2e4":defineAsyncComponent(()=>__vitePreload(()=>import("./network.html-5ee15fb0.js"),["assets/network.html-5ee15fb0.js","assets/framework-9a29aaa0.js"])),"v-8999d71c":defineAsyncComponent(()=>__vitePreload(()=>import("./os.html-51dcd199.js"),["assets/os.html-51dcd199.js","assets/framework-9a29aaa0.js"])),"v-68d68bba":defineAsyncComponent(()=>__vitePreload(()=>import("./about.html-740ce663.js"),["assets/about.html-740ce663.js","assets/framework-9a29aaa0.js"])),"v-5f688ebf":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-427a8bfd.js"),["assets/index.html-427a8bfd.js","assets/framework-9a29aaa0.js"])),"v-65d16685":defineAsyncComponent(()=>__vitePreload(()=>import("./bubble-sort.html-acc587bb.js"),["assets/bubble-sort.html-acc587bb.js","assets/framework-9a29aaa0.js"])),"v-2dd55e63":defineAsyncComponent(()=>__vitePreload(()=>import("./bucket-sort.html-26e41061.js"),["assets/bucket-sort.html-26e41061.js","assets/framework-9a29aaa0.js"])),"v-7dd6beec":defineAsyncComponent(()=>__vitePreload(()=>import("./counting-sort.html-6db2536b.js"),["assets/counting-sort.html-6db2536b.js","assets/framework-9a29aaa0.js"])),"v-b411f97a":defineAsyncComponent(()=>__vitePreload(()=>import("./heapsort-sort.html-528ebe53.js"),["assets/heapsort-sort.html-528ebe53.js","assets/framework-9a29aaa0.js"])),"v-6a1935c6":defineAsyncComponent(()=>__vitePreload(()=>import("./heapsort-stable.html-ba861107.js"),["assets/heapsort-stable.html-ba861107.js","assets/framework-9a29aaa0.js"])),"v-62bb3f1c":defineAsyncComponent(()=>__vitePreload(()=>import("./insert-sort.html-b6f3b384.js"),["assets/insert-sort.html-b6f3b384.js","assets/framework-9a29aaa0.js"])),"v-2f79de8a":defineAsyncComponent(()=>__vitePreload(()=>import("./merge-sort.html-a87120e0.js"),["assets/merge-sort.html-a87120e0.js","assets/framework-9a29aaa0.js"])),"v-28526711":defineAsyncComponent(()=>__vitePreload(()=>import("./quicksort-stable.html-77abb849.js"),["assets/quicksort-stable.html-77abb849.js","assets/framework-9a29aaa0.js"])),"v-33473187":defineAsyncComponent(()=>__vitePreload(()=>import("./radix-sort.html-18fb98e3.js"),["assets/radix-sort.html-18fb98e3.js","assets/framework-9a29aaa0.js"])),"v-55b5ca16":defineAsyncComponent(()=>__vitePreload(()=>import("./select-sort.html-23d82cd7.js"),["assets/select-sort.html-23d82cd7.js","assets/framework-9a29aaa0.js"])),"v-1501f717":defineAsyncComponent(()=>__vitePreload(()=>import("./shell-sort-stable.html-36d9112c.js"),["assets/shell-sort-stable.html-36d9112c.js","assets/framework-9a29aaa0.js"])),"v-49e1ca10":defineAsyncComponent(()=>__vitePreload(()=>import("./Interpreter.html-443b96a0.js"),["assets/Interpreter.html-443b96a0.js","assets/framework-9a29aaa0.js"])),"v-52652ba3":defineAsyncComponent(()=>__vitePreload(()=>import("./adapter.html-3d66200a.js"),["assets/adapter.html-3d66200a.js","assets/framework-9a29aaa0.js"])),"v-e683e5b2":defineAsyncComponent(()=>__vitePreload(()=>import("./command.html-92ec9a3a.js"),["assets/command.html-92ec9a3a.js","assets/framework-9a29aaa0.js"])),"v-db9b3b8e":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-f6c049a2.js"),["assets/index.html-f6c049a2.js","assets/framework-9a29aaa0.js"])),"v-04538fad":defineAsyncComponent(()=>__vitePreload(()=>import("./strategy.html-01dd0bb8.js"),["assets/strategy.html-01dd0bb8.js","assets/framework-9a29aaa0.js"])),"v-6370e458":defineAsyncComponent(()=>__vitePreload(()=>import("./electrical_experiment.html-db354034.js"),["assets/electrical_experiment.html-db354034.js","assets/framework-9a29aaa0.js"])),"v-6c1fae1c":defineAsyncComponent(()=>__vitePreload(()=>import("./Witness_for_the_Prosecution.html-75125e4a.js"),["assets/Witness_for_the_Prosecution.html-75125e4a.js","assets/framework-9a29aaa0.js"])),"v-38cd66fc":defineAsyncComponent(()=>__vitePreload(()=>import("./docker-network.html-f1267cbe.js"),["assets/docker-network.html-f1267cbe.js","assets/framework-9a29aaa0.js"])),"v-483131d1":defineAsyncComponent(()=>__vitePreload(()=>import("./modbus-tcp.html-f90f29f3.js"),["assets/modbus-tcp.html-f90f29f3.js","assets/framework-9a29aaa0.js"])),"v-16c8a73f":defineAsyncComponent(()=>__vitePreload(()=>import("./mqtt.html-b7897d83.js"),["assets/mqtt.html-b7897d83.js","assets/framework-9a29aaa0.js"])),"v-b6b78c94":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-6b504cad.js"),["assets/index.html-6b504cad.js","assets/framework-9a29aaa0.js"])),"v-cba98e84":defineAsyncComponent(()=>__vitePreload(()=>import("./sock5.html-54abd14c.js"),["assets/sock5.html-54abd14c.js","assets/framework-9a29aaa0.js"])),"v-e928ce0e":defineAsyncComponent(()=>__vitePreload(()=>import("./virtual-machine-network-mode.html-1697d349.js"),["assets/virtual-machine-network-mode.html-1697d349.js","assets/framework-9a29aaa0.js"])),"v-530ce597":defineAsyncComponent(()=>__vitePreload(()=>import("./awesome-class.html-5ef5cca8.js"),["assets/awesome-class.html-5ef5cca8.js","assets/framework-9a29aaa0.js"])),"v-08691c96":defineAsyncComponent(()=>__vitePreload(()=>import("./how-to-control-stop-flow-in-systemd.html-2b40337c.js"),["assets/how-to-control-stop-flow-in-systemd.html-2b40337c.js","assets/framework-9a29aaa0.js"])),"v-5ad41c0c":defineAsyncComponent(()=>__vitePreload(()=>import("./license.html-ac5da2f1.js"),["assets/license.html-ac5da2f1.js","assets/framework-9a29aaa0.js"])),"v-099747c2":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-3ecca4be.js"),["assets/index.html-3ecca4be.js","assets/framework-9a29aaa0.js"])),"v-476ace43":defineAsyncComponent(()=>__vitePreload(()=>import("./utf8-gbk.html-a63e9d95.js"),["assets/utf8-gbk.html-a63e9d95.js","assets/framework-9a29aaa0.js"])),"v-78524d46":defineAsyncComponent(()=>__vitePreload(()=>import("./vim-usefull-key.html-7d1331e8.js"),["assets/vim-usefull-key.html-7d1331e8.js","assets/framework-9a29aaa0.js"])),"v-bcb672aa":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp11_condition_var_issue.html-550a84bf.js"),["assets/cpp11_condition_var_issue.html-550a84bf.js","assets/framework-9a29aaa0.js"])),"v-48644d60":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp11_thread.html-a8e139aa.js"),["assets/cpp11_thread.html-a8e139aa.js","assets/framework-9a29aaa0.js"])),"v-87c26978":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp11_threadpool.html-5557487e.js"),["assets/cpp11_threadpool.html-5557487e.js","assets/framework-9a29aaa0.js"])),"v-62851eba":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_align.html-54dcab58.js"),["assets/cpp_align.html-54dcab58.js","assets/framework-9a29aaa0.js"])),"v-03bd7406":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp11_small_feature.html-ec165951.js"),["assets/cpp_cpp11_small_feature.html-ec165951.js","assets/framework-9a29aaa0.js"])),"v-8aba11ba":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp14_small_feature.html-cd787e82.js"),["assets/cpp_cpp14_small_feature.html-cd787e82.js","assets/framework-9a29aaa0.js"])),"v-ee2c91dc":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp17_any.html-e7e1db2d.js"),["assets/cpp_cpp17_any.html-e7e1db2d.js","assets/framework-9a29aaa0.js"])),"v-71887a40":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp17_small_feature.html-e85d0824.js"),["assets/cpp_cpp17_small_feature.html-e85d0824.js","assets/framework-9a29aaa0.js"])),"v-40696b34":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_decltype.html-e99abe64.js"),["assets/cpp_decltype.html-e99abe64.js","assets/framework-9a29aaa0.js"])),"v-9f0e5862":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_detect_public_protect_private.html-c92bbcd9.js"),["assets/cpp_detect_public_protect_private.html-c92bbcd9.js","assets/framework-9a29aaa0.js"])),"v-1b557605":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_externC.html-3bc48a72.js"),["assets/cpp_externC.html-3bc48a72.js","assets/framework-9a29aaa0.js"])),"v-21ba21da":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_googlestyle_static_global_var.html-06656dc4.js"),["assets/cpp_googlestyle_static_global_var.html-06656dc4.js","assets/framework-9a29aaa0.js"])),"v-7c1a7ba3":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_lambda.html-40de0bcf.js"),["assets/cpp_lambda.html-40de0bcf.js","assets/framework-9a29aaa0.js"])),"v-dc094c8c":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_memory_order.html-5d5fc0b0.js"),["assets/cpp_memory_order.html-5d5fc0b0.js","assets/framework-9a29aaa0.js"])),"v-3e8a84f0":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_noexcept.html-15c47ba7.js"),["assets/cpp_noexcept.html-15c47ba7.js","assets/framework-9a29aaa0.js"])),"v-10d3936a":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_optional.html-a0d8907d.js"),["assets/cpp_optional.html-a0d8907d.js","assets/framework-9a29aaa0.js"])),"v-4b1e4810":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_pimpl.html-91b04d90.js"),["assets/cpp_pimpl.html-91b04d90.js","assets/framework-9a29aaa0.js"])),"v-22b98e3f":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_realize_defer.html-1e5cc16e.js"),["assets/cpp_realize_defer.html-1e5cc16e.js","assets/framework-9a29aaa0.js"])),"v-98d0ba14":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_shared_ptr.html-dbcb6f2d.js"),["assets/cpp_shared_ptr.html-dbcb6f2d.js","assets/framework-9a29aaa0.js"])),"v-00d2774a":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_singleton_summarize.html-f5ecef9f.js"),["assets/cpp_singleton_summarize.html-f5ecef9f.js","assets/framework-9a29aaa0.js"])),"v-47df4fec":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_special_function.html-babaf41f.js"),["assets/cpp_special_function.html-babaf41f.js","assets/framework-9a29aaa0.js"])),"v-cbd9a754":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_std_function.html-f61e836c.js"),["assets/cpp_std_function.html-f61e836c.js","assets/framework-9a29aaa0.js"])),"v-ca742b06":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_std_move.html-ba54907e.js"),["assets/cpp_std_move.html-ba54907e.js","assets/framework-9a29aaa0.js"])),"v-52aaa766":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_stl_memory_release.html-e4a239ab.js"),["assets/cpp_stl_memory_release.html-e4a239ab.js","assets/framework-9a29aaa0.js"])),"v-617c5d0a":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_unique_ptr.html-e07163e6.js"),["assets/cpp_unique_ptr.html-e07163e6.js","assets/framework-9a29aaa0.js"])),"v-1d2b7397":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_virtual_destructor_with_override.html-c2926f57.js"),["assets/cpp_virtual_destructor_with_override.html-c2926f57.js","assets/framework-9a29aaa0.js"])),"v-a111f632":defineAsyncComponent(()=>__vitePreload(()=>import("./placement_operator_new.html-cb5657e1.js"),["assets/placement_operator_new.html-cb5657e1.js","assets/framework-9a29aaa0.js"])),"v-3ebbce5a":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-f2073d1c.js"),["assets/index.html-f2073d1c.js","assets/framework-9a29aaa0.js"])),"v-b7b35d00":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-2d14cd2c.js"),["assets/index.html-2d14cd2c.js","assets/framework-9a29aaa0.js"])),"v-9a249a36":defineAsyncComponent(()=>__vitePreload(()=>import("./monitor.html-a9299347.js"),["assets/monitor.html-a9299347.js","assets/framework-9a29aaa0.js"])),"v-b1aa3aa8":defineAsyncComponent(()=>__vitePreload(()=>import("./shiftRegister.html-69490ae4.js"),["assets/shiftRegister.html-69490ae4.js","assets/framework-9a29aaa0.js"])),"v-424a6368":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-EINTR-signal.html-4b5ae58b.js"),["assets/Linux-EINTR-signal.html-4b5ae58b.js","assets/framework-9a29aaa0.js"])),"v-c72fa816":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-cpu-cache-line.html-fc47c1e5.js"),["assets/Linux-cpu-cache-line.html-fc47c1e5.js","assets/framework-9a29aaa0.js"])),"v-bf0b1b8a":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-cpu-cache-mesi.html-0bc077da.js"),["assets/Linux-cpu-cache-mesi.html-0bc077da.js","assets/framework-9a29aaa0.js"])),"v-3096a586":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-glibc-sem.html-72128fcc.js"),["assets/Linux-glibc-sem.html-72128fcc.js","assets/framework-9a29aaa0.js"])),"v-f92c0794":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-max-filefd.html-be22a889.js"),["assets/Linux-max-filefd.html-be22a889.js","assets/framework-9a29aaa0.js"])),"v-341bce10":defineAsyncComponent(()=>__vitePreload(()=>import("./atomic-principle.html-22110e58.js"),["assets/atomic-principle.html-22110e58.js","assets/framework-9a29aaa0.js"])),"v-f8c6564a":defineAsyncComponent(()=>__vitePreload(()=>import("./exit-unlock-mutex.html-bf431209.js"),["assets/exit-unlock-mutex.html-bf431209.js","assets/framework-9a29aaa0.js"])),"v-7911f9e9":defineAsyncComponent(()=>__vitePreload(()=>import("./how-to-get-environ.html-f651af4c.js"),["assets/how-to-get-environ.html-f651af4c.js","assets/framework-9a29aaa0.js"])),"v-373f7f8a":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-glibc-barrier.html-9ec4962b.js"),["assets/linux-glibc-barrier.html-9ec4962b.js","assets/framework-9a29aaa0.js"])),"v-489a808c":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-glibc-condition-var.html-17f3bc6b.js"),["assets/linux-glibc-condition-var.html-17f3bc6b.js","assets/framework-9a29aaa0.js"])),"v-0cd8f0c2":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-glibc-mutex.html-487522ce.js"),["assets/linux-glibc-mutex.html-487522ce.js","assets/framework-9a29aaa0.js"])),"v-114cb350":defineAsyncComponent(()=>__vitePreload(()=>import("./memory-order.html-94f1aafb.js"),["assets/memory-order.html-94f1aafb.js","assets/framework-9a29aaa0.js"])),"v-23ded876":defineAsyncComponent(()=>__vitePreload(()=>import("./mutex-with-fork.html-0bf3a531.js"),["assets/mutex-with-fork.html-0bf3a531.js","assets/framework-9a29aaa0.js"])),"v-50c2cb0a":defineAsyncComponent(()=>__vitePreload(()=>import("./mutex-with-fork2.html-54f6e196.js"),["assets/mutex-with-fork2.html-54f6e196.js","assets/framework-9a29aaa0.js"])),"v-d6087b44":defineAsyncComponent(()=>__vitePreload(()=>import("./read-write-mutex-deadlock.html-30fdfd28.js"),["assets/read-write-mutex-deadlock.html-30fdfd28.js","assets/framework-9a29aaa0.js"])),"v-7f0a63b2":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-758b0773.js"),["assets/index.html-758b0773.js","assets/framework-9a29aaa0.js"])),"v-39aec4ca":defineAsyncComponent(()=>__vitePreload(()=>import("./duplicate_symbol_in_so.html-5e76d711.js"),["assets/duplicate_symbol_in_so.html-5e76d711.js","assets/framework-9a29aaa0.js"])),"v-6461b009":defineAsyncComponent(()=>__vitePreload(()=>import("./dynamic_fpic.html-63aad27c.js"),["assets/dynamic_fpic.html-63aad27c.js","assets/framework-9a29aaa0.js"])),"v-4cc38e03":defineAsyncComponent(()=>__vitePreload(()=>import("./dynamic_lib_loading.html-733a1aed.js"),["assets/dynamic_lib_loading.html-733a1aed.js","assets/framework-9a29aaa0.js"])),"v-ccbe3652":defineAsyncComponent(()=>__vitePreload(()=>import("./elf-relocation.html-1616d016.js"),["assets/elf-relocation.html-1616d016.js","assets/framework-9a29aaa0.js"])),"v-d190b8c0":defineAsyncComponent(()=>__vitePreload(()=>import("./got_plt.html-f4c373fe.js"),["assets/got_plt.html-f4c373fe.js","assets/framework-9a29aaa0.js"])),"v-2a7d4f2b":defineAsyncComponent(()=>__vitePreload(()=>import("./ldconfig-soname.html-1e455274.js"),["assets/ldconfig-soname.html-1e455274.js","assets/framework-9a29aaa0.js"])),"v-5eb4dd6c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ba236952.js"),["assets/index.html-ba236952.js","assets/framework-9a29aaa0.js"])),"v-09ea77fb":defineAsyncComponent(()=>__vitePreload(()=>import("./relocation_rel_text.html-3540fbfb.js"),["assets/relocation_rel_text.html-3540fbfb.js","assets/framework-9a29aaa0.js"])),"v-60f2aa2e":defineAsyncComponent(()=>__vitePreload(()=>import("./stackful-stackless.html-4ccb1e4b.js"),["assets/stackful-stackless.html-4ccb1e4b.js","assets/framework-9a29aaa0.js"])),"v-e3803fe8":defineAsyncComponent(()=>__vitePreload(()=>import("./mysql-bin-log-parse.html-6d08ba41.js"),["assets/mysql-bin-log-parse.html-6d08ba41.js","assets/framework-9a29aaa0.js"])),"v-29447cd9":defineAsyncComponent(()=>__vitePreload(()=>import("./mysql-data-line.html-40a58320.js"),["assets/mysql-data-line.html-40a58320.js","assets/framework-9a29aaa0.js"])),"v-3dbda982":defineAsyncComponent(()=>__vitePreload(()=>import("./mysql_b_tree_index.html-c68210fc.js"),["assets/mysql_b_tree_index.html-c68210fc.js","assets/framework-9a29aaa0.js"])),"v-3c64f81c":defineAsyncComponent(()=>__vitePreload(()=>import("./mysql_ibd_file_format.html-04442744.js"),["assets/mysql_ibd_file_format.html-04442744.js","assets/framework-9a29aaa0.js"])),"v-0e77baf2":defineAsyncComponent(()=>__vitePreload(()=>import("./mysql_mvcc.html-7bee5b90.js"),["assets/mysql_mvcc.html-7bee5b90.js","assets/framework-9a29aaa0.js"])),"v-571ee3bc":defineAsyncComponent(()=>__vitePreload(()=>import("./mysql_source_code_build.html-a5255c63.js"),["assets/mysql_source_code_build.html-a5255c63.js","assets/framework-9a29aaa0.js"])),"v-82706408":defineAsyncComponent(()=>__vitePreload(()=>import("./sqlite-cmd.html-49f4ba9c.js"),["assets/sqlite-cmd.html-49f4ba9c.js","assets/framework-9a29aaa0.js"])),"v-e1e3fc24":defineAsyncComponent(()=>__vitePreload(()=>import("./ROM.html-7ba4622d.js"),["assets/ROM.html-7ba4622d.js","assets/framework-9a29aaa0.js"])),"v-98409ff2":defineAsyncComponent(()=>__vitePreload(()=>import("./nonblock-block.html-5035cbd2.js"),["assets/nonblock-block.html-5035cbd2.js","assets/framework-9a29aaa0.js"])),"v-357b5e82":defineAsyncComponent(()=>__vitePreload(()=>import("./trigger.html-790a46c5.js"),["assets/trigger.html-790a46c5.js","assets/framework-9a29aaa0.js"])),"v-eba6b246":defineAsyncComponent(()=>__vitePreload(()=>import("./cmos.html-356b3b3c.js"),["assets/cmos.html-356b3b3c.js","assets/framework-9a29aaa0.js"])),"v-0e7fe57d":defineAsyncComponent(()=>__vitePreload(()=>import("./triode.html-ca9b2440.js"),["assets/triode.html-ca9b2440.js","assets/framework-9a29aaa0.js"])),"v-767de411":defineAsyncComponent(()=>__vitePreload(()=>import("./self-judge.html-bf00aea1.js"),["assets/self-judge.html-bf00aea1.js","assets/framework-9a29aaa0.js"])),"v-59c305ab":defineAsyncComponent(()=>__vitePreload(()=>import("./algobase.html-659bf775.js"),["assets/algobase.html-659bf775.js","assets/framework-9a29aaa0.js"])),"v-518f27a8":defineAsyncComponent(()=>__vitePreload(()=>import("./construct.html-70bf1c0a.js"),["assets/construct.html-70bf1c0a.js","assets/framework-9a29aaa0.js"])),"v-47c314d7":defineAsyncComponent(()=>__vitePreload(()=>import("./exceptdef.html-10a71e38.js"),["assets/exceptdef.html-10a71e38.js","assets/framework-9a29aaa0.js"])),"v-22834b21":defineAsyncComponent(()=>__vitePreload(()=>import("./iterator.html-d0a2f9e4.js"),["assets/iterator.html-d0a2f9e4.js","assets/framework-9a29aaa0.js"])),"v-2607abf1":defineAsyncComponent(()=>__vitePreload(()=>import("./list.html-c9c5ac19.js"),["assets/list.html-c9c5ac19.js","assets/framework-9a29aaa0.js"])),"v-4bd99572":defineAsyncComponent(()=>__vitePreload(()=>import("./map.html-cc7bfd86.js"),["assets/map.html-cc7bfd86.js","assets/framework-9a29aaa0.js"])),"v-2bd87fee":defineAsyncComponent(()=>__vitePreload(()=>import("./memory.html-f1ea1150.js"),["assets/memory.html-f1ea1150.js","assets/framework-9a29aaa0.js"])),"v-78fad7f6":defineAsyncComponent(()=>__vitePreload(()=>import("./rb_tree.html-8b301a79.js"),["assets/rb_tree.html-8b301a79.js","assets/framework-9a29aaa0.js"])),"v-3ba2891b":defineAsyncComponent(()=>__vitePreload(()=>import("./stack.html-c4fde574.js"),["assets/stack.html-c4fde574.js","assets/framework-9a29aaa0.js"])),"v-93560ec4":defineAsyncComponent(()=>__vitePreload(()=>import("./uninitiallized.html-f264be67.js"),["assets/uninitiallized.html-f264be67.js","assets/framework-9a29aaa0.js"])),"v-ec75fe1c":defineAsyncComponent(()=>__vitePreload(()=>import("./unordered_map.html-ce0fe15a.js"),["assets/unordered_map.html-ce0fe15a.js","assets/framework-9a29aaa0.js"])),"v-971129e6":defineAsyncComponent(()=>__vitePreload(()=>import("./util.html-c3ad4c98.js"),["assets/util.html-c3ad4c98.js","assets/framework-9a29aaa0.js"])),"v-0c109628":defineAsyncComponent(()=>__vitePreload(()=>import("./vector.html-677f44ac.js"),["assets/vector.html-677f44ac.js","assets/framework-9a29aaa0.js"])),"v-331152ca":defineAsyncComponent(()=>__vitePreload(()=>import("./workflow-threadpool.html-737d8d67.js"),["assets/workflow-threadpool.html-737d8d67.js","assets/framework-9a29aaa0.js"])),"v-3b52279e":defineAsyncComponent(()=>__vitePreload(()=>import("./cmake.html-99825946.js"),["assets/cmake.html-99825946.js","assets/framework-9a29aaa0.js"])),"v-025645a8":defineAsyncComponent(()=>__vitePreload(()=>import("./makefile-knowledge.html-74024140.js"),["assets/makefile-knowledge.html-74024140.js","assets/framework-9a29aaa0.js"])),"v-ffec0bb6":defineAsyncComponent(()=>__vitePreload(()=>import("./gdb_cmd.html-6718d053.js"),["assets/gdb_cmd.html-6718d053.js","assets/framework-9a29aaa0.js"])),"v-813bc77e":defineAsyncComponent(()=>__vitePreload(()=>import("./gdb_multithread_multiprocess.html-3fbaff2a.js"),["assets/gdb_multithread_multiprocess.html-3fbaff2a.js","assets/framework-9a29aaa0.js"])),"v-1bae868b":defineAsyncComponent(()=>__vitePreload(()=>import("./git-merge-git-rebase.html-6bd63200.js"),["assets/git-merge-git-rebase.html-6bd63200.js","assets/framework-9a29aaa0.js"])),"v-5ad99f25":defineAsyncComponent(()=>__vitePreload(()=>import("./git-proxy.html-521e7336.js"),["assets/git-proxy.html-521e7336.js","assets/framework-9a29aaa0.js"])),"v-781d1713":defineAsyncComponent(()=>__vitePreload(()=>import("./git-submodule-usage.html-1d658b35.js"),["assets/git-submodule-usage.html-1d658b35.js","assets/framework-9a29aaa0.js"])),"v-e6061940":defineAsyncComponent(()=>__vitePreload(()=>import("./how-to-configure-git-with-multiple-user.html-42966342.js"),["assets/how-to-configure-git-with-multiple-user.html-42966342.js","assets/framework-9a29aaa0.js"])),"v-8ed49434":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-frequently-used-cmd.html-3c38ecc4.js"),["assets/linux-frequently-used-cmd.html-3c38ecc4.js","assets/framework-9a29aaa0.js"])),"v-422e9a49":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-iostat-cmd.html-4eaf3f92.js"),["assets/linux-iostat-cmd.html-4eaf3f92.js","assets/framework-9a29aaa0.js"])),"v-051d8b78":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-iptables.html-7a67dbe6.js"),["assets/linux-iptables.html-7a67dbe6.js","assets/framework-9a29aaa0.js"])),"v-1ceae136":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-lsof-cmd.html-538f62d8.js"),["assets/linux-lsof-cmd.html-538f62d8.js","assets/framework-9a29aaa0.js"])),"v-46314d5a":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-mitm-proxy.html-4f66b639.js"),["assets/linux-mitm-proxy.html-4f66b639.js","assets/framework-9a29aaa0.js"])),"v-02e4930c":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-perf-cmd.html-91a55d1f.js"),["assets/linux-perf-cmd.html-91a55d1f.js","assets/framework-9a29aaa0.js"])),"v-0e5bbbf6":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-pidstat-cmd.html-94c20e51.js"),["assets/linux-pidstat-cmd.html-94c20e51.js","assets/framework-9a29aaa0.js"])),"v-7376518c":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-route-cmd.html-dea9e386.js"),["assets/linux-route-cmd.html-dea9e386.js","assets/framework-9a29aaa0.js"])),"v-6cf506de":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-sar-cmd.html-9c2fbb20.js"),["assets/linux-sar-cmd.html-9c2fbb20.js","assets/framework-9a29aaa0.js"])),"v-0d260640":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-top-cmd.html-9d999100.js"),["assets/linux-top-cmd.html-9d999100.js","assets/framework-9a29aaa0.js"])),"v-ef348746":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-valgrind.html-15d6b3e8.js"),["assets/linux-valgrind.html-15d6b3e8.js","assets/framework-9a29aaa0.js"])),"v-0e976c58":defineAsyncComponent(()=>__vitePreload(()=>import("./linux-vmstat-cmd.html-053eb68b.js"),["assets/linux-vmstat-cmd.html-053eb68b.js","assets/framework-9a29aaa0.js"])),"v-7f055018":defineAsyncComponent(()=>__vitePreload(()=>import("./Group-Assignment1-greet-the-user.html-643f2cf5.js"),["assets/Group-Assignment1-greet-the-user.html-643f2cf5.js","assets/framework-9a29aaa0.js"])),"v-535a440e":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture1-computer-organization-assembly-language.html-2d3a2b83.js"),["assets/Lecture1-computer-organization-assembly-language.html-2d3a2b83.js","assets/framework-9a29aaa0.js"])),"v-a0280be2":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture14-structure-strcuture-packing.html-df59239d.js"),["assets/Lecture14-structure-strcuture-packing.html-df59239d.js","assets/framework-9a29aaa0.js"])),"v-78553716":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture18-Memory-management.html-2d460829.js"),["assets/Lecture18-Memory-management.html-2d460829.js","assets/framework-9a29aaa0.js"])),"v-ca5a5eb8":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture2-digital-circuits.html-a13a6f33.js"),["assets/Lecture2-digital-circuits.html-a13a6f33.js","assets/framework-9a29aaa0.js"])),"v-77b6e668":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture3-register-numeric-representations.html-93335c49.js"),["assets/Lecture3-register-numeric-representations.html-93335c49.js","assets/framework-9a29aaa0.js"])),"v-4ab9f3e6":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture4-twos-complement-arithmetic-instructions.html-813ef637.js"),["assets/Lecture4-twos-complement-arithmetic-instructions.html-813ef637.js","assets/framework-9a29aaa0.js"])),"v-0a0aeea4":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture5-branch.html-9919ac91.js"),["assets/Lecture5-branch.html-9919ac91.js","assets/framework-9a29aaa0.js"])),"v-5bc2b0c3":defineAsyncComponent(()=>__vitePreload(()=>import("./Lecture6-calling-c-functions.html-7d57341f.js"),["assets/Lecture6-calling-c-functions.html-7d57341f.js","assets/framework-9a29aaa0.js"])),"v-250d4089":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_SFINAE.html-040aca75.js"),["assets/cpp_SFINAE.html-040aca75.js","assets/framework-9a29aaa0.js"])),"v-38f5dc4c":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_T_T__t__.html-75ed06a5.js"),["assets/cpp_T_T__t__.html-75ed06a5.js","assets/framework-9a29aaa0.js"])),"v-63709ed8":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_enable_if.html-303f96c7.js"),["assets/cpp_enable_if.html-303f96c7.js","assets/framework-9a29aaa0.js"])),"v-9c64b522":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_if_constexpr.html-8538b3b2.js"),["assets/cpp_if_constexpr.html-8538b3b2.js","assets/framework-9a29aaa0.js"])),"v-b8ccb92a":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp20_atomic_wait.html-3ef4ae23.js"),["assets/cpp_cpp20_atomic_wait.html-3ef4ae23.js","assets/framework-9a29aaa0.js"])),"v-dd28cada":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp20_concepts.html-15bd7c72.js"),["assets/cpp_cpp20_concepts.html-15bd7c72.js","assets/framework-9a29aaa0.js"])),"v-26a743bc":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp20_coroutine.html-00eedd5b.js"),["assets/cpp_cpp20_coroutine.html-00eedd5b.js","assets/framework-9a29aaa0.js"])),"v-1d55d840":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp20_jthread.html-96266b38.js"),["assets/cpp_cpp20_jthread.html-96266b38.js","assets/framework-9a29aaa0.js"])),"v-3cd1f112":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp20_module.html-2dbf970a.js"),["assets/cpp_cpp20_module.html-2dbf970a.js","assets/framework-9a29aaa0.js"])),"v-50fccc12":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp20_range.html-0277fd82.js"),["assets/cpp_cpp20_range.html-0277fd82.js","assets/framework-9a29aaa0.js"])),"v-f44eddd4":defineAsyncComponent(()=>__vitePreload(()=>import("./cpp_cpp20_small_feature.html-af478b96.js"),["assets/cpp_cpp20_small_feature.html-af478b96.js","assets/framework-9a29aaa0.js"])),"v-0d78042d":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-1.html-5510683f.js"),["assets/effective-STL-1.html-5510683f.js","assets/framework-9a29aaa0.js"])),"v-b5b591da":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-12.html-6d17153b.js"),["assets/effective-STL-12.html-6d17153b.js","assets/framework-9a29aaa0.js"])),"v-a4a51ba4":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-17.html-227bbc02.js"),["assets/effective-STL-17.html-227bbc02.js","assets/framework-9a29aaa0.js"])),"v-0f2cdccc":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-2.html-d2b67218.js"),["assets/effective-STL-2.html-d2b67218.js","assets/framework-9a29aaa0.js"])),"v-10e1b56b":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-3.html-86c619d0.js"),["assets/effective-STL-3.html-86c619d0.js","assets/framework-9a29aaa0.js"])),"v-12968e0a":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-4.html-43ee31ba.js"),["assets/effective-STL-4.html-43ee31ba.js","assets/framework-9a29aaa0.js"])),"v-42231037":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-41.html-a4f6a2fd.js"),["assets/effective-STL-41.html-a4f6a2fd.js","assets/framework-9a29aaa0.js"])),"v-43d7e8d6":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-42.html-acdbda29.js"),["assets/effective-STL-42.html-acdbda29.js","assets/framework-9a29aaa0.js"])),"v-458cc175":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-43.html-8857a491.js"),["assets/effective-STL-43.html-8857a491.js","assets/framework-9a29aaa0.js"])),"v-47419a14":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-44.html-d47830e4.js"),["assets/effective-STL-44.html-d47830e4.js","assets/framework-9a29aaa0.js"])),"v-4e14fc90":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-48.html-cb418093.js"),["assets/effective-STL-48.html-cb418093.js","assets/framework-9a29aaa0.js"])),"v-144b66a9":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-5.html-6a114a83.js"),["assets/effective-STL-5.html-6a114a83.js","assets/framework-9a29aaa0.js"])),"v-16003f48":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-6.html-f5c4a690.js"),["assets/effective-STL-6.html-f5c4a690.js","assets/framework-9a29aaa0.js"])),"v-17b517e7":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-7.html-903a2768.js"),["assets/effective-STL-7.html-903a2768.js","assets/framework-9a29aaa0.js"])),"v-1969f086":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-STL-8.html-07ab2b61.js"),["assets/effective-STL-8.html-07ab2b61.js","assets/framework-9a29aaa0.js"])),"v-068e46e5":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-bf1fb511.js"),["assets/index.html-bf1fb511.js","assets/framework-9a29aaa0.js"])),"v-deb16f3a":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-01.html-dfe072d5.js"),["assets/effective-cpp-01.html-dfe072d5.js","assets/framework-9a29aaa0.js"])),"v-db47bdfc":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-02.html-5388f276.js"),["assets/effective-cpp-02.html-5388f276.js","assets/framework-9a29aaa0.js"])),"v-d7de0cbe":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-03.html-122892e2.js"),["assets/effective-cpp-03.html-122892e2.js","assets/framework-9a29aaa0.js"])),"v-d4745b80":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-04.html-b59d2f55.js"),["assets/effective-cpp-04.html-b59d2f55.js","assets/framework-9a29aaa0.js"])),"v-d10aaa42":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-05.html-2d81c195.js"),["assets/effective-cpp-05.html-2d81c195.js","assets/framework-9a29aaa0.js"])),"v-cda0f904":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-06.html-5386f5d3.js"),["assets/effective-cpp-06.html-5386f5d3.js","assets/framework-9a29aaa0.js"])),"v-ca3747c6":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-07.html-fe68c074.js"),["assets/effective-cpp-07.html-fe68c074.js","assets/framework-9a29aaa0.js"])),"v-c6cd9688":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-08.html-ee674c05.js"),["assets/effective-cpp-08.html-ee674c05.js","assets/framework-9a29aaa0.js"])),"v-c363e54a":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-09.html-74c4e078.js"),["assets/effective-cpp-09.html-74c4e078.js","assets/framework-9a29aaa0.js"])),"v-784ea9f6":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-10.html-4635c585.js"),["assets/effective-cpp-10.html-4635c585.js","assets/framework-9a29aaa0.js"])),"v-74e4f8b8":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-11.html-45c8053b.js"),["assets/effective-cpp-11.html-45c8053b.js","assets/framework-9a29aaa0.js"])),"v-717b477a":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-12.html-c6ed30b5.js"),["assets/effective-cpp-12.html-c6ed30b5.js","assets/framework-9a29aaa0.js"])),"v-6e11963c":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-13.html-c54f0887.js"),["assets/effective-cpp-13.html-c54f0887.js","assets/framework-9a29aaa0.js"])),"v-6aa7e4fe":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-14.html-7aafa81a.js"),["assets/effective-cpp-14.html-7aafa81a.js","assets/framework-9a29aaa0.js"])),"v-673e33c0":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-15.html-d97eae1c.js"),["assets/effective-cpp-15.html-d97eae1c.js","assets/framework-9a29aaa0.js"])),"v-63d48282":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-16.html-2d6e764b.js"),["assets/effective-cpp-16.html-2d6e764b.js","assets/framework-9a29aaa0.js"])),"v-606ad144":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-17.html-43ee9421.js"),["assets/effective-cpp-17.html-43ee9421.js","assets/framework-9a29aaa0.js"])),"v-5d012006":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-18.html-c09f81e9.js"),["assets/effective-cpp-18.html-c09f81e9.js","assets/framework-9a29aaa0.js"])),"v-59976ec8":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-19.html-7794baca.js"),["assets/effective-cpp-19.html-7794baca.js","assets/framework-9a29aaa0.js"])),"v-0e823374":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-20.html-5a0b5014.js"),["assets/effective-cpp-20.html-5a0b5014.js","assets/framework-9a29aaa0.js"])),"v-0b188236":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-21.html-086e59e3.js"),["assets/effective-cpp-21.html-086e59e3.js","assets/framework-9a29aaa0.js"])),"v-07aed0f8":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-22.html-2c7a8544.js"),["assets/effective-cpp-22.html-2c7a8544.js","assets/framework-9a29aaa0.js"])),"v-04451fba":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-23.html-27a276b7.js"),["assets/effective-cpp-23.html-27a276b7.js","assets/framework-9a29aaa0.js"])),"v-00db6e7c":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-24.html-8d370b20.js"),["assets/effective-cpp-24.html-8d370b20.js","assets/framework-9a29aaa0.js"])),"v-01472161":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-25.html-fab7bd7f.js"),["assets/effective-cpp-25.html-fab7bd7f.js","assets/framework-9a29aaa0.js"])),"v-02fbfa00":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-26.html-0da2b4c6.js"),["assets/effective-cpp-26.html-0da2b4c6.js","assets/framework-9a29aaa0.js"])),"v-04b0d29f":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-27.html-59969538.js"),["assets/effective-cpp-27.html-59969538.js","assets/framework-9a29aaa0.js"])),"v-0665ab3e":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-28.html-c9900df7.js"),["assets/effective-cpp-28.html-c9900df7.js","assets/framework-9a29aaa0.js"])),"v-081a83dd":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-29.html-d2fd34b0.js"),["assets/effective-cpp-29.html-d2fd34b0.js","assets/framework-9a29aaa0.js"])),"v-2da52187":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-30.html-06cefbad.js"),["assets/effective-cpp-30.html-06cefbad.js","assets/framework-9a29aaa0.js"])),"v-2f59fa26":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-31.html-fdc31b7e.js"),["assets/effective-cpp-31.html-fdc31b7e.js","assets/framework-9a29aaa0.js"])),"v-310ed2c5":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-32.html-5196025f.js"),["assets/effective-cpp-32.html-5196025f.js","assets/framework-9a29aaa0.js"])),"v-32c3ab64":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-33.html-31815e2b.js"),["assets/effective-cpp-33.html-31815e2b.js","assets/framework-9a29aaa0.js"])),"v-34788403":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-34.html-6aedb119.js"),["assets/effective-cpp-34.html-6aedb119.js","assets/framework-9a29aaa0.js"])),"v-362d5ca2":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-35.html-a6e3b136.js"),["assets/effective-cpp-35.html-a6e3b136.js","assets/framework-9a29aaa0.js"])),"v-37e23541":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-36.html-e95aea04.js"),["assets/effective-cpp-36.html-e95aea04.js","assets/framework-9a29aaa0.js"])),"v-39970de0":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-37.html-a424c1eb.js"),["assets/effective-cpp-37.html-a424c1eb.js","assets/framework-9a29aaa0.js"])),"v-3b4be67f":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-38.html-9df9057d.js"),["assets/effective-cpp-38.html-9df9057d.js","assets/framework-9a29aaa0.js"])),"v-3d00bf1e":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-39.html-4d6d2d94.js"),["assets/effective-cpp-39.html-4d6d2d94.js","assets/framework-9a29aaa0.js"])),"v-628b5cc8":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-40.html-fdf11280.js"),["assets/effective-cpp-40.html-fdf11280.js","assets/framework-9a29aaa0.js"])),"v-64403567":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-41.html-c993f05f.js"),["assets/effective-cpp-41.html-c993f05f.js","assets/framework-9a29aaa0.js"])),"v-65f50e06":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-42.html-1f383f66.js"),["assets/effective-cpp-42.html-1f383f66.js","assets/framework-9a29aaa0.js"])),"v-67a9e6a5":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-43.html-4ddeba34.js"),["assets/effective-cpp-43.html-4ddeba34.js","assets/framework-9a29aaa0.js"])),"v-695ebf44":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-44.html-f0cf59dd.js"),["assets/effective-cpp-44.html-f0cf59dd.js","assets/framework-9a29aaa0.js"])),"v-6b1397e3":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-45.html-08506f62.js"),["assets/effective-cpp-45.html-08506f62.js","assets/framework-9a29aaa0.js"])),"v-6cc87082":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-46.html-64ae05fa.js"),["assets/effective-cpp-46.html-64ae05fa.js","assets/framework-9a29aaa0.js"])),"v-6e7d4921":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-47.html-7a288037.js"),["assets/effective-cpp-47.html-7a288037.js","assets/framework-9a29aaa0.js"])),"v-703221c0":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-48.html-4dea1f51.js"),["assets/effective-cpp-48.html-4dea1f51.js","assets/framework-9a29aaa0.js"])),"v-71e6fa5f":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-49.html-c1dc2179.js"),["assets/effective-cpp-49.html-c1dc2179.js","assets/framework-9a29aaa0.js"])),"v-d11ccfee":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-50.html-58feaf1e.js"),["assets/effective-cpp-50.html-58feaf1e.js","assets/framework-9a29aaa0.js"])),"v-cdb31eb0":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-51.html-802f6680.js"),["assets/effective-cpp-51.html-802f6680.js","assets/framework-9a29aaa0.js"])),"v-ca496d72":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-52.html-c4ea53eb.js"),["assets/effective-cpp-52.html-c4ea53eb.js","assets/framework-9a29aaa0.js"])),"v-c6dfbc34":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-53.html-005d71a4.js"),["assets/effective-cpp-53.html-005d71a4.js","assets/framework-9a29aaa0.js"])),"v-c3760af6":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-54.html-add7ddf6.js"),["assets/effective-cpp-54.html-add7ddf6.js","assets/framework-9a29aaa0.js"])),"v-c00c59b8":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-cpp-55.html-ed5a4e6b.js"),["assets/effective-cpp-55.html-ed5a4e6b.js","assets/framework-9a29aaa0.js"])),"v-eaff3672":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-01.html-ab5063ae.js"),["assets/effective-modern-cpp-01.html-ab5063ae.js","assets/framework-9a29aaa0.js"])),"v-e7958534":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-02.html-5091a53e.js"),["assets/effective-modern-cpp-02.html-5091a53e.js","assets/framework-9a29aaa0.js"])),"v-e42bd3f6":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-03.html-afe1299c.js"),["assets/effective-modern-cpp-03.html-afe1299c.js","assets/framework-9a29aaa0.js"])),"v-e0c222b8":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-04.html-6ed76b92.js"),["assets/effective-modern-cpp-04.html-6ed76b92.js","assets/framework-9a29aaa0.js"])),"v-dd58717a":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-05.html-9c3dae66.js"),["assets/effective-modern-cpp-05.html-9c3dae66.js","assets/framework-9a29aaa0.js"])),"v-d6850efe":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-07.html-cf8c5473.js"),["assets/effective-modern-cpp-07.html-cf8c5473.js","assets/framework-9a29aaa0.js"])),"v-7dc90eb2":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-12.html-07a24b82.js"),["assets/effective-modern-cpp-12.html-07a24b82.js","assets/framework-9a29aaa0.js"])),"v-6cb8987c":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-17.html-1a08fae5.js"),["assets/effective-modern-cpp-17.html-1a08fae5.js","assets/framework-9a29aaa0.js"])),"v-694ee73e":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-18.html-89986652.js"),["assets/effective-modern-cpp-18.html-89986652.js","assets/framework-9a29aaa0.js"])),"v-13fc9830":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-22.html-a45a6e48.js"),["assets/effective-modern-cpp-22.html-a45a6e48.js","assets/framework-9a29aaa0.js"])),"v-1092e6f2":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-23.html-42627ebb.js"),["assets/effective-modern-cpp-23.html-42627ebb.js","assets/framework-9a29aaa0.js"])),"v-30067906":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-35.html-0457c87b.js"),["assets/effective-modern-cpp-35.html-0457c87b.js","assets/framework-9a29aaa0.js"])),"v-31bb51a5":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-36.html-71a7e8c8.js"),["assets/effective-modern-cpp-36.html-71a7e8c8.js","assets/framework-9a29aaa0.js"])),"v-33702a44":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-37.html-25489dd7.js"),["assets/effective-modern-cpp-37.html-25489dd7.js","assets/framework-9a29aaa0.js"])),"v-352502e3":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-38.html-777ad3f0.js"),["assets/effective-modern-cpp-38.html-777ad3f0.js","assets/framework-9a29aaa0.js"])),"v-36d9db82":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-39.html-5f54ba29.js"),["assets/effective-modern-cpp-39.html-5f54ba29.js","assets/framework-9a29aaa0.js"])),"v-5c64792c":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-40.html-fc789dad.js"),["assets/effective-modern-cpp-40.html-fc789dad.js","assets/framework-9a29aaa0.js"])),"v-5fce2a6a":defineAsyncComponent(()=>__vitePreload(()=>import("./effective-modern-cpp-42.html-2d29fd73.js"),["assets/effective-modern-cpp-42.html-2d29fd73.js","assets/framework-9a29aaa0.js"])),"v-14745f7c":defineAsyncComponent(()=>__vitePreload(()=>import("./1.html-ceb1c71c.js"),["assets/1.html-ceb1c71c.js","assets/framework-9a29aaa0.js"])),"v-110aae3e":defineAsyncComponent(()=>__vitePreload(()=>import("./2.html-be83e37e.js"),["assets/2.html-be83e37e.js","assets/framework-9a29aaa0.js"])),"v-0fdec5fc":defineAsyncComponent(()=>__vitePreload(()=>import("./4-1multiplexer.html-40dd5f23.js"),["assets/4-1multiplexer.html-40dd5f23.js","assets/framework-9a29aaa0.js"])),"v-b0244f86":defineAsyncComponent(()=>__vitePreload(()=>import("./HDLbits.html-09063680.js"),["assets/HDLbits.html-09063680.js","assets/framework-9a29aaa0.js"])),"v-31ce37c6":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-assemble-language.html-c5735aaf.js"),["assets/Linux-0.11-assemble-language.html-c5735aaf.js","assets/framework-9a29aaa0.js"])),"v-660e9229":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-boot-bootsect.html-e435d6bf.js"),["assets/Linux-0.11-boot-bootsect.html-e435d6bf.js","assets/framework-9a29aaa0.js"])),"v-541c5c44":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-boot-head.html-59017689.js"),["assets/Linux-0.11-boot-head.html-59017689.js","assets/framework-9a29aaa0.js"])),"v-0dd9b637":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-boot-setup.html-380ecf43.js"),["assets/Linux-0.11-boot-setup.html-380ecf43.js","assets/framework-9a29aaa0.js"])),"v-2b83240a":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-bitmap.html-bc3ec21d.js"),["assets/Linux-0.11-fs-bitmap.html-bc3ec21d.js","assets/framework-9a29aaa0.js"])),"v-63326e56":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-block_dev.html-f44a37a1.js"),["assets/Linux-0.11-fs-block_dev.html-f44a37a1.js","assets/framework-9a29aaa0.js"])),"v-f9de78ce":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-buffer.html-1aced1ba.js"),["assets/Linux-0.11-fs-buffer.html-1aced1ba.js","assets/framework-9a29aaa0.js"])),"v-60f8afad":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-char_dev.html-0c250b37.js"),["assets/Linux-0.11-fs-char_dev.html-0c250b37.js","assets/framework-9a29aaa0.js"])),"v-493b69e8":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-exec.html-b7005430.js"),["assets/Linux-0.11-fs-exec.html-b7005430.js","assets/framework-9a29aaa0.js"])),"v-39a875f0":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-fcntl.html-23cb10f4.js"),["assets/Linux-0.11-fs-fcntl.html-23cb10f4.js","assets/framework-9a29aaa0.js"])),"v-324c5847":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-file_dev.html-5695d10a.js"),["assets/Linux-0.11-fs-file_dev.html-5695d10a.js","assets/framework-9a29aaa0.js"])),"v-f9fdca64":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-inode.html-e00232cd.js"),["assets/Linux-0.11-fs-inode.html-e00232cd.js","assets/framework-9a29aaa0.js"])),"v-d9e5e078":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-ioctl.html-0dbcfbea.js"),["assets/Linux-0.11-fs-ioctl.html-0dbcfbea.js","assets/framework-9a29aaa0.js"])),"v-2cedf15b":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-namei.html-38fda548.js"),["assets/Linux-0.11-fs-namei.html-38fda548.js","assets/framework-9a29aaa0.js"])),"v-30b8b062":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-open.html-d56d8e6b.js"),["assets/Linux-0.11-fs-open.html-d56d8e6b.js","assets/framework-9a29aaa0.js"])),"v-496e6a2a":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-pipe.html-c825301d.js"),["assets/Linux-0.11-fs-pipe.html-c825301d.js","assets/framework-9a29aaa0.js"])),"v-088d2da3":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-read_write.html-69aabdd2.js"),["assets/Linux-0.11-fs-read_write.html-69aabdd2.js","assets/framework-9a29aaa0.js"])),"v-0ede3e05":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-stat.html-cb66aa53.js"),["assets/Linux-0.11-fs-stat.html-cb66aa53.js","assets/framework-9a29aaa0.js"])),"v-62961184":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-super.html-910e5362.js"),["assets/Linux-0.11-fs-super.html-910e5362.js","assets/framework-9a29aaa0.js"])),"v-6b3e1233":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-fs-truncate.html-529ebd7a.js"),["assets/Linux-0.11-fs-truncate.html-529ebd7a.js","assets/framework-9a29aaa0.js"])),"v-372d937a":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-init-main.html-71bb32e5.js"),["assets/Linux-0.11-init-main.html-71bb32e5.js","assets/framework-9a29aaa0.js"])),"v-51b12ace":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-asm.html-052c228c.js"),["assets/Linux-0.11-kernel-asm.html-052c228c.js","assets/framework-9a29aaa0.js"])),"v-44e1262a":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-exit.html-4cfca326.js"),["assets/Linux-0.11-kernel-exit.html-4cfca326.js","assets/framework-9a29aaa0.js"])),"v-d0b48072":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-fork.html-d7547cfe.js"),["assets/Linux-0.11-kernel-fork.html-d7547cfe.js","assets/framework-9a29aaa0.js"])),"v-ecf6a066":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-hd.html-f0d64b9e.js"),["assets/Linux-0.11-kernel-hd.html-f0d64b9e.js","assets/framework-9a29aaa0.js"])),"v-232bad63":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-ll-rw-blk.html-31f86d86.js"),["assets/Linux-0.11-kernel-ll-rw-blk.html-31f86d86.js","assets/framework-9a29aaa0.js"])),"v-4a77de84":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-mktime.html-33c0e22b.js"),["assets/Linux-0.11-kernel-mktime.html-33c0e22b.js","assets/framework-9a29aaa0.js"])),"v-1a1b9452":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-panic.html-3e5fa1bc.js"),["assets/Linux-0.11-kernel-panic.html-3e5fa1bc.js","assets/framework-9a29aaa0.js"])),"v-6c720eab":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-printk.html-b28a758c.js"),["assets/Linux-0.11-kernel-printk.html-b28a758c.js","assets/framework-9a29aaa0.js"])),"v-4354b7dc":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-sched.html-181de3cf.js"),["assets/Linux-0.11-kernel-sched.html-181de3cf.js","assets/framework-9a29aaa0.js"])),"v-febe7cbe":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-signal.html-649843f8.js"),["assets/Linux-0.11-kernel-signal.html-649843f8.js","assets/framework-9a29aaa0.js"])),"v-31ae6c88":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-sys.html-06de89b0.js"),["assets/Linux-0.11-kernel-sys.html-06de89b0.js","assets/framework-9a29aaa0.js"])),"v-7dca628a":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-system_call.html-36ef6e28.js"),["assets/Linux-0.11-kernel-system_call.html-36ef6e28.js","assets/framework-9a29aaa0.js"])),"v-7045a43c":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-trap.html-57b5b9e6.js"),["assets/Linux-0.11-kernel-trap.html-57b5b9e6.js","assets/framework-9a29aaa0.js"])),"v-4da11e0f":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-tty-io.html-a7e0c366.js"),["assets/Linux-0.11-kernel-tty-io.html-a7e0c366.js","assets/framework-9a29aaa0.js"])),"v-5f435f4c":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-kernel-tty_ioctl.html-375a5cf1.js"),["assets/Linux-0.11-kernel-tty_ioctl.html-375a5cf1.js","assets/framework-9a29aaa0.js"])),"v-aa8f706a":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-mm-memory.html-50b214f9.js"),["assets/Linux-0.11-mm-memory.html-50b214f9.js","assets/framework-9a29aaa0.js"])),"v-78a6a3bd":defineAsyncComponent(()=>__vitePreload(()=>import("./Linux-0.11-mm-page.html-4fae1674.js"),["assets/Linux-0.11-mm-page.html-4fae1674.js","assets/framework-9a29aaa0.js"])),"v-9b30b154":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ed9f1d89.js"),["assets/index.html-ed9f1d89.js","assets/framework-9a29aaa0.js"])),"v-0cb8674d":defineAsyncComponent(()=>__vitePreload(()=>import("./intro.html-ddc55e45.js"),["assets/intro.html-ddc55e45.js","assets/framework-9a29aaa0.js"])),"v-ccb0bf46":defineAsyncComponent(()=>__vitePreload(()=>import("./childrenday.html-fef7bfdd.js"),["assets/childrenday.html-fef7bfdd.js","assets/framework-9a29aaa0.js"])),"v-5c48a706":defineAsyncComponent(()=>__vitePreload(()=>import("./dragon_day_travel.html-40caed40.js"),["assets/dragon_day_travel.html-40caed40.js","assets/framework-9a29aaa0.js"])),"v-3706649a":defineAsyncComponent(()=>__vitePreload(()=>import("./404.html-5a0fb7af.js"),["assets/404.html-5a0fb7af.js","assets/framework-9a29aaa0.js"])),"v-416ddfa3":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-28d15680.js"),["assets/index.html-28d15680.js","assets/framework-9a29aaa0.js"])),"v-e1e3da16":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-dc898842.js"),["assets/index.html-dc898842.js","assets/framework-9a29aaa0.js"])),"v-082e9577":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-2b4f9d1e.js"),["assets/index.html-2b4f9d1e.js","assets/framework-9a29aaa0.js"])),"v-2f6732ea":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-7ce6d745.js"),["assets/index.html-7ce6d745.js","assets/framework-9a29aaa0.js"])),"v-636ab15a":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-f4b11a0f.js"),["assets/index.html-f4b11a0f.js","assets/framework-9a29aaa0.js"])),"v-79f5fc98":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-3ec1d7fa.js"),["assets/index.html-3ec1d7fa.js","assets/framework-9a29aaa0.js"])),"v-0287a2e8":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-faa65cfe.js"),["assets/index.html-faa65cfe.js","assets/framework-9a29aaa0.js"])),"v-16687167":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-2db00265.js"),["assets/index.html-2db00265.js","assets/framework-9a29aaa0.js"])),"v-5b57f026":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-005d660b.js"),["assets/index.html-005d660b.js","assets/framework-9a29aaa0.js"])),"v-d7d9ec10":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-597a0e6d.js"),["assets/index.html-597a0e6d.js","assets/framework-9a29aaa0.js"])),"v-3689fde0":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-121bdad9.js"),["assets/index.html-121bdad9.js","assets/framework-9a29aaa0.js"])),"v-6c608567":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-e43cf6a2.js"),["assets/index.html-e43cf6a2.js","assets/framework-9a29aaa0.js"])),"v-1eeb974c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-55ac026d.js"),["assets/index.html-55ac026d.js","assets/framework-9a29aaa0.js"])),"v-244063f8":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-8199b709.js"),["assets/index.html-8199b709.js","assets/framework-9a29aaa0.js"])),"v-176e85c5":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-6201c1e6.js"),["assets/index.html-6201c1e6.js","assets/framework-9a29aaa0.js"])),"v-615aed9c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-a1dc504a.js"),["assets/index.html-a1dc504a.js","assets/framework-9a29aaa0.js"])),"v-4d540f9e":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-066bad9b.js"),["assets/index.html-066bad9b.js","assets/framework-9a29aaa0.js"])),"v-1c8e46ae":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-8a9a927f.js"),["assets/index.html-8a9a927f.js","assets/framework-9a29aaa0.js"])),"v-84d81b12":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-a15ef2cb.js"),["assets/index.html-a15ef2cb.js","assets/framework-9a29aaa0.js"])),"v-c4b7d21c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-57a10625.js"),["assets/index.html-57a10625.js","assets/framework-9a29aaa0.js"])),"v-0923aede":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ebdcb436.js"),["assets/index.html-ebdcb436.js","assets/framework-9a29aaa0.js"])),"v-dafeeb6c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-1520c074.js"),["assets/index.html-1520c074.js","assets/framework-9a29aaa0.js"])),"v-1c197e5a":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-5657372a.js"),["assets/index.html-5657372a.js","assets/framework-9a29aaa0.js"])),"v-8e35b194":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-c2408f78.js"),["assets/index.html-c2408f78.js","assets/framework-9a29aaa0.js"])),"v-41034476":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ddac27aa.js"),["assets/index.html-ddac27aa.js","assets/framework-9a29aaa0.js"])),"v-5979ec6c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-b41a6e6e.js"),["assets/index.html-b41a6e6e.js","assets/framework-9a29aaa0.js"])),"v-597a015f":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-358da743.js"),["assets/index.html-358da743.js","assets/framework-9a29aaa0.js"])),"v-0ba026a0":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-5b8e0949.js"),["assets/index.html-5b8e0949.js","assets/framework-9a29aaa0.js"])),"v-6adb003a":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-fe716b49.js"),["assets/index.html-fe716b49.js","assets/framework-9a29aaa0.js"])),"v-48eeaa85":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-f69544ad.js"),["assets/index.html-f69544ad.js","assets/framework-9a29aaa0.js"])),"v-5e686550":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-58e3e7f4.js"),["assets/index.html-58e3e7f4.js","assets/framework-9a29aaa0.js"])),"v-3dc0a7c1":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-cde495ee.js"),["assets/index.html-cde495ee.js","assets/framework-9a29aaa0.js"])),"v-0686937d":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-42af5497.js"),["assets/index.html-42af5497.js","assets/framework-9a29aaa0.js"])),"v-878f927e":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-6588fd6b.js"),["assets/index.html-6588fd6b.js","assets/framework-9a29aaa0.js"])),"v-430bdc7a":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-755f51aa.js"),["assets/index.html-755f51aa.js","assets/framework-9a29aaa0.js"])),"v-dd9a2efc":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-44b096bf.js"),["assets/index.html-44b096bf.js","assets/framework-9a29aaa0.js"])),"v-c8dcbd40":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-934c8abd.js"),["assets/index.html-934c8abd.js","assets/framework-9a29aaa0.js"])),"v-eb2516be":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-bd8993ba.js"),["assets/index.html-bd8993ba.js","assets/framework-9a29aaa0.js"])),"v-5a843c8d":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-b8e6da5e.js"),["assets/index.html-b8e6da5e.js","assets/framework-9a29aaa0.js"])),"v-5bc93818":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ee19c6c8.js"),["assets/index.html-ee19c6c8.js","assets/framework-9a29aaa0.js"])),"v-744d024e":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-b362f113.js"),["assets/index.html-b362f113.js","assets/framework-9a29aaa0.js"])),"v-e52c881c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-9f7990f6.js"),["assets/index.html-9f7990f6.js","assets/framework-9a29aaa0.js"])),"v-154dc4c4":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-cf2e4a47.js"),["assets/index.html-cf2e4a47.js","assets/framework-9a29aaa0.js"])),"v-01560935":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-463d0e77.js"),["assets/index.html-463d0e77.js","assets/framework-9a29aaa0.js"])),"v-a9f4e09e":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-6f2cc4a6.js"),["assets/index.html-6f2cc4a6.js","assets/framework-9a29aaa0.js"])),"v-ac7a9398":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-994f5f82.js"),["assets/index.html-994f5f82.js","assets/framework-9a29aaa0.js"])),"v-6af60407":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-6799aa31.js"),["assets/index.html-6799aa31.js","assets/framework-9a29aaa0.js"])),"v-ec2c71de":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-3d8ffabb.js"),["assets/index.html-3d8ffabb.js","assets/framework-9a29aaa0.js"])),"v-41590e77":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-d09b1e6a.js"),["assets/index.html-d09b1e6a.js","assets/framework-9a29aaa0.js"])),"v-05b88e01":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-8d5fa659.js"),["assets/index.html-8d5fa659.js","assets/framework-9a29aaa0.js"])),"v-a074e84e":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-16e35cb8.js"),["assets/index.html-16e35cb8.js","assets/framework-9a29aaa0.js"])),"v-29350809":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-495aae0f.js"),["assets/index.html-495aae0f.js","assets/framework-9a29aaa0.js"])),"v-9c48d85a":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-3c822595.js"),["assets/index.html-3c822595.js","assets/framework-9a29aaa0.js"])),"v-b314c74c":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-65ad41d3.js"),["assets/index.html-65ad41d3.js","assets/framework-9a29aaa0.js"])),"v-58c4e07f":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-91b378b6.js"),["assets/index.html-91b378b6.js","assets/framework-9a29aaa0.js"])),"v-66cda8af":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ddf124d3.js"),["assets/index.html-ddf124d3.js","assets/framework-9a29aaa0.js"])),"v-63dde429":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-536072f3.js"),["assets/index.html-536072f3.js","assets/framework-9a29aaa0.js"])),"v-4c56b96d":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-5990bb35.js"),["assets/index.html-5990bb35.js","assets/framework-9a29aaa0.js"])),"v-65eddd24":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-d4959735.js"),["assets/index.html-d4959735.js","assets/framework-9a29aaa0.js"])),"v-046d1644":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-66ea9dea.js"),["assets/index.html-66ea9dea.js","assets/framework-9a29aaa0.js"])),"v-2ac2e0ae":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-2617703a.js"),["assets/index.html-2617703a.js","assets/framework-9a29aaa0.js"])),"v-46f2f307":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ac3173b9.js"),["assets/index.html-ac3173b9.js","assets/framework-9a29aaa0.js"])),"v-73142956":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-52fa182a.js"),["assets/index.html-52fa182a.js","assets/framework-9a29aaa0.js"])),"v-61c98e96":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-5c4ab63c.js"),["assets/index.html-5c4ab63c.js","assets/framework-9a29aaa0.js"])),"v-fc60e8d0":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-aff47d93.js"),["assets/index.html-aff47d93.js","assets/framework-9a29aaa0.js"])),"v-1d6ab4a3":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-d98891aa.js"),["assets/index.html-d98891aa.js","assets/framework-9a29aaa0.js"])),"v-7e88e46b":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-f1511d2f.js"),["assets/index.html-f1511d2f.js","assets/framework-9a29aaa0.js"])),"v-9717cc36":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-80f22234.js"),["assets/index.html-80f22234.js","assets/framework-9a29aaa0.js"])),"v-8f1cfe08":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-93b48bf8.js"),["assets/index.html-93b48bf8.js","assets/framework-9a29aaa0.js"])),"v-09679e8b":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-89b5c4b0.js"),["assets/index.html-89b5c4b0.js","assets/framework-9a29aaa0.js"])),"v-6a871c0f":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-ff9605ed.js"),["assets/index.html-ff9605ed.js","assets/framework-9a29aaa0.js"])),"v-5b0c0eb8":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-44ea93d5.js"),["assets/index.html-44ea93d5.js","assets/framework-9a29aaa0.js"])),"v-19d09bed":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-1406d763.js"),["assets/index.html-1406d763.js","assets/framework-9a29aaa0.js"])),"v-65efc1c2":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-aeef1333.js"),["assets/index.html-aeef1333.js","assets/framework-9a29aaa0.js"])),"v-65efd6b5":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-2ceb5c57.js"),["assets/index.html-2ceb5c57.js","assets/framework-9a29aaa0.js"])),"v-ed9cde38":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-4ebf7dda.js"),["assets/index.html-4ebf7dda.js","assets/framework-9a29aaa0.js"])),"v-6cf551b2":defineAsyncComponent(()=>__vitePreload(()=>import("./index.html-bf62eaa5.js"),["assets/index.html-bf62eaa5.js","assets/framework-9a29aaa0.js"]))};var layoutsSymbol=Symbol(""),pagesData=ref(pagesData$1),pageDataEmpty=readonly({key:"",path:"",title:"",lang:"",frontmatter:{},headers:[]}),pageData=ref(pageDataEmpty),usePageData=()=>pageData,pageFrontmatterSymbol=Symbol(""),usePageFrontmatter=()=>{const b=inject(pageFrontmatterSymbol);if(!b)throw new Error("usePageFrontmatter() is called without provider.");return b},pageHeadSymbol=Symbol(""),usePageHead=()=>{const b=inject(pageHeadSymbol);if(!b)throw new Error("usePageHead() is called without provider.");return b},pageHeadTitleSymbol=Symbol(""),usePageHeadTitle=()=>{const b=inject(pageHeadTitleSymbol);if(!b)throw new Error("usePageHeadTitle() is called without provider.");return b},pageLangSymbol=Symbol(""),usePageLang=()=>{const b=inject(pageLangSymbol);if(!b)throw new Error("usePageLang() is called without provider.");return b},pageLayoutSymbol=Symbol(""),usePageLayout=()=>{const b=inject(pageLayoutSymbol);if(!b)throw new Error("usePageLayout() is called without provider.");return b},routeLocaleSymbol=Symbol(""),useRouteLocale=()=>{const b=inject(routeLocaleSymbol);if(!b)throw new Error("useRouteLocale() is called without provider.");return b},siteData=ref(siteData$1),useSiteData=()=>siteData,siteLocaleDataSymbol=Symbol(""),useSiteLocaleData=()=>{const b=inject(siteLocaleDataSymbol);if(!b)throw new Error("useSiteLocaleData() is called without provider.");return b},updateHeadSymbol=Symbol(""),LAYOUT_NAME_DEFAULT="Layout",LAYOUT_NAME_NOT_FOUND="NotFound",resolvers=reactive({resolveLayouts:b=>b.reduce(($,j)=>({...$,...j.layouts}),{}),resolvePageData:async b=>{const $=pagesData.value[b];return await($==null?void 0:$())??pageDataEmpty},resolvePageFrontmatter:b=>b.frontmatter,resolvePageHead:(b,$,j)=>{const Z=isString$2($.description)?$.description:j.description,U=[...isArray($.head)?$.head:[],...j.head,["title",{},b],["meta",{name:"description",content:Z}]];return dedupeHead(U)},resolvePageHeadTitle:(b,$)=>[b.title,$.title].filter(j=>!!j).join(" | "),resolvePageLang:b=>b.lang||"en",resolvePageLayout:(b,$)=>{let j;if(b.path){const Z=b.frontmatter.layout;isString$2(Z)?j=Z:j=LAYOUT_NAME_DEFAULT}else j=LAYOUT_NAME_NOT_FOUND;return $[j]},resolveRouteLocale:(b,$)=>resolveLocalePath(b,$),resolveSiteLocaleData:(b,$)=>({...b,...b.locales[$]})}),ClientOnly=defineComponent({name:"ClientOnly",setup(b,$){const j=ref(!1);return onMounted(()=>{j.value=!0}),()=>{var Z,U;return j.value?(U=(Z=$.slots).default)==null?void 0:U.call(Z):null}}}),Content=defineComponent({name:"Content",props:{pageKey:{type:String,required:!1,default:""}},setup(b){const $=usePageData(),j=computed(()=>pagesComponents[b.pageKey||$.value.key]);return()=>j.value?h$4(j.value):h$4("div","404 Not Found")}}),defineClientConfig=(b={})=>b,withBase=b=>isLinkHttp(b)?b:`/${removeLeadingSlash(b)}`;const hopeInject="",clientConfig0={};var u8=Uint8Array,u16=Uint16Array,u32=Uint32Array,fleb=new u8([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),fdeb=new u8([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),clim=new u8([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),freb=function(b,$){for(var j=new u16(31),Z=0;Z<31;++Z)j[Z]=$+=1<<b[Z-1];for(var U=new u32(j[30]),Z=1;Z<30;++Z)for(var G=j[Z];G<j[Z+1];++G)U[G]=G-j[Z]<<5|Z;return[j,U]},_a$2=freb(fleb,2),fl=_a$2[0],revfl=_a$2[1];fl[28]=258,revfl[258]=28;var _b=freb(fdeb,0),fd=_b[0],rev=new u16(32768);for(var i$3=0;i$3<32768;++i$3){var x$3=(i$3&43690)>>>1|(i$3&21845)<<1;x$3=(x$3&52428)>>>2|(x$3&13107)<<2,x$3=(x$3&61680)>>>4|(x$3&3855)<<4,rev[i$3]=((x$3&65280)>>>8|(x$3&255)<<8)>>>1}var hMap=function(b,$,j){for(var Z=b.length,U=0,G=new u16($);U<Z;++U)b[U]&&++G[b[U]-1];var W=new u16($);for(U=0;U<$;++U)W[U]=W[U-1]+G[U-1]<<1;var Y;if(j){Y=new u16(1<<$);var X=15-$;for(U=0;U<Z;++U)if(b[U])for(var nn=U<<4|b[U],an=$-b[U],tn=W[b[U]-1]++<<an,sn=tn|(1<<an)-1;tn<=sn;++tn)Y[rev[tn]>>>X]=nn}else for(Y=new u16(Z),U=0;U<Z;++U)b[U]&&(Y[U]=rev[W[b[U]-1]++]>>>15-b[U]);return Y},flt=new u8(288);for(var i$3=0;i$3<144;++i$3)flt[i$3]=8;for(var i$3=144;i$3<256;++i$3)flt[i$3]=9;for(var i$3=256;i$3<280;++i$3)flt[i$3]=7;for(var i$3=280;i$3<288;++i$3)flt[i$3]=8;var fdt=new u8(32);for(var i$3=0;i$3<32;++i$3)fdt[i$3]=5;var flrm=hMap(flt,9,1),fdrm=hMap(fdt,5,1),max=function(b){for(var $=b[0],j=1;j<b.length;++j)b[j]>$&&($=b[j]);return $},bits=function(b,$,j){var Z=$/8|0;return(b[Z]|b[Z+1]<<8)>>($&7)&j},bits16=function(b,$){var j=$/8|0;return(b[j]|b[j+1]<<8|b[j+2]<<16)>>($&7)},shft=function(b){return(b+7)/8|0},slc=function(b,$,j){($==null||$<0)&&($=0),(j==null||j>b.length)&&(j=b.length);var Z=new(b.BYTES_PER_ELEMENT==2?u16:b.BYTES_PER_ELEMENT==4?u32:u8)(j-$);return Z.set(b.subarray($,j)),Z},ec=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],err=function(b,$,j){var Z=new Error($||ec[b]);if(Z.code=b,Error.captureStackTrace&&Error.captureStackTrace(Z,err),!j)throw Z;return Z},inflt=function(b,$,j){var Z=b.length;if(!Z||j&&j.f&&!j.l)return $||new u8(0);var U=!$||j,G=!j||j.i;j||(j={}),$||($=new u8(Z*3));var W=function(Vn){var Mn=$.length;if(Vn>Mn){var Rn=new u8(Math.max(Mn*2,Vn));Rn.set($),$=Rn}},Y=j.f||0,X=j.p||0,nn=j.b||0,an=j.l,tn=j.d,sn=j.m,on=j.n,pn=Z*8;do{if(!an){Y=bits(b,X,1);var en=bits(b,X+1,3);if(X+=3,en)if(en==1)an=flrm,tn=fdrm,sn=9,on=5;else if(en==2){var fn=bits(b,X,31)+257,Ln=bits(b,X+10,15)+4,wn=fn+bits(b,X+5,31)+1;X+=14;for(var Tn=new u8(wn),kn=new u8(19),vn=0;vn<Ln;++vn)kn[clim[vn]]=bits(b,X+vn*3,7);X+=Ln*3;for(var hn=max(kn),Pn=(1<<hn)-1,In=hMap(kn,hn,1),vn=0;vn<wn;){var zn=In[bits(b,X,Pn)];X+=zn&15;var cn=zn>>>4;if(cn<16)Tn[vn++]=cn;else{var bn=0,dn=0;for(cn==16?(dn=3+bits(b,X,3),X+=2,bn=Tn[vn-1]):cn==17?(dn=3+bits(b,X,7),X+=3):cn==18&&(dn=11+bits(b,X,127),X+=7);dn--;)Tn[vn++]=bn}}var ln=Tn.subarray(0,fn),_n=Tn.subarray(fn);sn=max(ln),on=max(_n),an=hMap(ln,sn,1),tn=hMap(_n,on,1)}else err(1);else{var cn=shft(X)+4,mn=b[cn-4]|b[cn-3]<<8,rn=cn+mn;if(rn>Z){G&&err(0);break}U&&W(nn+mn),$.set(b.subarray(cn,rn),nn),j.b=nn+=mn,j.p=X=rn*8,j.f=Y;continue}if(X>pn){G&&err(0);break}}U&&W(nn+131072);for(var un=(1<<sn)-1,yn=(1<<on)-1,gn=X;;gn=X){var bn=an[bits16(b,X)&un],En=bn>>>4;if(X+=bn&15,X>pn){G&&err(0);break}if(bn||err(2),En<256)$[nn++]=En;else if(En==256){gn=X,an=null;break}else{var An=En-254;if(En>264){var vn=En-257,xn=fleb[vn];An=bits(b,X,(1<<xn)-1)+fl[vn],X+=xn}var $n=tn[bits16(b,X)&yn],On=$n>>>4;$n||err(3),X+=$n&15;var _n=fd[On];if(On>3){var xn=fdeb[On];_n+=bits16(b,X)&(1<<xn)-1,X+=xn}if(X>pn){G&&err(0);break}U&&W(nn+131072);for(var Dn=nn+An;nn<Dn;nn+=4)$[nn]=$[nn-_n],$[nn+1]=$[nn+1-_n],$[nn+2]=$[nn+2-_n],$[nn+3]=$[nn+3-_n];nn=Dn}}j.l=an,j.p=gn,j.b=nn,j.f=Y,an&&(Y=1,j.m=sn,j.d=tn,j.n=on)}while(!Y);return nn==$.length?$:slc($,0,nn)},et$1=new u8(0),zlv=function(b){((b[0]&15)!=8||b[0]>>>4>7||(b[0]<<8|b[1])%31)&&err(6,"invalid zlib data"),b[1]&32&&err(6,"invalid zlib data: preset dictionaries not supported")};function unzlibSync(b,$){return inflt((zlv(b),b.subarray(2,-4)),$)}var te$2=typeof TextEncoder<"u"&&new TextEncoder,td=typeof TextDecoder<"u"&&new TextDecoder,tds=0;try{td.decode(et$1,{stream:!0}),tds=1}catch{}var dutf8=function(b){for(var $="",j=0;;){var Z=b[j++],U=(Z>127)+(Z>223)+(Z>239);if(j+U>b.length)return[$,slc(b,j-1)];U?U==3?(Z=((Z&15)<<18|(b[j++]&63)<<12|(b[j++]&63)<<6|b[j++]&63)-65536,$+=String.fromCharCode(55296|Z>>10,56320|Z&1023)):U&1?$+=String.fromCharCode((Z&31)<<6|b[j++]&63):$+=String.fromCharCode((Z&15)<<12|(b[j++]&63)<<6|b[j++]&63):$+=String.fromCharCode(Z)}};function strToU8(b,$){if($){for(var j=new u8(b.length),Z=0;Z<b.length;++Z)j[Z]=b.charCodeAt(Z);return j}if(te$2)return te$2.encode(b);for(var U=b.length,G=new u8(b.length+(b.length>>1)),W=0,Y=function(an){G[W++]=an},Z=0;Z<U;++Z){if(W+5>G.length){var X=new u8(W+8+(U-Z<<1));X.set(G),G=X}var nn=b.charCodeAt(Z);nn<128||$?Y(nn):nn<2048?(Y(192|nn>>6),Y(128|nn&63)):nn>55295&&nn<57344?(nn=65536+(nn&1023<<10)|b.charCodeAt(++Z)&1023,Y(240|nn>>18),Y(128|nn>>12&63),Y(128|nn>>6&63),Y(128|nn&63)):(Y(224|nn>>12),Y(128|nn>>6&63),Y(128|nn&63))}return slc(G,0,W)}function strFromU8(b,$){if($){for(var j="",Z=0;Z<b.length;Z+=16384)j+=String.fromCharCode.apply(null,b.subarray(Z,Z+16384));return j}else{if(td)return td.decode(b);var U=dutf8(b),G=U[0],W=U[1];return W.length&&err(8),G}}const P$5=({name:b="",color:$="currentColor"},{slots:j})=>{var Z;return h$4("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${b}-icon`],viewBox:"0 0 1024 1024",fill:$,"aria-label":`${b} icon`},(Z=j.default)==null?void 0:Z.call(j))};P$5.displayName="IconBase";const Ct=(b,{slots:$})=>{var j;return((j=$.default)==null?void 0:j.call($))||null},vt=()=>h$4(P$5,{name:"github"},()=>h$4("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));vt.displayName="GitHubIcon";const pt=()=>h$4(P$5,{name:"gitlab"},()=>h$4("path",{d:"M229.333 78.688C223.52 62 199.895 62 193.895 78.688L87.958 406.438h247.5c-.188 0-106.125-327.75-106.125-327.75zM33.77 571.438c-4.875 15 .563 31.687 13.313 41.25l464.812 345L87.77 406.438zm301.5-165 176.813 551.25 176.812-551.25zm655.125 165-54-165-424.312 551.25 464.812-345c12.938-9.563 18.188-26.25 13.5-41.25zM830.27 78.688c-5.812-16.688-29.437-16.688-35.437 0l-106.125 327.75h247.5z"}));pt.displayName="GitlabIcon";const $t=()=>h$4(P$5,{name:"gitee"},()=>h$4("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));$t.displayName="GiteeIcon";const gt=()=>h$4(P$5,{name:"bitbucket"},()=>h$4("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));gt.displayName="BitbucketIcon";const yt=()=>h$4(P$5,{name:"source"},()=>h$4("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));yt.displayName="SourceIcon";const _t=(b,$)=>{const j=$?$._instance:getCurrentInstance();return isPlainObject(j==null?void 0:j.appContext.components)&&(b in j.appContext.components||camelize(b)in j.appContext.components||capitalize(camelize(b))in j.appContext.components)},kt$1=b=>{const $=useRouteLocale();return computed(()=>b[$.value])},Gt=(b,$)=>{let j=1;for(let Z=0;Z<b.length;Z++)j+=b.charCodeAt(Z),j+=j<<10,j^=j>>6;return j+=j<<3,j^=j>>11,j%$};class Pt{constructor(){this.messageElements={};const $="message-container",j=document.getElementById($);j?this.containerElement=j:(this.containerElement=document.createElement("div"),this.containerElement.id=$,document.body.appendChild(this.containerElement))}pop($,j=2e3){const Z=document.createElement("div"),U=Date.now();return Z.className="message move-in",Z.innerHTML=$,this.containerElement.appendChild(Z),this.messageElements[U]=Z,j>0&&setTimeout(()=>{this.close(U)},j),U}close($){if($){const j=this.messageElements[$];j.className=j.className.replace("move-in",""),j.className+="move-out",j.addEventListener("animationend",()=>{j.remove(),delete this.messageElements[$]})}else Object.keys(this.messageElements).forEach(j=>this.close(Number(j)))}destroy(){document.body.removeChild(this.containerElement)}}const bt=/#.*$/u,St=b=>{const $=bt.exec(b);return $?$[0]:""},et=b=>decodeURI(b).replace(bt,"").replace(/(index)?\.(md|html)$/,""),Rt=(b,$)=>{if($===void 0)return!1;const j=et(b.path),Z=et($),U=St($);return U?U===b.hash&&(!Z||j===Z):j===Z},Bt$1=b=>{const $=atob(b);return strFromU8(unzlibSync(strToU8($,!0)))},Ft=b=>isLinkHttp(b)?b:`https://github.com/${b}`,Jt=b=>!isLinkHttp(b)||/github\.com/.test(b)?"GitHub":/bitbucket\.org/.test(b)?"Bitbucket":/gitlab\.com/.test(b)?"GitLab":/gitee\.com/.test(b)?"Gitee":null,Dt=(b,...$)=>{const j=b.resolve(...$),Z=j.matched[j.matched.length-1];if(!(Z!=null&&Z.redirect))return j;const{redirect:U}=Z,G=isFunction$2(U)?U(j):U,W=isString$2(G)?{path:G}:G;return Dt(b,{hash:j.hash,query:j.query,params:j.params,...W})};var K$1=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},nt$1={},qt$1={get exports(){return nt$1},set exports(b){nt$1=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K$1,function(){var j=1e3,Z=6e4,U=36e5,G="millisecond",W="second",Y="minute",X="hour",nn="day",an="week",tn="month",sn="quarter",on="year",pn="date",en="Invalid Date",cn=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,mn=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,rn={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(bn){var dn=["th","st","nd","rd"],ln=bn%100;return"["+bn+(dn[(ln-20)%10]||dn[ln]||dn[0])+"]"}},fn=function(bn,dn,ln){var _n=String(bn);return!_n||_n.length>=dn?bn:""+Array(dn+1-_n.length).join(ln)+bn},Ln={s:fn,z:function(bn){var dn=-bn.utcOffset(),ln=Math.abs(dn),_n=Math.floor(ln/60),un=ln%60;return(dn<=0?"+":"-")+fn(_n,2,"0")+":"+fn(un,2,"0")},m:function bn(dn,ln){if(dn.date()<ln.date())return-bn(ln,dn);var _n=12*(ln.year()-dn.year())+(ln.month()-dn.month()),un=dn.clone().add(_n,tn),yn=ln-un<0,gn=dn.clone().add(_n+(yn?-1:1),tn);return+(-(_n+(ln-un)/(yn?un-gn:gn-un))||0)},a:function(bn){return bn<0?Math.ceil(bn)||0:Math.floor(bn)},p:function(bn){return{M:tn,y:on,w:an,d:nn,D:pn,h:X,m:Y,s:W,ms:G,Q:sn}[bn]||String(bn||"").toLowerCase().replace(/s$/,"")},u:function(bn){return bn===void 0}},wn="en",Tn={};Tn[wn]=rn;var kn=function(bn){return bn instanceof In},vn=function bn(dn,ln,_n){var un;if(!dn)return wn;if(typeof dn=="string"){var yn=dn.toLowerCase();Tn[yn]&&(un=yn),ln&&(Tn[yn]=ln,un=yn);var gn=dn.split("-");if(!un&&gn.length>1)return bn(gn[0])}else{var En=dn.name;Tn[En]=dn,un=En}return!_n&&un&&(wn=un),un||!_n&&wn},hn=function(bn,dn){if(kn(bn))return bn.clone();var ln=typeof dn=="object"?dn:{};return ln.date=bn,ln.args=arguments,new In(ln)},Pn=Ln;Pn.l=vn,Pn.i=kn,Pn.w=function(bn,dn){return hn(bn,{locale:dn.$L,utc:dn.$u,x:dn.$x,$offset:dn.$offset})};var In=function(){function bn(ln){this.$L=vn(ln.locale,null,!0),this.parse(ln)}var dn=bn.prototype;return dn.parse=function(ln){this.$d=function(_n){var un=_n.date,yn=_n.utc;if(un===null)return new Date(NaN);if(Pn.u(un))return new Date;if(un instanceof Date)return new Date(un);if(typeof un=="string"&&!/Z$/i.test(un)){var gn=un.match(cn);if(gn){var En=gn[2]-1||0,An=(gn[7]||"0").substring(0,3);return yn?new Date(Date.UTC(gn[1],En,gn[3]||1,gn[4]||0,gn[5]||0,gn[6]||0,An)):new Date(gn[1],En,gn[3]||1,gn[4]||0,gn[5]||0,gn[6]||0,An)}}return new Date(un)}(ln),this.$x=ln.x||{},this.init()},dn.init=function(){var ln=this.$d;this.$y=ln.getFullYear(),this.$M=ln.getMonth(),this.$D=ln.getDate(),this.$W=ln.getDay(),this.$H=ln.getHours(),this.$m=ln.getMinutes(),this.$s=ln.getSeconds(),this.$ms=ln.getMilliseconds()},dn.$utils=function(){return Pn},dn.isValid=function(){return this.$d.toString()!==en},dn.isSame=function(ln,_n){var un=hn(ln);return this.startOf(_n)<=un&&un<=this.endOf(_n)},dn.isAfter=function(ln,_n){return hn(ln)<this.startOf(_n)},dn.isBefore=function(ln,_n){return this.endOf(_n)<hn(ln)},dn.$g=function(ln,_n,un){return Pn.u(ln)?this[_n]:this.set(un,ln)},dn.unix=function(){return Math.floor(this.valueOf()/1e3)},dn.valueOf=function(){return this.$d.getTime()},dn.startOf=function(ln,_n){var un=this,yn=!!Pn.u(_n)||_n,gn=Pn.p(ln),En=function(Rn,Cn){var Sn=Pn.w(un.$u?Date.UTC(un.$y,Cn,Rn):new Date(un.$y,Cn,Rn),un);return yn?Sn:Sn.endOf(nn)},An=function(Rn,Cn){return Pn.w(un.toDate()[Rn].apply(un.toDate("s"),(yn?[0,0,0,0]:[23,59,59,999]).slice(Cn)),un)},xn=this.$W,$n=this.$M,On=this.$D,Dn="set"+(this.$u?"UTC":"");switch(gn){case on:return yn?En(1,0):En(31,11);case tn:return yn?En(1,$n):En(0,$n+1);case an:var Vn=this.$locale().weekStart||0,Mn=(xn<Vn?xn+7:xn)-Vn;return En(yn?On-Mn:On+(6-Mn),$n);case nn:case pn:return An(Dn+"Hours",0);case X:return An(Dn+"Minutes",1);case Y:return An(Dn+"Seconds",2);case W:return An(Dn+"Milliseconds",3);default:return this.clone()}},dn.endOf=function(ln){return this.startOf(ln,!1)},dn.$set=function(ln,_n){var un,yn=Pn.p(ln),gn="set"+(this.$u?"UTC":""),En=(un={},un[nn]=gn+"Date",un[pn]=gn+"Date",un[tn]=gn+"Month",un[on]=gn+"FullYear",un[X]=gn+"Hours",un[Y]=gn+"Minutes",un[W]=gn+"Seconds",un[G]=gn+"Milliseconds",un)[yn],An=yn===nn?this.$D+(_n-this.$W):_n;if(yn===tn||yn===on){var xn=this.clone().set(pn,1);xn.$d[En](An),xn.init(),this.$d=xn.set(pn,Math.min(this.$D,xn.daysInMonth())).$d}else En&&this.$d[En](An);return this.init(),this},dn.set=function(ln,_n){return this.clone().$set(ln,_n)},dn.get=function(ln){return this[Pn.p(ln)]()},dn.add=function(ln,_n){var un,yn=this;ln=Number(ln);var gn=Pn.p(_n),En=function($n){var On=hn(yn);return Pn.w(On.date(On.date()+Math.round($n*ln)),yn)};if(gn===tn)return this.set(tn,this.$M+ln);if(gn===on)return this.set(on,this.$y+ln);if(gn===nn)return En(1);if(gn===an)return En(7);var An=(un={},un[Y]=Z,un[X]=U,un[W]=j,un)[gn]||1,xn=this.$d.getTime()+ln*An;return Pn.w(xn,this)},dn.subtract=function(ln,_n){return this.add(-1*ln,_n)},dn.format=function(ln){var _n=this,un=this.$locale();if(!this.isValid())return un.invalidDate||en;var yn=ln||"YYYY-MM-DDTHH:mm:ssZ",gn=Pn.z(this),En=this.$H,An=this.$m,xn=this.$M,$n=un.weekdays,On=un.months,Dn=function(Cn,Sn,Fn,Bn){return Cn&&(Cn[Sn]||Cn(_n,yn))||Fn[Sn].slice(0,Bn)},Vn=function(Cn){return Pn.s(En%12||12,Cn,"0")},Mn=un.meridiem||function(Cn,Sn,Fn){var Bn=Cn<12?"AM":"PM";return Fn?Bn.toLowerCase():Bn},Rn={YY:String(this.$y).slice(-2),YYYY:this.$y,M:xn+1,MM:Pn.s(xn+1,2,"0"),MMM:Dn(un.monthsShort,xn,On,3),MMMM:Dn(On,xn),D:this.$D,DD:Pn.s(this.$D,2,"0"),d:String(this.$W),dd:Dn(un.weekdaysMin,this.$W,$n,2),ddd:Dn(un.weekdaysShort,this.$W,$n,3),dddd:$n[this.$W],H:String(En),HH:Pn.s(En,2,"0"),h:Vn(1),hh:Vn(2),a:Mn(En,An,!0),A:Mn(En,An,!1),m:String(An),mm:Pn.s(An,2,"0"),s:String(this.$s),ss:Pn.s(this.$s,2,"0"),SSS:Pn.s(this.$ms,3,"0"),Z:gn};return yn.replace(mn,function(Cn,Sn){return Sn||Rn[Cn]||gn.replace(":","")})},dn.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},dn.diff=function(ln,_n,un){var yn,gn=Pn.p(_n),En=hn(ln),An=(En.utcOffset()-this.utcOffset())*Z,xn=this-En,$n=Pn.m(this,En);return $n=(yn={},yn[on]=$n/12,yn[tn]=$n,yn[sn]=$n/3,yn[an]=(xn-An)/6048e5,yn[nn]=(xn-An)/864e5,yn[X]=xn/U,yn[Y]=xn/Z,yn[W]=xn/j,yn)[gn]||xn,un?$n:Pn.a($n)},dn.daysInMonth=function(){return this.endOf(tn).$D},dn.$locale=function(){return Tn[this.$L]},dn.locale=function(ln,_n){if(!ln)return this.$L;var un=this.clone(),yn=vn(ln,_n,!0);return yn&&(un.$L=yn),un},dn.clone=function(){return Pn.w(this.$d,this)},dn.toDate=function(){return new Date(this.valueOf())},dn.toJSON=function(){return this.isValid()?this.toISOString():null},dn.toISOString=function(){return this.$d.toISOString()},dn.toString=function(){return this.$d.toUTCString()},bn}(),zn=In.prototype;return hn.prototype=zn,[["$ms",G],["$s",W],["$m",Y],["$H",X],["$W",nn],["$M",tn],["$y",on],["$D",pn]].forEach(function(bn){zn[bn[1]]=function(dn){return this.$g(dn,bn[0],bn[1])}}),hn.extend=function(bn,dn){return bn.$i||(bn(dn,In,hn),bn.$i=!0),hn},hn.locale=vn,hn.isDayjs=kn,hn.unix=function(bn){return hn(1e3*bn)},hn.en=Tn[wn],hn.Ls=Tn,hn.p={},hn})})(qt$1);var R$2=nt$1,it$1={},Qt$1={get exports(){return it$1},set exports(b){it$1=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K$1,function(){return function(j,Z,U){var G=Z.prototype,W=function(sn){var on,pn=sn.date,en=sn.utc,cn={};if(!((on=pn)instanceof Date||on instanceof Array||G.$utils().u(on)||on.constructor.name!=="Object")){if(!Object.keys(pn).length)return new Date;var mn=en?U.utc():U();Object.keys(pn).forEach(function(hn){var Pn,In;cn[Pn=hn,In=G.$utils().p(Pn),In==="date"?"day":In]=pn[hn]});var rn=cn.day||(cn.year||cn.month>=0?1:mn.date()),fn=cn.year||mn.year(),Ln=cn.month>=0?cn.month:cn.year||cn.day?0:mn.month(),wn=cn.hour||0,Tn=cn.minute||0,kn=cn.second||0,vn=cn.millisecond||0;return en?new Date(Date.UTC(fn,Ln,rn,wn,Tn,kn,vn)):new Date(fn,Ln,rn,wn,Tn,kn,vn)}return pn},Y=G.parse;G.parse=function(sn){sn.date=W.bind(this)(sn),Y.bind(this)(sn)};var X=G.set,nn=G.add,an=G.subtract,tn=function(sn,on,pn,en){en===void 0&&(en=1);var cn=Object.keys(on),mn=this;return cn.forEach(function(rn){mn=sn.bind(mn)(on[rn]*en,rn)}),mn};G.set=function(sn,on){return on=on===void 0?sn:on,sn.constructor.name==="Object"?tn.bind(this)(function(pn,en){return X.bind(this)(en,pn)},on,sn):X.bind(this)(sn,on)},G.add=function(sn,on){return sn.constructor.name==="Object"?tn.bind(this)(nn,sn,on):nn.bind(this)(sn,on)},G.subtract=function(sn,on){return sn.constructor.name==="Object"?tn.bind(this)(nn,sn,on,-1):an.bind(this)(sn,on)}}})})(Qt$1);var Kt$1=it$1,rt$1={},Xt$1={get exports(){return rt$1},set exports(b){rt$1=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K$1,function(){var j={year:0,month:1,day:2,hour:3,minute:4,second:5},Z={};return function(U,G,W){var Y,X=function(sn,on,pn){pn===void 0&&(pn={});var en=new Date(sn),cn=function(mn,rn){rn===void 0&&(rn={});var fn=rn.timeZoneName||"short",Ln=mn+"|"+fn,wn=Z[Ln];return wn||(wn=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:mn,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:fn}),Z[Ln]=wn),wn}(on,pn);return cn.formatToParts(en)},nn=function(sn,on){for(var pn=X(sn,on),en=[],cn=0;cn<pn.length;cn+=1){var mn=pn[cn],rn=mn.type,fn=mn.value,Ln=j[rn];Ln>=0&&(en[Ln]=parseInt(fn,10))}var wn=en[3],Tn=wn===24?0:wn,kn=en[0]+"-"+en[1]+"-"+en[2]+" "+Tn+":"+en[4]+":"+en[5]+":000",vn=+sn;return(W.utc(kn).valueOf()-(vn-=vn%1e3))/6e4},an=G.prototype;an.tz=function(sn,on){sn===void 0&&(sn=Y);var pn=this.utcOffset(),en=this.toDate(),cn=en.toLocaleString("en-US",{timeZone:sn}),mn=Math.round((en-new Date(cn))/1e3/60),rn=W(cn).$set("millisecond",this.$ms).utcOffset(15*-Math.round(en.getTimezoneOffset()/15)-mn,!0);if(on){var fn=rn.utcOffset();rn=rn.add(pn-fn,"minute")}return rn.$x.$timezone=sn,rn},an.offsetName=function(sn){var on=this.$x.$timezone||W.tz.guess(),pn=X(this.valueOf(),on,{timeZoneName:sn}).find(function(en){return en.type.toLowerCase()==="timezonename"});return pn&&pn.value};var tn=an.startOf;an.startOf=function(sn,on){if(!this.$x||!this.$x.$timezone)return tn.call(this,sn,on);var pn=W(this.format("YYYY-MM-DD HH:mm:ss:SSS"));return tn.call(pn,sn,on).tz(this.$x.$timezone,!0)},W.tz=function(sn,on,pn){var en=pn&&on,cn=pn||on||Y,mn=nn(+W(),cn);if(typeof sn!="string")return W(sn).tz(cn);var rn=function(Tn,kn,vn){var hn=Tn-60*kn*1e3,Pn=nn(hn,vn);if(kn===Pn)return[hn,kn];var In=nn(hn-=60*(Pn-kn)*1e3,vn);return Pn===In?[hn,Pn]:[Tn-60*Math.min(Pn,In)*1e3,Math.max(Pn,In)]}(W.utc(sn,en).valueOf(),mn,cn),fn=rn[0],Ln=rn[1],wn=W(fn).utcOffset(Ln);return wn.$x.$timezone=cn,wn},W.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},W.tz.setDefault=function(sn){Y=sn}}})})(Xt$1);var te$1=rt$1,st$1={},ee$1={get exports(){return st$1},set exports(b){st$1=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K$1,function(){var j="minute",Z=/[+-]\d\d(?::?\d\d)?/g,U=/([+-]|\d\d)/g;return function(G,W,Y){var X=W.prototype;Y.utc=function(en){var cn={date:en,utc:!0,args:arguments};return new W(cn)},X.utc=function(en){var cn=Y(this.toDate(),{locale:this.$L,utc:!0});return en?cn.add(this.utcOffset(),j):cn},X.local=function(){return Y(this.toDate(),{locale:this.$L,utc:!1})};var nn=X.parse;X.parse=function(en){en.utc&&(this.$u=!0),this.$utils().u(en.$offset)||(this.$offset=en.$offset),nn.call(this,en)};var an=X.init;X.init=function(){if(this.$u){var en=this.$d;this.$y=en.getUTCFullYear(),this.$M=en.getUTCMonth(),this.$D=en.getUTCDate(),this.$W=en.getUTCDay(),this.$H=en.getUTCHours(),this.$m=en.getUTCMinutes(),this.$s=en.getUTCSeconds(),this.$ms=en.getUTCMilliseconds()}else an.call(this)};var tn=X.utcOffset;X.utcOffset=function(en,cn){var mn=this.$utils().u;if(mn(en))return this.$u?0:mn(this.$offset)?tn.call(this):this.$offset;if(typeof en=="string"&&(en=function(wn){wn===void 0&&(wn="");var Tn=wn.match(Z);if(!Tn)return null;var kn=(""+Tn[0]).match(U)||["-",0,0],vn=kn[0],hn=60*+kn[1]+ +kn[2];return hn===0?0:vn==="+"?hn:-hn}(en),en===null))return this;var rn=Math.abs(en)<=16?60*en:en,fn=this;if(cn)return fn.$offset=rn,fn.$u=en===0,fn;if(en!==0){var Ln=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(fn=this.local().add(rn+Ln,j)).$offset=rn,fn.$x.$localOffset=Ln}else fn=this.utc();return fn};var sn=X.format;X.format=function(en){var cn=en||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return sn.call(this,cn)},X.valueOf=function(){var en=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*en},X.isUTC=function(){return!!this.$u},X.toISOString=function(){return this.toDate().toISOString()},X.toString=function(){return this.toDate().toUTCString()};var on=X.toDate;X.toDate=function(en){return en==="s"&&this.$offset?Y(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():on.call(this)};var pn=X.diff;X.diff=function(en,cn,mn){if(en&&this.$u===en.$u)return pn.call(this,en,cn,mn);var rn=this.local(),fn=Y(en).local();return pn.call(rn,fn,cn,mn)}}})})(ee$1);var ne$1=st$1;R$2.extend(Kt$1),R$2.extend(ne$1),R$2.extend(te$1);const ot=(b,$)=>{if(b){if(R$2(b instanceof Date?b:b.trim()).isValid()){const Z=$?R$2(b).tz($):R$2(b),U=Z.year(),G=Z.month()+1,W=Z.date(),Y=Z.hour(),X=Z.minute(),nn=Z.second(),an=Z.millisecond(),tn=Y===0&&X===0&&nn===0&&an===0;return{value:Z.toDate(),info:{year:U,month:G,day:W,...tn?{}:{hour:Y,minute:X,second:nn}},type:tn?"date":"full"}}const j=/(?:(\d{2,4})[/-](\d{1,2})[/-](\d{1,2}))?\s*(?:(\d{1,2}):(\d{1,2})(?::(\d{1,2}))?)?/u.exec(b.trim());if(j){const[,Z,U,G,W,Y,X]=j,nn=cn=>typeof cn>"u"?void 0:Number(cn),an=cn=>cn&&cn<100?cn+2e3:cn,tn=cn=>W&&Y&&!X?0:cn,sn={year:an(nn(Z)),month:nn(U),day:nn(G),hour:nn(W),minute:nn(Y),second:tn(nn(X))},on=Z===void 0&&U===void 0&&G===void 0,pn=W===void 0&&Y===void 0&&X===void 0,en=R$2({...sn,month:sn.month-1}).toDate();return{value:on?void 0:en,info:pn?{year:sn.year,month:sn.month,day:sn.day}:on?{hour:sn.hour,minute:sn.minute,second:sn.second}:sn,type:on?"time":pn?"date":"full"}}}return null},at=(b,...$)=>{if($.length===0)return b;const j=$.shift()||null;return j&&Object.entries(j).forEach(([Z,U])=>{Z==="__proto__"||Z==="constructor"||(isPlainObject(b[Z])&&isPlainObject(U)?at(b[Z],U):isArray(U)?b[Z]=[...U]:isPlainObject(U)?b[Z]={...U}:b[Z]=j[Z])}),at(b,...$)},re=(b,$=!1)=>b?isArray(b)?b.map(j=>isString$2(j)?{name:j}:j):isString$2(b)?[{name:b}]:isPlainObject(b)&&b.name?[b]:(console.error(`Expect 'author' to be \`AuthorInfo[] | AuthorInfo | string[] | string ${$?"":"| false"} | undefined\`, but got`,b),[]):[],ut=(b,$)=>{if(b){if(isArray(b))return b;if(isString$2(b))return[b];console.error(`Expect ${$||"value"} to be \`string[] | string | undefined\`, but got`,b)}return[]},se=b=>ut(b,"category"),oe=b=>ut(b,"tag"),ue=b=>isString$2(b)&&b.startsWith("/");var _a$1;const isClient$1=typeof window<"u",isFunction$1=b=>typeof b=="function",isString$1=b=>typeof b=="string",noop$1=()=>{};isClient$1&&((_a$1=window==null?void 0:window.navigator)!=null&&_a$1.userAgent)&&/iP(ad|hone|od)/.test(window.navigator.userAgent);function resolveUnref$1(b){return typeof b=="function"?b():unref(b)}function createFilterWrapper$1(b,$){function j(...Z){return new Promise((U,G)=>{Promise.resolve(b(()=>$.apply(this,Z),{fn:$,thisArg:this,args:Z})).then(U).catch(G)})}return j}const bypassFilter$1=b=>b();function debounceFilter$1(b,$={}){let j,Z,U=noop$1;const G=Y=>{clearTimeout(Y),U(),U=noop$1};return Y=>{const X=resolveUnref$1(b),nn=resolveUnref$1($.maxWait);return j&&G(j),X<=0||nn!==void 0&&nn<=0?(Z&&(G(Z),Z=null),Promise.resolve(Y())):new Promise((an,tn)=>{U=$.rejectOnCancel?tn:an,nn&&!Z&&(Z=setTimeout(()=>{j&&G(j),Z=null,an(Y())},nn)),j=setTimeout(()=>{Z&&G(Z),Z=null,an(Y())},X)})}}function throttleFilter(b,$=!0,j=!0,Z=!1){let U=0,G,W=!0,Y=noop$1,X;const nn=()=>{G&&(clearTimeout(G),G=void 0,Y(),Y=noop$1)};return tn=>{const sn=resolveUnref$1(b),on=Date.now()-U,pn=()=>X=tn();if(nn(),sn<=0)return U=Date.now(),pn();if(on>sn&&(j||!W))U=Date.now(),pn();else if($)return new Promise((en,cn)=>{Y=Z?cn:en,G=setTimeout(()=>{U=Date.now(),W=!0,en(pn()),nn()},sn-on)});return!j&&!G&&(G=setTimeout(()=>W=!0,sn)),W=!1,X}}function pausableFilter$1(b=bypassFilter$1){const $=ref(!0);function j(){$.value=!1}function Z(){$.value=!0}return{isActive:$,pause:j,resume:Z,eventFilter:(...G)=>{$.value&&b(...G)}}}function identity$1(b){return b}function tryOnScopeDispose$1(b){return getCurrentScope()?(onScopeDispose(b),!0):!1}function useDebounceFn$1(b,$=200,j={}){return createFilterWrapper$1(debounceFilter$1($,j),b)}function useThrottleFn(b,$=200,j=!1,Z=!0,U=!1){return createFilterWrapper$1(throttleFilter($,j,Z,U),b)}function resolveRef(b){return typeof b=="function"?computed(b):ref(b)}function tryOnMounted(b,$=!0){getCurrentInstance()?onMounted(b):$?b():nextTick(b)}var __getOwnPropSymbols$6$1=Object.getOwnPropertySymbols,__hasOwnProp$6$1=Object.prototype.hasOwnProperty,__propIsEnum$6$1=Object.prototype.propertyIsEnumerable,__objRest$5$1=(b,$)=>{var j={};for(var Z in b)__hasOwnProp$6$1.call(b,Z)&&$.indexOf(Z)<0&&(j[Z]=b[Z]);if(b!=null&&__getOwnPropSymbols$6$1)for(var Z of __getOwnPropSymbols$6$1(b))$.indexOf(Z)<0&&__propIsEnum$6$1.call(b,Z)&&(j[Z]=b[Z]);return j};function watchWithFilter$1(b,$,j={}){const Z=j,{eventFilter:U=bypassFilter$1}=Z,G=__objRest$5$1(Z,["eventFilter"]);return watch(b,createFilterWrapper$1(U,$),G)}var __defProp$2$1=Object.defineProperty,__defProps$2$1=Object.defineProperties,__getOwnPropDescs$2$1=Object.getOwnPropertyDescriptors,__getOwnPropSymbols$2$1=Object.getOwnPropertySymbols,__hasOwnProp$2$1=Object.prototype.hasOwnProperty,__propIsEnum$2$1=Object.prototype.propertyIsEnumerable,__defNormalProp$2$1=(b,$,j)=>$ in b?__defProp$2$1(b,$,{enumerable:!0,configurable:!0,writable:!0,value:j}):b[$]=j,__spreadValues$2$1=(b,$)=>{for(var j in $||($={}))__hasOwnProp$2$1.call($,j)&&__defNormalProp$2$1(b,j,$[j]);if(__getOwnPropSymbols$2$1)for(var j of __getOwnPropSymbols$2$1($))__propIsEnum$2$1.call($,j)&&__defNormalProp$2$1(b,j,$[j]);return b},__spreadProps$2$1=(b,$)=>__defProps$2$1(b,__getOwnPropDescs$2$1($)),__objRest$1$1=(b,$)=>{var j={};for(var Z in b)__hasOwnProp$2$1.call(b,Z)&&$.indexOf(Z)<0&&(j[Z]=b[Z]);if(b!=null&&__getOwnPropSymbols$2$1)for(var Z of __getOwnPropSymbols$2$1(b))$.indexOf(Z)<0&&__propIsEnum$2$1.call(b,Z)&&(j[Z]=b[Z]);return j};function watchPausable$1(b,$,j={}){const Z=j,{eventFilter:U}=Z,G=__objRest$1$1(Z,["eventFilter"]),{eventFilter:W,pause:Y,resume:X,isActive:nn}=pausableFilter$1(U);return{stop:watchWithFilter$1(b,$,__spreadProps$2$1(__spreadValues$2$1({},G),{eventFilter:W})),pause:Y,resume:X,isActive:nn}}function unrefElement$1(b){var $;const j=resolveUnref$1(b);return($=j==null?void 0:j.$el)!=null?$:j}const defaultWindow$1=isClient$1?window:void 0,defaultDocument=isClient$1?window.document:void 0;isClient$1&&window.navigator;isClient$1&&window.location;function useEventListener$1(...b){let $,j,Z,U;if(isString$1(b[0])||Array.isArray(b[0])?([j,Z,U]=b,$=defaultWindow$1):[$,j,Z,U]=b,!$)return noop$1;Array.isArray(j)||(j=[j]),Array.isArray(Z)||(Z=[Z]);const G=[],W=()=>{G.forEach(an=>an()),G.length=0},Y=(an,tn,sn)=>(an.addEventListener(tn,sn,U),()=>an.removeEventListener(tn,sn,U)),X=watch(()=>unrefElement$1($),an=>{W(),an&&G.push(...j.flatMap(tn=>Z.map(sn=>Y(an,tn,sn))))},{immediate:!0,flush:"post"}),nn=()=>{X(),W()};return tryOnScopeDispose$1(nn),nn}function onClickOutside(b,$,j={}){const{window:Z=defaultWindow$1,ignore:U=[],capture:G=!0,detectIframe:W=!1}=j;if(!Z)return;let Y=!0,X;const nn=on=>U.some(pn=>{if(typeof pn=="string")return Array.from(Z.document.querySelectorAll(pn)).some(en=>en===on.target||on.composedPath().includes(en));{const en=unrefElement$1(pn);return en&&(on.target===en||on.composedPath().includes(en))}}),an=on=>{Z.clearTimeout(X);const pn=unrefElement$1(b);if(!(!pn||pn===on.target||on.composedPath().includes(pn))){if(on.detail===0&&(Y=!nn(on)),!Y){Y=!0;return}$(on)}},tn=[useEventListener$1(Z,"click",an,{passive:!0,capture:G}),useEventListener$1(Z,"pointerdown",on=>{const pn=unrefElement$1(b);pn&&(Y=!on.composedPath().includes(pn)&&!nn(on))},{passive:!0}),useEventListener$1(Z,"pointerup",on=>{if(on.button===0){const pn=on.composedPath();on.composedPath=()=>pn,X=Z.setTimeout(()=>an(on),50)}},{passive:!0}),W&&useEventListener$1(Z,"blur",on=>{var pn;const en=unrefElement$1(b);((pn=Z.document.activeElement)==null?void 0:pn.tagName)==="IFRAME"&&!(en!=null&&en.contains(Z.document.activeElement))&&$(on)})].filter(Boolean);return()=>tn.forEach(on=>on())}function useSupported(b,$=!1){const j=ref(),Z=()=>j.value=Boolean(b());return Z(),tryOnMounted(Z,$),j}function useMediaQuery(b,$={}){const{window:j=defaultWindow$1}=$,Z=useSupported(()=>j&&"matchMedia"in j&&typeof j.matchMedia=="function");let U;const G=ref(!1),W=()=>{U&&("removeEventListener"in U?U.removeEventListener("change",Y):U.removeListener(Y))},Y=()=>{Z.value&&(W(),U=j.matchMedia(resolveRef(b).value),G.value=U.matches,"addEventListener"in U?U.addEventListener("change",Y):U.addListener(Y))};return watchEffect(Y),tryOnScopeDispose$1(()=>W()),G}const _global$1=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},globalKey$1="__vueuse_ssr_handlers__";_global$1[globalKey$1]=_global$1[globalKey$1]||{};const handlers$1=_global$1[globalKey$1];function getSSRHandler$1(b,$){return handlers$1[b]||$}function guessSerializerType$1(b){return b==null?"any":b instanceof Set?"set":b instanceof Map?"map":b instanceof Date?"date":typeof b=="boolean"?"boolean":typeof b=="string"?"string":typeof b=="object"?"object":Number.isNaN(b)?"any":"number"}var __defProp$j$1=Object.defineProperty,__getOwnPropSymbols$l$1=Object.getOwnPropertySymbols,__hasOwnProp$l$1=Object.prototype.hasOwnProperty,__propIsEnum$l$1=Object.prototype.propertyIsEnumerable,__defNormalProp$j$1=(b,$,j)=>$ in b?__defProp$j$1(b,$,{enumerable:!0,configurable:!0,writable:!0,value:j}):b[$]=j,__spreadValues$j$1=(b,$)=>{for(var j in $||($={}))__hasOwnProp$l$1.call($,j)&&__defNormalProp$j$1(b,j,$[j]);if(__getOwnPropSymbols$l$1)for(var j of __getOwnPropSymbols$l$1($))__propIsEnum$l$1.call($,j)&&__defNormalProp$j$1(b,j,$[j]);return b};const StorageSerializers$1={boolean:{read:b=>b==="true",write:b=>String(b)},object:{read:b=>JSON.parse(b),write:b=>JSON.stringify(b)},number:{read:b=>Number.parseFloat(b),write:b=>String(b)},any:{read:b=>b,write:b=>String(b)},string:{read:b=>b,write:b=>String(b)},map:{read:b=>new Map(JSON.parse(b)),write:b=>JSON.stringify(Array.from(b.entries()))},set:{read:b=>new Set(JSON.parse(b)),write:b=>JSON.stringify(Array.from(b))},date:{read:b=>new Date(b),write:b=>b.toISOString()}};function useStorage$1(b,$,j,Z={}){var U;const{flush:G="pre",deep:W=!0,listenToStorageChanges:Y=!0,writeDefaults:X=!0,mergeDefaults:nn=!1,shallow:an,window:tn=defaultWindow$1,eventFilter:sn,onError:on=kn=>{console.error(kn)}}=Z,pn=(an?shallowRef:ref)($);if(!j)try{j=getSSRHandler$1("getDefaultStorage",()=>{var kn;return(kn=defaultWindow$1)==null?void 0:kn.localStorage})()}catch(kn){on(kn)}if(!j)return pn;const en=resolveUnref$1($),cn=guessSerializerType$1(en),mn=(U=Z.serializer)!=null?U:StorageSerializers$1[cn],{pause:rn,resume:fn}=watchPausable$1(pn,()=>Ln(pn.value),{flush:G,deep:W,eventFilter:sn});return tn&&Y&&useEventListener$1(tn,"storage",Tn),Tn(),pn;function Ln(kn){try{if(kn==null)j.removeItem(b);else{const vn=mn.write(kn),hn=j.getItem(b);hn!==vn&&(j.setItem(b,vn),tn&&(tn==null||tn.dispatchEvent(new StorageEvent("storage",{key:b,oldValue:hn,newValue:vn,storageArea:j}))))}}catch(vn){on(vn)}}function wn(kn){const vn=kn?kn.newValue:j.getItem(b);if(vn==null)return X&&en!==null&&j.setItem(b,mn.write(en)),en;if(!kn&&nn){const hn=mn.read(vn);return isFunction$1(nn)?nn(hn,en):cn==="object"&&!Array.isArray(hn)?__spreadValues$j$1(__spreadValues$j$1({},en),hn):hn}else return typeof vn!="string"?vn:mn.read(vn)}function Tn(kn){if(!(kn&&kn.storageArea!==j)){if(kn&&kn.key==null){pn.value=en;return}if(!(kn&&kn.key!==b)){rn();try{pn.value=wn(kn)}catch(vn){on(vn)}finally{kn?nextTick(fn):fn()}}}}}function usePreferredDark(b){return useMediaQuery("(prefers-color-scheme: dark)",b)}const functionsMap=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]];function useFullscreen(b,$={}){const{document:j=defaultDocument,autoExit:Z=!1}=$,U=b||(j==null?void 0:j.querySelector("html")),G=ref(!1);let W=functionsMap[0];const Y=useSupported(()=>{if(j){for(const en of functionsMap)if(en[1]in j)return W=en,!0}else return!1;return!1}),[X,nn,an,,tn]=W;async function sn(){Y.value&&(j!=null&&j[an]&&await j[nn](),G.value=!1)}async function on(){if(!Y.value)return;await sn();const en=unrefElement$1(U);en&&(await en[X](),G.value=!0)}async function pn(){G.value?await sn():await on()}return j&&useEventListener$1(j,tn,()=>{G.value=!!(j!=null&&j[an])},!1),Z&&tryOnScopeDispose$1(sn),{isSupported:Y,isFullscreen:G,enter:on,exit:sn,toggle:pn}}var SwipeDirection$1;(function(b){b.UP="UP",b.RIGHT="RIGHT",b.DOWN="DOWN",b.LEFT="LEFT",b.NONE="NONE"})(SwipeDirection$1||(SwipeDirection$1={}));function useSessionStorage(b,$,j={}){const{window:Z=defaultWindow$1}=j;return useStorage$1(b,$,Z==null?void 0:Z.sessionStorage,j)}let _id=0;function useStyleTag(b,$={}){const j=ref(!1),{document:Z=defaultDocument,immediate:U=!0,manual:G=!1,id:W=`vueuse_styletag_${++_id}`}=$,Y=ref(b);let X=()=>{};const nn=()=>{if(!Z)return;const tn=Z.getElementById(W)||Z.createElement("style");tn.isConnected||(tn.type="text/css",tn.id=W,$.media&&(tn.media=$.media),Z.head.appendChild(tn)),!j.value&&(X=watch(Y,sn=>{tn.textContent=sn},{immediate:!0}),j.value=!0)},an=()=>{!Z||!j.value||(X(),Z.head.removeChild(Z.getElementById(W)),j.value=!1)};return U&&!G&&tryOnMounted(nn),G||tryOnScopeDispose$1(an),{id:W,css:Y,unload:an,load:nn,isLoaded:readonly(j)}}var __defProp$1=Object.defineProperty,__getOwnPropSymbols$1=Object.getOwnPropertySymbols,__hasOwnProp$1=Object.prototype.hasOwnProperty,__propIsEnum$1=Object.prototype.propertyIsEnumerable,__defNormalProp$1=(b,$,j)=>$ in b?__defProp$1(b,$,{enumerable:!0,configurable:!0,writable:!0,value:j}):b[$]=j,__spreadValues$1=(b,$)=>{for(var j in $||($={}))__hasOwnProp$1.call($,j)&&__defNormalProp$1(b,j,$[j]);if(__getOwnPropSymbols$1)for(var j of __getOwnPropSymbols$1($))__propIsEnum$1.call($,j)&&__defNormalProp$1(b,j,$[j]);return b};const _TransitionPresets$1={easeInSine:[.12,0,.39,0],easeOutSine:[.61,1,.88,1],easeInOutSine:[.37,0,.63,1],easeInQuad:[.11,0,.5,0],easeOutQuad:[.5,1,.89,1],easeInOutQuad:[.45,0,.55,1],easeInCubic:[.32,0,.67,0],easeOutCubic:[.33,1,.68,1],easeInOutCubic:[.65,0,.35,1],easeInQuart:[.5,0,.75,0],easeOutQuart:[.25,1,.5,1],easeInOutQuart:[.76,0,.24,1],easeInQuint:[.64,0,.78,0],easeOutQuint:[.22,1,.36,1],easeInOutQuint:[.83,0,.17,1],easeInExpo:[.7,0,.84,0],easeOutExpo:[.16,1,.3,1],easeInOutExpo:[.87,0,.13,1],easeInCirc:[.55,0,1,.45],easeOutCirc:[0,.55,.45,1],easeInOutCirc:[.85,0,.15,1],easeInBack:[.36,0,.66,-.56],easeOutBack:[.34,1.56,.64,1],easeInOutBack:[.68,-.6,.32,1.6]};__spreadValues$1({linear:identity$1},_TransitionPresets$1);const badge="",t$2=({type:b="info",text:$="",vertical:j="top",color:Z},{slots:U})=>{var G;return h$4("span",{class:["badge",b,{diy:Z}],style:{verticalAlign:j,...Z?{backgroundColor:Z}:{}}},$||((G=U.default)==null?void 0:G.call(U)))};t$2.displayName="Badge";const fontIcon="";var s$2=defineComponent({name:"FontIcon",props:{icon:{type:String,default:""},color:{type:String,default:""},size:{type:[String,Number],default:""}},setup(b){const $=computed(()=>{const j={};return b.color&&(j.color=b.color),b.size&&(j["font-size"]=Number.isNaN(Number(b.size))?b.size:`${b.size}px`),Object.keys(j).length?j:null});return()=>b.icon?h$4("span",{class:["font-icon icon",`iconfont icon-${b.icon}`],style:$.value}):null}});const backToTop="",a$3=()=>h$4(P$5,{name:"back-to-top"},()=>[h$4("path",{d:"M512 843.2c-36.2 0-66.4-13.6-85.8-21.8-10.8-4.6-22.6 3.6-21.8 15.2l7 102c.4 6.2 7.6 9.4 12.6 5.6l29-22c3.6-2.8 9-1.8 11.4 2l41 64.2c3 4.8 10.2 4.8 13.2 0l41-64.2c2.4-3.8 7.8-4.8 11.4-2l29 22c5 3.8 12.2.6 12.6-5.6l7-102c.8-11.6-11-20-21.8-15.2-19.6 8.2-49.6 21.8-85.8 21.8z"}),h$4("path",{d:"m795.4 586.2-96-98.2C699.4 172 513 32 513 32S324.8 172 324.8 488l-96 98.2c-3.6 3.6-5.2 9-4.4 14.2L261.2 824c1.8 11.4 14.2 17 23.6 10.8L419 744s41.4 40 94.2 40c52.8 0 92.2-40 92.2-40l134.2 90.8c9.2 6.2 21.6.6 23.6-10.8l37-223.8c.4-5.2-1.2-10.4-4.8-14zM513 384c-34 0-61.4-28.6-61.4-64s27.6-64 61.4-64c34 0 61.4 28.6 61.4 64S547 384 513 384z"})]);a$3.displayName="BackToTopIcon";var h$3=defineComponent({name:"BackToTop",props:{threshold:{type:Number,default:300}},setup(b){const $=usePageFrontmatter(),j=kt$1({"/":{backToTop:"返回顶部"}}),Z=ref(0),U=computed(()=>$.value.backToTop!==!1&&Z.value>b.threshold),G=()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;return onMounted(()=>{Z.value=G()}),useEventListener$1("scroll",useDebounceFn$1(()=>{Z.value=G()},100)),()=>h$4(Transition,{name:"fade"},()=>U.value?h$4("button",{class:"back-to-top","aria-label":j.value.backToTop,"data-balloon-pos":"left",onClick:()=>{window.scrollTo({top:0,behavior:"smooth"}),Z.value=0}},h$4(a$3)):null)}});const srOnly="",clientConfig1=defineClientConfig({enhance:({app:b})=>{_t("Badge")||b.component("Badge",t$2),_t("FontIcon")||b.component("FontIcon",s$2)},setup:()=>{useStyleTag('@import url("//at.alicdn.com/t/c/font_2410206_5vb9zlyghj.css");',{id:"icon-assets"})},rootComponents:[()=>h$4(h$3,{threshold:300})]});function r$3(b,$,j){var Z,U,G;$===void 0&&($=50),j===void 0&&(j={});var W=(Z=j.isImmediate)!=null&&Z,Y=(U=j.callback)!=null&&U,X=j.maxWait,nn=Date.now(),an=[];function tn(){if(X!==void 0){var on=Date.now()-nn;if(on+$>=X)return X-on}return $}var sn=function(){var on=[].slice.call(arguments),pn=this;return new Promise(function(en,cn){var mn=W&&G===void 0;if(G!==void 0&&clearTimeout(G),G=setTimeout(function(){if(G=void 0,nn=Date.now(),!W){var fn=b.apply(pn,on);Y&&Y(fn),an.forEach(function(Ln){return(0,Ln.resolve)(fn)}),an=[]}},tn()),mn){var rn=b.apply(pn,on);return Y&&Y(rn),en(rn)}an.push({resolve:en,reject:cn})})};return sn.cancel=function(on){G!==void 0&&clearTimeout(G),an.forEach(function(pn){return(0,pn.reject)(on)}),an=[]},sn}const useActiveHeaderLinks=({headerLinkSelector:b,headerAnchorSelector:$,delay:j,offset:Z=5})=>{const U=useRouter(),W=r$3(()=>{var en,cn;const Y=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(Y-0)<Z){updateHash(U,"");return}const nn=window.innerHeight+Y,an=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),tn=Math.abs(an-nn)<Z,sn=Array.from(document.querySelectorAll(b)),pn=Array.from(document.querySelectorAll($)).filter(mn=>sn.some(rn=>rn.hash===mn.hash));for(let mn=0;mn<pn.length;mn++){const rn=pn[mn],fn=pn[mn+1],Ln=Y>=(((en=rn.parentElement)==null?void 0:en.offsetTop)??0)-Z,wn=!fn||Y<(((cn=fn.parentElement)==null?void 0:cn.offsetTop)??0)-Z;if(!(Ln&&wn))continue;const kn=decodeURIComponent(U.currentRoute.value.hash),vn=decodeURIComponent(rn.hash);if(kn===vn)return;if(tn){for(let hn=mn+1;hn<pn.length;hn++)if(kn===decodeURIComponent(pn[hn].hash))return}updateHash(U,vn);return}},j);onMounted(()=>{window.addEventListener("scroll",W)}),onBeforeUnmount(()=>{window.removeEventListener("scroll",W)})},updateHash=async(b,$)=>{const{scrollBehavior:j}=b.options;b.options.scrollBehavior=void 0,await b.replace({query:b.currentRoute.value.query,hash:$,force:!0}).finally(()=>b.options.scrollBehavior=j)},headerLinkSelector=".sidebar-link, .toc-link",headerAnchorSelector=".header-anchor",delay=200,offset=5,clientConfig2=defineClientConfig({setup(){useActiveHeaderLinks({headerLinkSelector,headerAnchorSelector,delay,offset})}});var a$2=defineClientConfig({enhance:({app:b})=>{!_t("AutoCatalog",b)&&b.component("AutoCatalog",defineAsyncComponent(()=>__vitePreload(()=>import("./Catalog-777f5972.js"),["assets/Catalog-777f5972.js","assets/framework-9a29aaa0.js"])))}});const vars$1="",externalLinkIcon="",svg=h$4("svg",{class:"external-link-icon",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},[h$4("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),h$4("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})]),ExternalLinkIcon=defineComponent({name:"ExternalLinkIcon",props:{locales:{type:Object,required:!1,default:()=>({})}},setup(b){const $=useRouteLocale(),j=computed(()=>b.locales[$.value]??{openInNewWindow:"open in new window"});return()=>h$4("span",[svg,h$4("span",{class:"external-link-icon-sr-only"},j.value.openInNewWindow)])}}),locales={},clientConfig4=defineClientConfig({enhance({app:b}){b.component("ExternalLinkIcon",h$4(ExternalLinkIcon,{locales}))}});/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const nprogress$1={settings:{minimum:.08,easing:"ease",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},status:null,set:b=>{const $=nprogress$1.isStarted();b=clamp(b,nprogress$1.settings.minimum,1),nprogress$1.status=b===1?null:b;const j=nprogress$1.render(!$),Z=j.querySelector(nprogress$1.settings.barSelector),U=nprogress$1.settings.speed,G=nprogress$1.settings.easing;return j.offsetWidth,queue(W=>{css(Z,{transform:"translate3d("+toBarPerc(b)+"%,0,0)",transition:"all "+U+"ms "+G}),b===1?(css(j,{transition:"none",opacity:"1"}),j.offsetWidth,setTimeout(function(){css(j,{transition:"all "+U+"ms linear",opacity:"0"}),setTimeout(function(){nprogress$1.remove(),W()},U)},U)):setTimeout(()=>W(),U)}),nprogress$1},isStarted:()=>typeof nprogress$1.status=="number",start:()=>{nprogress$1.status||nprogress$1.set(0);const b=()=>{setTimeout(()=>{nprogress$1.status&&(nprogress$1.trickle(),b())},nprogress$1.settings.trickleSpeed)};return nprogress$1.settings.trickle&&b(),nprogress$1},done:b=>!b&&!nprogress$1.status?nprogress$1:nprogress$1.inc(.3+.5*Math.random()).set(1),inc:b=>{let $=nprogress$1.status;return $?(typeof b!="number"&&(b=(1-$)*clamp(Math.random()*$,.1,.95)),$=clamp($+b,0,.994),nprogress$1.set($)):nprogress$1.start()},trickle:()=>nprogress$1.inc(Math.random()*nprogress$1.settings.trickleRate),render:b=>{if(nprogress$1.isRendered())return document.getElementById("nprogress");addClass(document.documentElement,"nprogress-busy");const $=document.createElement("div");$.id="nprogress",$.innerHTML=nprogress$1.settings.template;const j=$.querySelector(nprogress$1.settings.barSelector),Z=b?"-100":toBarPerc(nprogress$1.status||0),U=document.querySelector(nprogress$1.settings.parent);return css(j,{transition:"all 0 linear",transform:"translate3d("+Z+"%,0,0)"}),U!==document.body&&addClass(U,"nprogress-custom-parent"),U==null||U.appendChild($),$},remove:()=>{removeClass(document.documentElement,"nprogress-busy"),removeClass(document.querySelector(nprogress$1.settings.parent),"nprogress-custom-parent");const b=document.getElementById("nprogress");b&&removeElement(b)},isRendered:()=>!!document.getElementById("nprogress")},clamp=(b,$,j)=>b<$?$:b>j?j:b,toBarPerc=b=>(-1+b)*100,queue=function(){const b=[];function $(){const j=b.shift();j&&j($)}return function(j){b.push(j),b.length===1&&$()}}(),css=function(){const b=["Webkit","O","Moz","ms"],$={};function j(W){return W.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(Y,X){return X.toUpperCase()})}function Z(W){const Y=document.body.style;if(W in Y)return W;let X=b.length;const nn=W.charAt(0).toUpperCase()+W.slice(1);let an;for(;X--;)if(an=b[X]+nn,an in Y)return an;return W}function U(W){return W=j(W),$[W]||($[W]=Z(W))}function G(W,Y,X){Y=U(Y),W.style[Y]=X}return function(W,Y){for(const X in Y){const nn=Y[X];nn!==void 0&&Object.prototype.hasOwnProperty.call(Y,X)&&G(W,X,nn)}}}(),hasClass=(b,$)=>(typeof b=="string"?b:classList(b)).indexOf(" "+$+" ")>=0,addClass=(b,$)=>{const j=classList(b),Z=j+$;hasClass(j,$)||(b.className=Z.substring(1))},removeClass=(b,$)=>{const j=classList(b);if(!hasClass(b,$))return;const Z=j.replace(" "+$+" "," ");b.className=Z.substring(1,Z.length-1)},classList=b=>(" "+(b.className||"")+" ").replace(/\s+/gi," "),removeElement=b=>{b&&b.parentNode&&b.parentNode.removeChild(b)},vars="",nprogress="",useNprogress=()=>{onMounted(()=>{const b=useRouter(),$=new Set;$.add(b.currentRoute.value.path),b.beforeEach(j=>{$.has(j.path)||nprogress$1.start()}),b.afterEach(j=>{$.add(j.path),nprogress$1.done()})})},clientConfig5=defineClientConfig({setup(){useNprogress()}}),themeData$1=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$BFJD5oyeN8bZGzTb5k5tgeJf3AgWH6Xx7xHgvkE7sbpB7NSHfos72"],"/zh/demo/encrypt.html":["$2a$10$s7VbRs1e9ktZ3Dtr0OB7FeBUHtqleZMu/1OVp8q1.kArmIl6WuFpa"]}},"blog":{"medias":{"Baidu":"https://example.com","BiliBili":"https://example.com","Bitbucket":"https://example.com","Dingding":"https://example.com","Discord":"https://example.com","Dribbble":"https://example.com","Email":"https://example.com","Evernote":"https://example.com","Facebook":"https://example.com","Flipboard":"https://example.com","Gitee":"https://example.com","GitHub":"https://example.com","Gitlab":"https://example.com","Gmail":"https://example.com","Instagram":"https://example.com","Lark":"https://example.com","Lines":"https://example.com","Linkedin":"https://example.com","Pinterest":"https://example.com","Pocket":"https://example.com","QQ":"https://example.com","Qzone":"https://example.com","Reddit":"https://example.com","Rss":"https://example.com","Steam":"https://example.com","Twitter":"https://example.com","Wechat":"https://example.com","Weibo":"https://example.com","Whatsapp":"https://example.com","Youtube":"https://example.com","Zhihu":"https://example.com","MrHope":"https://mrhope.site"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"Edit this page on GitHub"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"收藏"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"author":{"name":"程序员小x","url":"https://zgjsxx.github.io"},"logo":"/logo.svg","repo":"vuepress-theme-hope/vuepress-theme-hope","docsDir":"docs","navbar":["/",{"text":"演示","icon":"discover","link":"/demo/"},{"text":"博文","icon":"edit","prefix":"/posts/","children":[{"text":"计算机网络","icon":"edit","link":"network"},{"text":"c++","icon":"edit","link":"Program_language/cpp"},{"text":"设计模式","icon":"edit","link":"design-pattern"},{"text":"工具","icon":"edit","link":"tool"},{"text":"编译原理","icon":"edit","link":"Linux/compile"},{"text":"Linux-0.11详解","icon":"edit","link":"Linux/kernel/Linux-0.11"},{"text":"Linux应用层开发","icon":"edit","link":"Linux/application-dev"}]},{"text":"每日一文","icon":"note","link":"https://meiriyiwen.com/"},{"text":"关于作者","icon":"about","link":"/posts/about/about"}],"sidebar":{"/posts/Linux/kernel/Linux-0.11":[{"text":"Linux-0.11详解","icon":"info","prefix":"","link":"","children":["Linux-0.11","Linux-0.11-assemble-language","Linux-0.11-boot-bootsect","Linux-0.11-boot-head","Linux-0.11-boot-setup","Linux-0.11-fs-bitmap","Linux-0.11-fs-block_dev","Linux-0.11-fs-buffer","Linux-0.11-fs-char_dev","Linux-0.11-fs-exec","Linux-0.11-fs-fcntl","Linux-0.11-fs-file_dev","Linux-0.11-fs-inode","Linux-0.11-fs-ioctl","Linux-0.11-fs-namei","Linux-0.11-fs-open","Linux-0.11-fs-pipe","Linux-0.11-fs-read_write","Linux-0.11-fs-stat","Linux-0.11-fs-super","Linux-0.11-fs-truncate","Linux-0.11-init-main","Linux-0.11-kernel-asm","Linux-0.11-kernel-exit","Linux-0.11-kernel-fork","Linux-0.11-kernel-ll-rw-blk","Linux-0.11-kernel-mktime","Linux-0.11-kernel-hd","Linux-0.11-kernel-panic","Linux-0.11-kernel-printk","Linux-0.11-kernel-sched","Linux-0.11-kernel-signal","Linux-0.11-kernel-sys","Linux-0.11-kernel-system_call","Linux-0.11-kernel-trap","Linux-0.11-kernel-tty_ioctl","Linux-0.11-kernel-tty-io","Linux-0.11-mm-memory","Linux-0.11-mm-page"]}],"/posts/Linux/compile":[{"text":"编译原理","icon":"info","prefix":"","link":"","children":["got_plt"]}],"/posts/network":[{"text":"计算机网络","icon":"info","prefix":"","link":"","children":["http-introduction"]}],"/posts/design-pattern":[{"text":"设计模式","icon":"info","prefix":"","link":"","children":["adapter","command","Interpreter","strategy"]}],"/posts/Program_language/cpp":[{"text":"c++","icon":"info","prefix":"","link":"","children":["cpp_externC","cpp11_thread","cpp_special_function","cpp11_condition_var_issue","placement_operator_new","cpp_realize_defer","effective-cpp"]}],"/posts/Program_language/cpp/effective-cpp":[{"text":"c++","icon":"info","prefix":"","link":"","children":["effective-cpp-01","effective-cpp-02","effective-cpp-03","effective-cpp-04","effective-cpp-05","effective-cpp-06","effective-cpp-07","effective-cpp-08","effective-cpp-09","effective-cpp-10","effective-cpp-11","effective-cpp-12","effective-cpp-13","effective-cpp-14","effective-cpp-15","effective-cpp-16","effective-cpp-17","effective-cpp-18","effective-cpp-19","effective-cpp-20","effective-cpp-21","effective-cpp-22","effective-cpp-23","effective-cpp-24","effective-cpp-25","effective-cpp-26","effective-cpp-27","effective-cpp-28","effective-cpp-29","effective-cpp-30","effective-cpp-31","effective-cpp-32","effective-cpp-33","effective-cpp-34","effective-cpp-35","effective-cpp-36","effective-cpp-37","effective-cpp-38","effective-cpp-39","effective-cpp-40","effective-cpp-41","effective-cpp-42","effective-cpp-43","effective-cpp-44","effective-cpp-45","effective-cpp-46","effective-cpp-47","effective-cpp-48","effective-cpp-49","effective-cpp-50","effective-cpp-51","effective-cpp-52","effective-cpp-53","effective-cpp-54"]}],"/posts/tool":[{"text":"工具","icon":"info","prefix":"","link":"","children":["how-to-configure-git-with-multiple-user","makefile-knowledge","utf8-gbk","how-to-control-stop-flow-in-systemd"]}],"/posts/Linux/application-dev":[{"text":"Linux应用层开发","icon":"info","prefix":"","link":"","children":["exit-unlock-mutex","how-to-get-environ","mutex-with-fork","mutex-with-fork2"]}]},"footer":"Code Building","displayFooter":true,"blog":{"description":"A c++ programmer","intro":"/intro.html"}}}}'),themeData=ref(themeData$1),useThemeData$1=()=>themeData,themeLocaleDataSymbol=Symbol(""),useThemeLocaleData$1=()=>{const b=inject(themeLocaleDataSymbol);if(!b)throw new Error("useThemeLocaleData() is called without provider.");return b},resolveThemeLocaleData=(b,$)=>{var j;return{...b,...(j=b.locales)==null?void 0:j[$]}},clientConfig6=defineClientConfig({enhance({app:b}){const $=useThemeData$1(),j=b._context.provides[routeLocaleSymbol],Z=computed(()=>resolveThemeLocaleData($.value,j.value));b.provide(themeLocaleDataSymbol,Z),Object.defineProperties(b.config.globalProperties,{$theme:{get(){return $.value}},$themeLocale:{get(){return Z.value}}})}}),giscus="",e$2={provider:"Giscus",lightTheme:"https://unpkg.com/vuepress-theme-hope@next/templates/giscus/light.css",darkTheme:"https://unpkg.com/vuepress-theme-hope@next/templates/giscus/dark.css",repo:"vuepress-theme-hope/giscus-discussions",repoId:"R_kgDOG_Pt2A",category:"Announcements",categoryId:"DIC_kwDOG_Pt2M4COD69"},k$5=Boolean(e$2.categoryId),i$2=["de","gsw","en","es","fr","id","it","ja","ko","pl","ro","ru","tr","vi","zh-CN","zh-TW"];var P$4=defineComponent({name:"GiscusComment",props:{darkmode:Boolean},setup(b){const $=usePageFrontmatter(),j=useRoute(),Z=ref(!1),U=computed(()=>{const Y=usePageLang().value;if(i$2.includes(Y))return Y;const X=Y.split("-")[0];return i$2.includes(X)?X:"en"}),G=computed(()=>{if(!k$5)return!1;const Y=e$2.comment!==!1,X=$.value.comment;return Boolean(X)||Y!==!1&&X!==!1}),W=computed(()=>({repo:e$2.repo,repoId:e$2.repoId,category:e$2.category,categoryId:e$2.categoryId,lang:U.value,theme:b.darkmode?e$2.darkTheme:e$2.lightTheme,mapping:e$2.mapping||"pathname",term:withBase(j.path),inputPosition:e$2.inputPosition||"top",reactionsEnabled:e$2.reactionsEnabled!==!1?"1":"0",strict:e$2.strict!==!1?"1":"0",loading:e$2.lazyLoading!==!1?"lazy":"eager",emitMetadata:"0"}));return onMounted(async()=>{await __vitePreload(()=>import("./giscus-6650c2d9.js"),[]),Z.value=!0}),()=>h$4("div",{class:["giscus-wrapper",{"input-top":e$2.inputPosition!=="bottom"}],style:{display:G.value?"block":"none"}},Z.value?h$4("giscus-widget",W.value):h$4("div",{style:"text-align:center"},"Loading..."))}});const l$2={provider:"Giscus",lightTheme:"https://unpkg.com/vuepress-theme-hope@next/templates/giscus/light.css",darkTheme:"https://unpkg.com/vuepress-theme-hope@next/templates/giscus/dark.css",repo:"vuepress-theme-hope/giscus-discussions",repoId:"R_kgDOG_Pt2A",category:"Announcements",categoryId:"DIC_kwDOG_Pt2M4COD69"}.comment!==!1;var s$1=defineClientConfig({enhance:({app:b})=>{const $=defineComponent({name:"CommentService",props:{darkmode:Boolean},setup(j){const Z=usePageFrontmatter(),U=computed(()=>Z.value.comment||l$2&&Z.value.comment!==!1);return()=>h$4(P$4,{darkmode:j.darkmode,style:{display:U.value?"block":"none"}})}});b.component("CommentService",$)}});const message="",balloon="",button="",L$2=800,S$4=2e3,_$2={"/":{copy:"复制代码",copied:"已复制",hint:"复制成功"}},d$3='.theme-hope-content div[class*="language-"] pre',g$2=!1,w$2=async b=>{try{return navigator.clipboard.writeText(b)}catch{const $=document.createElement("textarea"),j=document.activeElement;$.value=b,$.setAttribute("readonly",""),$.style.contain="strict",$.style.position="absolute",$.style.left="-9999px",$.style.fontSize="12pt";const Z=document.getSelection(),U=Z?Z.rangeCount>0&&Z.getRangeAt(0):null;document.body.appendChild($),$.select(),$.selectionStart=0,$.selectionEnd=b.length,document.execCommand("copy"),document.body.removeChild($),U&&(Z.removeAllRanges(),Z.addRange(U)),j&&j.focus()}},P$3='<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#06a35a"><path d="M822.812 824.618c-83.076 81.992-188.546 124.614-316.05 127.865-122.085-3.251-223.943-45.873-305.935-127.865S76.213 640.406 72.962 518.682c3.251-127.503 45.873-232.973 127.865-316.05 81.992-83.075 184.211-126.058 305.936-129.309 127.503 3.251 232.973 46.234 316.049 129.31 83.076 83.076 126.059 188.546 129.31 316.05-2.89 121.723-46.234 223.943-129.31 305.935zM432.717 684.111c3.973 3.974 8.307 5.78 13.364 6.14 5.057.362 9.753-1.444 13.365-5.417l292.57-287.515c3.974-3.973 5.78-8.307 5.78-13.364s-1.806-9.753-5.78-13.365l1.807 1.806c-3.973-3.973-8.669-5.779-14.087-6.14-5.418-.361-10.475 1.445-14.809 5.418L460.529 592.006c-3.973 3.25-8.669 4.695-14.448 4.695-5.78 0-10.836-1.445-15.531-3.973l-94.273-72.962c-4.335-3.251-9.392-4.335-14.448-3.973s-9.392 3.25-12.642 7.585l-2.89 3.973c-3.25 4.334-4.334 9.391-3.973 14.81.722 5.417 2.528 10.113 5.779 14.086L432.717 684.11z"/></svg>',C$3=()=>navigator?/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/iu.test(navigator.userAgent):!1,p$3=new Map,x$2=()=>{const b=useRoute(),$=kt$1(_$2);let j;const Z=W=>{if(!W.hasAttribute("copy-code-registered")){const Y=document.createElement("button");Y.classList.add("copy-code-button"),Y.innerHTML='<div class="copy-icon" />',Y.setAttribute("aria-label",$.value.copy),Y.setAttribute("data-copied",$.value.copied),Y.setAttribute("data-balloon-pos","left"),W.parentElement&&W.parentElement.insertBefore(Y,W),W.setAttribute("copy-code-registered","")}},U=()=>{setTimeout(()=>{isString$2(d$3)?document.querySelectorAll(d$3).forEach(Z):isArray(d$3)&&d$3.forEach(W=>{document.querySelectorAll(W).forEach(Z)})},L$2)},G=(W,Y,X)=>{let{innerText:nn=""}=Y;/language-(shellscript|shell|bash|sh|zsh)/.test(W.classList.toString())&&(nn=nn.replace(/^ *(\$|>) /gm,"")),w$2(nn).then(()=>{X.classList.add("copied"),clearTimeout(p$3.get(X));const an=setTimeout(()=>{X.classList.remove("copied"),X.blur(),p$3.delete(X)},2e3);p$3.set(X,an),j.pop(`${P$3}<span>${$.value.hint} 🎉</span>`,S$4)})};onMounted(()=>{j=new Pt,(!C$3()||g$2)&&U(),window.addEventListener("click",W=>{const Y=W.target;if(Y.matches('div[class*="language-"] > button.copy')){const X=Y.parentElement,nn=Y.nextElementSibling;nn&&G(X,nn,Y)}else if(Y.matches('div[class*="language-"] div.copy-icon')){const X=Y.parentElement,nn=X.parentElement,an=X.nextElementSibling;an&&G(nn,an,X)}}),watch(()=>b.path,()=>{(!C$3()||g$2)&&U()})})};var D$1=defineClientConfig({setup:()=>{x$2()}});const chart="",LoadingIcon$1=()=>h$4(P$5,{name:"loading"},()=>["0s","-0.333s","-0.667s"].map(b=>h$4("circle",{cx:512,cy:512,r:0,fill:"none",stroke:"currentColor","stroke-width":"20"},[h$4("animate",{attributeName:"r",repeatCount:"indefinite",dur:"1s",values:"0;400",keyTimes:"0;1",keySplines:"0 0.2 0.8 1",calcMode:"spline",begin:b}),h$4("animate",{attributeName:"opacity",repeatCount:"indefinite",dur:"1s",values:"1;0",keyTimes:"0;1",keySplines:"0.2 0 0.8 1",calcMode:"spline",begin:b})]))),parseChartConfig=(config,type)=>{if(type==="json")return JSON.parse(config);const exports={},module={exports};return eval(config),module.exports};var ChartJS=defineComponent({name:"ChartJS",props:{config:{type:String,required:!0},id:{type:String,required:!0},title:{type:String,default:""},type:{type:String,default:"json"}},setup(b){const $=ref(),j=ref(),Z=ref(!0);return onMounted(()=>{Promise.all([__vitePreload(()=>import("./auto-f37428bb.js"),[]),new Promise(U=>setTimeout(U,800))]).then(([{default:U}])=>{U.defaults.maintainAspectRatio=!1;const G=parseChartConfig(Bt$1(b.config),b.type),W=j.value.getContext("2d");new U(W,G),Z.value=!1})}),()=>[b.title?h$4("div",{class:"chart-title"},decodeURIComponent(b.title)):null,Z.value?h$4("div",{class:"chart-loading-wrapper"},h$4(LoadingIcon$1)):null,h$4("div",{ref:$,class:"chart-wrapper",id:b.id,style:{display:Z.value?"none":"block"}},h$4("canvas",{ref:j,height:400}))]}});const codeTabs="",o$2=useStorage$1("VUEPRESS_CODE_TAB_STORE",{});var S$3=defineComponent({name:"CodeTabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},setup(b,{slots:$}){const j=ref(b.active),Z=ref([]),U=()=>{if(b.tabId){const{title:nn,id:an=nn}=b.data[j.value];o$2.value[b.tabId]=an}},G=(nn=j.value)=>{j.value=nn<Z.value.length-1?nn+1:0,Z.value[j.value].focus()},W=(nn=j.value)=>{j.value=nn>0?nn-1:Z.value.length-1,Z.value[j.value].focus()},Y=(nn,an)=>{if(nn.key===" "||nn.key==="Enter"?(nn.preventDefault(),j.value=an):nn.key==="ArrowRight"?(nn.preventDefault(),G()):nn.key==="ArrowLeft"&&(nn.preventDefault(),W()),b.tabId){const{title:tn,id:sn=tn}=b.data[j.value];o$2.value[b.tabId]=sn}},X=()=>{if(b.tabId){const nn=b.data.findIndex(({title:an,id:tn=an})=>o$2.value[b.tabId]===tn);if(nn!==-1)return nn}return b.active};return onMounted(()=>{j.value=X(),watch(()=>o$2.value[b.tabId],(nn,an)=>{if(b.tabId&&nn!==an){const tn=b.data.findIndex(({title:sn,id:on=sn})=>on===nn);tn!==-1&&(j.value=tn)}})}),()=>b.data.length?h$4("div",{class:"code-tabs"},[h$4("div",{class:"code-tabs-nav",role:"tablist"},b.data.map(({title:nn},an)=>{const tn=an===j.value;return h$4("button",{ref:sn=>{sn&&(Z.value[an]=sn)},class:["code-tabs-nav-tab",{active:tn}],role:"tab","aria-controls":`codetab-${b.id}-${an}`,"aria-selected":tn,onClick:()=>{j.value=an,U()},onKeydown:sn=>Y(sn,an)},nn)})),b.data.map(({title:nn,id:an=nn},tn)=>{var sn;const on=tn===j.value;return h$4("div",{class:["code-tab",{active:on}],id:`codetab-${b.id}-${tn}`,role:"tabpanel","aria-expanded":on},(sn=$[`tab${tn}`])==null?void 0:sn.call($,{title:nn,value:an,isActive:on}))})]):null}});const index$2="",codeDemo="",M$1=()=>h$4(P$5,{name:"loading"},()=>["0s","-0.333s","-0.667s"].map(b=>h$4("circle",{cx:512,cy:512,r:0,fill:"none",stroke:"currentColor","stroke-width":"20"},[h$4("animate",{attributeName:"r",repeatCount:"indefinite",dur:"1s",values:"0;400",keyTimes:"0;1",keySplines:"0 0.2 0.8 1",calcMode:"spline",begin:b}),h$4("animate",{attributeName:"opacity",repeatCount:"indefinite",dur:"1s",values:"1;0",keyTimes:"0;1",keySplines:"0.2 0 0.8 1",calcMode:"spline",begin:b})]))),O$1='<svg class="codepen-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="200" height="200"><path d="M123.429 668L468 897.714V692.571L277.143 565.143zM88 585.714L198.286 512 88 438.286v147.428zm468 312L900.571 668 746.857 565.143 556 692.57v205.143zM512 616l155.429-104L512 408 356.571 512zM277.143 458.857L468 331.43V126.286L123.429 356zM825.714 512L936 585.714V438.286zm-78.857-53.143L900.571 356 556 126.286v205.143zM1024 356v312q0 23.429-19.429 36.571l-468 312Q524.571 1024 512 1024t-24.571-7.429l-468-312Q0 691.43 0 668V356q0-23.429 19.429-36.571l468-312Q499.429 0 512 0t24.571 7.429l468 312Q1024 332.57 1024 356z"/></svg>',N$1='<svg class="jsfiddle-icon" viewBox="0 0 1170 1024" xmlns="http://www.w3.org/2000/svg" width="228.516" height="200"><path d="M1028.571 441.143q63.429 26.286 102.572 83.143t39.143 126.571q0 93.714-67.429 160.286T940 877.714q-2.286 0-6.571-.285t-6-.286H232q-97.143-5.714-164.571-71.714T0 645.143q0-62.857 31.429-116t84-84q-6.858-22.286-6.858-46.857 0-65.715 46.858-112T269.143 240q54.286 0 98.286 33.143 42.857-88 127.142-141.714t186.572-53.715q94.857 0 174.857 46t126.571 124.857 46.572 172q0 3.429-.286 10.286t-.286 10.286zm-761.142 152q0 69.714 48 110.286T434.286 744q78.285 0 137.143-56.571-9.143-11.429-27.143-32.286t-24.857-28.857q-38.286 37.143-82.286 37.143-31.429 0-53.429-19.143t-22-50q0-30.286 22-49.715T436 525.143q25.143 0 48.286 12T526 568.57t37.143 42.858 39.428 46.857 44 42.857T702 732.57t69.429 12q69.142 0 116.857-40.857T936 594.857q0-69.143-48-109.714T769.714 444.57Q688 444.571 632 500l53.143 61.714q37.714-36.571 81.143-36.571 29.714 0 52.571 18.857t22.857 48q0 32.571-21.143 52.286T766.857 664q-24.571 0-47.143-12t-41.143-31.429-37.428-42.857-39.714-46.857T557.143 488 502 456.571t-67.714-12q-69.715 0-118.286 40.286t-48.571 108.286z"/></svg>',L$1={useBabel:!1,jsLib:[],cssLib:[],codepenLayout:"left",codepenEditors:"101",babel:"https://unpkg.com/@babel/standalone/babel.min.js",vue:"https://unpkg.com/vue/dist/vue.global.prod.js",react:"https://unpkg.com/react/umd/react.production.min.js",reactDOM:"https://unpkg.com/react-dom/umd/react-dom.production.min.js"},C$2={html:{types:["html","slim","haml","md","markdown","vue"],map:{html:"none",vue:"none",md:"markdown"}},js:{types:["js","javascript","coffee","coffeescript","ts","typescript","ls","livescript"],map:{js:"none",javascript:"none",coffee:"coffeescript",ls:"livescript",ts:"typescript"}},css:{types:["css","less","sass","scss","stylus","styl"],map:{css:"none",styl:"stylus"}}},A$2=(b,$,j)=>{const Z=document.createElement(b);return $&&Object.keys($).forEach(U=>{if(U.indexOf("data"))Z[U]=$[U];else{const G=U.replace("data","");Z.dataset[G]=$[U]}}),j&&j.forEach(U=>{Z.appendChild(U)}),Z},w$1=b=>({...L$1,...b,jsLib:Array.from(new Set([...L$1.jsLib||[],...b.jsLib||[]])),cssLib:Array.from(new Set([...L$1.cssLib||[],...b.cssLib||[]]))}),v$1=(b,$)=>{if(b[$]!==void 0)return b[$];const j=new Promise(Z=>{var U;const G=document.createElement("script");G.src=$,(U=document.querySelector("body"))==null||U.appendChild(G),G.onload=()=>{Z()}});return b[$]=j,j},k$4=(b,$)=>{if($.css&&Array.from(b.childNodes).every(j=>j.nodeName!=="STYLE")){const j=A$2("style",{innerHTML:$.css});b.appendChild(j)}},D=(b,$,j)=>{const Z=j.getScript();if(Z&&Array.from($.childNodes).every(U=>U.nodeName!=="SCRIPT")){const U=document.createElement("script");U.appendChild(document.createTextNode(`{const document=window.document.querySelector('#${b} .code-demo-container').shadowRoot;
${Z}}`)),$.appendChild(U)}},R$1=b=>{const $=Object.keys(b),j={html:[],js:[],css:[],isLegal:!1};return["html","js","css"].forEach(Z=>{const U=$.filter(G=>C$2[Z].types.includes(G));if(U.length){const G=U[0];j[Z]=[b[G].replace(/^\n|\n$/g,""),C$2[Z].map[G]||G]}}),j.isLegal=(!j.html.length||j.html[1]==="none")&&(!j.js.length||j.js[1]==="none")&&(!j.css.length||j.css[1]==="none"),j},x$1=b=>b.replace(/<br \/>/g,"<br>").replace(/<((\S+)[^<]*?)\s+\/>/g,"<$1></$2>"),_$1=b=>`<div id="app">
${x$1(b)}
</div>`,B=b=>`${b.replace("export default ","const $reactApp = ").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,"")};
ReactDOM.createRoot(document.getElementById("app")).render(React.createElement($reactApp))`,V=b=>b.replace(/export\s+default\s*\{(\n*[\s\S]*)\n*\}\s*;?$/u,"Vue.createApp({$1}).mount('#app')").replace(/export\s+default\s*define(Async)?Component\s*\(\s*\{(\n*[\s\S]*)\n*\}\s*\)\s*;?$/u,"Vue.createApp({$1}).mount('#app')").trim(),q=b=>`(function(exports){var module={};module.exports=exports;${b};return module.exports.__esModule?module.exports.default:module.exports;})({})`,z=(b,$)=>{const j=w$1($),Z=b.js[0]||"";return{...j,html:x$1(b.html[0]||""),js:Z,css:b.css[0]||"",isLegal:b.isLegal,getScript:()=>{var U;return j.useBabel?((U=window.Babel.transform(Z,{presets:["es2015"]}))==null?void 0:U.code)||"":Z}}},P$2=(b,$)=>{const j=w$1($),Z=b.html[0]||"",U=/<template>([\s\S]+)<\/template>/u.exec(Z),G=/<script(\s*lang=(['"])(.*?)\2)?>([\s\S]+)<\/script>/u.exec(Z),W=/<style(\s*lang=(['"])(.*?)\2)?\s*(?:scoped)?>([\s\S]+)<\/style>/u.exec(Z),Y=U?U[1].replace(/^\n|\n$/g,""):"",[X="",nn=""]=G?[G[4].replace(/^\n|\n$/g,""),G[3]]:[],[an="",tn=""]=W?[W[4].replace(/^\n|\n$/g,""),W[3]]:[],sn=nn===""&&(tn===""||tn==="css");return{...j,html:_$1(Y),js:V(X),css:an,isLegal:sn,jsLib:[j.vue,...j.jsLib],getScript:()=>{var on,pn;const en=$.useBabel?((pn=(on=window.Babel)==null?void 0:on.transform(X,{presets:["es2015"]}))==null?void 0:pn.code)||"":X.replace(/export\s+default/u,"return");return`const app=window.document.createElement('div');document.firstElementChild.appendChild(app);const appOptions=${q(en)};appOptions.template=\`${Y.replace("`",'\\`"')}\`;window.Vue.createApp(appOptions).mount(app);`}}},H$2=(b,$)=>{const j=w$1($);return{...j,html:_$1(""),js:B(b.js[0]||""),css:b.css[0]||(b.js[0]?b.js[0].replace(/App\.__style__(?:\s*)=(?:\s*)`([\s\S]*)?`/,"$1").trim():""),isLegal:b.isLegal,jsLib:[j.react,j.reactDOM,...j.jsLib],jsx:!0,getScript:()=>{var Z,U;const G=((U=(Z=window.Babel)==null?void 0:Z.transform(b.js[0]||"",{presets:["es2015","react"]}))==null?void 0:U.code)||"";return`window.ReactDOM.createRoot(document.firstElementChild).render(window.React.createElement(${q(G)}))`}}},h$2={},I$2=b=>Promise.all([v$1(h$2,b.babel),v$1(h$2,b.react),v$1(h$2,b.reactDOM)]),J=b=>{const $=[v$1(h$2,b.vue)];return b.useBabel&&$.push(v$1(h$2,b.babel)),Promise.all($)},Q=b=>b.useBabel?v$1(h$2,b.babel):Promise.resolve();var F$1=defineComponent({name:"CodeDemo",props:{id:{type:String,required:!0},type:{type:String,default:"normal"},title:{type:String,default:""},config:{type:String,default:""},code:{type:String,required:!0}},setup(b,{slots:$}){const j=ref(!1),Z=ref(),U=ref(),G=ref("0"),W=ref(!1),Y=computed(()=>JSON.parse(b.config?Bt$1(b.config):"{}")),X=computed(()=>{const on=JSON.parse(Bt$1(b.code));return R$1(on)}),nn=computed(()=>b.type==="react"?H$2(X.value,Y.value):b.type==="vue"?P$2(X.value,Y.value):z(X.value,Y.value)),an=computed(()=>nn.value.isLegal),tn=(on=!1)=>{const pn=Z.value.attachShadow({mode:"open"}),en=document.createElement("div");en.classList.add("code-demo-app"),pn.appendChild(en),an.value?(on&&(en.innerHTML=nn.value.html),k$4(pn,nn.value),D(b.id,pn,nn.value),G.value="0"):G.value="auto",W.value=!0},sn=()=>{switch(b.type){case"react":return I$2(nn.value).then(()=>tn());case"vue":return J(nn.value).then(()=>tn());default:return Q(nn.value).then(()=>tn(!0))}};return onMounted(()=>{setTimeout(()=>{sn()},800)}),()=>{var on;return h$4("div",{class:"code-demo-wrapper",id:b.id},[W.value?null:h$4("div",{class:"loading"},h$4(M$1)),h$4("div",{class:"code-demo-header"},[nn.value.isLegal?h$4("button",{class:["toggle-button",j.value?"down":"right"],onClick:()=>{G.value=j.value?"0":`${U.value.clientHeight+13.8}px`,j.value=!j.value}}):null,b.title?h$4("span",{class:"title"},decodeURIComponent(b.title)):null,nn.value.isLegal&&nn.value.jsfiddle!==!1?h$4("form",{class:"code-demo-jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[h$4("input",{type:"hidden",name:"html",value:nn.value.html}),h$4("input",{type:"hidden",name:"js",value:nn.value.js}),h$4("input",{type:"hidden",name:"css",value:nn.value.css}),h$4("input",{type:"hidden",name:"wrap",value:"1"}),h$4("input",{type:"hidden",name:"panel_js",value:"3"}),h$4("input",{type:"hidden",name:"resources",value:[...nn.value.cssLib,...nn.value.jsLib].join(",")}),h$4("button",{type:"submit",class:"jsfiddle-button",innerHTML:N$1,"aria-label":"JSFiddle","data-balloon-pos":"up"})]):null,!nn.value.isLegal||nn.value.codepen!==!1?h$4("form",{class:"code-demo-codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[h$4("input",{type:"hidden",name:"data",value:JSON.stringify({html:nn.value.html,js:nn.value.js,css:nn.value.css,js_external:nn.value.jsLib.join(";"),css_external:nn.value.cssLib.join(";"),layout:nn.value.codepenLayout,html_pre_processor:X.value?X.value.html[1]:"none",js_pre_processor:X.value?X.value.js[1]:nn.value.jsx?"babel":"none",css_pre_processor:X.value?X.value.css[1]:"none",editors:nn.value.codepenEditors})}),h$4("button",{type:"submit",innerHTML:O$1,class:"codepen-button","aria-label":"Codepen","data-balloon-pos":"up"})]):null]),h$4("div",{ref:Z,class:"code-demo-container",style:{display:an.value&&W.value?"block":"none"}}),h$4("div",{class:"code-demo-code-wrapper",style:{height:G.value}},h$4("div",{ref:U,class:"code-demo-codes"},(on=$.default)==null?void 0:on.call($)))])}}});const echarts="",LoadingIcon=()=>h$4(P$5,{name:"loading"},()=>["0s","-0.333s","-0.667s"].map(b=>h$4("circle",{cx:512,cy:512,r:0,fill:"none",stroke:"currentColor","stroke-width":"20"},[h$4("animate",{attributeName:"r",repeatCount:"indefinite",dur:"1s",values:"0;400",keyTimes:"0;1",keySplines:"0 0.2 0.8 1",calcMode:"spline",begin:b}),h$4("animate",{attributeName:"opacity",repeatCount:"indefinite",dur:"1s",values:"1;0",keyTimes:"0;1",keySplines:"0.2 0 0.8 1",calcMode:"spline",begin:b})]))),parseEChartsConfig=(config,type)=>{if(type==="js"){const exports={},module={exports};return eval(config),module.exports}return JSON.parse(config)};var ECharts=defineComponent({name:"ECharts",props:{config:{type:String,required:!0},id:{type:String,required:!0},title:{type:String,default:""},type:{type:String,default:"json"}},setup(b){const $=ref();let j;const Z=ref(!0);return onMounted(()=>{Promise.all([__vitePreload(()=>import("./index-8764208e.js"),[]),new Promise(U=>setTimeout(U,800))]).then(([U])=>{const G=parseEChartsConfig(Bt$1(b.config),b.type);j=U.init($.value),j.showLoading(),j.setOption(G),j.hideLoading(),Z.value=!1}),useEventListener$1("resize",useDebounceFn$1(()=>j==null?void 0:j.resize(),100))}),onBeforeUnmount(()=>{j==null||j.dispose()}),()=>[b.title?h$4("div",{class:"echarts-title"},decodeURIComponent(b.title)):null,Z.value?h$4("div",{class:"echarts-loading-wrapper"},h$4(LoadingIcon)):null,h$4("div",{ref:$,class:"echarts-wrapper",id:b.id})]}});const figure="",flowchart="",y$1=()=>h$4(P$5,{name:"loading"},()=>["0s","-0.333s","-0.667s"].map(b=>h$4("circle",{cx:512,cy:512,r:0,fill:"none",stroke:"currentColor","stroke-width":"20"},[h$4("animate",{attributeName:"r",repeatCount:"indefinite",dur:"1s",values:"0;400",keyTimes:"0;1",keySplines:"0 0.2 0.8 1",calcMode:"spline",begin:b}),h$4("animate",{attributeName:"opacity",repeatCount:"indefinite",dur:"1s",values:"1;0",keyTimes:"0;1",keySplines:"0.2 0 0.8 1",calcMode:"spline",begin:b})])));var a$1={x:0,y:0,"line-width":2,"line-length":40,"text-margin":8,"font-size":14,"font-color":"#8DA1AC","line-color":"#8DA1AC","element-color":"black",fill:"white","yes-text":"Yes","no-text":"No","arrow-end":"block",scale:1},F={...a$1,symbols:{start:{class:"start-element","font-color":"#fff",fill:"#595959","line-width":"0px"},end:{class:"end-element","font-color":"#fff",fill:"#595959","line-width":"0px"},operation:{class:"operation-element","font-color":"#fff",fill:"#1890ff","line-width":"0px"},inputoutput:{class:"inputoutput-element","font-color":"#fff",fill:"#1890ff","line-width":"0px"},subroutine:{class:"subroutine-element","font-color":"#fff",fill:"#FF485E","element-color":"#fff","line-color":"red"},condition:{class:"condition-element","font-color":"#fff",fill:"#FF485E","line-width":"0px"},parallel:{class:"parallel-element","font-color":"#fff",fill:"#1890ff","line-width":"0px"}}},C$1={...a$1,"line-width":1,symbols:{start:{class:"start-element",fill:"#ccc","line-width":"1px","line-color":"#5c6ac4","font-color":"#000"},end:{class:"end-element",fill:"#ccc","line-width":"1px","line-color":"#5c6ac4","font-color":"#000"},operation:{class:"operation-element",fill:"#f1f1f1","line-width":"1px","line-color":"#5c6ac4","font-color":"#000"},inputoutput:{class:"inputoutput-element",fill:"#f1f1f1","line-width":"1px","line-color":"#5c6ac4","font-color":"#000"},subroutine:{class:"subroutine-element",fill:"#f1f1f1","line-width":"1px","line-color":"#5c6ac4","font-color":"#000"},condition:{class:"condition-element",fill:"#f1f1f1","line-width":"1px","line-color":"#5c6ac4","font-color":"#000"},parallel:{class:"parallel-element",fill:"#f1f1f1","line-width":"1px","line-color":"#5c6ac4","font-color":"#000"}}},g$1={...a$1,symbols:{start:{class:"start-element","font-color":"#fff",fill:"#2F495F","line-width":"0px"},end:{class:"end-element","font-color":"#fff",fill:"#2F495F","line-width":"0px"},operation:{class:"operation-element","font-color":"#fff",fill:"#00BC7D","line-width":"0px"},inputoutput:{class:"inputoutput-element","font-color":"#fff",fill:"#EB4D5D","line-width":"0px"},subroutine:{class:"subroutine-element","font-color":"#fff",fill:"#937AC4","element-color":"#fff","line-color":"red"},condition:{class:"condition-element","font-color":"#fff",fill:"#FFB500","line-width":"0px"},parallel:{class:"parallel-element","font-color":"#fff",fill:"#2F495F","line-width":"0px"}}},p$2={ant:F,vue:g$1,pie:C$1},k$3=defineComponent({name:"FlowChart",props:{code:{type:String,required:!0},id:{type:String,required:!0},preset:{type:String,default:"vue"}},setup(b){let $;const j=ref(),Z=ref(!0),U=ref(1),G=computed(()=>p$2[b.preset]||(console.warn(`[md-enhance:flowchart] Unknown preset: ${b.preset}`),p$2.vue)),W=Y=>Y<419?.8:Y>1280?1:.9;return onMounted(()=>{Promise.all([__vitePreload(()=>import("./flowchart.parse-0007e96c.js").then(Y=>Y.f),[]),new Promise(Y=>setTimeout(Y,800))]).then(([{default:Y}])=>{$=Y(Bt$1(b.code)),U.value=W(window.innerWidth),Z.value=!1,$.drawSVG(b.id,{...G.value,scale:U.value}),useEventListener$1("resize",useDebounceFn$1(()=>{const X=W(window.innerWidth);U.value!==X&&(U.value=X,$.drawSVG(b.id,{...G.value,scale:X}))},100))})}),()=>[Z.value?h$4("div",{class:"flowchart-loading-wrapper"},h$4(y$1)):null,h$4("div",{ref:j,class:["flowchart-wrapper",b.preset],id:b.id,style:{display:Z.value?"none":"block"}})]}});const footnote="",imageMark="",mermaid="",M=()=>h$4(P$5,{name:"loading"},()=>["0s","-0.333s","-0.667s"].map(b=>h$4("circle",{cx:512,cy:512,r:0,fill:"none",stroke:"currentColor","stroke-width":"20"},[h$4("animate",{attributeName:"r",repeatCount:"indefinite",dur:"1s",values:"0;400",keyTimes:"0;1",keySplines:"0 0.2 0.8 1",calcMode:"spline",begin:b}),h$4("animate",{attributeName:"opacity",repeatCount:"indefinite",dur:"1s",values:"1;0",keyTimes:"0;1",keySplines:"0.2 0 0.8 1",calcMode:"spline",begin:b})]))),k$2=b=>({dark:b,background:b?"#1e1e1e":"#fff",primaryColor:b?"#389d70":"#4abf8a",primaryBorderColor:b?"#389d70":"#4abf8a",primaryTextColor:"#fff",secondaryColor:"#ffb500",secondaryBorderColor:b?"#fff":"#000",secondaryTextColor:b?"#ddd":"#333",tertiaryColor:b?"#282828":"#efeef4",tertiaryBorderColor:b?"#bbb":"#242424",tertiaryTextColor:b?"#ddd":"#333",noteBkgColor:b?"#f6d365":"#fff5ad",noteTextColor:"#242424",noteBorderColor:b?"#f6d365":"#333",lineColor:b?"#d3d3d3":"#333",textColor:b?"#fff":"#242424",mainBkg:b?"#389d70":"#4abf8a",errorBkgColor:"#eb4d5d",errorTextColor:"#fff",nodeBorder:b?"#389d70":"#4abf8a",nodeTextColor:b?"#fff":"#242424",signalTextColor:b?"#9e9e9e":"#242424",classText:"#fff",labelColor:"#fff",fillType0:b?"#cf1322":"#f1636e",fillType1:"#f39c12",fillType2:"#2ecc71",fillType3:"#fa541c",fillType4:"#25a55b",fillType5:"#13c2c2",fillType6:"#096dd9",fillType7:"#aa6fe9"});var w=defineComponent({name:"Mermaid",props:{id:{type:String,required:!0},code:{type:String,required:!0}},setup(b){const $=ref(""),j=ref(),Z=ref(!1);let U=null;return onMounted(()=>{const G=document.querySelector("html"),W=Bt$1(b.code),Y=()=>G.classList.contains("dark")||G.getAttribute("data-theme")==="dark";Z.value=Y(),Promise.all([__vitePreload(()=>import("./mermaid.esm.min-bc08675d.js"),[]),__vitePreload(()=>import("./mermaid-mindmap.esm.min-35077761.js"),["assets/mermaid-mindmap.esm.min-35077761.js","assets/framework-9a29aaa0.js"]),new Promise(X=>setTimeout(X,800))]).then(async([{default:X},{default:nn}])=>{try{await X.registerExternalDiagrams([nn])}catch{}const an=async()=>{const tn=document.createElement("div");tn.style.position="relative",tn.style.top="-9999px";const sn=on=>{$.value=on,document.body.removeChild(tn)};X.initialize({theme:"base",themeVariables:k$2(Z.value),flowchart:{useMaxWidth:!1},sequence:{useMaxWidth:!1},journey:{useMaxWidth:!1},gantt:{useMaxWidth:!1},er:{useMaxWidth:!1},pie:{useMaxWidth:!1},startOnLoad:!1}),$.value="",document.body.appendChild(tn),await nextTick(),await X.renderAsync(b.id,W,sn,tn)};await an(),U=new MutationObserver(()=>{Z.value=Y()}),U.observe(G,{attributeFilter:["class","data-theme"],attributes:!0}),watch(Z,an)})}),onBeforeUnmount(()=>{U==null||U.disconnect()}),()=>h$4("div",{ref:j,class:["mermaid-wrapper",{loading:!$.value}]},$.value?h$4("div",{class:"content",innerHTML:$.value}):h$4(M))}});const o$1=()=>__vitePreload(()=>import("./highlight.esm-a794bb63.js"),[]),t$1=()=>__vitePreload(()=>import("./markdown.esm-d92a2fc9.js"),[]),e$1=()=>__vitePreload(()=>import("./math.esm-70a288c8.js"),[]),r$2=()=>__vitePreload(()=>import("./notes.esm-224f94d9.js"),[]),a=()=>__vitePreload(()=>import("./reveal.esm-e5069ce0.js"),[]),i$1=()=>__vitePreload(()=>import("./search.esm-2c3fba7d.js"),[]),c$1=()=>__vitePreload(()=>import("./zoom.esm-b83b91d0.js"),[]),useReveal=()=>[a(),t$1(),o$1(),e$1(),r$2(),c$1(),i$1()],index$1="",leagueGothic="",sourceSansPro="",k$1=()=>h$4(P$5,{name:"loading"},()=>["0s","-0.333s","-0.667s"].map(b=>h$4("circle",{cx:512,cy:512,r:0,fill:"none",stroke:"currentColor","stroke-width":"20"},[h$4("animate",{attributeName:"r",repeatCount:"indefinite",dur:"1s",values:"0;400",keyTimes:"0;1",keySplines:"0 0.2 0.8 1",calcMode:"spline",begin:b}),h$4("animate",{attributeName:"opacity",repeatCount:"indefinite",dur:"1s",values:"1;0",keyTimes:"0;1",keySplines:"0.2 0 0.8 1",calcMode:"spline",begin:b})])));var S$2=defineComponent({name:"Presentation",props:{id:{type:String,required:!0},code:{type:String,required:!0},theme:{type:String,default:"auto"}},setup(b){const $=usePageFrontmatter(),j=ref(""),Z=ref(!1),U=ref(),G=ref();let W;return onMounted(()=>{if(G.value){j.value=Bt$1(b.code),G.value.setAttribute("id",b.id),G.value.setAttribute("data-theme",b.theme);const Y=[new Promise(X=>setTimeout(X,800)),...useReveal()];Promise.all(Y).then(([,X,...nn])=>{W=new X.default(G.value,{plugins:nn.map(an=>an.default)}),W.initialize({backgroundTransition:"slide",hash:$.value.layout==="Slide",mouseWheel:$.value.layout==="Slide",transition:"slide",slideNumber:!0,...$.value.reveal||{},embedded:$.value.layout!=="Slide"}).then(()=>{Z.value=!1,W.configure({backgroundTransition:"slide"})})})}}),onBeforeUnmount(()=>{W==null||W.destroy()}),()=>h$4("div",{ref:U,class:{"md-enhance-presentation":!0,loading:Z.value}},[Z.value?h$4(k$1):null,h$4("div",{ref:G,class:["reveal","reveal-viewport"]},h$4("div",{class:"slides",style:{display:Z.value?"none":"block"},innerHTML:`<section data-markdown data-separator="^\\r?\\n---\\r?\\n$" data-separator-vertical="^\\r?\\n--\\r?\\n$"><script type="text/template">${j.value}<\/script></section>`}))])}});const playground="",n$1='<svg class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="200" height="200"><path d="M512 74.667C270.933 74.667 74.667 270.933 74.667 512S270.933 949.333 512 949.333 949.333 753.067 949.333 512 753.067 74.667 512 74.667zm0 810.666C307.2 885.333 138.667 716.8 138.667 512S307.2 138.667 512 138.667 885.333 307.2 885.333 512 716.8 885.333 512 885.333z"/><path d="M708.267 465.067 473.6 330.667c-8.533-4.267-17.067-6.4-25.6-6.4-29.867 0-53.333 23.466-53.333 53.333v268.8c0 8.533 2.133 19.2 6.4 25.6 10.666 17.067 27.733 27.733 46.933 27.733 8.533 0 17.067-2.133 25.6-6.4l234.667-134.4c8.533-4.266 14.933-10.666 19.2-19.2 6.4-12.8 8.533-27.733 4.266-40.533-2.133-14.933-10.666-25.6-23.466-34.133zM458.667 627.2V396.8L661.333 512 458.667 627.2z"/></svg>';var r$1=defineComponent({name:"Playground",props:{title:{type:String,default:""},link:{type:String,required:!0}},setup(b){return()=>[h$4("div",{class:"playground-wrapper"},[h$4("div",{class:"title-wrapper"},[b.title?h$4("div",{class:"title"},decodeURIComponent(b.title)):null,h$4("div",{class:"actions"},[h$4("a",{class:"action",href:decodeURIComponent(b.link),target:"_blank",innerHTML:n$1})])]),h$4("div",{class:"preview-container"},h$4("iframe",{class:"iframe-preview",src:decodeURIComponent(b.link)}))])]}});const tabs="",v=useStorage$1("VUEPRESS_TAB_STORE",{});var S$1=defineComponent({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},setup(b,{slots:$}){const j=ref(b.active),Z=ref([]),U=()=>{if(b.tabId){const{title:nn,id:an=nn}=b.data[j.value];v.value[b.tabId]=an}},G=(nn=j.value)=>{j.value=nn<Z.value.length-1?nn+1:0,Z.value[j.value].focus()},W=(nn=j.value)=>{j.value=nn>0?nn-1:Z.value.length-1,Z.value[j.value].focus()},Y=(nn,an)=>{nn.key===" "||nn.key==="Enter"?(nn.preventDefault(),j.value=an):nn.key==="ArrowRight"?(nn.preventDefault(),G()):nn.key==="ArrowLeft"&&(nn.preventDefault(),W()),U()},X=()=>{if(b.tabId){const nn=b.data.findIndex(({title:an,id:tn=an})=>v.value[b.tabId]===tn);if(nn!==-1)return nn}return b.active};return onMounted(()=>{j.value=X(),watch(()=>v.value[b.tabId],(nn,an)=>{if(b.tabId&&nn!==an){const tn=b.data.findIndex(({title:sn,id:on=sn})=>on===nn);tn!==-1&&(j.value=tn)}})}),()=>b.data.length?h$4("div",{class:"tab-list"},[h$4("div",{class:"tab-list-nav",role:"tablist"},b.data.map(({title:nn},an)=>{const tn=an===j.value;return h$4("button",{ref:sn=>{sn&&(Z.value[an]=sn)},class:["tab-list-nav-item",{active:tn}],role:"tab","aria-controls":`tab-${b.id}-${an}`,"aria-selected":tn,onClick:()=>{j.value=an,U()},onKeydown:sn=>Y(sn,an)},nn)})),b.data.map(({title:nn,id:an=nn},tn)=>{var sn;const on=tn===j.value;return h$4("div",{class:["tab-item",{active:on}],id:`tab-${b.id}-${tn}`,role:"tabpanel","aria-expanded":on},(sn=$[`tab${tn}`])==null?void 0:sn.call($,{title:nn,value:an,isActive:on}))})]):null}});const tasklist="",katex="",clientConfig9=defineClientConfig({enhance:({app:b})=>{b.component("ChartJS",ChartJS),b.component("CodeTabs",S$3),b.component("CodeDemo",F$1),b.component("ECharts",ECharts),b.component("FlowChart",k$3),b.component("Mermaid",w),b.component("Presentation",S$2),b.component("Playground",r$1),b.component("Tabs",S$1),b.component("VuePlayground",defineAsyncComponent(()=>__vitePreload(()=>import("./VuePlayground-078db3d6.js"),["assets/VuePlayground-078db3d6.js","assets/framework-9a29aaa0.js"])))}}),photoswipe="",E$1=".theme-hope-content :not(a) > img",P$1={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}},O=800,H$1={},d$2=b=>({src:b.src,width:b.naturalWidth,height:b.naturalHeight,alt:b.alt}),I$1=b=>{const $=isString$2(b)?Array.from(document.querySelectorAll(b)):b.map(j=>Array.from(document.querySelectorAll(j))).flat();return Promise.all($.map(j=>new Promise((Z,U)=>{j.complete?Z(d$2(j)):(j.onload=()=>Z(d$2(j)),j.onerror=G=>U(G))}))).then(j=>({elements:$,infos:j}))},A$1=()=>{const{isSupported:b,toggle:$}=useFullscreen(),j=kt$1(P$1),Z=useRoute(),U=()=>{Promise.all([__vitePreload(()=>import("./photoswipe.esm-a9093b7c.js"),[]),new Promise(G=>setTimeout(G,O)).then(()=>I$1(E$1))]).then(([G,W])=>{W.elements.forEach((Y,X)=>{const nn=()=>{const an=new G.default({dataSource:W.infos,...j.value,...H$1,index:X});an.on("uiRegister",()=>{b&&an.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{$()}}),an.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:(tn,sn)=>{tn.setAttribute("download",""),tn.setAttribute("target","_blank"),tn.setAttribute("rel","noopener"),sn.on("change",()=>{tn.href=sn.currSlide.data.src})}})}),an.init()};Y.style.cursor="zoom-in",Y.addEventListener("click",nn),Y.addEventListener("keypress",({key:an})=>{an==="Enter"&&nn()})})})};onMounted(()=>{U(),watch(()=>Z.path,()=>U())})};var y=defineClientConfig({setup:()=>{A$1()}});const useAutoLink=(b,$=!1)=>{const j=useRouter(),{fullPath:Z,meta:U,name:G}=Dt(j,encodeURI(b));return{text:!$&&U.s?U.s:U.title||b,link:G==="404"?b:Z,...U.i?{icon:U.i}:{}}},useThemeData=()=>useThemeData$1(),useThemeLocaleData=()=>useThemeLocaleData$1(),usePure=()=>computed(()=>Boolean(useThemeData().value.pure)),useWindowSize=()=>{const b=useThemeData(),$=ref(!1),j=ref(!1),Z=()=>{$.value=window.innerWidth<=(b.value.mobileBreakPoint||719),j.value=window.innerWidth>=(b.value.wideBreakPoint||1440)};return onMounted(()=>{Z(),useEventListener$1("resize",Z,!1),useEventListener$1("orientationchange",Z,!1)}),{isMobile:$,isWide:j}},useNavigate=()=>{const b=useRouter(),$=useRoute();return j=>{if(j)if(ue(j))$.path!==j&&b.push(j);else if(isLinkHttp(j)||isLinkMailto(j))window&&window.open(j);else{const Z=$.path.slice(0,$.path.lastIndexOf("/"));b.push(`${Z}/${encodeURI(j)}`)}}},usePageAuthor=()=>{const b=useThemeLocaleData(),$=usePageFrontmatter();return computed(()=>{const{author:j}=$.value;return j?re(j):j===!1?[]:re(b.value.author,!1)})},usePageCategory=()=>{const b=usePageFrontmatter();return computed(()=>se(b.value.category).map($=>{var j,Z;return{name:$,path:((Z=(j=inject(Symbol.for("categoryMap")))==null?void 0:j.value.map[$])==null?void 0:Z.path)||""}}))},usePageTag=()=>{const b=usePageFrontmatter();return computed(()=>oe(b.value.tag).map($=>{var j,Z;return{name:$,path:((Z=(j=inject(Symbol.for("tagMap")))==null?void 0:j.value.map[$])==null?void 0:Z.path)||""}}))},usePageDate=()=>{const b=usePageFrontmatter(),$=usePageData();return computed(()=>{const{date:j}=b.value;if(j)return ot(j);const{createdTime:Z}=$.value.git||{};return Z?ot(new Date(Z)):null})},usePageInfo=()=>{const b=useThemeLocaleData(),$=usePageData(),j=usePageFrontmatter(),Z=usePageAuthor(),U=usePageCategory(),G=usePageTag(),W=usePageDate(),Y=computed(()=>({author:Z.value,category:U.value,date:W.value,localizedDate:$.value.localizedDate,tag:G.value,isOriginal:j.value.isOriginal||!1,readingTime:$.value.readingTime||null,pageview:"pageview"in j.value?j.value.pageview:!0})),X=computed(()=>"pageInfo"in j.value?j.value.pageInfo:"pageInfo"in b.value?b.value.pageInfo:null);return{info:Y,items:X}};let promise=null,promiseResolve=null;const scrollPromise={wait:()=>promise,pending:()=>{promise=new Promise(b=>promiseResolve=b)},resolve:()=>{promiseResolve==null||promiseResolve(),promise=null,promiseResolve=null}},useScrollPromise=()=>scrollPromise,footer="",PageFooter=defineComponent({name:"PageFooter",setup(){const b=usePageFrontmatter(),$=useThemeLocaleData(),j=usePageAuthor(),Z=computed(()=>{const{copyright:W,footer:Y}=b.value;return Y!==!1&&Boolean(W||Y||$.value.displayFooter)}),U=computed(()=>{const{footer:W}=b.value;return W===!1?!1:isString$2(W)?W:$.value.footer||""}),G=computed(()=>"copyright"in b.value?b.value.copyright:"copyright"in $.value?$.value.copyright:j.value.length?`Copyright © ${new Date().getFullYear()} ${j.value[0].name}`:!1);return()=>Z.value?h$4("footer",{class:"footer-wrapper"},[h$4("div",{class:"footer",innerHTML:U.value}),G.value?h$4("div",{class:"copyright",innerHTML:G.value}):null]):null}}),I18nIcon=()=>h$4(P$5,{name:"i18n"},()=>[h$4("path",{d:"M379.392 460.8 494.08 575.488l-42.496 102.4L307.2 532.48 138.24 701.44l-71.68-72.704L234.496 460.8l-45.056-45.056c-27.136-27.136-51.2-66.56-66.56-108.544h112.64c7.68 14.336 16.896 27.136 26.112 35.84l45.568 46.08 45.056-45.056C382.976 312.32 409.6 247.808 409.6 204.8H0V102.4h256V0h102.4v102.4h256v102.4H512c0 70.144-37.888 161.28-87.04 210.944L378.88 460.8zM576 870.4 512 1024H409.6l256-614.4H768l256 614.4H921.6l-64-153.6H576zM618.496 768h196.608L716.8 532.48 618.496 768z"})]);I18nIcon.displayName="I18nIcon";const Icon=b=>{const{icon:$=""}=b;return isLinkHttp($)?h$4("img",{class:"icon",src:$}):ue($)?h$4("img",{class:"icon",src:withBase($)}):h$4(resolveComponent("FontIcon"),b)};Icon.displayName="Icon";const AutoLink=defineComponent({name:"AutoLink",inheritAttrs:!1,props:{config:{type:Object,required:!0},exact:Boolean,noExternalLinkIcon:Boolean},emits:{focusout:()=>!0},setup(b,{attrs:$,emit:j,slots:Z}){const U=useRoute(),G=useSiteData(),W=toRef(b,"config"),Y=computed(()=>isLinkHttp(W.value.link)),X=computed(()=>isLinkMailto(W.value.link)||isLinkTel(W.value.link)),nn=computed(()=>X.value?void 0:W.value.target||(Y.value?"_blank":void 0)),an=computed(()=>nn.value==="_blank"),tn=computed(()=>!Y.value&&!X.value&&!an.value),sn=computed(()=>X.value?void 0:W.value.rel||(an.value?"noopener noreferrer":void 0)),on=computed(()=>W.value.ariaLabel||W.value.text),pn=computed(()=>{if(b.exact)return!1;const cn=Object.keys(G.value.locales);return cn.length?cn.every(mn=>mn!==W.value.link):W.value.link!=="/"}),en=computed(()=>tn.value?W.value.activeMatch?new RegExp(W.value.activeMatch).test(U.path):pn.value?U.path.startsWith(W.value.link):U.path===W.value.link:!1);return()=>{var fn,Ln,wn;const{text:cn,icon:mn,link:rn}=W.value;return tn.value?h$4(RouterLink,{to:rn,"aria-label":on.value,...$,class:["nav-link",{active:en.value},$.class],onFocusout:()=>j("focusout")},()=>{var Tn,kn,vn;return((Tn=Z.default)==null?void 0:Tn.call(Z))||[((kn=Z.before)==null?void 0:kn.call(Z))||h$4(Icon,{icon:mn}),cn,(vn=Z.after)==null?void 0:vn.call(Z)]}):h$4("a",{href:rn,rel:sn.value,target:nn.value,"aria-label":on.value,...$,class:["nav-link",$.class],onFocusout:()=>j("focusout")},((fn=Z.default)==null?void 0:fn.call(Z))||[((Ln=Z.before)==null?void 0:Ln.call(Z))||h$4(Icon,{icon:mn}),cn,b.noExternalLinkIcon?null:h$4(ExternalLinkIcon),(wn=Z.after)==null?void 0:wn.call(Z)])}}}),dropdownLink="",DropdownLink=defineComponent({name:"NavbarDropdownLink",props:{config:{type:Object,required:!0}},setup(b,{slots:$}){const j=useRoute(),Z=toRef(b,"config"),U=computed(()=>Z.value.ariaLabel||Z.value.text),G=ref(!1);watch(()=>j.path,()=>{G.value=!1});const W=Y=>{Y.detail===0&&(G.value=!G.value)};return()=>{var Y;return h$4("div",{class:["dropdown-wrapper",{open:G.value}]},[h$4("button",{class:"dropdown-title",type:"button","aria-label":U.value,onClick:W},[((Y=$.title)==null?void 0:Y.call($))||h$4("span",{class:"title"},[h$4(Icon,{icon:Z.value.icon}),b.config.text]),h$4("span",{class:"arrow"}),h$4("ul",{class:"nav-dropdown"},Z.value.children.map((X,nn)=>{const an=nn===Z.value.children.length-1;return h$4("li",{class:"dropdown-item"},"children"in X?[h$4("h4",{class:"dropdown-subtitle"},X.link?h$4(AutoLink,{config:X,onFocusout:()=>{X.children.length===0&&an&&(G.value=!1)}}):h$4("span",X.text)),h$4("ul",{class:"dropdown-subitem-wrapper"},X.children.map((tn,sn)=>h$4("li",{class:"dropdown-subitem"},h$4(AutoLink,{config:tn,onFocusout:()=>{sn===X.children.length-1&&an&&(G.value=!1)}}))))]:h$4(AutoLink,{config:X,onFocusout:()=>{an&&(G.value=!1)}}))}))])])}}}),resolveNavbarItem=(b,$="")=>isString$2(b)?useAutoLink(`${$}${b}`):"children"in b?{...b,...b.link&&!isLinkExternal(b.link)?useAutoLink(`${$}${b.link}`):{},children:b.children.map(j=>resolveNavbarItem(j,`${$}${b.prefix||""}`))}:{...b,link:isLinkExternal(b.link)?b.link:useAutoLink(`${$}${b.link}`).link},useNavbarConfig=()=>computed(()=>(useThemeLocaleData().value.navbar||[]).map(b=>resolveNavbarItem(b))),useNavbarLanguageDropdown=()=>{const b=useRouter(),$=useRouteLocale(),j=useSiteLocaleData(),Z=useThemeData(),U=useThemeLocaleData();return computed(()=>{const G=Object.keys(j.value.locales);if(G.length<2)return null;const{path:W,fullPath:Y}=b.currentRoute.value,{navbarLocales:X}=U.value;return{text:"",ariaLabel:X==null?void 0:X.selectLangAriaLabel,children:G.map(an=>{var cn,mn,rn;const tn=((cn=j.value.locales)==null?void 0:cn[an])??{},sn=((mn=Z.value.locales)==null?void 0:mn[an])??{},on=tn.lang||"",pn=((rn=sn.navbarLocales)==null?void 0:rn.langName)??on;let en;if(on===j.value.lang)en=W;else{const fn=W.replace($.value,an);en=b.getRoutes().some(Ln=>Ln.path===fn)?Y.replace(W,fn):sn.home??an}return{text:pn,link:en}})}})},useNavbarRepo=()=>{const b=useThemeLocaleData(),$=computed(()=>b.value.repo||null),j=computed(()=>$.value?Ft($.value):null),Z=computed(()=>$.value?Jt($.value):null),U=computed(()=>j.value?b.value.repoLabel??(Z.value===null?"Source":Z.value):null);return computed(()=>!j.value||!U.value||b.value.repoDisplay===!1?null:{type:Z.value||"Source",label:U.value,link:j.value})};defineComponent({name:"LanguageDropdown",setup(){const b=useNavbarLanguageDropdown();return()=>b.value?h$4("div",{class:"nav-item"},h$4(DropdownLink,{class:"i18n-dropdown",config:b.value},{title:()=>{var $;return h$4(I18nIcon,{"aria-label":($=b.value)==null?void 0:$.ariaLabel,style:{width:"1rem",height:"1rem",verticalAlign:"middle"}})}})):null}});const navbarBrand="",NavbarBrand=defineComponent({name:"NavbarBrand",setup(){const b=useRouteLocale(),$=useSiteLocaleData(),j=useThemeLocaleData(),Z=computed(()=>j.value.home||b.value),U=computed(()=>$.value.title),G=computed(()=>j.value.logo?withBase(j.value.logo):null),W=computed(()=>j.value.logoDark?withBase(j.value.logoDark):null);return()=>h$4(RouterLink,{to:Z.value,class:"brand"},()=>[G.value?h$4("img",{class:["logo",{light:Boolean(W.value)}],src:G.value,alt:U.value}):null,W.value?h$4("img",{class:["logo dark"],src:W.value,alt:U.value}):null,U.value?h$4("span",{class:["site-name",{"hide-in-pad":G.value&&j.value.hideSiteNameOnMobile!==!1}]},U.value):null])}}),navbarLinks="",NavbarLinks=defineComponent({name:"NavbarLinks",setup(){const b=useNavbarConfig();return()=>b.value.length?h$4("nav",{class:"nav-links"},[...b.value.map($=>h$4("div",{class:"nav-item hide-in-mobile"},"children"in $?h$4(DropdownLink,{config:$}):h$4(AutoLink,{config:$})))]):null}});function _toConsumableArray(b){if(Array.isArray(b)){for(var $=0,j=Array(b.length);$<b.length;$++)j[$]=b[$];return j}else return Array.from(b)}var hasPassiveEvents=!1;if(typeof window<"u"){var passiveTestOptions={get passive(){hasPassiveEvents=!0}};window.addEventListener("testPassive",null,passiveTestOptions),window.removeEventListener("testPassive",null,passiveTestOptions)}var isIosDevice=typeof window<"u"&&window.navigator&&window.navigator.platform&&(/iP(ad|hone|od)/.test(window.navigator.platform)||window.navigator.platform==="MacIntel"&&window.navigator.maxTouchPoints>1),locks=[],documentListenerAdded=!1,initialClientY=-1,previousBodyOverflowSetting=void 0,previousBodyPaddingRight=void 0,allowTouchMove=function b($){return locks.some(function(j){return!!(j.options.allowTouchMove&&j.options.allowTouchMove($))})},preventDefault=function b($){var j=$||window.event;return allowTouchMove(j.target)||j.touches.length>1?!0:(j.preventDefault&&j.preventDefault(),!1)},setOverflowHidden=function b($){if(previousBodyPaddingRight===void 0){var j=!!$&&$.reserveScrollBarGap===!0,Z=window.innerWidth-document.documentElement.clientWidth;j&&Z>0&&(previousBodyPaddingRight=document.body.style.paddingRight,document.body.style.paddingRight=Z+"px")}previousBodyOverflowSetting===void 0&&(previousBodyOverflowSetting=document.body.style.overflow,document.body.style.overflow="hidden")},restoreOverflowSetting=function b(){previousBodyPaddingRight!==void 0&&(document.body.style.paddingRight=previousBodyPaddingRight,previousBodyPaddingRight=void 0),previousBodyOverflowSetting!==void 0&&(document.body.style.overflow=previousBodyOverflowSetting,previousBodyOverflowSetting=void 0)},isTargetElementTotallyScrolled=function b($){return $?$.scrollHeight-$.scrollTop<=$.clientHeight:!1},handleScroll=function b($,j){var Z=$.targetTouches[0].clientY-initialClientY;return allowTouchMove($.target)?!1:j&&j.scrollTop===0&&Z>0||isTargetElementTotallyScrolled(j)&&Z<0?preventDefault($):($.stopPropagation(),!0)},disableBodyScroll=function b($,j){if(!$){console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.");return}if(!locks.some(function(U){return U.targetElement===$})){var Z={targetElement:$,options:j||{}};locks=[].concat(_toConsumableArray(locks),[Z]),isIosDevice?($.ontouchstart=function(U){U.targetTouches.length===1&&(initialClientY=U.targetTouches[0].clientY)},$.ontouchmove=function(U){U.targetTouches.length===1&&handleScroll(U,$)},documentListenerAdded||(document.addEventListener("touchmove",preventDefault,hasPassiveEvents?{passive:!1}:void 0),documentListenerAdded=!0)):setOverflowHidden(j)}},clearAllBodyScrollLocks=function b(){isIosDevice?(locks.forEach(function($){$.targetElement.ontouchstart=null,$.targetElement.ontouchmove=null}),documentListenerAdded&&(document.removeEventListener("touchmove",preventDefault,hasPassiveEvents?{passive:!1}:void 0),documentListenerAdded=!1),initialClientY=-1):restoreOverflowSetting(),locks=[]};const navScreenDropdown="",NavScreenDropdown=defineComponent({name:"NavScreenDropdown",props:{config:{type:Object,required:!0}},setup(b){const $=useRoute(),j=toRef(b,"config"),Z=computed(()=>j.value.ariaLabel||j.value.text),U=ref(!1);watch(()=>$.path,()=>{U.value=!1});const G=(W,Y)=>Y[Y.length-1]===W;return()=>[h$4("button",{class:["nav-screen-dropdown-title",{active:U.value}],type:"button","aria-label":Z.value,onClick:()=>{U.value=!U.value}},[h$4("span",{class:"title"},[h$4(Icon,{icon:j.value.icon}),b.config.text]),h$4("span",{class:["arrow",U.value?"down":"right"]})]),h$4("ul",{class:["nav-screen-dropdown",{hide:!U.value}]},j.value.children.map(W=>h$4("li",{class:"dropdown-item"},"children"in W?[h$4("h4",{class:"dropdown-subtitle"},W.link?h$4(AutoLink,{config:W,onFocusout:()=>{G(W,j.value.children)&&W.children.length===0&&(U.value=!1)}}):h$4("span",W.text)),h$4("ul",{class:"dropdown-subitem-wrapper"},W.children.map(Y=>h$4("li",{class:"dropdown-subitem"},h$4(AutoLink,{config:Y,onFocusout:()=>{G(Y,W.children)&&G(W,j.value.children)&&(U.value=!1)}}))))]:h$4(AutoLink,{config:W,onFocusout:()=>{G(W,j.value.children)&&(U.value=!1)}}))))]}}),navScreenLinks="",NavScreenLinks=defineComponent({name:"NavScreenLinks",setup(){const b=useNavbarConfig();return()=>b.value.length?h$4("nav",{class:"nav-screen-links"},b.value.map($=>h$4("div",{class:"navbar-links-item"},"children"in $?h$4(NavScreenDropdown,{config:$}):h$4(AutoLink,{config:$})))):null}}),DarkIcon=()=>h$4(P$5,{name:"dark"},()=>h$4("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));DarkIcon.displayName="DarkIcon";const LightIcon=()=>h$4(P$5,{name:"light"},()=>h$4("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));LightIcon.displayName="LightIcon";const AutoIcon=()=>h$4(P$5,{name:"auto"},()=>h$4("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));AutoIcon.displayName="AutoIcon";const EnterFullScreenIcon=()=>h$4(P$5,{name:"enter-fullscreen"},()=>h$4("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));EnterFullScreenIcon.displayName="EnterFullScreenIcon";const CancelFullScreenIcon=()=>h$4(P$5,{name:"cancel-fullscreen"},()=>h$4("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));CancelFullScreenIcon.displayName="CancelFullScreenIcon";const OutlookIcon=()=>h$4(P$5,{name:"outlook"},()=>[h$4("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);OutlookIcon.displayName="OutlookIcon";const darkModeSymbol=Symbol.for("darkMode"),useDarkmode=()=>{const b=inject(darkModeSymbol);if(!b)throw new Error("useDarkmode() is called without provider.");return b},injectDarkMode=b=>{const $=useThemeData(),j=usePreferredDark(),Z=useStorage$1("vuepress-theme-hope-scheme","auto"),U=computed(()=>$.value.darkmode||"switch"),G=computed(()=>{const Y=U.value;return Y==="disable"?!1:Y==="enable"?!0:Y==="auto"?j.value:Y==="toggle"?Z.value==="dark":Z.value==="dark"||Z.value==="auto"&&j.value}),W=computed(()=>{const Y=U.value;return Y==="switch"||Y==="toggle"});b.provide(darkModeSymbol,{canToggle:W,config:U,isDarkmode:G,status:Z}),Object.defineProperties(b.config.globalProperties,{$isDarkmode:{get:()=>G.value}})},setupDarkMode=()=>{const{isDarkmode:b}=useDarkmode(),$=(j=b.value)=>{const Z=window==null?void 0:window.document.querySelector("html");Z==null||Z.setAttribute("data-theme",j?"dark":"light")};onMounted(()=>{watch(b,$,{immediate:!0})})},appearanceSwitch="",AppearanceSwitch=defineComponent({name:"AppearanceSwitch",setup(){const{config:b,status:$}=useDarkmode(),j=()=>{b.value==="switch"?$.value={light:"dark",dark:"auto",auto:"light"}[$.value]:$.value=$.value==="light"?"dark":"light"};return()=>h$4("button",{id:"appearance-switch",onClick:()=>j()},[h$4(AutoIcon,{style:{display:$.value==="auto"?"block":"none"}}),h$4(DarkIcon,{style:{display:$.value==="dark"?"block":"none"}}),h$4(LightIcon,{style:{display:$.value==="light"?"block":"none"}})])}}),AppearanceMode=defineComponent({name:"AppearanceMode",setup(){const b=useThemeLocaleData(),{canToggle:$}=useDarkmode(),j=computed(()=>b.value.outlookLocales.darkmode);return()=>$.value?h$4("div",{class:"appearance-wrapper"},[h$4("label",{class:"appearance-title",for:"appearance-switch"},j.value),h$4(AppearanceSwitch)]):null}}),themeColorPicker="",ThemeColorPicker=defineComponent({name:"ThemeColorPicker",props:{themeColor:{type:Object,required:!0}},setup(b){const $=(j="")=>{const Z=document.documentElement.classList,U=Object.keys(b.themeColor).map(G=>`theme-${G}`);if(!j){localStorage.removeItem("theme"),Z.remove(...U);return}Z.remove(...U.filter(G=>G!==`theme-${j}`)),Z.add(`theme-${j}`),localStorage.setItem("theme",j)};return onMounted(()=>{const j=localStorage.getItem("theme");j&&$(j)}),()=>h$4("ul",{id:"theme-color-picker"},[h$4("li",h$4("span",{class:"theme-color",onClick:()=>$()})),...Object.entries(b.themeColor).map(([j,Z])=>h$4("li",h$4("span",{style:{background:Z},onClick:()=>$(j)})))])}}),ThemeColor=defineComponent({name:"ThemeColor",setup(){const b=useThemeData(),$=useThemeLocaleData(),j=computed(()=>$.value.outlookLocales.themeColor),Z=computed(()=>{const{themeColor:U}=b.value;return U===!1?null:U});return()=>Z.value?h$4("div",{class:"theme-color-wrapper"},[h$4("label",{class:"theme-color-title",for:"theme-color-picker"},j.value),h$4(ThemeColorPicker,{themeColor:Z.value})]):null}}),toggleFullScreenButton="",ToggleFullScreenButton=defineComponent({name:"ToggleFullScreenButton",setup(){const b=useThemeLocaleData(),{isSupported:$,isFullscreen:j,toggle:Z}=useFullscreen(),U=computed(()=>b.value.outlookLocales.fullscreen);return()=>$?h$4("div",{class:"fullscreen-wrapper"},[h$4("label",{class:"full-screen-title",for:"full-screen-switch"},U.value),h$4("button",{class:"full-screen",id:"full-screen-switch",ariaPressed:j.value,onClick:()=>Z()},j.value?h$4(CancelFullScreenIcon):h$4(EnterFullScreenIcon))]):null}}),OutlookSettings=defineComponent({name:"OutlookSettings",setup(){const b=useThemeData(),$=usePure(),j=computed(()=>!$.value&&Boolean(b.value.themeColor)),Z=computed(()=>!$.value&&b.value.fullscreen);return()=>h$4(ClientOnly,()=>[j.value?h$4(ThemeColor):null,h$4(AppearanceMode),Z.value?h$4(ToggleFullScreenButton):null])}}),navScreen="",NavScreen=defineComponent({name:"NavScreen",props:{show:Boolean},emits:{close:()=>!0},setup(b,{emit:$,slots:j}){const Z=useRoute(),{isMobile:U}=useWindowSize(),G=ref();return onMounted(()=>{watch(U,W=>{!W&&b.show&&(clearAllBodyScrollLocks(),$("close"))}),watch(()=>Z.path,()=>{clearAllBodyScrollLocks(),$("close")})}),onBeforeUnmount(()=>{clearAllBodyScrollLocks()}),()=>h$4(Transition,{name:"fade",onEnter:()=>disableBodyScroll(G.value,{reserveScrollBarGap:!0}),onAfterLeave:()=>clearAllBodyScrollLocks()},()=>{var W,Y;return b.show?h$4("div",{id:"nav-screen",ref:G},h$4("div",{class:"container"},[(W=j.before)==null?void 0:W.call(j),h$4(NavScreenLinks),h$4("div",{class:"outlook-wrapper"},h$4(OutlookSettings)),(Y=j.after)==null?void 0:Y.call(j)])):null})}}),outlookButton="",OutlookButton=defineComponent({name:"OutlookButton",setup(){const{isSupported:b}=useFullscreen(),$=useThemeData(),j=usePure(),Z=useRoute(),{canToggle:U}=useDarkmode(),G=ref(!1),W=computed(()=>!j.value&&Boolean($.value.themeColor)),Y=computed(()=>!j.value&&$.value.fullscreen&&b);return watch(()=>Z.path,()=>{G.value=!1}),()=>U.value||Y.value||W.value?h$4("div",{class:"nav-item hide-in-mobile"},U.value&&!Y.value&&!W.value?h$4(AppearanceSwitch):Y.value&&!U.value&&!W.value?h$4(ToggleFullScreenButton):h$4("button",{class:["outlook-button",{open:G.value}],tabindex:"-1",ariaHidden:!0},[h$4(OutlookIcon),h$4("div",{class:"outlook-dropdown"},h$4(OutlookSettings))])):null}}),toggleNavbarButton="",ToggleNavbarButton=({active:b=!1},{emit:$})=>h$4("button",{class:["toggle-navbar-button",{"is-active":b}],"aria-label":"Toggle Navbar","aria-expanded":b,"aria-controls":"nav-screen",onClick:()=>$("toggle")},h$4("span",{class:"button-container"},[h$4("span",{class:"button-top"}),h$4("span",{class:"button-middle"}),h$4("span",{class:"button-bottom"})]));ToggleNavbarButton.displayName="ToggleNavbarButton";const toggleSidebarButton="",ToggleSidebarButton=(b,{emit:$})=>h$4("button",{class:"toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>$("toggle")},h$4("span",{class:"icon"}));ToggleSidebarButton.displayName="ToggleSidebarButton";ToggleSidebarButton.emits=["toggle"];const repoLink="",RepoLink=defineComponent({name:"RepoLink",components:{BitbucketIcon:gt,GiteeIcon:$t,GitHubIcon:vt,GitlabIcon:pt,SourceIcon:yt},setup(){const b=useNavbarRepo();return()=>b.value?h$4("div",{class:"nav-item"},h$4("a",{class:"repo-link",href:b.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":b.value.label},h$4(resolveComponent(`${b.value.type}Icon`),{style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}}),navbar="",Navbar=defineComponent({name:"NavBar",emits:{toggleSidebar:()=>!0},setup(b,{emit:$,slots:j}){const Z=useThemeLocaleData(),{isMobile:U}=useWindowSize(),G=ref(!1),W=computed(()=>{const{navbarAutoHide:X="mobile"}=Z.value;return X!=="none"&&(X==="always"||U.value)}),Y=computed(()=>Z.value.navbarLayout||{left:["Brand"],center:["Links"],right:["Language","Repo","Outlook","Search"]});return()=>{var nn,an,tn,sn,on,pn;const X={Brand:h$4(NavbarBrand),Language:null,Links:h$4(NavbarLinks),Repo:h$4(RepoLink),Outlook:h$4(OutlookButton),Search:_t("Docsearch")?h$4(resolveComponent("Docsearch")):_t("SearchBox")?h$4(resolveComponent("SearchBox")):_t("SearchBox")?h$4(resolveComponent("SearchBox")):null};return[h$4("header",{class:["navbar",{"auto-hide":W.value,"hide-icon":Z.value.navbarIcon===!1}],id:"navbar"},[h$4("div",{class:"navbar-left"},[h$4(ToggleSidebarButton,{onToggle:()=>{G.value&&(G.value=!1),$("toggleSidebar")}}),(nn=j.leftStart)==null?void 0:nn.call(j),...Y.value.left.map(en=>X[en]),(an=j.leftEnd)==null?void 0:an.call(j)]),h$4("div",{class:"navbar-center"},[(tn=j.centerStart)==null?void 0:tn.call(j),...Y.value.center.map(en=>X[en]),(sn=j.centerEnd)==null?void 0:sn.call(j)]),h$4("div",{class:"navbar-right"},[(on=j.rightStart)==null?void 0:on.call(j),...Y.value.right.map(en=>X[en]),(pn=j.rightEnd)==null?void 0:pn.call(j),h$4(ToggleNavbarButton,{active:G.value,onToggle:()=>{G.value=!G.value}})])]),h$4(NavScreen,{show:G.value,onClose:()=>{G.value=!1}},{before:()=>{var en;return(en=j.screenTop)==null?void 0:en.call(j)},after:()=>{var en;return(en=j.screenBottom)==null?void 0:en.call(j)}})]}}}),isActiveSidebarItem=(b,$,j=!1)=>"activeMatch"in $?new RegExp($.activeMatch).test(b.path):Rt(b,$.link)?!0:$.children&&!j?$.children.some(Z=>isActiveSidebarItem(b,Z)):!1,isMatchedSidebarItem=(b,$)=>$.type==="group"?$.children.some(j=>j.type==="group"?isMatchedSidebarItem(b,j):j.type==="page"&&isActiveSidebarItem(b,j,!0))||"prefix"in $&&Rt(b,$.prefix):!1,renderItem=(b,$)=>b.link?h$4(AutoLink,{...$,config:b}):h$4("p",$,[h$4(Icon,{icon:b.icon}),b.text]),renderChildren$1=b=>{const $=useRoute();return b?h$4("ul",{class:"sidebar-sub-headers"},b.map(j=>{const Z=isActiveSidebarItem($,j,!0);return h$4("li",{class:"sidebar-sub-header"},[renderItem(j,{class:["sidebar-link","heading",{active:Z}]}),renderChildren$1(j.children)])})):null},sidebarData={},resolvePrefix=(b="",$="")=>ue($)?$:`${ensureEndingSlash(b)}${$}`,headerToSidebarItem=(b,$)=>{const j=usePageData();return{type:"heading",text:b.title,link:`${j.value.path}#${b.slug}`,children:headersToSidebarItemChildren(b.children,$)}},headersToSidebarItemChildren=(b,$)=>$>0?b.map(j=>headerToSidebarItem(j,$-1)):[],resolveHeadingSidebarItems=b=>{const $=usePageData();return headersToSidebarItemChildren($.value.headers,b)},resolveArraySidebarItems=(b,$,j="")=>{const Z=usePageData(),U=useRoute(),G=(W,Y=j)=>{var nn;const X=isString$2(W)?useAutoLink(resolvePrefix(Y,W)):W.link?{...W,...isLinkExternal(W.link)?{}:{link:useAutoLink(resolvePrefix(Y,W.link)).link}}:W;if("children"in X){const an=resolvePrefix(Y,X.prefix),tn=X.children==="structure"?sidebarData[an]:X.children;return{type:"group",...X,prefix:an,children:tn.map(sn=>G(sn,an))}}return{type:"page",...X,children:X.link===U.path?headersToSidebarItemChildren(((nn=Z.value.headers[0])==null?void 0:nn.level)===1?Z.value.headers[0].children:Z.value.headers,$):[]}};return b.map(W=>G(W))},resolveMultiSidebarItems=(b,$)=>{const j=useRoute(),Z=Object.keys(b).sort((U,G)=>G.length-U.length);for(const U of Z)if(decodeURI(j.path).startsWith(U)){const G=b[U];return G?resolveArraySidebarItems(G==="structure"?sidebarData[U]:G,$,U):[]}return console.warn(`${j.path} is missing sidebar config.`),[]},resolveSidebarItems=()=>{const b=useRouteLocale(),$=usePageFrontmatter(),j=useThemeLocaleData(),Z=$.value.home?!1:$.value.sidebar??j.value.sidebar??"structure",U=$.value.headerDepth??j.value.headerDepth??2;return Z===!1?[]:Z==="heading"?resolveHeadingSidebarItems(U):Z==="structure"?resolveArraySidebarItems(sidebarData[b.value],U,b.value):isArray(Z)?resolveArraySidebarItems(Z,U):isPlainObject(Z)?resolveMultiSidebarItems(Z,U):[]},sidebarItemsSymbol=Symbol.for("sidebarItems"),setupSidebarItems=()=>{const b=computed(()=>resolveSidebarItems());provide(sidebarItemsSymbol,b)},useSidebarItems=()=>{const b=inject(sidebarItemsSymbol);if(!b)throw new Error("useSidebarItems() is called without provider.");return b},sidebarChild="",SidebarChild=defineComponent({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(b){const $=useRoute();return()=>[renderItem(b.config,{class:["sidebar-link",`sidebar-${b.config.type}`,{active:isActiveSidebarItem($,b.config,!0)}],exact:!0}),renderChildren$1(b.config.children)]}}),sidebarGroup="",SidebarGroup=defineComponent({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:{toggle:()=>!0},setup(b,{emit:$}){const j=useRoute(),Z=computed(()=>isActiveSidebarItem(j,b.config)),U=computed(()=>isActiveSidebarItem(j,b.config,!0));return()=>{const{collapsible:G,children:W=[],icon:Y,prefix:X,link:nn,text:an}=b.config;return h$4("section",{class:"sidebar-group"},[h$4(G?"button":"p",{class:["sidebar-heading",{clickable:G||nn,exact:U.value,active:Z.value}],...G?{onClick:()=>$("toggle"),onKeydown:tn=>{tn.key==="Enter"&&$("toggle")}}:{}},[h$4(Icon,{icon:Y}),nn?h$4(RouterLink,{to:nn,class:"title"},()=>an):h$4("span",{class:"title"},an),G?h$4("span",{class:["arrow",b.open?"down":"right"]}):null]),b.open||!G?h$4(SidebarLinks,{key:X,config:W}):null])}}}),sidebarLinks="",SidebarLinks=defineComponent({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(b){const $=useRoute(),j=ref(-1),Z=U=>{j.value=U===j.value?-1:U};return watch(()=>$.path,()=>{const U=b.config.findIndex(G=>isMatchedSidebarItem($,G));j.value=U},{immediate:!0,flush:"post"}),()=>h$4("ul",{class:"sidebar-links"},b.config.map((U,G)=>h$4("li",U.type==="group"?h$4(SidebarGroup,{config:U,open:G===j.value,onToggle:()=>Z(G)}):h$4(SidebarChild,{config:U}))))}}),sidebar="",Sidebar=defineComponent({name:"SideBar",setup(b,{slots:$}){const j=useRoute(),Z=useThemeLocaleData(),U=useSidebarItems(),G=ref();return onMounted(()=>{watch(()=>j.hash,W=>{const Y=document.querySelector(`.sidebar a.sidebar-link[href="${j.path}${W}"]`);if(!Y)return;const{top:X,height:nn}=G.value.getBoundingClientRect(),{top:an,height:tn}=Y.getBoundingClientRect();an<X?Y.scrollIntoView(!0):an+tn>X+nn&&Y.scrollIntoView(!1)})}),()=>{var W,Y,X;return h$4("aside",{class:["sidebar",{"hide-icon":Z.value.sidebarIcon===!1}],id:"sidebar",ref:G},[(W=$.top)==null?void 0:W.call($),((Y=$.default)==null?void 0:Y.call($))||h$4(SidebarLinks,{config:U.value}),(X=$.bottom)==null?void 0:X.call($)])}}}),common="",CommonWrapper=defineComponent({name:"CommonWrapper",props:{noNavbar:Boolean,noSidebar:Boolean},setup(b,{slots:$}){const j=useRouter(),Z=usePageData(),U=usePageFrontmatter(),G=useThemeLocaleData(),{isMobile:W,isWide:Y}=useWindowSize(),X=ref(!1),nn=computed(()=>b.noNavbar||U.value.navbar===!1||G.value.navbar===!1?!1:Boolean(Z.value.title||G.value.logo||G.value.repo||G.value.navbar)),an=useSidebarItems(),tn=computed(()=>b.noSidebar?!1:U.value.sidebar!==!1&&an.value.length!==0&&!U.value.home),sn=ref(!1),on=ref(!1),pn=kn=>{sn.value=typeof kn=="boolean"?kn:!sn.value},en=kn=>{on.value=typeof kn=="boolean"?kn:!on.value},cn={x:0,y:0},mn=kn=>{cn.x=kn.changedTouches[0].clientX,cn.y=kn.changedTouches[0].clientY},rn=kn=>{const vn=kn.changedTouches[0].clientX-cn.x,hn=kn.changedTouches[0].clientY-cn.y;Math.abs(vn)>Math.abs(hn)*1.5&&Math.abs(vn)>40&&(vn>0&&cn.x<=80?pn(!0):pn(!1))},fn=computed(()=>U.value.home?!1:U.value.toc||G.value.toc!==!1&&U.value.toc!==!1),Ln=()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;let wn,Tn=0;return useEventListener$1("scroll",useThrottleFn(()=>{const kn=Ln();Tn<kn&&kn>58?sn.value||(X.value=!0):X.value=!1,Tn=kn},300,!0)),watch(W,kn=>{kn||pn(!1)}),onMounted(()=>{wn=j.afterEach(()=>{pn(!1)})}),onBeforeUnmount(()=>{wn()}),()=>h$4(_t("GlobalEncrypt")?resolveComponent("GlobalEncrypt"):Ct,()=>{var kn;return h$4("div",{class:["theme-container",{"no-navbar":!nn.value,"no-sidebar":!tn.value&&!($.sidebar||$.sidebarTop||$.sidebarBottom),"has-toc":fn.value,"hide-navbar":X.value,"sidebar-collapsed":!W.value&&!Y.value&&on.value,"sidebar-open":W.value&&sn.value},U.value.containerClass||""],onTouchStart:mn,onTouchEnd:rn},[nn.value?h$4(Navbar,{onToggleSidebar:()=>pn()},{leftStart:()=>{var vn;return(vn=$.navbarLeftStart)==null?void 0:vn.call($)},leftEnd:()=>{var vn;return(vn=$.navbarLeftEnd)==null?void 0:vn.call($)},centerStart:()=>{var vn;return(vn=$.navbarCenterStart)==null?void 0:vn.call($)},centerEnd:()=>{var vn;return(vn=$.navbarCenterEnd)==null?void 0:vn.call($)},rightStart:()=>{var vn;return(vn=$.navbarRightStart)==null?void 0:vn.call($)},rightEnd:()=>{var vn;return(vn=$.navbarRightEnd)==null?void 0:vn.call($)},screenTop:()=>{var vn;return(vn=$.navScreenTop)==null?void 0:vn.call($)},screenBottom:()=>{var vn;return(vn=$.navScreenBottom)==null?void 0:vn.call($)}}):null,h$4(Transition,{name:"fade"},()=>sn.value?h$4("div",{class:"sidebar-mask",onClick:()=>pn(!1)}):null),h$4(Transition,{name:"fade"},()=>W.value?null:h$4("div",{class:"toggle-sidebar-wrapper",onClick:()=>en()},h$4("span",{class:["arrow",on.value?"right":"left"]}))),h$4(Sidebar,{},{...$.sidebar?{default:()=>{var vn;return(vn=$.sidebar)==null?void 0:vn.call($)}}:{},top:()=>{var vn;return(vn=$.sidebarTop)==null?void 0:vn.call($)},bottom:()=>{var vn;return(vn=$.sidebarBottom)==null?void 0:vn.call($)}}),(kn=$.default)==null?void 0:kn.call($),h$4(PageFooter)])})}}),DropTransition=defineComponent({name:"DropTransition",props:{type:{type:String,default:"single"},delay:{type:Number,default:0},duration:{type:Number,default:.25},appear:Boolean},setup(b,{slots:$}){const j=U=>{U.style.transition=`transform ${b.duration}s ease-in-out ${b.delay}s, opacity ${b.duration}s ease-in-out ${b.delay}s`,U.style.transform="translateY(-20px)",U.style.opacity="0"},Z=U=>{U.style.transform="translateY(0)",U.style.opacity="1"};return()=>h$4(b.type==="single"?Transition:TransitionGroup,{name:"drop",appear:b.appear,onAppear:j,onAfterAppear:Z,onEnter:j,onAfterEnter:Z,onBeforeLeave:j},()=>{var U;return(U=$.default)==null?void 0:U.call($)})}}),featurePanel="",FeaturePanel=defineComponent({name:"FeaturePanel",props:{items:{type:Object,default:()=>[]},header:{type:String,default:""}},setup(b){return()=>h$4("div",{class:"feature-panel"},[b.header?h$4("h2",{class:"feature-header"},b.header):null,b.items.length?h$4("div",{class:"feature-wrapper"},b.items.map($=>{const j=[h$4("h3",[h$4(Icon,{icon:$.icon}),h$4("span",{innerHTML:$.title})]),h$4("p",{innerHTML:$.details})];return $.link?isLinkExternal($.link)?h$4("a",{class:"feature-item link",href:$.link,role:"navigation","aria-label":$.title,target:"_blank"},j):h$4(RouterLink,{class:"feature-item link",to:$.link,role:"navigation","aria-label":$.title},()=>j):h$4("div",{class:"feature-item"},j)})):null])}}),heroInfo="",HeroInfo=defineComponent({name:"HeroInfo",setup(b,{slots:$}){const j=usePageFrontmatter(),Z=useSiteLocaleData(),U=computed(()=>j.value.heroText===!1?!1:j.value.heroText||Z.value.title||"Hello"),G=computed(()=>j.value.tagline===!1?!1:j.value.tagline||Z.value.description||"Welcome to your VuePress site"),W=computed(()=>j.value.heroImage?withBase(j.value.heroImage):null),Y=computed(()=>j.value.heroImageDark?withBase(j.value.heroImageDark):null),X=computed(()=>j.value.heroAlt||U.value||"hero"),nn=computed(()=>j.value.actions??[]);return()=>{var an,tn;return h$4("header",{class:"hero-info-wrapper"},[((an=$.heroImage)==null?void 0:an.call($))||h$4(DropTransition,{appear:!0,type:"group"},()=>[W.value?h$4("img",{key:"light",class:{light:Y.value},src:W.value,alt:X.value}):null,Y.value?h$4("img",{key:"dark",class:"dark",src:Y.value,alt:X.value}):null]),((tn=$.heroInfo)==null?void 0:tn.call($))||h$4("div",{class:"hero-info"},[U.value?h$4(DropTransition,{appear:!0,delay:.04},()=>h$4("h1",{id:"main-title"},U.value)):null,G.value?h$4(DropTransition,{appear:!0,delay:.08},()=>h$4("p",{class:"description"},G.value)):null,nn.value.length?h$4(DropTransition,{appear:!0,delay:.12},()=>h$4("p",{class:"actions"},nn.value.map(sn=>h$4(AutoLink,{class:["action-button",sn.type||"default"],config:sn,noExternalLinkIcon:!0})))):null])])}}}),MarkdownContent=({custom:b})=>h$4(Content,{class:["theme-hope-content",{custom:b}]});MarkdownContent.displayName="MarkdownContent";MarkdownContent.props={custom:Boolean};const homePage="",HomePage=defineComponent({name:"HopePage",setup(b,{slots:$}){const j=usePure(),Z=usePageFrontmatter(),U=computed(()=>{const{features:G}=Z.value;return isArray(G)?G.some(W=>!("items"in W))?[{items:G}]:G:[]});return()=>{var G,W,Y;return h$4("main",{class:["home project",{pure:j.value}],id:"main-content","aria-labelledby":Z.value.heroText===null?void 0:"main-title"},[(G=$.top)==null?void 0:G.call($),h$4(HeroInfo),U.value.map(({header:X="",items:nn},an)=>h$4(DropTransition,{appear:!0,delay:.16+an*.08},()=>h$4(FeaturePanel,{header:X,items:nn}))),(W=$.center)==null?void 0:W.call($),h$4(DropTransition,{appear:!0,delay:.16+U.value.length*.08},()=>h$4(MarkdownContent,{custom:!0})),(Y=$.bottom)==null?void 0:Y.call($)])}}}),getAncestorLinks=(b,$)=>{const j=b.path.replace($,"/").split("/"),Z=[];let U=removeEndingSlash($);return j.forEach((G,W)=>{W!==j.length-1?(U+=`${G}/`,Z.push(U)):G!==""&&(U+=G,Z.push(U))}),Z},breadcrumb="",BreadCrumb=defineComponent({name:"BreadCrumb",setup(){const b=useRouter(),$=useRoute(),j=useRouteLocale(),Z=usePageFrontmatter(),U=useThemeLocaleData(),G=ref([]),W=computed(()=>(Z.value.breadcrumb||Z.value.breadcrumb!==!1&&U.value.breadcrumb!==!1)&&G.value.length>1),Y=computed(()=>Z.value.breadcrumbIcon||Z.value.breadcrumbIcon!==!1&&U.value.breadcrumbIcon!==!1),X=()=>{const nn=b.getRoutes(),an=getAncestorLinks($,j.value).map(tn=>{const sn=nn.find(on=>on.path===tn);if(sn){const{meta:on,path:pn}=Dt(b,sn.path),en=on.s||on.title;if(en)return{title:en,icon:on.i,path:pn}}return null}).filter(tn=>tn!==null);an.length>1&&(G.value=an)};return onMounted(()=>{X(),watch(()=>$.path,X)}),()=>h$4("nav",{class:["breadcrumb",{disable:!W.value}]},W.value?h$4("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},G.value.map((nn,an)=>h$4("li",{class:{"is-active":G.value.length-1===an},property:"itemListElement",typeof:"ListItem"},[h$4(RouterLink,{to:nn.path,property:"item",typeof:"WebPage"},()=>[Y.value?h$4(Icon,{icon:nn.icon}):null,h$4("span",{property:"name"},nn.title||"Unknown")]),h$4("meta",{property:"position",content:an+1})]))):[])}}),pageNav="",resolveFromFrontmatterConfig=b=>b===!1?!1:isString$2(b)?useAutoLink(b,!0):isPlainObject(b)?b:null,resolveFromSidebarItems=(b,$,j)=>{const Z=b.findIndex(U=>U.link===$);if(Z!==-1){const U=b[Z+j];return U!=null&&U.link?U:null}for(const U of b)if(U.children){const G=resolveFromSidebarItems(U.children,$,j);if(G)return G}return null},PageNav=defineComponent({name:"PageNav",setup(){const b=useThemeLocaleData(),$=usePageFrontmatter(),j=useSidebarItems(),Z=useRoute(),U=useNavigate(),G=computed(()=>{const Y=resolveFromFrontmatterConfig($.value.prev);return Y===!1?null:Y||(b.value.prevLink===!1?null:resolveFromSidebarItems(j.value,Z.path,-1))}),W=computed(()=>{const Y=resolveFromFrontmatterConfig($.value.next);return Y===!1?null:Y||(b.value.nextLink===!1?null:resolveFromSidebarItems(j.value,Z.path,1))});return useEventListener$1("keydown",Y=>{Y.altKey&&(Y.key==="ArrowRight"?W.value&&(U(W.value.link),Y.preventDefault()):Y.key==="ArrowLeft"&&G.value&&(U(G.value.link),Y.preventDefault()))}),()=>G.value||W.value?h$4("nav",{class:"page-nav"},[G.value?h$4(AutoLink,{class:"prev",config:G.value},()=>{var Y,X;return[h$4("div",{class:"hint"},[h$4("span",{class:"arrow left"}),b.value.metaLocales.prev]),h$4("div",{class:"link"},[h$4(Icon,{icon:(Y=G.value)==null?void 0:Y.icon}),(X=G.value)==null?void 0:X.text])]}):null,W.value?h$4(AutoLink,{class:"next",config:W.value},()=>{var Y,X;return[h$4("div",{class:"hint"},[b.value.metaLocales.next,h$4("span",{class:"arrow right"})]),h$4("div",{class:"link"},[(Y=W.value)==null?void 0:Y.text,h$4(Icon,{icon:(X=W.value)==null?void 0:X.icon})])]}):null]):null}}),AuthorIcon=()=>h$4(P$5,{name:"author"},()=>h$4("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));AuthorIcon.displayName="AuthorIcon";const CalendarIcon=()=>h$4(P$5,{name:"calendar"},()=>h$4("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));CalendarIcon.displayName="CalendarIcon";const CategoryIcon$1=()=>h$4(P$5,{name:"category"},()=>h$4("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));CategoryIcon$1.displayName="CategoryIcon";const EyeIcon=()=>h$4(P$5,{name:"eye"},()=>h$4("path",{d:"M992 512.096c0-5.76-.992-10.592-1.28-11.136-.192-2.88-1.152-8.064-2.08-10.816-.256-.672-.544-1.376-.832-2.08-.48-1.568-1.024-3.104-1.6-4.32C897.664 290.112 707.104 160 512 160c-195.072 0-385.632 130.016-473.76 322.592-1.056 2.112-1.792 4.096-2.272 5.856a55.512 55.512 0 00-.64 1.6c-1.76 5.088-1.792 8.64-1.632 7.744-.832 3.744-1.568 11.168-1.568 11.168-.224 2.272-.224 4.032.032 6.304 0 0 .736 6.464 1.088 7.808.128 1.824.576 4.512 1.12 6.976h-.032c.448 2.08 1.12 4.096 1.984 6.08.48 1.536.992 2.976 1.472 4.032C126.432 733.856 316.992 864 512 864c195.136 0 385.696-130.048 473.216-321.696 1.376-2.496 2.24-4.832 2.848-6.912.256-.608.48-1.184.672-1.728 1.536-4.48 1.856-8.32 1.728-8.32l-.032.032c.608-3.104 1.568-7.744 1.568-13.28zM512 672c-88.224 0-160-71.776-160-160s71.776-160 160-160 160 71.776 160 160-71.776 160-160 160z"}));EyeIcon.displayName="EyeIcon";const FireIcon=()=>h$4(P$5,{name:"fire"},()=>h$4("path",{d:"M726.4 201.6c-12.8-9.6-28.8-6.4-38.4 0-9.6 9.6-16 25.6-9.6 38.4 6.4 12.8 9.6 28.8 12.8 44.8C604.8 83.2 460.8 38.4 454.4 35.2c-9.6-3.2-22.4 0-28.8 6.4-9.6 6.4-12.8 19.2-9.6 28.8 12.8 86.4-25.6 188.8-115.2 310.4-6.4-25.6-16-51.2-32-80-9.6-9.6-22.4-16-35.2-12.8-16 3.2-25.6 12.8-25.6 28.8-3.2 48-25.6 92.8-51.2 140.8C134.4 499.2 112 544 102.4 592c-32 150.4 99.2 329.6 233.6 380.8 9.6 3.2 19.2 6.4 32 9.6-25.6-19.2-41.6-51.2-48-96C294.4 691.2 505.6 640 515.2 460.8c153.6 105.6 224 336 137.6 505.6 3.2 0 6.4-3.2 9.6-3.2 0 0 3.2 0 3.2-3.2 163.2-89.6 252.8-208 259.2-345.6 16-211.2-163.2-390.4-198.4-412.8z"}));FireIcon.displayName="FireIcon";const PrintIcon=()=>h$4(P$5,{name:"print"},()=>h$4("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));PrintIcon.displayName="PrintIcon";const TagIcon$1=()=>h$4(P$5,{name:"tag"},()=>h$4("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));TagIcon$1.displayName="TagIcon";const TimerIcon=()=>h$4(P$5,{name:"timer"},()=>h$4("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));TimerIcon.displayName="TimerIcon";const WordIcon=()=>h$4(P$5,{name:"word"},()=>[h$4("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),h$4("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);WordIcon.displayName="WordIcon";const useMetaLocale=()=>{const b=useThemeLocaleData();return computed(()=>b.value.metaLocales)},readingTimeLocales={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}},editLinkPatterns={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},resolveEditLink=({docsRepo:b,docsBranch:$,docsDir:j,filePathRelative:Z,editLinkPattern:U})=>{if(!Z)return null;const G=Jt(b);let W;return U?W=U:G!==null&&(W=editLinkPatterns[G]),W?W.replace(/:repo/,isLinkHttp(b)?b:`https://github.com/${b}`).replace(/:branch/,$).replace(/:path/,removeLeadingSlash(`${removeEndingSlash(j)}/${Z}`)):null},useEditLink=()=>{const b=useThemeLocaleData(),$=usePageData(),j=usePageFrontmatter();return computed(()=>{const{repo:Z,docsRepo:U=Z,docsBranch:G="main",docsDir:W="",editLink:Y,editLinkPattern:X=""}=b.value;if(!(j.value.editLink??Y??!0)||!U)return null;const an=resolveEditLink({docsRepo:U,docsBranch:G,docsDir:W,editLinkPattern:X,filePathRelative:$.value.filePathRelative});return an?{text:b.value.metaLocales.editLink,link:an}:null})},useUpdateTime=()=>{const b=useSiteLocaleData(),$=useThemeLocaleData(),j=usePageData(),Z=usePageFrontmatter();return computed(()=>{var W,Y;return!(Z.value.lastUpdated??$.value.lastUpdated??!0)||!((W=j.value.git)!=null&&W.updatedTime)?null:new Date((Y=j.value.git)==null?void 0:Y.updatedTime).toLocaleString(b.value.lang)})},useContributors=()=>{const b=useThemeLocaleData(),$=usePageData(),j=usePageFrontmatter();return computed(()=>{var U;return j.value.contributors??b.value.contributors??!0?((U=$.value.git)==null?void 0:U.contributors)??null:null})},authorInfo="",AuthorInfo=defineComponent({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0},pure:Boolean},setup(b){const $=useMetaLocale();return()=>b.author.length?h$4("span",{class:"page-author-info","aria-label":`${$.value.author}${b.pure?"":"🖊"}`,...b.pure?{}:{"data-balloon-pos":"down"}},[h$4(AuthorIcon),h$4("span",b.author.map(j=>j.url?h$4("a",{class:"page-author-item",href:j.url,target:"_blank",rel:"noopener noreferrer"},j.name):h$4("span",{class:"page-author-item"},j.name))),h$4("span",{property:"author",content:b.author.map(j=>j.name).join(", ")})]):null}}),categoryInfo="",CategoryInfo=defineComponent({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0},pure:Boolean},setup(b){const $=useRouter(),j=useRoute(),Z=useMetaLocale(),U=(G,W="")=>{W&&j.path!==W&&(G.preventDefault(),$.push(W))};return()=>b.category.length?h$4("span",{class:"page-category-info","aria-label":`${Z.value.category}${b.pure?"":"🌈"}`,...b.pure?{}:{"data-balloon-pos":"down"}},[h$4(CategoryIcon$1),...b.category.map(({name:G,path:W})=>h$4("span",{class:["page-category-item",{[`category${Gt(G,9)}`]:!b.pure,clickable:W}],role:W?"navigation":"",onClick:Y=>U(Y,W)},G)),h$4("meta",{property:"articleSection",content:b.category.map(({name:G})=>G).join(",")})]):null}}),DateInfo=defineComponent({name:"DateInfo",inheritAttrs:!1,props:{date:{type:Object,default:null},localizedDate:{type:String,default:""},pure:Boolean},setup(b){const $=usePageLang(),j=useMetaLocale();return()=>{var Z,U;return b.date?h$4("span",{class:"page-date-info","aria-label":`${j.value.date}${b.pure?"":"📅"}`,...b.pure?{}:{"data-balloon-pos":"down"}},[h$4(CalendarIcon),h$4("span",h$4(ClientOnly,()=>{var G;return b.localizedDate||((G=b.date.value)==null?void 0:G.toLocaleDateString($.value))})),h$4("meta",{property:"datePublished",content:((U=(Z=b.date)==null?void 0:Z.value)==null?void 0:U.toISOString())||""})]):null}}});defineComponent({name:"PageViewInfo",inheritAttrs:!1,props:{pageview:{type:[Boolean,String],default:!1},pure:Boolean},setup(b){const $=useRoute(),j=useMetaLocale(),Z=ref(0),U=()=>{const G=document.querySelector(".waline-pageview-count");if(G){const W=G.textContent;W&&!isNaN(Number(W))?Z.value=Number(W):setTimeout(U,500)}};return onMounted(()=>{setTimeout(U,1500)}),watch(()=>$.path,(G,W)=>{G!==W&&setTimeout(U,500)}),()=>b.pageview?h$4("span",{class:"page-pageview-info","aria-label":`${j.value.views}${b.pure?"":"🔢"}`,...b.pure?{}:{"data-balloon-pos":"down"}},[h$4(Z.value<1e3?EyeIcon:FireIcon),h$4("span",{class:"waline-pageview-count","data-path":isString$2(b.pageview)?b.pageview:withBase($.path)},"...")]):null}});const ReadingTimeInfo=defineComponent({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},pure:Boolean},setup(b){const $=useMetaLocale(),j=kt$1(readingTimeLocales),Z=computed(()=>{if(!b.readingTime)return null;const{minutes:U}=b.readingTime;return U<1?{text:j.value.less1Minute,time:"PT1M"}:{text:j.value.time.replace("$time",Math.round(U).toString()),time:`PT${Math.round(U)}M`}});return()=>Z.value?h$4("span",{class:"page-reading-time-info","aria-label":`${$.value.readingTime}${b.pure?"":"⌛"}`,...b.pure?{}:{"data-balloon-pos":"down"}},[h$4(TimerIcon),h$4("span",Z.value.text),h$4("meta",{property:"timeRequired",content:Z.value.time})]):null}}),tagInfo="",TagInfo=defineComponent({name:"TagInfo",inheritAttrs:!1,props:{tag:{type:Array,default:()=>[]},pure:Boolean},setup(b){const $=useRouter(),j=useRoute(),Z=useMetaLocale(),U=(G,W="")=>{W&&j.path!==W&&(G.preventDefault(),$.push(W))};return()=>b.tag.length?h$4("span",{class:"page-tag-info","aria-label":`${Z.value.tag}${b.pure?"":"🏷"}`,...b.pure?{}:{"data-balloon-pos":"down"}},[h$4(TagIcon$1),...b.tag.map(({name:G,path:W})=>h$4("span",{class:["page-tag-item",{[`tag${Gt(G,9)}`]:!b.pure,clickable:W}],role:W?"navigation":"",onClick:Y=>U(Y,W)},G)),h$4("meta",{property:"keywords",content:b.tag.map(({name:G})=>G).join(",")})]):null}}),originalInfo="",OriginalInfo=defineComponent({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(b){const $=useMetaLocale();return()=>b.isOriginal?h$4("span",{class:"page-original-info"},$.value.origin):null}}),WordInfo=defineComponent({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},pure:Boolean},setup(b){const $=useMetaLocale(),j=kt$1(readingTimeLocales),Z=computed(()=>{var G;return(G=b.readingTime)==null?void 0:G.words.toString()}),U=computed(()=>j.value.word.replace("$word",Z.value||""));return()=>Z.value?h$4("span",{class:"page-word-info","aria-label":`${$.value.words}${b.pure?"":"🔠"}`,...b.pure?{}:{"data-balloon-pos":"down"}},[h$4(WordIcon),h$4("span",U.value),h$4("meta",{property:"wordCount",content:Z.value})]):null}}),pageInfo="",PageInfo=defineComponent({name:"PageInfo",components:{AuthorInfo,CategoryInfo,DateInfo,OriginalInfo,PageViewInfo:()=>null,ReadingTimeInfo,TagInfo,WordInfo},props:{items:{type:[Array,Boolean],default:()=>["Author","Original","Date","PageView","ReadingTime","Category","Tag"]},info:{type:Object,required:!0}},setup(b){const $=usePure();return()=>b.items?h$4("div",{class:"page-info"},b.items.map(j=>h$4(resolveComponent(`${j}Info`),{...b.info,pure:$.value}))):null}}),pageTitle="",PageTitle=defineComponent({name:"PageTitle",setup(){const b=usePageData(),$=usePageFrontmatter(),j=useThemeLocaleData(),{info:Z,items:U}=usePageInfo();return()=>h$4("div",{class:"page-title"},[h$4("h1",[j.value.titleIcon===!1?null:h$4(Icon,{icon:$.value.icon}),b.value.title]),h$4(PageInfo,{info:Z.value,...U.value===null?{}:{items:U.value}}),h$4("hr")])}}),EditIcon=()=>h$4(P$5,{name:"edit"},()=>[h$4("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),h$4("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);EditIcon.displayName="EditIcon";const NotFoundIcon=()=>h$4("svg",{xmlns:"http://www.w3.org/2000/svg",class:"not-found-icon",viewBox:"0 0 178 130",innerHTML:'<defs><linearGradient id="b" x1=".5" x2=".5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#e9e9e9"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><linearGradient id="c" x1=".5" x2=".5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#dcdcdc"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><linearGradient id="d" x1=".5" x2=".5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#f1f1f1"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><linearGradient id="e" x1=".5" x2=".5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#dedede"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><linearGradient id="f" x1=".5" x2=".5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#e8e8e8"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><linearGradient id="g" x1=".213" y1="1.265" x2=".846" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#fff"/><stop offset="1" stop-color="#f5f5f5"/></linearGradient><linearGradient id="h" x1=".5" x2=".5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#c5c5c5"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><linearGradient id="i" x1=".5" x2=".5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#acacac"/><stop offset="1" stop-color="#f2f2f2" stop-opacity=".388"/></linearGradient><clipPath id="a"><path transform="translate(744 1111)" fill="none" d="M0 0h178v130H0z"/></clipPath></defs><g transform="translate(-744 -1111)" clip-path="url(#a)"><path d="M0 10.795 36.6 0v93.779L0 104.574z" transform="translate(772.466 1122.142)" fill="url(#b)"/><path d="M-8.492 10.642-26.361-.469v93.78l17.868 11.111z" transform="translate(780.958 1122.293)" fill="url(#c)"/><path d="M-8.5 5.55 28.106-5.3 10.228-16.437l-36.6 10.845z" transform="translate(780.963 1127.438)" fill="url(#d)"/><path d="M0 10.539 35.741 0v91.56L0 102.1z" transform="translate(870.158 1123.617)" fill="url(#d)"/><path d="M-8.913 10.38-26.361-.469v91.562l17.448 10.848z" transform="translate(879.071 1123.775)" fill="url(#e)"/><path d="m-8.918 5.032 35.741-10.59L9.366-16.437-26.375-5.848z" transform="translate(879.076 1129.175)" fill="url(#d)"/><path d="M0 9.137 30.839 0v79.381L0 88.519z" transform="translate(799.678 1151.579)" fill="url(#f)"/><path d="m-11.306 8.936-15.054-9.4v79.377l15.054 9.4z" transform="translate(810.985 1151.78)" fill="url(#c)"/><path d="M-11.313 2.087 19.526-7.05 4.464-16.437-26.375-7.3z" transform="translate(810.991 1158.63)" fill="url(#g)"/><path d="M178 53H0a51.361 51.361 0 0 1 10.453-20.952 74.532 74.532 0 0 1 19.742-16.811A103.3 103.3 0 0 1 57.089 4.058a127.515 127.515 0 0 1 63.823 0 103.3 103.3 0 0 1 26.894 11.179 74.532 74.532 0 0 1 19.741 16.811A51.363 51.363 0 0 1 178 53z" transform="translate(744 1187.549)" fill="url(#h)"/><path d="m814.529 1199.586-1.272 1.212h2.3l1.2-1.212zM816.725 1194.909l-1.272 1.212h2.3l1.263-1.212zM863.284 1199.585l-1.272 1.212h2.3l1.2-1.212zM865.519 1194.9l-1.272 1.212h2.3l1.263-1.212z" fill="#cbcbcb"/><path d="m799.527 1191.21 10.182-21.97h4.381l-9.931 21.719h14.876v3.941h-19.508zm13.081-9.493h4.152v17.859h-4.152zm20.728 18.151q-4.256 0-6.457-2.274a8.74 8.74 0 0 1-2.2-6.343v-13.791a8.708 8.708 0 0 1 2.21-6.353q2.212-2.264 6.447-2.264 4.256 0 6.457 2.253a8.726 8.726 0 0 1 2.2 6.363v13.792a8.708 8.708 0 0 1-2.21 6.349q-2.211 2.268-6.447 2.268zm0-4.048a4.29 4.29 0 0 0 3.328-1.178 4.862 4.862 0 0 0 1.074-3.39v-13.792a4.893 4.893 0 0 0-1.064-3.39 4.285 4.285 0 0 0-3.338-1.179 4.285 4.285 0 0 0-3.338 1.179 4.893 4.893 0 0 0-1.064 3.39v13.791a4.862 4.862 0 0 0 1.075 3.391 4.29 4.29 0 0 0 3.327 1.178zm14.928-4.61 10.181-21.97h4.381l-9.931 21.719h14.876v3.941h-19.507zm13.081-9.493h4.152v17.859h-4.152z" fill="#c6c6c6"/><path d="m798.306 1192.431 10.182-21.97h4.381l-9.931 21.719h14.876v3.941h-19.508zm13.081-9.493h4.152v17.859h-4.152zm20.728 18.151q-4.256 0-6.457-2.274a8.74 8.74 0 0 1-2.2-6.343v-13.791a8.708 8.708 0 0 1 2.21-6.353q2.212-2.264 6.447-2.264 4.256 0 6.457 2.253a8.726 8.726 0 0 1 2.2 6.363v13.792a8.708 8.708 0 0 1-2.21 6.349q-2.211 2.268-6.447 2.268zm0-4.048a4.29 4.29 0 0 0 3.328-1.178 4.862 4.862 0 0 0 1.074-3.39v-13.792a4.893 4.893 0 0 0-1.064-3.39 4.285 4.285 0 0 0-3.338-1.179 4.285 4.285 0 0 0-3.338 1.179 4.893 4.893 0 0 0-1.064 3.39v13.791a4.862 4.862 0 0 0 1.075 3.391 4.29 4.29 0 0 0 3.327 1.178zm14.928-4.61 10.181-21.97h4.381l-9.931 21.719h14.876v3.941h-19.507zm13.081-9.493h4.152v17.859h-4.152z" fill="#b2b2b2"/><path d="m-27.694-19.435 10.182 14.517h4.381l-9.931-14.352h14.876v-2.606h-19.508zm13.081 6.273h4.152v-11.8h-4.152zM6.115-25.156q-4.256 0-6.457 1.5a4.8 4.8 0 0 0-2.2 4.191v9.113a4.784 4.784 0 0 0 2.212 4.2 11.511 11.511 0 0 0 6.447 1.5q4.256 0 6.457-1.489a4.786 4.786 0 0 0 2.2-4.2v-9.113a4.784 4.784 0 0 0-2.212-4.2 11.511 11.511 0 0 0-6.447-1.502zm0 2.675a5.705 5.705 0 0 1 3.328.779 2.6 2.6 0 0 1 1.074 2.24v9.113a2.607 2.607 0 0 1-1.064 2.24 5.7 5.7 0 0 1-3.338.779 5.7 5.7 0 0 1-3.338-.779 2.607 2.607 0 0 1-1.064-2.24v-9.113A2.6 2.6 0 0 1 2.788-21.7a5.705 5.705 0 0 1 3.327-.782zm14.927 3.047L31.224-4.918h4.381l-9.931-14.351H40.55v-2.606H21.043zm13.081 6.273h4.152v-11.8h-4.151z" transform="translate(826 1226.245)" opacity=".32" fill="url(#i)"/><g fill="#e6e6e6"><path d="m858.428 1169.23-1.2 1.259h4.388l1.178-1.259zM802.944 1192.187l1.288-1.375h7.143v1.375zm8.415-9.25 1.273-1.234h4.15l-1.235 1.234zm-2.855-12.469 1.198-1.259h4.367l-1.178 1.259zM861.362 1181.678l-1.27 1.3h4.188l1.236-1.3zM865.519 1190.9l-1.27 1.3h2.3l1.162-1.3zM852.838 1190.791l-1.207 1.508h8.447v-1.508z"/></g></g>'}),pageMeta="",PageMeta=defineComponent({name:"PageMeta",setup(){const b=useThemeLocaleData(),$=useEditLink(),j=useUpdateTime(),Z=useContributors();return()=>{const{metaLocales:U}=b.value;return h$4("footer",{class:"page-meta"},[$.value?h$4("div",{class:"meta-item edit-link"},h$4(AutoLink,{class:"label",config:$.value},{before:()=>h$4(EditIcon)})):null,h$4("div",{class:"meta-item git-info"},[j.value?h$4("div",{class:"update-time"},[h$4("span",{class:"label"},`${U.lastUpdated}: `),h$4(ClientOnly,()=>h$4("span",{class:"info"},j.value))]):null,Z.value&&Z.value.length?h$4("div",{class:"contributors"},[h$4("span",{class:"label"},`${U.contributors}: `),Z.value.map(({email:G,name:W},Y)=>[h$4("span",{class:"contributor",title:`email: ${G}`},W),Y!==Z.value.length-1?",":""])]):null])])}}}),toc="",renderHeader=({title:b,level:$,slug:j})=>h$4(RouterLink,{to:`#${j}`,class:["toc-link",`level${$}`]},()=>b),renderChildren=(b,$)=>{const j=useRoute();return b.length&&$>0?h$4("ul",{class:"toc-list"},b.map(Z=>[h$4("li",{class:["toc-item",{active:Rt(j,`#${Z.slug}`)}]},renderHeader(Z)),renderChildren(Z.children,$-1)])):null},TOC=defineComponent({name:"TOC",props:{items:{type:Array,default:()=>[]},headerDepth:{type:Number,default:2}},setup(b){const $=useRoute(),j=usePageData(),Z=useMetaLocale(),U=useThemeData(),G=ref(),W=Y=>{var X;(X=G.value)==null||X.scrollTo({top:Y,behavior:"smooth"})};return onMounted(()=>{watch(()=>$.hash,Y=>{if(G.value){const X=document.querySelector(`#toc a.toc-link[href$="${Y}"]`);if(!X)return;const{top:nn,height:an}=G.value.getBoundingClientRect(),{top:tn,height:sn}=X.getBoundingClientRect();tn<nn?W(G.value.scrollTop+tn-nn):tn+sn>nn+an&&W(G.value.scrollTop+tn+sn-nn-an)}})}),()=>{const Y=b.items.length?renderChildren(b.items,b.headerDepth):j.value.headers?renderChildren(j.value.headers,b.headerDepth):null;return Y?h$4("div",{class:"toc-place-holder"},[h$4("aside",{id:"toc"},[h$4("div",{class:"toc-header"},[Z.value.toc,U.value.print===!1?null:h$4("button",{class:"print-button",title:"print",onClick:()=>{window.print()}},h$4(PrintIcon))]),h$4("div",{class:"toc-wrapper",ref:G},[Y])])]):null}}}),page$1="",NormalPage=defineComponent({name:"NormalPage",setup(b,{slots:$}){const j=usePageFrontmatter(),{isDarkmode:Z}=useDarkmode(),U=useThemeLocaleData(),G=computed(()=>j.value.toc||j.value.toc!==!1&&U.value.toc!==!1);return()=>h$4("main",{class:"page",id:"main-content"},h$4(_t("LocalEncrypt")?resolveComponent("LocalEncrypt"):Ct,()=>{var W,Y,X,nn;return[(W=$.top)==null?void 0:W.call($),h$4(BreadCrumb),h$4(PageTitle),G.value?h$4(TOC,{headerDepth:j.value.headerDepth??U.value.headerDepth??2}):null,(Y=$.contentBefore)==null?void 0:Y.call($),h$4(MarkdownContent),(X=$.contentAfter)==null?void 0:X.call($),h$4(PageMeta),h$4(PageNav),_t("CommentService")?h$4(resolveComponent("CommentService"),{darkmode:Z.value}):null,(nn=$.bottom)==null?void 0:nn.call($)]}))}}),fadeSlideY="",FadeSlideY=defineComponent({name:"FadeSlideY",setup(b,{slots:$}){const j=useScrollPromise(),Z=j.resolve,U=j.pending;return()=>h$4(Transition,{name:"fade-slide-y",mode:"out-in",onBeforeEnter:Z,onBeforeLeave:U},()=>{var G;return(G=$.default)==null?void 0:G.call($)})}}),skipLink="",SkipLink=defineComponent({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(b){const $=useRoute(),j=useThemeLocaleData(),Z=ref(),U=({target:G})=>{const W=document.querySelector(G.hash);if(W){const Y=()=>{W.removeAttribute("tabindex"),W.removeEventListener("blur",Y)};W.setAttribute("tabindex","-1"),W.addEventListener("blur",Y),W.focus(),window.scrollTo(0,0)}};return onMounted(()=>{watch(()=>$.path,()=>Z.value.focus())}),()=>[h$4("span",{ref:Z,tabindex:"-1"}),h$4("a",{href:`#${b.content}`,class:"skip-link sr-only",onClick:U},j.value.routeLocales.skipToContent)]}}),Layout=defineComponent({name:"Layout",setup(){const b=useThemeData(),$=useThemeLocaleData(),j=usePageData(),Z=usePageFrontmatter(),{isMobile:U}=useWindowSize(),G=computed(()=>{var W,Y;return((W=$.value.blog)==null?void 0:W.sidebarDisplay)||((Y=b.value.blog)==null?void 0:Y.sidebarDisplay)||"mobile"});return()=>[h$4(SkipLink),h$4(CommonWrapper,{},{default:()=>Z.value.home?h$4(HomePage):h$4(FadeSlideY,()=>h$4(NormalPage,{key:j.value.path})),...G.value!=="none"?{navScreenBottom:()=>h$4(resolveComponent("BloggerInfo"))}:{},...!U.value&&G.value==="always"?{sidebar:()=>h$4(resolveComponent("BloggerInfo"))}:{}})]}}),notFound="",NotFound=defineComponent({name:"NotFound",setup(){const b=useRouteLocale(),$=useThemeLocaleData(),j=()=>{const U=$.value.routeLocales.notFoundMsg;return U[Math.floor(Math.random()*U.length)]},{navigate:Z}=useLink({to:$.value.home??b.value});return()=>[h$4(SkipLink),h$4(CommonWrapper,{noSidebar:!0},()=>h$4("main",{class:"page not-found",id:"main-content"},[h$4(NotFoundIcon),h$4("blockquote",j()),h$4("button",{class:"action-button",onClick:()=>{window.history.go(-1)}},$.value.routeLocales.back),h$4("button",{class:"action-button",onClick:()=>Z()},$.value.routeLocales.home)]))]}}),index="",icons={Baidu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon baidu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1D2FE3"/><path d="M239.022 704.978c.098-4.865-.314-9.772.162-14.591 5.178-52.464 197.571-253.377 249.641-259.233 42.996-4.833 75.768 16.545 99.824 49.144 37.893 51.351 82.81 95.455 131.292 136.237 52.903 44.503 56.525 99.801 32.6 158.592-23.425 57.56-75.34 69.833-127.771 58.804-84.971-17.874-168.158-13.744-253.37-4.536-86.35 9.333-133.788-39.4-132.378-124.417zM352.464 412.86c-3.58 50.707-17.93 96.128-75.9 98.12-58.053 1.995-80.093-41.432-79.275-91.71.81-49.705 13.416-104.053 76.851-102.136 53.84 1.625 74.74 45.8 78.324 95.726zm386.053 142.168c-68.494-1.735-84.188-43.331-82.635-93.812 1.46-47.519 10.082-97.628 73.299-96.65 61.395.95 81.6 43.207 81.553 98.668-.047 53.156-19.818 89.398-72.217 91.794zm-45.235-278.345c-10.464 42.665-24.513 91.761-85.919 94.502-52.74 2.354-71.705-34.482-72.805-81.242-1.233-52.42 48.08-112.965 87.582-110.373 33.943 2.226 71.146 49.541 71.142 97.113zm-195.147-14.097c-7.005 46.274-13.63 100.025-71.562 101.351-57.077 1.306-73.567-47.922-73.638-97.109-.068-48.054 12.128-99.024 69.345-101.426 59.45-2.493 67.11 51.093 75.855 97.184z" fill="#fff"/><path d="M479.52 663.165c.006 12.194 1.498 24.61-.284 36.537-4.707 31.503 18.862 78.749-45.326 77.534-54.226-1.027-103.338-3.31-113.231-73.536-7.164-50.852 7.78-85.674 57.687-102.668 17.67-6.016 39.618 5.058 54.096-14.548 10.84-14.679-2.901-54.592 33.418-41.47 24.075 8.7 11.477 38.922 13.278 59.652 1.68 19.366.359 38.99.363 58.5zm175.45 41.902c4.291 39.657 5.093 78.047-64.709 73.503-60.097-3.912-95.56-20.794-86.293-85.624 4.287-29.991-21.148-83.238 22.19-84.867 42.71-1.606 13.57 50.41 20.825 77.622 5.276 19.794-3.984 46.774 29.753 48.193 41.337 1.738 28.383-30.022 31.099-51.604 1.209-9.61-.85-19.65.528-29.215 2.516-17.474-8.928-44.716 19.554-47.191 36.044-3.133 24.155 28.376 26.678 47.523 1.896 14.387.375 29.225.375 51.66z" fill="#1D2FE3"/><path d="M435.669 685.038c-2.255 24.07 5.605 53.68-33.623 52.136-34.594-1.362-35.274-31.818-38.513-53.078-4.028-26.448 11.38-48.18 40.785-50.023 40.967-2.564 27.097 30.764 31.35 50.965z" fill="#fff"/></svg>',BiliBili:'<svg class="icon bilibili-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><circle cx="512" cy="512" r="512" fill="#1296db"/><path d="M745.363 177.725a46.875 46.875 0 0 1 0 66.3L702.5 286.85h43.875A140.625 140.625 0 0 1 887 427.512v281.25a140.625 140.625 0 0 1-140.625 140.626h-468.75A140.625 140.625 0 0 1 137 708.763v-281.25a140.625 140.625 0 0 1 140.625-140.625h43.725l-42.788-42.825a46.875 46.875 0 1 1 66.263-66.3l99.45 99.45c2.963 2.962 5.438 6.187 7.425 9.637h120.487c1.988-3.45 4.5-6.75 7.463-9.675l99.413-99.45a46.875 46.875 0 0 1 66.3 0zm1.012 203.25h-468.75a46.875 46.875 0 0 0-46.763 43.388l-.112 3.525v281.25c0 24.712 19.125 44.962 43.387 46.724l3.488.15h468.75a46.875 46.875 0 0 0 46.763-43.387l.112-3.487v-281.25c0-25.875-21-46.875-46.875-46.876zm-375 93.75c25.875 0 46.875 21 46.875 46.875v46.875a46.875 46.875 0 1 1-93.75 0V521.6c0-25.875 21-46.875 46.875-46.875zm281.25 0c25.875 0 46.875 21 46.875 46.875v46.875a46.875 46.875 0 1 1-93.75 0V521.6c0-25.875 21-46.875 46.875-46.875z" fill="#fff"/></svg>',Bitbucket:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bitbucket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#205081"/><path fill="#fff" d="M512 191.32v.01-.01c-152.76 0-277.805 41.114-277.805 92.166 0 13.443 33.353 206.247 46.577 282.708 5.932 34.285 94.508 84.563 231.126 84.563l.102-.407v.407c137.484 0 225.26-50.278 231.192-84.578 13.23-76.457 46.592-269.255 46.592-282.698.005-51.047-125.024-92.165-277.784-92.165zm0 397.493c-48.771 0-88.31-39.545-88.31-88.31 0-48.772 39.539-88.306 88.31-88.306s88.31 39.534 88.31 88.31c0 48.766-39.539 88.306-88.31 88.306zm-.05-276.842c-98.256-.153-177.885-17.232-177.855-38.14.036-20.912 79.72-37.731 177.976-37.568 98.256.153 177.884 17.22 177.849 38.139-.026 20.908-79.705 37.716-177.966 37.564z"/><path fill="#fff" d="M711.668 642.814c-4.227 0-7.608 2.994-7.608 2.994S635.65 699.987 512 699.987s-192.06-54.18-192.06-54.18-3.386-2.988-7.608-2.988c-5.04 0-9.827 3.391-9.827 10.871 0 .79.076 1.579.224 2.353 10.617 56.826 18.382 97.206 19.736 103.347 9.268 41.805 91.045 73.411 189.525 73.411h.01c98.49 0 180.267-31.606 189.535-73.411 1.364-6.136 9.114-46.49 19.736-103.317.143-.779.224-1.578.224-2.368 0-7.485-4.786-10.881-9.827-10.881zM467.659 500.477a44.255 44.255 0 1 0 88.51 0 44.255 44.255 0 1 0-88.51 0z"/></svg>',Dingding:'<svg xmlns="http://www.w3.org/2000/svg" class="icon dingding-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1C9DF7"/><path fill="#fff" d="M760.551 442.095c0 5.178-5.178 12.945-7.767 20.713-23.302 49.192-82.85 144.988-82.85 144.988l-18.124 31.069h85.44L576.727 853.758l36.247-144.988h-67.316l23.302-95.796c-18.124 5.178-41.426 10.356-67.316 18.124 0 0-36.247 20.712-100.974-38.837 0 0-44.015-38.836-18.124-49.192 10.356-5.178 54.37-10.356 88.029-12.945 44.014-5.179 72.494-10.357 72.494-10.357s-139.81 2.59-173.468-2.589c-33.658-5.178-75.083-59.549-82.85-108.741 0 0-12.946-25.89 28.48-12.945 44.013 12.945 222.66 49.192 222.66 49.192s-235.606-72.494-251.14-90.618c-15.535-18.123-46.604-95.796-41.426-144.988 0 0 2.59-12.945 12.945-7.767 0 0 173.469 80.261 292.566 121.686 119.098 41.426 222.66 64.727 209.715 119.098z"/></svg>',Discord:'<svg xmlns="http://www.w3.org/2000/svg" class="icon discord-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2DAAE1"/><path fill="#fff" d="m422.935 240.147 5.851 8.052c-113.039 34.253-165.649 84.585-165.649 84.585s13.645-8.052 37.024-18.123c66.28-30.215 118.865-38.267 142.244-40.286 3.91 0 7.819-1.994 9.76-1.994 38.966-6.058 81.816-6.058 126.658-2.02 58.462 8.053 122.749 24.157 187.061 62.423 0 0-48.7-48.338-155.862-82.566l7.767-10.071h1.968c13.308.233 91.757 4.246 173.416 68.481 0 0 89.634 169.144 89.634 376.555 1.942-2.02-50.668 92.637-189.003 96.65 0 0-23.405-28.194-40.933-52.35 81.84-24.157 113.013-76.534 113.013-76.534a313.796 313.796 0 0 1-72.106 38.267c-31.172 14.11-60.403 22.162-89.633 28.22-60.404 12.066-114.955 8.027-161.74 0a636.81 636.81 0 0 1-91.576-28.22c-13.644-6.033-29.23-12.065-44.817-22.137-1.941-2.02-3.883-2.02-5.85-4.039-1.943 0-1.943-2.02-1.943-2.02-11.702-6.032-17.528-10.07-17.528-10.07s29.23 52.376 109.104 76.532c-19.47 24.157-40.907 54.371-40.907 54.371-138.36-4.039-190.97-98.67-190.97-98.67 0-207.41 89.633-376.555 89.633-376.555 89.634-70.5 175.384-68.481 175.384-68.481zm213.961 233.017c-35.315 0-64.727 34.512-64.727 77.672s29.412 77.672 64.727 77.672 64.727-34.512 64.727-77.672-29.412-77.672-64.727-77.672zm-233.016 0c-35.315 0-64.727 34.512-64.727 77.672s29.412 77.672 64.727 77.672 64.726-34.512 64.726-77.672-29.411-77.672-64.726-77.672z"/></svg>',Dribbble:'<svg xmlns="http://www.w3.org/2000/svg" class="icon dribbble-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DC4373"/><path fill="#C13366" d="M716.668 302.752c-13.332 5.154-28.61 3.676-35.726-1.068-86.196-48.27-179.286-62.06-265.482-37.926C292.074 300.212 241.674 437.028 242 564.746c22.622 42.136 52.558 105.234 61.854 153.104l298.24 298.246c210.532-37.376 376.584-203.408 413.986-413.928L716.668 302.752z"/><path fill="#F0F1F1" d="M511.994 219.308c-161.592 0-293.058 131.31-293.058 292.696s131.466 292.684 293.058 292.684c161.598 0 293.07-131.292 293.07-292.684 0-161.386-131.472-292.696-293.07-292.696zm192.842 138.148c33.43 41.432 53.744 93.756 54.682 150.772-11.122-2.282-58.23-11.068-114.526-11.068-18.164 0-37.282.91-56.448 3.278a822.854 822.854 0 0 0-4.938-11.812c-4.972-11.692-10.326-23.29-15.874-34.72 86.642-35.696 128.436-85.238 137.104-96.45zm-192.842-92.33c62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-38.67-70.688-80.996-129.22-91.07-142.812a247.13 247.13 0 0 1 55.82-6.368zm-106.352 23.99c8.536 11.758 50.928 70.918 90.592 141.036-106.448 27.982-200.976 29.806-223.79 29.806h-2.424c16.39-75.534 67.424-138.298 135.622-170.842zM264.402 512.39c0-2.038.034-4.076.1-6.102 1.48.018 3.666.018 6.5.018 30.726 0 137.382-2.538 247.288-35.154a828.402 828.402 0 0 1 18.928 39.526 232.24 232.24 0 0 0-8.234 2.482C405.236 553.126 337.216 658.936 326.75 676.232c-38.778-43.696-62.348-101.058-62.348-163.842zm247.592 247.246c-56.786 0-109.192-19.232-151.01-51.48 7.074-13.868 58.412-106.3 194.026-153.5a1.806 1.806 0 0 1 .272-.09c34.006 88.53 48.408 162.834 52.358 185.862-29.432 12.374-61.752 19.208-95.646 19.208zm140.236-43.584c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/><path fill="#D1D1D1" d="M511.994 219.308c-.382 0-.758.028-1.142.028v45.804c.38 0 .758-.018 1.142-.018 62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-12.14-22.194-24.642-43.188-36.392-61.968V473.29c2.476-.706 4.954-1.41 7.434-2.144a828.402 828.402 0 0 1 18.928 39.526c-2.776.796-5.514 1.592-8.234 2.478a323.314 323.314 0 0 0-18.128 6.52v53.228a418.976 418.976 0 0 1 44.428-18.332c34.006 88.53 48.408 162.834 52.358 185.862-29.428 12.374-61.746 19.208-95.646 19.208-.382 0-.758-.024-1.142-.024v45.05c.382 0 .758.028 1.142.028 161.598 0 293.07-131.292 293.07-292.684.002-161.388-131.47-292.698-293.068-292.698zm71.614 269.316c-4.972-11.692-10.326-23.29-15.874-34.72 86.64-35.696 128.434-85.236 137.102-96.45 33.43 41.432 53.748 93.756 54.682 150.77-11.122-2.282-58.23-11.068-114.522-11.068-18.164 0-37.282.914-56.448 3.278-1.624-3.932-3.24-7.852-4.94-11.81zm68.622 227.428c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M299.372 313.572H722.93c28.945 0 52.61 21.845 52.975 48.787L511.333 500.35 246.76 362.481c.182-27.003 23.666-48.97 52.611-48.97zm-52.671 101.702-.243 244.121c0 27.186 23.848 49.395 52.914 49.395H722.93c29.127 0 52.975-22.21 52.975-49.395V415.152L517.522 546.71a13.957 13.957 0 0 1-12.682 0L246.7 415.274z"/></svg>',Evernote:'<svg xmlns="http://www.w3.org/2000/svg" class="icon evernote-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#36D613"/><path fill="#595757" d="M347.671 193.259v87.51h-87.51z"/><path fill="#595757" d="M788.047 323.645s3.65-77.491-73.84-103.02c0 0-89.479-12.867-151.41-11.91 0 0-8.595-53.23-103.33-53.23 0 0-89.556-1.244-89.892 70.526v61.671s2.848 14.991-27.833 14.991h-81.581s-34.28 5.282-34.28 72.934c0 0 3.133 120.082 41.322 200.24 0 0 9.398 34.667 58.228 46.577 0 0 95.822 25.477 123.991 21.722 0 0 58.228 22.137 62.008-111.874 0 0 3.755-19.935 6.266 11.392 0 0-1.89 68.948 57.607 72.702 0 0 45.723 12.557 73.892 10.045 0 0 37.568 2.15 37.568 64.158 0 0 13.152 71.665-34.435 71.665h-65.763s-18.149 4.428-18.149-21.877c0 0-4.997-21.878 26.305-21.878h15.534v-43.756h-43.082s-66.332-6.317-66.332 50.047v75.135s9.347 49.866 66.332 49.866h121.273s48.441.44 76.61-90.359c0-.078 48.52-182.323 22.991-435.767zM625.272 486.523c0-21.877 18.02-51.16 39.432-51.16s36.48 36.118 36.48 58.022c-28.79-7.897-45.827-9.606-75.912-6.862z"/></svg>',Facebook:'<svg xmlns="http://www.w3.org/2000/svg" class="icon facebook-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#3C599B"/><path fill="#fff" d="M372.568 413.895h59.898V355.68c0-25.67.647-65.257 19.294-89.774 19.642-25.965 46.605-43.613 92.983-43.613 75.565 0 107.384 10.778 107.384 10.778l-14.971 88.74s-24.967-7.217-48.254-7.217c-23.302 0-44.16 8.35-44.16 31.635v67.666h95.526l-6.67 86.678h-88.855V801.69H432.466V500.574h-59.898v-86.68z"/></svg>',Flipboard:'<svg xmlns="http://www.w3.org/2000/svg" class="icon flipboard-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#E12828"/><path fill="#fff" d="M293.58 292.18h160.343v481.003H293.58V292.18z"/><path fill="#FCE9E9" d="M453.922 292.18h320.662v160.343H453.922V292.18z"/><path fill="#F6BEBE" d="M453.922 452.523h160.343v160.343H453.922V452.523z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Gitlab:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitlab-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#E8F0FF"/><path fill="#E24329" d="m512 848.182 134.473-413.8H377.527L512 848.182z"/><path fill="#FC6D26" d="m512 848.182-134.473-413.8h-188.36L512 848.182z"/><path fill="#E24329" d="M189.167 434.382h188.36l-80.832-249.17c-4.202-12.854-22.247-12.854-26.45 0l-81.078 249.17z"/><path fill="#FC6D26" d="m512 848.182 134.473-413.8h188.36L512 848.182z"/><path fill="#FCA326" d="m834.833 434.382 40.787 125.82a27.8 27.8 0 0 1-10.135 31.147L512 848.182l322.833-413.8z"/><path fill="#E24329" d="M834.833 434.382h-188.36l81.079-249.17c4.202-12.854 22.247-12.854 26.45 0l80.831 249.17z"/></svg>',Gmail:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gmail-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DB4437"/><path fill="#E67C73" d="M277.48 285.567h465.767v441.362H277.48V285.567z"/><path fill="#FFF" d="M282.543 285.567h-10.645c-25.962 0-47.122 21.808-47.122 48.705v343.952c0 26.897 21.08 48.705 47.122 48.705h24.976V407.954l213.49 169.95 213.489-169.95V726.93h24.975c26.04 0 47.123-21.809 47.123-48.705V334.272c0-26.897-21.134-48.705-47.123-48.705h-10.644L510.364 480.44 282.542 285.567z"/></svg>',Instagram:'<svg xmlns="http://www.w3.org/2000/svg" class="icon instagram-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#181818"/><path fill="#fff" d="M512 348.16c-88.222 0-163.84 71.417-163.84 163.84 0 88.222 71.417 163.84 163.84 163.84 88.222 0 163.84-71.417 163.84-163.84 0-88.222-75.618-163.84-163.84-163.84zm0 268.866c-58.814 0-105.026-46.212-105.026-105.026S453.186 406.974 512 406.974 617.026 453.186 617.026 512 570.814 617.026 512 617.026zM680.041 306.15c-21.005 0-37.81 16.804-37.81 37.809s16.805 37.81 37.81 37.81 37.81-16.805 37.81-37.81-16.805-37.81-37.81-37.81z"/><path fill="#FFF" d="M659.036 196.923h-16.804c-50.413-4.2-210.051-4.2-260.464 0-96.623-4.2-180.644 71.418-184.845 168.041v16.804c-4.2 50.413-4.2 210.051 0 260.464-4.2 96.623 71.418 180.644 168.041 184.845h16.804c50.413 4.2 210.051 4.2 260.464 0 96.623 4.2 180.644-71.418 184.845-168.041V381.768c4.2-96.623-71.418-180.644-168.041-184.845zM759.86 696.845c-12.604 29.407-33.609 50.412-58.815 58.814-121.83 16.805-247.86 16.805-373.891 0-29.407-12.603-50.412-33.608-58.814-58.814-12.604-63.015-16.805-126.03-12.604-184.845-4.2-63.015 0-126.03 12.604-184.845 12.603-29.407 33.608-50.412 58.814-58.814 121.83-16.805 247.86-16.805 373.891 0 29.407 12.603 50.412 33.608 58.815 58.814 12.603 63.015 16.804 126.03 12.603 184.845 4.2 63.015 0 126.03-12.603 184.845z"/></svg>',Lark:'<svg class="icon lark-icon" viewBox="0 0 700 700" xmlns="http://www.w3.org/2000/svg"><path d="M0 350C0 156.7 156.7 0 350 0s350 156.7 350 350-156.7 350-350 350S0 543.3 0 350Z" fill="#fdfdfd"/><path d="M94.683 255.472c-1.188.99-3.547 1.424-3.565 2.971-.892 77.877-1.647 155.803.853 233.645.135 4.185 3.811 7.709 6.987 10.437 8.041 6.906 16.845 13.026 26.179 18.048 15.915 8.564 32.118 16.959 49.299 22.567 22.582 7.37 45.902 12.712 69.402 16.176 16.45 2.425 33.243 1.892 49.863 1.404 85.699-2.518 170.495-42.242 226.974-107.047 13.128-15.062 24.349-31.701 35.801-48.072.482-.689-.29-1.655-.435-2.483-11.645 12.501-23.322 25.66-38.015 34.376-38.027 22.561-80.103 18.178-120.414 4.963-24.658-8.083-49.594-15.711-73.208-26.468-32.043-14.597-63.264-31.14-93.363-49.411-50.119-30.424-92.859-71.794-136.358-111.106Z" fill="#326ffd"/><path d="M373.34 355.289c22.389-21.264 43.857-43.542 67.167-63.793 15.84-13.761 40.614-23.584 58.792-32.162-13.932-44.24-30.142-84.389-60.513-120.46-3.54-4.204-7.91-9.366-13.399-9.603-81.245-3.519-162.641-2.296-243.958-1.541-1.72.016-3.262 2.127-3.451 3.836-.209 1.893 1.026 3.902 2.457 5.159 21.134 18.566 43.735 35.416 64.865 53.985 52.859 46.45 91.839 105.023 128.04 164.579Z" fill="#00d5b8"/><path d="M302.636 406.089c63.531 28.909 161.471 77.441 225.923 24.345 10.473-8.628 22.415-16.393 29.694-27.844 19.077-30.011 31.761-63.645 48.432-95.056 8.019-15.112 17.249-23.738 28.765-36.905-17.982-10.513-43.141-16.899-63.455-18.431-44.467-3.354-94.982 6.952-129.899 36.91-29.717 25.495-55.957 54.804-84.849 81.23-16.051 14.681-36.135 24.874-54.611 35.751Z" fill="#133c99"/></svg>',Lines:'<svg xmlns="http://www.w3.org/2000/svg" class="icon lines-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#00C300"/><path fill="#fff" d="M861.44 469.76C861.44 313.28 704 186.08 512 186.08s-349.44 127.2-349.44 283.68C162.56 608 286.88 727.52 454.88 752c11.52 2.4 26.88 7.68 30.72 17.28a71.04 71.04 0 0 1 0 31.68l-5.28 29.76c0 8.64-7.2 34.56 30.24 18.72a1104 1104 0 0 0 274.56-202.56A251.52 251.52 0 0 0 860 472.16zM375.2 562.88h-69.12a17.76 17.76 0 0 1-18.24-18.24v-139.2a17.76 17.76 0 0 1 18.24-18.24 18.24 18.24 0 0 1 18.24 18.24v120.48h50.88a18.72 18.72 0 0 1 18.24 18.72 18.24 18.24 0 0 1-18.24 18.24zm72-18.24a18.24 18.24 0 1 1-36.48 0v-139.2a18.24 18.24 0 0 1 36.48 0zm167.04 0a18.24 18.24 0 0 1-12.48 17.28H596a18.24 18.24 0 0 1-14.4-7.2l-69.6-96v85.92a18.24 18.24 0 1 1-36.48 0v-139.2A18.24 18.24 0 0 1 488 388.16h5.76a18.24 18.24 0 0 1 14.4 7.2l71.52 96v-85.92a18.24 18.24 0 1 1 36.48 0zm112.32-87.84a18.24 18.24 0 0 1 18.24 18.24 17.76 17.76 0 0 1-18.24 18.24h-50.88v32.64h50.88a18.72 18.72 0 0 1 18.24 18.72 18.24 18.24 0 0 1-18.24 18.24H656a18.24 18.24 0 0 1-18.24-18.24v-139.2A18.24 18.24 0 0 1 656 387.2h69.12a18.24 18.24 0 0 1 18.24 18.24 18.24 18.24 0 0 1-18.24 18.72h-49.44v32.64zm0 0"/></svg>',Linkedin:'<svg xmlns="http://www.w3.org/2000/svg" class="icon linkedin-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#4376B1"/><path fill="#F1F2F2" d="M838.301 555.94v225.157h-130.54V571.03c0-52.746-18.847-88.766-66.112-88.766-36.069 0-57.496 24.25-66.959 47.732-3.436 8.391-4.322 20.045-4.322 31.814v219.277h-130.55s1.752-355.784 0-392.613h130.56v55.637c-.263.438-.633.867-.867 1.285h.866v-1.285c17.349-26.694 48.287-64.856 117.651-64.856 85.884 0 150.273 56.114 150.273 176.685zm-535.05-356.72c-44.655 0-73.87 29.314-73.87 67.826 0 37.695 28.368 67.855 72.157 67.855h.847c45.532 0 73.842-30.16 73.842-67.855-.866-38.512-28.31-67.825-72.975-67.825zM237.14 781.098h130.5V388.474h-130.5v392.623z"/></svg>',Pinterest:'<svg xmlns="http://www.w3.org/2000/svg" class="icon pinterest-icon" viewBox="0 0 1024 1024"><path fill="#fff" d="M512 1023.147c282.773 0 512-228.288 512-509.888 0-281.622-229.227-509.91-512-509.91S0 231.637 0 513.26c0 281.6 229.227 509.888 512 509.888z"/><path fill="#CA242D" d="M512 3.35C229.248 3.35 0 231.658 0 513.258c0 216.128 134.848 400.789 325.312 475.05-4.63-40.277-8.427-102.378 1.685-146.453 9.28-39.872 59.84-253.483 59.84-253.483s-15.168-30.634-15.168-75.541c0-70.933 41.302-123.797 92.715-123.797 43.819 0 64.896 32.725 64.896 71.765 0 43.627-27.819 109.099-42.56 169.963-12.224 50.773 25.707 92.33 75.84 92.33 91.03 0 160.981-95.68 160.981-233.344 0-122.133-88.064-207.317-214.058-207.317-145.814 0-231.36 108.693-231.36 221.163 0 43.648 16.853 90.645 37.93 116.245a15.19 15.19 0 0 1 3.371 14.699c-3.797 15.936-12.65 50.773-14.336 57.92-2.09 9.216-7.573 11.328-17.28 6.698-64.043-29.781-104.085-122.538-104.085-197.653 0-160.747 117.162-308.459 338.389-308.459 177.408 0 315.627 125.888 315.627 294.614 0 175.829-111.254 317.269-265.472 317.269-51.84 0-100.715-26.859-117.163-58.752l-32.021 121.28c-11.371 44.48-42.56 99.883-63.638 133.867A516.01 516.01 0 0 0 511.168 1024c282.752 0 512-228.31 512-509.91C1024 231.66 794.752 3.35 512 3.35z"/></svg>',Pocket:'<svg xmlns="http://www.w3.org/2000/svg" class="icon pocket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#EE4056"/><path fill="#fff" d="M716.52 309.066c12.549 0 23.172 4.394 31.87 13.182 8.697 8.788 13.023 19.48 13.023 32.006v150.4c0 33.975-6.568 66.41-19.705 97.307-13.138 30.918-30.76 57.487-52.89 79.685-22.106 22.197-48.562 39.864-79.367 52.888-30.804 13.024-63.081 19.547-96.876 19.547a246.897 246.897 0 0 1-97.215-19.547c-30.805-13.046-57.306-30.668-79.504-52.888-22.198-22.198-39.865-48.767-53.003-79.663a246.311 246.311 0 0 1-19.728-97.33V354.255c0-12.321 4.44-22.945 13.319-31.847a43.489 43.489 0 0 1 31.87-13.341H716.52zM512.574 617.339c9.06 0 16.989-3.216 23.738-9.581l117.103-112.415a32.622 32.622 0 0 0 10.691-24.62c0-9.469-3.33-17.533-9.966-24.191a32.958 32.958 0 0 0-24.237-10.012c-9.06 0-16.988 3.171-23.737 9.56l-93.547 89.808-93.614-89.809a33.185 33.185 0 0 0-23.443-9.559c-9.468 0-17.532 3.33-24.19 9.967-6.66 6.682-9.967 14.722-9.967 24.236 0 9.83 3.443 18.03 10.419 24.599l117.33 112.413c6.342 6.342 14.179 9.56 23.466 9.56l-.046.044z"/></svg>',QQ:'<svg xmlns="http://www.w3.org/2000/svg" class="icon qq-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#5EAADE"/><path fill="#fff" d="M729.46 627.3c-3.157-39.628-24.045-83.747-32.624-105.91l-22.084-57.047c-.702-23.73 6.312-78.322-30.511-146.61s-110.82-74.446-124.497-75.147c-13.677-.701-99.248-1.403-141.331 72.945-42.084 74.347-30.745 148.812-30.745 148.812l-23.523 57.478c-.001.002-10.962 26.223-20.43 58.135-9.469 31.914-18.938 82.064-9.469 92.234 9.47 10.17 43.837-46.643 46.993-51.903 0 0 2.456 27.18 8.943 41.383l.81 1.776.33.723.38.826.3.652.444.96.203.436a281.465 281.465 0 0 0 1.917 4.025l.189.386c.231.473.468.953.711 1.442l.146.292c6.886 13.807 18.61 33.823 37.443 50.42l.018.016-1.184.387c-10.667 3.516-31.694 11.21-40.625 19.82-1.717 1.655-2.987 3.344-3.65 5.045-5.376 13.794 4.208 15.43 20.575 16.366 16.366.934 94.923 3.04 132.564-2.221.407-.056.787-.114 1.17-.171 2.711.094 5.324.142 7.83.16l.151.002c.836.005 1.663.008 2.475.008.496 0 1.015-.002 1.542-.006l.21-.001a222.593 222.593 0 0 0 5.462-.107c.26.038.508.076.778.114 37.642 5.26 116.198 3.156 132.564 2.22 16.366-.934 25.951-2.571 20.574-16.365-4.302-11.037-34.175-21.62-45.956-25.413a141.388 141.388 0 0 0 7.958-7.645l.237-.245a142.494 142.494 0 0 0 2.53-2.702c42.435-46.643 38.928-76.101 40.682-92.935 0 0 35.775 51.553 43.488 53.306 7.713 1.754 10.169-6.31 7.012-45.94z"/></svg>',Qzone:'<svg xmlns="http://www.w3.org/2000/svg" class="icon qzone-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#0985DD"/><path fill="#fff" d="M722.38 595.24c22.486-4.056 11.345-12.424 2.156-11.346-16.685 1.72-40.43 1.925-66.562 1.284l3.029 17.79a656.641 656.641 0 0 0 61.402-7.702l-.025-.026zm68.95-174.915a5.287 5.287 0 0 0-4.493-3.645L598.42 389.29l-84.326-170.628c-1.925-3.594-7.958-3.594-9.857 0L419.885 389.29l-188.417 27.39a5.338 5.338 0 0 0-4.466 3.645 5.493 5.493 0 0 0 1.488 5.57l136.36 132.92-32.088 187.519a5.263 5.263 0 0 0 2.13 5.39c1.695 1.284 3.851 1.463 5.776.385l168.651-88.407 168.524 88.638 2.567.642 3.209-1.079c1.72-1.283 2.566-3.208 2.13-5.34l-24.591-143.648c-27.21 2.156-54.37 3.183-76.42 3.183-77.267 0-135.075-3.645-135.948-3.645a16.48 16.48 0 0 1-14.785-11.757 16.247 16.247 0 0 1 5.981-17.764l155.431-113.05c-99.959-7.906-183.873-6.418-184.721-6.418-13.502.642-25.67-3.645.642-14.375 4.518-1.694 109.2-23.72 230.362-7.445 6.673.847 12.013 5.75 13.733 12.194a16.61 16.61 0 0 1-6.263 17.302L497.204 571.598c27.826 5.802 100.37 12.014 160.745 13.502l-4.519-26.312 136.308-132.97a5.338 5.338 0 0 0 1.54-5.544l.051.051z"/></svg>',Reddit:'<svg xmlns="http://www.w3.org/2000/svg" class="icon reddit-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#EB5528"/><path fill="#fff" d="M617.199 680.55c5.666 5.974 5.666 11.742 0 17.34-21.845 23.143-56.9 34.714-105.199 34.714s-83.354-11.571-105.199-34.714c-5.666-5.598-5.666-11.366 0-17.34a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38 16.93 18.295 46.728 27.408 89.361 27.408 42.325 0 72.09-9.113 89.361-27.409a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38zm-176.06-136.635c9.182 9.694 13.756 21.47 13.756 35.294 0 13.79-4.574 25.565-13.756 35.26a44.134 44.134 0 0 1-33.28 14.54c-13.073 0-24.234-4.847-33.587-14.54a49.015 49.015 0 0 1-13.995-35.26c0-14.2 4.642-26.147 13.995-35.84 9.353-9.728 20.514-14.575 33.587-14.575 13.04 0 24.132 5.051 33.28 15.12zm222.584 35.294c0 13.79-4.642 25.565-13.995 35.26a44.954 44.954 0 0 1-33.587 14.54c-13.04 0-24.132-4.847-33.28-14.54a49.493 49.493 0 0 1-13.756-35.26c0-13.824 4.574-25.669 13.756-35.567 9.148-9.9 20.24-14.848 33.28-14.848 13.073 0 24.234 4.847 33.587 14.575 9.353 9.693 13.995 21.64 13.995 35.84zM796.433 512c0-18.295-6.144-33.963-18.5-47.036a59.494 59.494 0 0 0-44.92-19.592c-17.647 0-32.768 6.724-45.465 20.138-45.841-33.587-100.66-51.507-164.455-53.725l33.314-158.482 105.746 25.19c0 13.825 4.573 25.6 13.755 35.295 9.148 9.694 20.241 14.54 33.314 14.54 13.04 0 24.235-4.915 33.553-14.813 9.353-9.899 13.995-21.743 13.995-35.567s-4.642-25.669-13.995-35.567a44.578 44.578 0 0 0-33.553-14.814c-19.046 0-33.143 9.318-42.325 27.99L550.06 228.112c-6.69-1.877-11.094 1.126-13.21 8.977l-36.488 174.695c-63.454 2.594-117.897 20.718-163.363 54.272a59.187 59.187 0 0 0-46.011-20.685c-17.613 0-32.598 6.52-44.92 19.592a66.082 66.082 0 0 0-18.5 47.036c0 13.073 3.243 25.02 9.762 35.84 6.52 10.82 15.258 19.046 26.18 24.644a152.303 152.303 0 0 0-3.174 31.335c0 53.009 24.678 98.372 74.035 136.09 49.323 37.682 108.715 56.524 178.176 56.524 69.769 0 129.365-18.842 178.688-56.525 49.357-37.717 74.001-83.08 74.001-136.09 0-11.946-1.229-22.561-3.686-31.914 10.581-5.598 19.046-13.722 25.395-24.337 6.315-10.65 9.49-22.528 9.49-35.567z"/></svg>',Rss:'<svg xmlns="http://www.w3.org/2000/svg" class="icon rss-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#FD9B00"/><path fill="#fff" d="M687.981 740.39c0-225.92-183.617-409.777-409.21-409.777v-97.205c279.353 0 506.617 227.506 506.617 506.98H687.98zm-74.841 0h-97.538c0-63.567-24.688-123.245-69.43-167.993-44.762-44.856-104.24-69.556-167.54-69.556v-97.176c184.44 0 334.508 150.046 334.508 334.725zM346.038 605.166c37.35 0 67.514 30.357 67.514 67.39 0 37.146-30.163 67.177-67.514 67.177-37.219 0-67.458-30.03-67.458-67.176 0-37.034 30.24-67.391 67.458-67.391z"/></svg>',Steam:'<svg xmlns="http://www.w3.org/2000/svg" class="icon steam-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="488" fill="#fff"/><path fill="#13227a" d="M1008 512c0 274-222.4 496-496.8 496-227.6 0-419.2-152.6-478-360.8l190.4 78.6c12.8 64.2 69.8 112.8 137.8 112.8 78.4 0 143.8-64.8 140.4-147l169-120.4c104.2 2.6 191.6-81.8 191.6-187 0-103.2-84-187-187.4-187s-187.4 84-187.4 187v2.4L369.2 558c-31-1.8-61.4 6.8-87 24.2L16 472.2C36.4 216.8 250.2 16 511.2 16 785.6 16 1008 238 1008 512zM327.4 768.6l-61-25.2a105.58 105.58 0 0 0 54.4 51.6c53.8 22.4 115.6-3.2 138-56.8 10.8-26 11-54.6.2-80.6-10.8-26-31-46.4-57-57.2-25.8-10.8-53.4-10.4-77.8-1.2l63 26c39.6 16.4 58.4 61.8 41.8 101.4-16.6 39.8-62 58.4-101.6 42zM675 508.8c-68.8 0-124.8-56-124.8-124.6s56-124.6 124.8-124.6 124.8 56 124.8 124.6S744 508.8 675 508.8zm.2-31.2c51.8 0 93.8-42 93.8-93.6 0-51.8-42-93.6-93.8-93.6s-93.8 42-93.8 93.6c.2 51.6 42.2 93.6 93.8 93.6z"/></svg>',Twitter:'<svg xmlns="http://www.w3.org/2000/svg" class="icon twitter-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#5EAADE"/><path fill="#fff" d="M749.737 364.631c-17.594 7.805-36.513 13.088-56.371 15.459 20.269-12.148 35.836-31.387 43.156-54.312A196.233 196.233 0 0 1 674.2 349.6c-17.894-19.083-43.406-30.997-71.636-30.997-54.2 0-98.137 43.944-98.137 98.157 0 7.695.861 15.19 2.544 22.373-81.57-4.092-153.876-43.174-202.284-102.558-8.443 14.498-13.285 31.356-13.285 49.348 0 34.05 17.326 64.096 43.656 81.697a97.69 97.69 0 0 1-44.447-12.277c-.01.41-.01.82-.01 1.24 0 47.558 33.822 87.23 78.72 96.249a98.285 98.285 0 0 1-25.852 3.448 97.491 97.491 0 0 1-18.465-1.768c12.483 39.002 48.725 67.38 91.672 68.17-33.582 26.334-75.897 42.024-121.884 42.024-7.924 0-15.736-.46-23.408-1.37 43.434 27.844 95.014 44.104 150.443 44.104 180.505 0 279.221-149.576 279.221-279.294 0-4.263-.09-8.494-.278-12.708 19.178-13.835 35.813-31.115 48.967-50.807z"/></svg>',Wechat:'<svg xmlns="http://www.w3.org/2000/svg" class="icon wechat-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1AC88E"/><path fill="#fff" d="M827.551 578.742a176.583 176.583 0 0 0-185.685-158.379 172.942 172.942 0 0 0-186.3 158.379 172.942 172.942 0 0 0 185.686 158.379 282.169 282.169 0 0 0 65.536-10.923l60.689 32.768-16.384-54.613a166.275 166.275 0 0 0 76.458-125.611zm-245.76-27.307a21.845 21.845 0 1 1 0-43.69 24.872 24.872 0 0 1 27.307 21.845 24.872 24.872 0 0 1-27.921 21.845h.614zm121.356 0a21.845 21.845 0 1 1 0-43.69 24.872 24.872 0 0 1 27.306 21.845 24.872 24.872 0 0 1-28.512 21.845h1.206z"/><path fill="#fff" d="M623.662 400.953h21.23A222.709 222.709 0 0 0 419.772 245.6a208.145 208.145 0 0 0-223.323 189.94 182.044 182.044 0 0 0 89.201 150.483l-22.436 67.356 78.279-39.435a389.575 389.575 0 0 0 78.279 10.923h20.616a163.226 163.226 0 0 1-6.667-46.718 182.044 182.044 0 0 1 189.94-177.197zm-121.379-60.69a27.921 27.921 0 1 1 0 55.843 31.562 31.562 0 0 1-33.36-27.921 31.562 31.562 0 0 1 34.59-27.921h-1.23zM346.34 396.107a31.562 31.562 0 0 1-33.383-27.921 31.562 31.562 0 0 1 33.383-27.921 27.921 27.921 0 1 1 0 55.842z"/></svg>',Weibo:'<svg xmlns="http://www.w3.org/2000/svg" class="icon weibo-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#E6162D"/><path fill="#fff" d="M745.314 454.802c9.652 0 17.869-7.258 19.239-16.728a8.39 8.39 0 0 0 .261-2.12C779.445 302.233 657.02 325.25 657.02 325.25c-10.869 0-19.567 8.94-19.567 20.089 0 10.97 8.698 19.907 19.567 19.907 87.95-19.732 68.54 69.649 68.54 69.649-.004 11.06 8.842 19.908 19.754 19.908z"/><path fill="#fff" d="M731.054 221.409c-42.342-10.077-85.862-1.393-98.055.981-.938.09-1.829.994-2.697 1.17-.415.088-.673.532-.673.532-12.045 3.457-20.828 14.77-20.828 28.14 0 15.932 12.694 29.034 28.564 29.034 0 0 15.39-2.097 25.846-6.252 10.364-4.246 98.012-3.16 141.576 71.17 23.734 54.247 10.428 90.553 8.778 96.387 0 0-5.653 14.095-5.653 27.973 0 16.024 12.694 26.083 28.433 26.083 13.169 0 24.211-1.821 27.452-24.447h.172c46.768-158.386-57.183-232.81-132.915-250.771zm-44.083 282.78c-28.28-5.579-14.519-21.062-14.519-21.062s27.67-46.38-5.482-80.099c-41.104-41.761-140.966 5.314-140.966 5.314-38.144 12.032-28.02-5.49-22.629-35.31 0-35.13-11.844-94.596-113.445-59.47-101.49 35.309-188.654 159.03-188.654 159.03-60.603 82.207-52.56 145.747-52.56 145.747 15.128 140.268 161.749 178.772 275.782 187.89 119.967 9.564 281.905-42.045 330.988-148.064 49.105-106.193-40.126-148.22-68.515-153.975zM433.387 766.675c-119.124 5.658-215.394-55.053-215.394-135.851 0-80.887 96.27-145.748 215.394-151.328 119.162-5.58 215.634 44.333 215.634 125.052.002 80.79-96.475 156.626-215.634 162.127z"/><path fill="#fff" d="M409.603 532.773c-119.77 14.249-105.943 128.31-105.943 128.31s-1.22 36.117 32.126 54.513c70.084 38.593 142.248 15.224 178.723-32.634 36.474-47.888 15.086-164.346-104.906-150.189zM379.39 692.856c-22.343 2.665-40.385-10.437-40.385-29.463 0-18.94 16.02-38.768 38.387-41.143 25.694-2.485 42.431 12.56 42.431 31.588-.003 18.936-18.128 36.449-40.433 39.018zm70.626-61.146c-7.59 5.754-16.893 4.958-20.892-1.948-4.175-6.726-2.607-17.52 5.046-23.19 8.863-6.714 18.105-4.779 22.106 1.958 4.02 6.893 1.153 17.246-6.26 23.18z"/></svg>',Whatsapp:'<svg xmlns="http://www.w3.org/2000/svg" class="icon whatsapp-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#31B84C"/><path fill="#fff" d="m192.021 832 45.227-164.33a315.413 315.413 0 0 1-42.539-158.529C194.731 334.251 337.707 192 513.344 192c84.587-.213 165.76 33.28 225.387 93.013A314.453 314.453 0 0 1 832 509.376c-.085 174.848-143.04 317.141-318.656 317.141h-.15a319.61 319.61 0 0 1-152.277-38.613L192 832h.021zm241.686-455.467c-6.443-15.445-13.014-13.354-17.92-13.61-4.63-.214-9.942-.256-15.254-.256a29.227 29.227 0 0 0-21.226 9.898c-7.296 7.958-27.84 27.136-27.84 66.134s28.501 76.672 32.49 81.962c3.968 5.291 56.15 85.334 136 119.638 19.008 8.17 33.814 13.056 45.398 16.704 19.072 6.037 36.437 5.184 50.133 3.157 15.296-2.283 47.125-19.2 53.76-37.675 6.613-18.56 6.613-34.389 4.65-37.717-1.983-3.264-7.295-5.27-15.274-9.237-7.957-3.947-47.125-23.126-54.4-25.771-7.296-2.667-12.587-3.968-17.92 3.947-5.312 7.936-20.565 25.792-25.195 31.061-4.65 5.312-9.301 5.973-17.258 2.005-7.979-3.968-33.622-12.33-64-39.338-23.68-20.992-39.68-46.955-44.331-54.912-4.65-7.915-.47-12.203 3.52-16.15 3.563-3.541 7.936-9.258 11.904-13.866 3.99-4.651 5.333-7.958 7.979-13.227 2.645-5.29 1.322-9.92-.64-13.888-2.006-3.968-17.92-42.987-24.555-58.859h-.021z"/></svg>',Youtube:'<svg xmlns="http://www.w3.org/2000/svg" class="icon youtube-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DD1829"/><path d="M800.305 372.2c-12.805-42.429-22.873-65.942-65.303-71.064 0 0-113.644-5.761-226.64-5.761-111.716 0-222.797 5.761-222.797 5.761-44.992 5.122-55.7 29.915-67.223 71.065 0 0-11.524 65.527-11.524 131.886 0 68.066 11.524 137.008 11.524 137.008 8.963 39.87 27.354 65.943 67.223 71.065 0 0 123.292 7.682 240.724 7.682 106.78 0 208.714-7.682 208.714-7.682 39.87-7.682 53.78-28.635 65.303-71.065 0 0 11.523-63.022 11.523-128.045 0-69.288-11.524-140.85-11.524-140.85zM448.82 619.97V393.33l174.781 113.32L448.82 619.97z" fill="#fff"/></svg>',Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>',MrHope:'<svg viewBox="0 0 1000 1000" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient gradientTransform="matrix(.2478 .78133 -2.54797 .63622 910.35 281.58)" gradientUnits="userSpaceOnUse" id="a" x1="37.827" x2="159.988" y1="272.916" y2="274.63"><stop offset=".75" stop-color="#e33939"/><stop offset=".998" stop-color="#fff"/></linearGradient><linearGradient gradientTransform="matrix(.13814 .80797 2.55599 -.6032 34.087 494.369)" gradientUnits="userSpaceOnUse" id="b" x1="37.827" x2="159.988" y1="272.916" y2="274.63"><stop offset=".815" stop-color="#e33939"/><stop offset="1" stop-color="#fff"/></linearGradient></defs><path d="M135.637 588.067c-48.891-201.334 74.605-404.162 275.837-453.028 201.233-48.866 403.998 74.734 452.889 276.068 48.892 201.335-74.606 404.162-275.838 453.029-201.233 48.866-403.997-74.734-452.888-276.069Z" fill="#fde68a" fill-rule="evenodd" stroke="#d08819" stroke-linecap="round" stroke-linejoin="round" stroke-width="10"/><path d="M596.076 197.044c-3.342-56.09 56.897-77.831 89.017-51.361m-410.65 128.819c-22.753-51.377-86.256-43.07-102.659-4.816" fill="none" stroke="#6d5e56" stroke-linecap="round" stroke-linejoin="round" stroke-width="11"/><path d="M833.568 288.02c.05 18.046-12.584 30.699-21.346 32.211-8.762 1.512-17.031-1.099-18.584-1.341 0 0-61.363-6.103-105.627 6.921-44.265 13.026-87.04 47.387-94.637 51.892-6.627 3.928-29.112 7.697-44.462-12.938-15.351-20.636.024-41.526.024-41.526s12.685-18.279 40.771-35.123c28.088-16.844 24.624-13.226 52.326-25.696 15.247-6.865 43.319-14.186 67.429-17.069 25.193-3.011 46.348-1.384 57.673.769 22.165 4.212 28.632 5.93 39.169 9.229 12.451 3.898 27.214 14.516 27.264 32.671Z" fill="#fff" fill-rule="evenodd" stroke="#d08819" stroke-linecap="round" stroke-linejoin="round" stroke-width="8"/><path d="M558.351 345.632c-3.458-14.237 5.214-28.566 19.367-32.003 14.154-3.437 28.43 5.32 31.887 19.557 3.458 14.238-5.212 28.567-19.367 32.004-14.152 3.437-28.43-5.319-31.887-19.558Z" fill="#6d5e56" fill-rule="evenodd" stroke="#6d5e56" stroke-linecap="round" stroke-linejoin="round" stroke-width="6.268"/><path d="M220.249 483.416c46.81-11.689 91.323-.467 99.42 25.064 8.098 25.532-23.286 55.706-70.097 67.393-46.811 11.689-91.323.467-99.42-25.064-8.097-25.532 23.286-55.706 70.097-67.393Z" fill="url(#a)" fill-rule="evenodd" opacity=".261"/><path d="M739.9 357.226c-46.959 11.082-81.367 41.469-76.853 67.871 4.514 26.402 46.241 38.821 93.198 27.738 46.958-11.081 81.366-41.467 76.853-67.869-4.514-26.403-46.241-38.821-93.198-27.74Z" fill="url(#b)" fill-rule="evenodd" opacity=".261"/><path d="M400.934 398.917c-.599 18.034-13.681 30.218-22.494 31.409-8.812 1.192-16.982-1.716-18.526-2.014 0 0-61.109-8.334-105.819 3.07-44.709 11.404-88.696 44.181-96.452 48.406-6.763 3.683-29.372 6.632-43.972-14.546-14.6-21.18 1.519-41.494 1.519-41.494s13.335-17.803 42.013-33.612c28.677-15.809 25.085-12.319 53.222-23.772 15.484-6.304 43.803-12.598 68.005-14.6 25.288-2.093 46.373.305 57.616 2.867 22 5.016 28.401 6.968 38.813 10.649 12.304 4.348 26.677 15.496 26.075 33.637Z" fill="#fff" fill-rule="evenodd" stroke="#d08819" stroke-linecap="round" stroke-linejoin="round" stroke-width="8"/><path d="M129.05 445.546c-3.458-14.239 5.213-28.566 19.367-32.003 14.153-3.437 28.429 5.318 31.887 19.557 3.458 14.238-5.213 28.566-19.367 32.003-14.153 3.437-28.43-5.318-31.887-19.557Z" fill="#6d5e56" fill-rule="evenodd" stroke="#6d5e56" stroke-linecap="round" stroke-linejoin="round" stroke-width="6.268"/><path d="M424.381 696.386s64.427 13.646 101.996 5.757C640.653 678.146 690.8 521.894 690.8 521.894" fill="none" stroke="#d08819" stroke-linecap="round" stroke-linejoin="round" stroke-width="11"/><path d="M796.04 666.774s-10.734-44.165-41.405-11.348c-9.681 10.359-10.438 40.604-28.217 81.89-15.942 37.02-39.564 60.728-42.938 76.063-3.374 15.335.451 35.992 26.352 41.537 25.902 5.545 41.967-23.381 41.967-23.381l44.241-164.761Z" fill="#fde68a" fill-rule="evenodd" stroke="#d08819" stroke-linecap="round" stroke-linejoin="round" stroke-width="10"/><path d="M793.337 664.734c-37.075 160.045-51.73 163.145-40.343 184.845 11.387 21.701 51.417 33.716 71.876-7.313 6.734-13.505-1.31-43.317-1.511-78.077-.307-53.06 16.865-86.111 10.403-98.1-15.332-28.452-39.377-5.875-40.425-1.355Z" fill="#fde68a" fill-rule="evenodd" stroke="#d08819" stroke-linecap="round" stroke-linejoin="round" stroke-width="10"/></svg>'},categoryMap={category:{"/":{path:"/category/",map:{面经:{path:"/category/%E9%9D%A2%E7%BB%8F/",keys:["v-c9504c8e"]},"data structure":{path:"/category/data-structure/",keys:["v-b411f97a","v-2dd55e63","v-7dd6beec","v-62bb3f1c","v-28526711","v-1501f717","v-55b5ca16","v-6a1935c6"]},设计模式:{path:"/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",keys:["v-52652ba3"]},network:{path:"/category/network/",keys:["v-483131d1","v-38cd66fc","v-e928ce0e"]},Linux:{path:"/category/linux/",keys:["v-ccbe3652","v-6461b009","v-4cc38e03","v-2a7d4f2b","v-424a6368","v-f92c0794","v-ef348746","v-d6087b44","v-8ed49434","v-02e4930c","v-7376518c","v-331152ca","v-422e9a49","v-1ceae136","v-0d260640","v-025645a8","v-c72fa816","v-3096a586","v-bf0b1b8a","v-373f7f8a","v-341bce10","v-489a808c","v-0cd8f0c2","v-39aec4ca","v-09ea77fb","v-9b30b154","v-08691c96","v-d190b8c0","v-7911f9e9","v-5f435f4c","v-63326e56","v-31ce37c6","v-541c5c44","v-0dd9b637","v-2b83240a","v-60f8afad","v-493b69e8","v-39a875f0","v-324c5847","v-d9e5e078","v-2cedf15b","v-30b8b062","v-496e6a2a","v-088d2da3","v-0ede3e05","v-62961184","v-31ae6c88","v-660e9229","v-f8c6564a","v-23ded876","v-50c2cb0a","v-f9de78ce","v-f9fdca64","v-6b3e1233","v-372d937a","v-51b12ace","v-44e1262a","v-d0b48072","v-ecf6a066","v-232bad63","v-4a77de84","v-1a1b9452","v-6c720eab","v-4354b7dc","v-febe7cbe","v-7dca628a","v-7045a43c","v-4da11e0f","v-aa8f706a","v-78a6a3bd"]},tool:{path:"/category/tool/",keys:["v-ef348746","v-8ed49434","v-02e4930c","v-7376518c","v-422e9a49","v-1ceae136","v-0d260640","v-5ad41c0c"]},编码:{path:"/category/%E7%BC%96%E7%A0%81/",keys:["v-476ace43"]},"C++":{path:"/category/c__/",keys:["v-250d4089","v-63709ed8","v-b8ccb92a","v-dd28cada","v-26a743bc","v-1d55d840","v-3cd1f112","v-50fccc12","v-f44eddd4","v-47419a14","v-3e8a84f0","v-ca742b06","v-98d0ba14","v-13fc9830","v-694ee73e","v-617c5d0a","v-62851eba","v-10d3936a","v-47df4fec","v-bcb672aa","v-ffec0bb6","v-813bc77e","v-1d2b7397","v-03bd7406","v-ee2c91dc","v-8aba11ba","v-71887a40","v-16003f48","v-144b66a9","v-10e1b56b","v-0f2cdccc","v-12968e0a","v-458cc175","v-17b517e7","v-0d78042d","v-42231037","v-43d7e8d6","v-1b557605","v-2bd87fee","v-78fad7f6","v-ec75fe1c","v-59c305ab","v-93560ec4","v-dc094c8c","v-0c109628","v-971129e6","v-3ba2891b","v-068e46e5","v-518f27a8","v-b5b591da","v-a4a51ba4","v-4e14fc90","v-1969f086","v-deb16f3a","v-db47bdfc","v-d7de0cbe","v-d4745b80","v-d10aaa42","v-cda0f904","v-ca3747c6","v-c6cd9688","v-c363e54a","v-784ea9f6","v-74e4f8b8","v-717b477a","v-6e11963c","v-6aa7e4fe","v-673e33c0","v-63d48282","v-606ad144","v-5d012006","v-59976ec8","v-0e823374","v-0b188236","v-07aed0f8","v-04451fba","v-00db6e7c","v-01472161","v-02fbfa00","v-04b0d29f","v-0665ab3e","v-081a83dd","v-2da52187","v-2f59fa26","v-310ed2c5","v-32c3ab64","v-34788403","v-362d5ca2","v-37e23541","v-39970de0","v-3b4be67f","v-3d00bf1e","v-628b5cc8","v-64403567","v-65f50e06","v-67a9e6a5","v-695ebf44","v-6b1397e3","v-6cc87082","v-6e7d4921","v-703221c0","v-71e6fa5f","v-d11ccfee","v-cdb31eb0","v-ca496d72","v-c6dfbc34","v-c3760af6","v-c00c59b8","v-eaff3672","v-e7958534","v-e42bd3f6","v-e0c222b8","v-dd58717a","v-d6850efe","v-7dc90eb2","v-6cb8987c","v-1092e6f2","v-30067906","v-31bb51a5","v-33702a44","v-352502e3","v-36d9db82","v-5c64792c","v-5fce2a6a","v-4b1e4810","v-2607abf1","v-48644d60","v-21ba21da","v-7c1a7ba3","v-22b98e3f","v-00d2774a","v-a111f632","v-22834b21"]},Verilog:{path:"/category/verilog/",keys:["v-b1aa3aa8","v-0fdec5fc"]},编译原理:{path:"/category/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/",keys:["v-ccbe3652","v-6461b009","v-2a7d4f2b","v-39aec4ca","v-09ea77fb","v-d190b8c0"]},ELF文件:{path:"/category/elf%E6%96%87%E4%BB%B6/",keys:["v-ccbe3652","v-6461b009","v-4cc38e03","v-2a7d4f2b","v-39aec4ca","v-09ea77fb","v-d190b8c0"]},动态库:{path:"/category/%E5%8A%A8%E6%80%81%E5%BA%93/",keys:["v-4cc38e03"]},Mysql:{path:"/category/mysql/",keys:["v-3c64f81c","v-3dbda982","v-0e77baf2","v-29447cd9","v-571ee3bc"]},Database:{path:"/category/database/",keys:["v-82706408"]},sqlite:{path:"/category/sqlite/",keys:["v-82706408"]},electrical:{path:"/category/electrical/",keys:["v-357b5e82"]},"electronic technique":{path:"/category/electronic-technique/",keys:["v-0e7fe57d"]},Makefile:{path:"/category/makefile/",keys:["v-025645a8"]},gdb:{path:"/category/gdb/",keys:["v-ffec0bb6","v-813bc77e"]},git:{path:"/category/git/",keys:["v-1bae868b","v-781d1713","v-e6061940"]},valgrind:{path:"/category/valgrind/",keys:["v-ef348746"]},汇编语言:{path:"/category/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/",keys:["v-77b6e668","v-535a440e","v-7f055018","v-78553716","v-a0280be2","v-ca5a5eb8"]}}}},tag:{"/":{path:"/tag/",map:{"c++面经":{path:"/tag/c__%E9%9D%A2%E7%BB%8F/",keys:["v-c9504c8e"]},"data structure":{path:"/tag/data-structure/",keys:["v-b411f97a","v-2dd55e63","v-7dd6beec","v-62bb3f1c","v-28526711","v-1501f717","v-55b5ca16","v-6a1935c6"]},设计模式:{path:"/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",keys:["v-52652ba3"]},tool:{path:"/tag/tool/",keys:["v-5ad41c0c"]},"C++":{path:"/tag/c__/",keys:["v-63709ed8","v-b8ccb92a","v-dd28cada","v-26a743bc","v-1d55d840","v-3cd1f112","v-50fccc12","v-f44eddd4","v-47419a14","v-ffec0bb6","v-813bc77e","v-03bd7406","v-ee2c91dc","v-8aba11ba","v-71887a40","v-16003f48","v-144b66a9","v-10e1b56b","v-0f2cdccc","v-12968e0a","v-458cc175","v-17b517e7","v-0d78042d","v-42231037","v-43d7e8d6","v-1b557605","v-2bd87fee","v-78fad7f6","v-ec75fe1c","v-59c305ab","v-93560ec4","v-dc094c8c","v-0c109628","v-971129e6","v-3ba2891b","v-068e46e5","v-518f27a8","v-b5b591da","v-a4a51ba4","v-4e14fc90","v-1969f086","v-deb16f3a","v-db47bdfc","v-d7de0cbe","v-d4745b80","v-d10aaa42","v-cda0f904","v-ca3747c6","v-c6cd9688","v-c363e54a","v-784ea9f6","v-74e4f8b8","v-717b477a","v-6e11963c","v-6aa7e4fe","v-673e33c0","v-63d48282","v-606ad144","v-5d012006","v-59976ec8","v-0e823374","v-0b188236","v-07aed0f8","v-04451fba","v-00db6e7c","v-01472161","v-02fbfa00","v-04b0d29f","v-0665ab3e","v-081a83dd","v-2da52187","v-2f59fa26","v-310ed2c5","v-32c3ab64","v-34788403","v-362d5ca2","v-37e23541","v-39970de0","v-3b4be67f","v-3d00bf1e","v-628b5cc8","v-64403567","v-65f50e06","v-67a9e6a5","v-695ebf44","v-6b1397e3","v-6cc87082","v-6e7d4921","v-703221c0","v-71e6fa5f","v-d11ccfee","v-cdb31eb0","v-ca496d72","v-c6dfbc34","v-c3760af6","v-c00c59b8","v-4b1e4810","v-2607abf1","v-22834b21"]},"effective c++读书笔记":{path:"/tag/effective-c__%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",keys:["v-1b557605","v-068e46e5","v-deb16f3a","v-db47bdfc","v-d7de0cbe","v-d4745b80","v-d10aaa42","v-cda0f904","v-ca3747c6","v-c6cd9688","v-c363e54a","v-784ea9f6","v-74e4f8b8","v-717b477a","v-6e11963c","v-6aa7e4fe","v-673e33c0","v-63d48282","v-606ad144","v-5d012006","v-59976ec8","v-0e823374","v-0b188236","v-07aed0f8","v-04451fba","v-00db6e7c","v-01472161","v-02fbfa00","v-04b0d29f","v-0665ab3e","v-081a83dd","v-2da52187","v-2f59fa26","v-310ed2c5","v-32c3ab64","v-34788403","v-362d5ca2","v-37e23541","v-39970de0","v-3b4be67f","v-3d00bf1e","v-628b5cc8","v-64403567","v-65f50e06","v-67a9e6a5","v-695ebf44","v-6b1397e3","v-6cc87082","v-6e7d4921","v-703221c0","v-71e6fa5f","v-d11ccfee","v-cdb31eb0","v-ca496d72","v-c6dfbc34","v-c3760af6","v-c00c59b8","v-4b1e4810"]},"C++面试题":{path:"/tag/c__%E9%9D%A2%E8%AF%95%E9%A2%98/",keys:["v-a111f632"]},MyTinySTL:{path:"/tag/mytinystl/",keys:["v-2bd87fee","v-78fad7f6","v-ec75fe1c","v-59c305ab","v-93560ec4","v-0c109628","v-971129e6","v-3ba2891b","v-518f27a8","v-2607abf1","v-22834b21"]},"effective STL读书笔记":{path:"/tag/effective-stl%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",keys:["v-47419a14","v-16003f48","v-144b66a9","v-10e1b56b","v-0f2cdccc","v-12968e0a","v-458cc175","v-17b517e7","v-0d78042d","v-42231037","v-43d7e8d6","v-b5b591da","v-a4a51ba4","v-4e14fc90","v-1969f086"]},"effective modern c++读书笔记":{path:"/tag/effective-modern-c__%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",keys:["v-13fc9830","v-694ee73e","v-eaff3672","v-e7958534","v-e42bd3f6","v-e0c222b8","v-dd58717a","v-d6850efe","v-7dc90eb2","v-6cb8987c","v-1092e6f2","v-30067906","v-31bb51a5","v-33702a44","v-352502e3","v-36d9db82","v-5c64792c","v-5fce2a6a"]},"Linux-0.11代码解读系列":{path:"/tag/linux-0.11%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97/",keys:["v-9b30b154","v-5f435f4c","v-63326e56","v-31ce37c6","v-541c5c44","v-0dd9b637","v-2b83240a","v-60f8afad","v-493b69e8","v-39a875f0","v-324c5847","v-d9e5e078","v-2cedf15b","v-30b8b062","v-496e6a2a","v-088d2da3","v-0ede3e05","v-62961184","v-31ae6c88","v-660e9229","v-f9de78ce","v-f9fdca64","v-6b3e1233","v-372d937a","v-51b12ace","v-44e1262a","v-d0b48072","v-ecf6a066","v-232bad63","v-4a77de84","v-1a1b9452","v-6c720eab","v-4354b7dc","v-febe7cbe","v-7dca628a","v-7045a43c","v-4da11e0f","v-aa8f706a","v-78a6a3bd"]}}}}},typeMap={article:{"/":{path:"/article/",keys:["v-4ab9f3e6","v-0cb8674d","v-77b6e668","v-535a440e","v-530ce597","v-250d4089","v-38f5dc4c","v-63709ed8","v-9c64b522","v-b8ccb92a","v-dd28cada","v-26a743bc","v-1d55d840","v-3cd1f112","v-50fccc12","v-f44eddd4","v-7f055018","v-78553716","v-a0280be2","v-0a0aeea4","v-5bc2b0c3","v-ca5a5eb8","v-ccbe3652","v-6461b009","v-4cc38e03","v-2a7d4f2b","v-5ad99f25","v-78524d46","v-b1aa3aa8","v-b0244f86","v-0fdec5fc","v-e3803fe8","v-3c64f81c","v-357b5e82","v-52aaa766","v-3dbda982","v-6370e458","v-483131d1","v-16c8a73f","v-424a6368","v-767de411","v-cba98e84","v-0e77baf2","v-f92c0794","v-9a249a36","v-ef348746","v-46314d5a","v-110aae3e","v-14745f7c","v-d6087b44","v-8ed49434","v-cbd9a754","v-051d8b78","v-38cd66fc","v-02e4930c","v-7376518c","v-e928ce0e","v-47419a14","v-40696b34","v-3e8a84f0","v-ca742b06","v-98d0ba14","v-13fc9830","v-694ee73e","v-617c5d0a","v-62851eba","v-10d3936a","v-82706408","v-47df4fec","v-bcb672aa","v-6c1fae1c","v-331152ca","v-6cf506de","v-0e5bbbf6","v-0e976c58","v-e1e3fc24","v-422e9a49","v-1ceae136","v-0d260640","v-3b52279e","v-025645a8","v-1bae868b","v-781d1713","v-e6061940","v-c72fa816","v-98409ff2","v-ffec0bb6","v-813bc77e","v-87c26978","v-29447cd9","v-571ee3bc","v-114cb350","v-3096a586","v-b411f97a","v-bf0b1b8a","v-373f7f8a","v-341bce10","v-489a808c","v-0cd8f0c2","v-eba6b246","v-1d2b7397","v-65d16685","v-2dd55e63","v-7dd6beec","v-2f79de8a","v-33473187","v-62bb3f1c","v-28526711","v-1501f717","v-55b5ca16","v-6a1935c6","v-0e7fe57d","v-03bd7406","v-ee2c91dc","v-8aba11ba","v-5c48a706","v-ccb0bf46","v-71887a40","v-60f2aa2e","v-16003f48","v-144b66a9","v-10e1b56b","v-0f2cdccc","v-12968e0a","v-458cc175","v-17b517e7","v-0d78042d","v-42231037","v-43d7e8d6","v-5f688ebf","v-2efa750a","v-7893963a","v-221fd50a","v-fbb8d2e4","v-8999d71c","v-1b557605","v-b7b35d00","v-47c314d7","v-4bd99572","v-2bd87fee","v-78fad7f6","v-ec75fe1c","v-59c305ab","v-93560ec4","v-9f0e5862","v-dc094c8c","v-0c109628","v-39aec4ca","v-09ea77fb","v-971129e6","v-3ba2891b","v-5ad41c0c","v-068e46e5","v-c9504c8e","v-518f27a8","v-b5b591da","v-a4a51ba4","v-4e14fc90","v-1969f086","v-deb16f3a","v-db47bdfc","v-d7de0cbe","v-d4745b80","v-d10aaa42","v-cda0f904","v-ca3747c6","v-c6cd9688","v-c363e54a","v-784ea9f6","v-74e4f8b8","v-717b477a","v-6e11963c","v-6aa7e4fe","v-673e33c0","v-63d48282","v-606ad144","v-5d012006","v-59976ec8","v-0e823374","v-0b188236","v-07aed0f8","v-04451fba","v-00db6e7c","v-01472161","v-02fbfa00","v-04b0d29f","v-0665ab3e","v-081a83dd","v-2da52187","v-2f59fa26","v-310ed2c5","v-32c3ab64","v-34788403","v-362d5ca2","v-37e23541","v-39970de0","v-3b4be67f","v-3d00bf1e","v-628b5cc8","v-64403567","v-65f50e06","v-67a9e6a5","v-695ebf44","v-6b1397e3","v-6cc87082","v-6e7d4921","v-703221c0","v-71e6fa5f","v-d11ccfee","v-cdb31eb0","v-ca496d72","v-c6dfbc34","v-c3760af6","v-c00c59b8","v-eaff3672","v-e7958534","v-e42bd3f6","v-e0c222b8","v-dd58717a","v-d6850efe","v-7dc90eb2","v-6cb8987c","v-1092e6f2","v-30067906","v-31bb51a5","v-33702a44","v-352502e3","v-36d9db82","v-5c64792c","v-5fce2a6a","v-4b1e4810","v-49e1ca10","v-2607abf1","v-04538fad","v-e683e5b2","v-db9b3b8e","v-b6b78c94","v-099747c2","v-3ebbce5a","v-7f0a63b2","v-5eb4dd6c","v-9b30b154","v-08691c96","v-48644d60","v-21ba21da","v-7c1a7ba3","v-22b98e3f","v-00d2774a","v-a111f632","v-22834b21","v-d190b8c0","v-7911f9e9","v-5f435f4c","v-63326e56","v-31ce37c6","v-541c5c44","v-0dd9b637","v-2b83240a","v-60f8afad","v-493b69e8","v-39a875f0","v-324c5847","v-d9e5e078","v-2cedf15b","v-30b8b062","v-496e6a2a","v-088d2da3","v-0ede3e05","v-62961184","v-31ae6c88","v-660e9229","v-f8c6564a","v-23ded876","v-50c2cb0a","v-f9de78ce","v-f9fdca64","v-6b3e1233","v-372d937a","v-51b12ace","v-44e1262a","v-d0b48072","v-ecf6a066","v-232bad63","v-4a77de84","v-1a1b9452","v-6c720eab","v-4354b7dc","v-febe7cbe","v-7dca628a","v-7045a43c","v-4da11e0f","v-aa8f706a","v-78a6a3bd","v-52652ba3","v-68d68bba","v-476ace43","v-184f4da6","v-2e3eac9e"]}},star:{"/":{path:"/star/",keys:[]}},timeline:{"/":{path:"/timeline/",keys:["v-4ab9f3e6","v-0cb8674d","v-77b6e668","v-535a440e","v-530ce597","v-250d4089","v-38f5dc4c","v-63709ed8","v-9c64b522","v-b8ccb92a","v-dd28cada","v-26a743bc","v-1d55d840","v-3cd1f112","v-50fccc12","v-f44eddd4","v-7f055018","v-78553716","v-a0280be2","v-0a0aeea4","v-5bc2b0c3","v-ca5a5eb8","v-ccbe3652","v-6461b009","v-4cc38e03","v-2a7d4f2b","v-5ad99f25","v-78524d46","v-b1aa3aa8","v-b0244f86","v-0fdec5fc","v-e3803fe8","v-3c64f81c","v-357b5e82","v-52aaa766","v-3dbda982","v-6370e458","v-483131d1","v-16c8a73f","v-424a6368","v-767de411","v-cba98e84","v-0e77baf2","v-f92c0794","v-9a249a36","v-ef348746","v-46314d5a","v-110aae3e","v-14745f7c","v-d6087b44","v-8ed49434","v-cbd9a754","v-051d8b78","v-38cd66fc","v-02e4930c","v-7376518c","v-e928ce0e","v-47419a14","v-40696b34","v-3e8a84f0","v-ca742b06","v-98d0ba14","v-13fc9830","v-694ee73e","v-617c5d0a","v-62851eba","v-10d3936a","v-82706408","v-47df4fec","v-bcb672aa","v-6c1fae1c","v-331152ca","v-6cf506de","v-0e5bbbf6","v-0e976c58","v-e1e3fc24","v-422e9a49","v-1ceae136","v-0d260640","v-3b52279e","v-025645a8","v-1bae868b","v-781d1713","v-e6061940","v-c72fa816","v-98409ff2","v-ffec0bb6","v-813bc77e","v-87c26978","v-29447cd9","v-571ee3bc","v-114cb350","v-3096a586","v-b411f97a","v-bf0b1b8a","v-373f7f8a","v-341bce10","v-489a808c","v-0cd8f0c2","v-eba6b246","v-1d2b7397","v-65d16685","v-2dd55e63","v-7dd6beec","v-2f79de8a","v-33473187","v-62bb3f1c","v-28526711","v-1501f717","v-55b5ca16","v-6a1935c6","v-0e7fe57d","v-03bd7406","v-ee2c91dc","v-8aba11ba","v-5c48a706","v-ccb0bf46","v-71887a40","v-60f2aa2e","v-16003f48","v-144b66a9","v-10e1b56b","v-0f2cdccc","v-12968e0a","v-458cc175","v-17b517e7","v-0d78042d","v-42231037","v-43d7e8d6","v-5f688ebf","v-2efa750a","v-7893963a","v-221fd50a","v-fbb8d2e4","v-8999d71c","v-1b557605","v-b7b35d00","v-47c314d7","v-4bd99572","v-2bd87fee","v-78fad7f6","v-ec75fe1c","v-59c305ab","v-93560ec4","v-9f0e5862","v-dc094c8c","v-0c109628","v-39aec4ca","v-09ea77fb","v-971129e6","v-3ba2891b","v-5ad41c0c","v-068e46e5","v-c9504c8e","v-518f27a8","v-b5b591da","v-a4a51ba4","v-4e14fc90","v-1969f086","v-deb16f3a","v-db47bdfc","v-d7de0cbe","v-d4745b80","v-d10aaa42","v-cda0f904","v-ca3747c6","v-c6cd9688","v-c363e54a","v-784ea9f6","v-74e4f8b8","v-717b477a","v-6e11963c","v-6aa7e4fe","v-673e33c0","v-63d48282","v-606ad144","v-5d012006","v-59976ec8","v-0e823374","v-0b188236","v-07aed0f8","v-04451fba","v-00db6e7c","v-01472161","v-02fbfa00","v-04b0d29f","v-0665ab3e","v-081a83dd","v-2da52187","v-2f59fa26","v-310ed2c5","v-32c3ab64","v-34788403","v-362d5ca2","v-37e23541","v-39970de0","v-3b4be67f","v-3d00bf1e","v-628b5cc8","v-64403567","v-65f50e06","v-67a9e6a5","v-695ebf44","v-6b1397e3","v-6cc87082","v-6e7d4921","v-703221c0","v-71e6fa5f","v-d11ccfee","v-cdb31eb0","v-ca496d72","v-c6dfbc34","v-c3760af6","v-c00c59b8","v-eaff3672","v-e7958534","v-e42bd3f6","v-e0c222b8","v-dd58717a","v-d6850efe","v-7dc90eb2","v-6cb8987c","v-1092e6f2","v-30067906","v-31bb51a5","v-33702a44","v-352502e3","v-36d9db82","v-5c64792c","v-5fce2a6a","v-4b1e4810","v-49e1ca10","v-2607abf1","v-04538fad","v-e683e5b2","v-db9b3b8e","v-b6b78c94","v-099747c2","v-3ebbce5a","v-7f0a63b2","v-5eb4dd6c","v-9b30b154","v-08691c96","v-48644d60","v-21ba21da","v-7c1a7ba3","v-22b98e3f","v-00d2774a","v-a111f632","v-22834b21","v-d190b8c0","v-7911f9e9","v-5f435f4c","v-63326e56","v-31ce37c6","v-541c5c44","v-0dd9b637","v-2b83240a","v-60f8afad","v-493b69e8","v-39a875f0","v-324c5847","v-d9e5e078","v-2cedf15b","v-30b8b062","v-496e6a2a","v-088d2da3","v-0ede3e05","v-62961184","v-31ae6c88","v-660e9229","v-f8c6564a","v-23ded876","v-50c2cb0a","v-f9de78ce","v-f9fdca64","v-6b3e1233","v-372d937a","v-51b12ace","v-44e1262a","v-d0b48072","v-ecf6a066","v-232bad63","v-4a77de84","v-1a1b9452","v-6c720eab","v-4354b7dc","v-febe7cbe","v-7dca628a","v-7045a43c","v-4da11e0f","v-aa8f706a","v-78a6a3bd","v-52652ba3","v-68d68bba","v-476ace43","v-184f4da6","v-2e3eac9e"]}}},l$1=ref(categoryMap),k=(b="")=>{const $=useRouter(),j=useRoute(),Z=useRouteLocale();return computed(()=>{var U;const G=b||((U=usePageFrontmatter().value.blog)==null?void 0:U.key)||"";if(!G)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};const W=$.getRoutes();if(!l$1.value[G])throw new Error(`useBlogCategory: key ${G} is invalid`);const Y=l$1.value[G][Z.value],X={path:Y.path,map:{}};for(const nn in Y.map){const an=Y.map[nn];X.map[nn]={path:an.path,items:[]};for(const tn of an.keys){const sn=W.find(({name:on})=>on===tn);if(sn){const on=Dt($,sn.path);X.map[nn].items.push({path:on.path,info:on.meta})}}j.path===an.path&&(X.currentItems=X.map[nn].items)}return X})},_=ref(typeMap),C=(b="")=>{const $=useRouter(),j=useRouteLocale();return computed(()=>{var Z;const U=b||((Z=usePageFrontmatter().value.blog)==null?void 0:Z.key)||"";if(!U)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!_.value[U])throw new Error(`useBlogType: key ${b} is invalid`);const G=$.getRoutes(),W=_.value[U][j.value],Y={path:W.path,items:[]};for(const X of W.keys){const nn=G.find(({name:an})=>an===X);if(nn){const an=Dt($,nn.path);Y.items.push({path:an.path,info:an.meta})}}return Y})},categoryMapSymbol=Symbol.for("categoryMap"),useCategoryMap=()=>{const b=inject(categoryMapSymbol);if(!b)throw new Error("useCategoryMap() is called without provider.");return b},setupCategoryMap=()=>{const b=k("category");provide(categoryMapSymbol,b)},useBlogOptions=()=>{const b=useThemeData(),$=useThemeLocaleData();return computed(()=>({...b.value.blog,...$.value.blog}))},tagMapSymbol=Symbol.for("tagMap"),useTagMap=()=>{const b=inject(tagMapSymbol);if(!b)throw new Error("useTagMap() is called without provider.");return b},setupTagMap=()=>{const b=k("tag");provide(tagMapSymbol,b)},useArticleAuthor=b=>{const $=useThemeLocaleData();return computed(()=>{const{["a"]:j}=b.value;return j?re(j):j===!1?[]:re($.value.author,!1)})},useArticleCategory=b=>{const $=useCategoryMap();return computed(()=>se(b.value.c).map(j=>({name:j,path:$.value.map[j].path})))},useArticleTag=b=>{const $=useTagMap();return computed(()=>oe(b.value.g).map(j=>({name:j,path:$.value.map[j].path})))},useArticleDate=b=>computed(()=>{const{["d"]:$}=b.value;return $?ot($):null}),useArticleInfo=b=>{const $=toRef(b,"info"),j=useBlogOptions(),Z=useArticleAuthor($),U=useArticleCategory($),G=useArticleTag($),W=useArticleDate($),Y=computed(()=>({author:Z.value,category:U.value,date:W.value,localizedDate:$.value.l||"",tag:G.value,isOriginal:$.value.o||!1,readingTime:$.value.r||null,pageview:b.path})),X=computed(()=>j.value.articleInfo);return{info:Y,items:X}},articlesSymbol=Symbol.for("articles"),useArticles=()=>{const b=inject(articlesSymbol);if(!b)throw new Error("useArticles() is called without provider.");return b},setupArticles=()=>{const b=C("article");provide(articlesSymbol,b)},starsSymbol=Symbol.for("stars"),useStars=()=>{const b=inject(starsSymbol);if(!b)throw new Error("useStars() is called without provider.");return b},setupStars=()=>{const b=C("star");provide(starsSymbol,b)},timelinesSymbol=Symbol.for("timelines"),useTimelines=()=>{const b=inject(timelinesSymbol);if(!b)throw new Error("useTimelines() is called without provider.");return b},setupTimelines=()=>{const b=C("timeline"),$=computed(()=>{const j=[];return b.value.items.forEach(({info:Z,path:U})=>{var X;const{year:G,month:W,day:Y}=((X=ot(Z.d))==null?void 0:X.info)||{};G&&W&&Y&&((!j[0]||j[0].year!==G)&&j.unshift({year:G,items:[]}),j[0].items.push({date:`${W}/${Y}`,info:Z,path:U}))}),{...b.value,config:j.reverse()}});provide(timelinesSymbol,$)},setupBlog=()=>{setupArticles(),setupCategoryMap(),setupStars(),setupTagMap(),setupTimelines()},socialMedia="",SocialMedia=defineComponent({name:"SocialMedia",setup(){const b=useBlogOptions(),$=usePure(),j=computed(()=>{const Z=b.value.medias;return Z?Object.entries(Z).map(([U,G])=>({name:U,icon:icons[U],url:G})):[]});return()=>j.value.length?h$4("div",{class:"social-media-wrapper"},j.value.map(({name:Z,icon:U,url:G})=>h$4("a",{class:"social-media",href:G,rel:"noopener noreferrer",target:"_blank","aria-label":Z,...$.value?{}:{"data-balloon-pos":"up"},innerHTML:U}))):null}}),bloggerInfo="",BloggerInfo=defineComponent({name:"BloggerInfo",setup(){const b=useBlogOptions(),$=useSiteLocaleData(),j=useThemeLocaleData(),Z=useArticles(),U=useCategoryMap(),G=useTagMap(),W=useTimelines(),Y=useNavigate(),X=computed(()=>{var sn;return b.value.name||((sn=re(j.value.author)[0])==null?void 0:sn.name)||$.value.title}),nn=computed(()=>b.value.avatar||j.value.logo),an=computed(()=>j.value.blogLocales),tn=computed(()=>b.value.intro);return()=>h$4("div",{class:"blogger-info",vocab:"https://schema.org/",typeof:"Person"},[h$4("div",{class:"blogger",...tn.value?{style:{cursor:"pointer"},"aria-label":an.value.intro,"data-balloon-pos":"down",role:"navigation",onClick:()=>Y(tn.value)}:{}},[nn.value?h$4("img",{class:["blogger-avatar",{round:b.value.roundAvatar}],src:withBase(nn.value),property:"image",alt:"Blogger Avatar"}):null,X.value?h$4("div",{class:"blogger-name",property:"name"},X.value):null,b.value.description?h$4("div",{class:"blogger-description",innerHTML:b.value.description}):null,tn.value?h$4("meta",{property:"url",content:withBase(tn.value)}):null]),h$4("div",{class:"num-wrapper"},[h$4("div",{onClick:()=>Y(Z.value.path)},[h$4("div",{class:"num"},Z.value.items.length),h$4("div",an.value.article)]),h$4("div",{onClick:()=>Y(U.value.path)},[h$4("div",{class:"num"},Object.keys(U.value.map).length),h$4("div",an.value.category)]),h$4("div",{onClick:()=>Y(G.value.path)},[h$4("div",{class:"num"},Object.keys(G.value.map).length),h$4("div",an.value.tag)]),h$4("div",{onClick:()=>Y(W.value.path)},[h$4("div",{class:"num"},W.value.items.length),h$4("div",an.value.timeline)])]),h$4(SocialMedia)])}}),CategoryIcon=()=>h$4(P$5,{name:"category"},()=>h$4("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));CategoryIcon.displayName="CategoryIcon";const TagIcon=()=>h$4(P$5,{name:"tag"},()=>h$4("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));TagIcon.displayName="TagIcon";const TimelineIcon=()=>h$4(P$5,{name:"timeline"},()=>h$4("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));TimelineIcon.displayName="TimelineIcon";const SlideIcon=()=>h$4(P$5,{name:"slides"},()=>h$4("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));SlideIcon.displayName="SlideIcon";const StickyIcon=()=>h$4(P$5,{name:"sticky"},()=>[h$4("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);StickyIcon.displayName="StickyIcon";const ArticleIcon=()=>h$4(P$5,{name:"article"},()=>h$4("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));ArticleIcon.displayName="ArticleIcon";const BookIcon=()=>h$4(P$5,{name:"book"},()=>h$4("path",{d:"M256 853.333h426.667A85.333 85.333 0 0 0 768 768V256a85.333 85.333 0 0 0-85.333-85.333H469.333a42.667 42.667 0 0 1 0-85.334h213.334A170.667 170.667 0 0 1 853.333 256v512a170.667 170.667 0 0 1-170.666 170.667H213.333A42.667 42.667 0 0 1 170.667 896V128a42.667 42.667 0 0 1 42.666-42.667h128A42.667 42.667 0 0 1 384 128v304.256l61.653-41.088a42.667 42.667 0 0 1 47.36 0l61.654 41.045V256A42.667 42.667 0 0 1 640 256v256a42.667 42.667 0 0 1-66.347 35.499l-104.32-69.547-104.32 69.547A42.667 42.667 0 0 1 298.667 512V170.667H256v682.666z"}));BookIcon.displayName="BookIcon";const LinkIcon=()=>h$4(P$5,{name:"link"},()=>h$4("path",{d:"M460.8 584.533c17.067 17.067 17.067 42.667 0 59.734-17.067 17.066-42.667 17.066-59.733 0-85.334-85.334-85.334-217.6 0-302.934L554.667 192C640 110.933 776.533 110.933 857.6 196.267c81.067 81.066 81.067 213.333 0 294.4l-68.267 64c0-34.134-4.266-68.267-17.066-102.4l21.333-21.334c51.2-46.933 55.467-128 4.267-179.2s-128-55.466-179.2-4.266c-4.267 0-4.267 4.266-4.267 4.266L465.067 401.067c-51.2 51.2-51.2 132.266-4.267 183.466m123.733-183.466C601.6 384 627.2 384 644.267 401.067c85.333 85.333 85.333 217.6 0 302.933l-153.6 149.333C405.333 934.4 268.8 934.4 187.733 849.067c-81.066-81.067-81.066-213.334 0-294.4l68.267-64c0 34.133 4.267 72.533 17.067 102.4L251.733 614.4C204.8 665.6 204.8 746.667 256 793.6c51.2 46.933 123.733 46.933 174.933 0l149.334-149.333c51.2-51.2 51.2-128 0-179.2-12.8-17.067-17.067-46.934 4.266-64z"}));LinkIcon.displayName="LinkIcon";const ProjectIcon=()=>h$4(P$5,{name:"project"},()=>h$4("path",{d:"M987.456 425.152H864V295.296a36.48 36.48 0 0 0-36.544-36.544h-360l-134.08-128.256A9.344 9.344 0 0 0 327.04 128H36.48A36.48 36.48 0 0 0 0 164.544v676.608a36.48 36.48 0 0 0 36.544 36.544h797.76a36.672 36.672 0 0 0 33.92-22.848L1021.44 475.52a36.48 36.48 0 0 0-33.92-50.304zM82.304 210.304h215.424l136.64 130.752h347.328v84.096H198.848A36.672 36.672 0 0 0 164.928 448L82.304 652.8V210.304zM808.32 795.456H108.544l118.08-292.608h699.904L808.32 795.52z"}));ProjectIcon.displayName="ProjectIcon";const FriendIcon=()=>h$4(P$5,{name:"friend"},()=>h$4("path",{d:"M860.16 213.333A268.373 268.373 0 0 0 512 186.027a267.52 267.52 0 0 0-348.16 404.48L428.8 855.893a118.613 118.613 0 0 0 166.4 0l264.96-265.386a267.52 267.52 0 0 0 0-377.174zM800 531.627l-264.96 264.96a32.427 32.427 0 0 1-46.08 0L224 530.347a183.04 183.04 0 0 1 0-256 182.187 182.187 0 0 1 256 0 42.667 42.667 0 0 0 60.587 0 182.187 182.187 0 0 1 256 0 183.04 183.04 0 0 1 3.413 256z"}));FriendIcon.displayName="FriendIcon";const SlideDownIcon=()=>h$4(P$5,{name:"slide-down"},()=>h$4("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));SlideDownIcon.displayName="SlideDownIcon";const emptyIcon="",EmptyIcon=()=>h$4("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",class:"empty-icon",viewBox:"0 0 1024 1024",innerHTML:'<defs><linearGradient id="f" x1="512.342" y1="2266.13" x2="512.342" y2="666.063" gradientUnits="userSpaceOnUse"><stop offset=".919" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="g" x1="528.912" y1="774" x2="388.088" y2="612" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#e6e6e6" stop-opacity="0"/></linearGradient><linearGradient id="h" x1="213.219" y1="721.704" x2="251.313" y2="683.61" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#d7d7d7"/><stop offset=".485" stop-color="#fafafa"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="i" x1="724.813" y1="821.718" x2="768.656" y2="777.876" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="a" x1="513.493" y1="714.594" x2="471.007" y2="544.188" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#999"/><stop offset="1" stop-color="#ccc"/></linearGradient><linearGradient id="b" x1="440.156" y1="564.031" x2="508.594" y2="495.594" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="l" x1="660.988" y1="754.156" x2="608.637" y2="544.188" xlink:href="#a"/><linearGradient id="m" x1="479.188" y1="774.219" x2="649.782" y2="603.625" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#b3b3b3"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="n" x1="447.121" y1="774.219" x2="394.661" y2="563.813" xlink:href="#a"/><linearGradient id="o" x1="494" y1="597" x2="628" y2="463" xlink:href="#b"/><linearGradient id="d" x1="610.485" y1="604.938" x2="697.298" y2="518.125" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="p" x1="457.438" y1="619.25" x2="353.469" y2="619.25" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="q" x1="542.734" y1="674.25" x2="615.672" y2="601.313" xlink:href="#b"/><linearGradient id="c" x1="627.933" y1="358.938" x2="685.192" y2="422.531" gradientUnits="userSpaceOnUse"><stop offset=".4" stop-color="#e6e6e6" stop-opacity=".4"/><stop offset=".443" stop-color="#fff"/><stop offset=".6" stop-color="#ccc"/></linearGradient><linearGradient id="r" x1="618.547" y1="422.531" x2="681.547" y2="359.531" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="s" x1="625" y1="441.5" x2="697" y2="369.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="t" x1="627.681" y1="361.438" x2="692.257" y2="433.156" xlink:href="#c"/><linearGradient id="u" x1="561.414" y1="735.438" x2="573.149" y2="688.375" xlink:href="#d"/><linearGradient id="v" x1="405" y1="485.875" x2="440" y2="450.875" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".702"/></linearGradient><linearGradient id="w" x1="404.61" y1="486.906" x2="441.86" y2="449.656" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".495" stop-color="#ccc" stop-opacity=".702"/><stop offset=".498" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".302"/></linearGradient><radialGradient id="e" cx="329.297" cy="647.578" r="8.172" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#fafafa"/><stop offset="1.2" stop-color="#e6e6e6"/></radialGradient><radialGradient id="j" cx="802.297" cy="673.578" r="8.172" xlink:href="#e"/><radialGradient id="k" cx="774.844" cy="642.75" r="5.531" xlink:href="#e"/></defs><path d="M512.33 666.07c441.828 0 800 358.18 800 800.03s-358.172 800.02-800 800.02-800-358.18-800-800.02 358.17-800.03 800-800.03z" style="fill:url(#f);fill-rule:evenodd"/><path d="m272 694 242-82 131 119-188 43z" style="fill:url(#g);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M232.391 723.534a2.4 2.4 0 0 1 2.4 2.4v17.725a2.4 2.4 0 0 1-4.8 0v-17.725a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M232.255 676.559c10.33 0 17.067 15.408 18.7 28.493 1.619 12.942-2.372 23.694-18.7 23.694-16.878 0-20.213-10.733-18.7-23.694 1.633-14.061 8.37-28.493 18.7-28.493z" style="fill:url(#h);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M745.853 826h.938a2.4 2.4 0 0 1 2.4 2.4v22.238a2.4 2.4 0 0 1-2.4 2.4h-.938a2.4 2.4 0 0 1-2.4-2.4V828.4a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M746.727 830.3c-19.438 0-23.278-9.326-21.541-20.59a34.467 34.467 0 0 1 3.289-10.369 16.628 16.628 0 0 1 0-9.112c2.889-12.327 12.059-20.911 18.356-20.911 6.56 0 15.468 9.1 18.356 20.911a14.589 14.589 0 0 1-.335 9.217 34.36 34.36 0 0 1 3.419 10.264c1.861 11.243-2.735 20.59-21.544 20.59z" style="fill:url(#i);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M328.841 654.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.109.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M328.383 653.73a6.567 6.567 0 0 0-5.2-5.027q-4.109-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#e);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M801.841 680.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.108.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M801.383 679.73a6.567 6.567 0 0 0-5.2-5.027q-4.108-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#j);fill-rule:evenodd"/><path d="M774.21 646.9a4.446 4.446 0 0 0-3.517-3.4q-2.778-.643-.023-1.383a4.443 4.443 0 0 0 3.4-3.517q.645-2.778 1.383-.023a4.443 4.443 0 0 0 3.517 3.4q2.778.645.023 1.383a4.446 4.446 0 0 0-3.4 3.517q-.645 2.78-1.383.023z" style="fill:url(#k);fill-rule:evenodd"/><path d="m385.6 714.6.158-150.658L598.9 544.174l-.158 150.658z" style="fill:url(#a);fill-rule:evenodd"/><path d="m385.474 564.031 214.763-19.383-36.171-49.067-215.559 17.634z" style="fill:url(#b);fill-rule:evenodd"/><path d="m598.744 694.832.156-150.658 71.975 59.319-.158 150.658z" style="fill:url(#l);fill-rule:evenodd"/><path d="m457.064 774.209.158-150.658 214.691-19.914-.158 150.663z" style="fill:url(#m);fill-rule:evenodd"/><path d="m384.566 714.459.158-150.659 72.5 59.75-.158 150.658z" style="fill:url(#n);fill-rule:evenodd"/><path d="M494 640s75.357-58.4 42-83-38.887 1.663-37 14 53.847 12.465 54-26c.2-49.979 75-125 75-125" style="fill:none;stroke-width:3px;stroke-dasharray:12 6;stroke:url(#o);fill-rule:evenodd"/><path d="m670.275 604.939-72.041-59.9 38.476-26.909 72.86 58.159z" style="fill:url(#d);fill-rule:evenodd"/><path d="m425.5 674.383-72.042-59.9 31.109-50.347 72.86 58.16z" style="fill:url(#p);fill-rule:evenodd"/><path d="m487.918 674.235 214.482-22.57-31.1-50.346-215.309 20.833z" style="fill:url(#q);fill-rule:evenodd"/><path style="fill:#fff;fill-rule:evenodd" d="m697.363 358.927-69.58 62.511-12.035 1.082z"/><path d="m697.363 358.927-69.58 62.511-12.035 1.082z" style="fill:url(#c);fill-rule:evenodd"/><path d="M615.748 422.52 604 413l92.089-53.46" style="fill:url(#r);fill-rule:evenodd"/><path d="m625 432 12 18 60-89" style="fill:url(#s);fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:#fff;fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:url(#t);fill-rule:evenodd"/><path d="m494.814 735.44 21.293-2.1v-6.613l-13.4 1.319v-6.965l10.977-1.08v-6.613l-10.977 1.08v-6.084l12.917-1.27v-6.525l-20.808 2.047v32.8zM521 732.863l7.054-.694v-11.241a106.361 106.361 0 0 0-1.014-11.274l.176-.017 2.645 7.586 4.453 11.553 4.32-.425 4.408-12.424 2.733-8.116.177-.018a111.811 111.811 0 0 0-1.014 11.474v11.241l7.185-.707V697l-8.552.841-5.025 14.646c-.618 1.956-1.147 4.08-1.808 6.173l-.22.022c-.617-1.968-1.146-3.987-1.808-5.818l-5.2-13.639-8.508.837v32.8zm37.213-3.661 7.891-.776v-10.889l3.835-.377c6.922-.681 12.961-4.714 12.961-12.517 0-8.111-5.951-10.082-13.181-9.371l-11.504 1.128v32.8zm7.891-17.881v-9.478l3.218-.316c3.792-.373 5.908.565 5.908 3.871 0 3.218-1.852 5.208-5.687 5.585zM594 725.682l7.891-.777v-26.274l8.905-.876v-6.524l-25.657 2.524v6.524l8.861-.871v26.274zm27.991-2.754 7.847-.772v-11.594l9.919-22.18-8.244.811-2.733 7.542c-.925 2.56-1.807 4.939-2.733 7.587l-.176.018c-.926-2.466-1.764-4.676-2.645-7.058l-2.734-7-8.375.824 9.874 20.233v11.594z" style="fill:url(#u);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M408.938 457.309a17.5 17.5 0 0 0 21.374 26.725 17.5 17.5 0 1 1-16.306-30.955 17.442 17.442 0 0 0-5.068 4.23z"/><circle cx="422.5" cy="468.375" r="17.5" style="fill:url(#v)"/><path fill="#ccc" fill-rule="evenodd" d="M391.76 451.5c-2.358 4.419 9.827 15.52 27.215 24.8 15.131 8.071 29.212 12.1 34.166 10.093-4.191 2.772-18.943-1.24-34.86-9.73-17.388-9.275-29.573-20.376-27.215-24.8a2.96 2.96 0 0 1 1.585-1.3 2.606 2.606 0 0 0-.891.937z"/><path d="M418.975 476.29c-17.388-9.275-29.573-20.376-27.215-24.8s18.363-.484 35.751 8.791 29.572 20.376 27.215 24.8-18.364.483-35.751-8.791zm31.634 5.732c1.824-3.42-8.789-12.642-23.7-20.6s-28.486-11.633-30.31-8.213 8.789 12.642 23.7 20.6 28.486 11.633 30.31 8.213zm-36.645-29.008-2.775 1.452.032 1.751 28.637 14.183.266-4.559z" style="fill:url(#w);fill-rule:evenodd"/><g class="people"><path style="fill:#f8cfad;fill-rule:evenodd" d="m612.131 676.5 1.362 3.532 3.255-2.324-1.361-3.532zM629.131 665.5l1.362 3.532 3.255-2.324-1.361-3.532z"/><path style="fill:#141a33;fill-rule:evenodd" d="m617.764 678.184-3.162-.078a11.028 11.028 0 0 0-1.034 3.454c-.258 2.006-1.177 5-.449 5.367 1.5 2.659 4.118-.215 4.118-.215s2.187-2.848 1.925-5.265c-.106-.973-1.181-1.869-1.398-3.263zM633.781 665.855l3.019.945a11.008 11.008 0 0 1-.137 3.6c-.4 1.981-.179 4.166-.986 4.277-2.283 2.03-3.827-1.533-3.827-1.533s-1.473-2.456-.444-4.659c.412-.88 1.718-1.385 2.375-2.63z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M599.935 592.534s10.293 9.761 11.95 7.564 3.536-3.463-6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M611.3 596.361c1.674-1.105 11.5 7.048 14.5 11.774s-12.705-4.36-14.632-6.776-1.54-3.893.132-4.998z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M621.815 607.988s1.809 2.549 2.433 1.756 2.475-1.064 2.449-1.138.1-.819 1.288-2.331-3.8-3.632-5.81-.494a2.556 2.556 0 0 0-.36 2.207z"/><path fill="#232c57" fill-rule="evenodd" d="M598 617s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s12.666 11.836 16 19c0 0-4.753-1.629-4 2 0 0-18.132-14.647-19-19s-9.148-18.716-12-31z"/><path d="M589 622s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s4.666 17.836 8 25c0 0-4.753-1.629-4 2 0 0-10.132-20.647-11-25s-9.148-18.716-12-31z" style="fill:#292966;fill-rule:evenodd"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M585.626 597.7s-10.292 9.761-11.95 7.563-3.536-3.463 6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M574.259 601.529c-1.675-1.105-11.5 7.049-14.5 11.774s12.7-4.36 14.631-6.775 1.543-3.894-.131-4.999z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M591.715 577.752s-.606 1.681 1.48 3.716-3.615 5.307-4.645 2.85-.48-2.716-.48-2.716z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M583.527 574.123c-.839 1.043.491 3.873 1.453 5.449s2.749 2.833 3.364 2.428 4.088-2.657 4-4-.228-3.4-.228-3.4 2.562-1.641 2.154-2.916-2.916-.154-2.916-.154a15.853 15.853 0 0 0-.227-2.224c-.189-.929-6.887-1.445-7.827 2.6s.558 1.805.227 2.217z"/><path fill="#232c57" fill-rule="evenodd" d="M584.227 567.758c2.1-.885 7.2-3.684 10.125.318s.842 4.385.989 5.294-1.894 5.69-1.341 6.63-3.865.8-4.657-1.179-2.844-.539-2.227-1.224-1.3-4.456-2.916-2.154a9.252 9.252 0 0 0 .309-1.38c-.115.192.259-3.257-.673-1.32s-2.1 1.037-3.069.762-1.8-1.118-1.071-1.689c.023-.016 2.436-3.172 4.531-4.058z"/><path d="M589 585c-2.584-.47-10.055.362-13 13 0 0 1.9 3.349 5 4s6 21 6 21 24.016 11.06 27-3c-.07-13.826-8-21-8-21s5.829-3.2 5-6-8.016-10.153-11-10-6 0-6 0-2.416 2.47-5 2z" style="fill:#f6bb07;fill-rule:evenodd"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M563.284 612.581s-.986 2.965-1.814 2.389-2.678-.3-2.675-.374-.333-.755-1.912-1.854 2.577-4.583 5.414-2.167a2.551 2.551 0 0 1 .987 2.006z"/></g>'});EmptyIcon.displayName="EmptyIcon";const LockIcon=()=>h$4(P$5,{name:"lock"},()=>h$4("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));LockIcon.displayName="LockIcon";const articleItem="",ArticleItem=defineComponent({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},setup(b){const $=toRef(b,"info"),{info:j,items:Z}=useArticleInfo(b);return()=>h$4("div",{class:"article-item"},h$4("article",{class:"article",vocab:"https://schema.org/",typeof:"Article"},[$.value.u?h$4(StickyIcon):null,h$4(RouterLink,{to:b.path},()=>[h$4("header",{class:"title"},[$.value.n?h$4(LockIcon):null,$.value.y==="s"?h$4(SlideIcon):null,h$4("span",{property:"headline"},$.value.title),$.value.v?h$4("meta",{property:"image",content:withBase($.value.v)}):null])]),$.value.e?h$4("div",{class:"article-excerpt",innerHTML:$.value.e}):null,h$4("hr",{class:"hr"}),h$4(PageInfo,{info:j.value,...Z.value?{items:Z.value}:{}})]))}}),pagination="",Pagination=defineComponent({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:{updateCurrentPage:b=>!0},setup(b,{emit:$}){let j;const Z=useThemeLocaleData(),U=ref(""),G=computed(()=>Z.value.paginationLocales),W=computed(()=>Math.ceil(b.total/b.perPage)),Y=computed(()=>Boolean(W.value)&&W.value!==1),X=computed(()=>W.value<7?!1:b.current>4),nn=computed(()=>W.value<7?!1:b.current<W.value-3),an=computed(()=>{const{current:on}=b;let pn=1,en=W.value;const cn=[];W.value>=7&&(on<=4&&on<W.value-3?(pn=1,en=5):on>4&&on>=W.value-3?(en=W.value,pn=W.value-4):W.value>7&&(pn=on-2,en=on+2));for(let mn=pn;mn<=en;mn++)cn.push(mn);return cn}),tn=on=>$("updateCurrentPage",on),sn=on=>{const pn=parseInt(on);pn<=W.value&&pn>0?tn(pn):j.pop(`<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>${G.value.errorText.replace(/\$page/g,W.value.toString())}`)};return onMounted(()=>{j=new Pt}),()=>h$4("div",{class:"pagination-wrapper"},Y.value?h$4("div",{class:"pagination-list"},[h$4("div",{class:"page-number"},[b.current>1?h$4("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>tn(b.current-1)},G.value.prev):null,...X.value?[h$4("div",{role:"navigation",onClick:()=>tn(1)},1),h$4("div",{class:"ellipsis"},"...")]:[],...an.value.map(on=>h$4("div",{key:on,class:{active:b.current===on},role:"navigation",onClick:()=>tn(on)},on)),...nn.value?[h$4("div",{class:"ellipsis"},"..."),h$4("div",{role:"navigation",onClick:()=>tn(W.value)},W.value)]:[],b.current<W.value?h$4("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>tn(b.current+1)},G.value.next):null]),h$4("div",{class:"navigate-wrapper"},[h$4("label",{for:"navigation-text"},`${G.value.navigate}: `),h$4("input",{id:"navigation-text",value:U.value,onInput:({target:on})=>{U.value=on.value},onKeydown:on=>{on.key==="Enter"&&(on.preventDefault(),sn(U.value))}}),h$4("button",{class:"navigate",role:"navigation",title:G.value.action,onClick:()=>sn(U.value)},G.value.action)])]):[])}}),articleList="",ArticleList=defineComponent({name:"ArticleList",props:{items:{type:Array,default:()=>[]}},setup(b){const $=useRoute(),j=useRouter(),Z=useBlogOptions(),U=ref(1),G=computed(()=>Z.value.articlePerPage||10),W=computed(()=>b.items.slice((U.value-1)*G.value,U.value*G.value)),Y=X=>{U.value=X;const nn={...$.query};nn.page===X.toString()||X===1&&!nn.page||(X===1?delete nn.page:nn.page=X.toString(),j.push({path:$.path,query:nn}))};return onMounted(()=>{const{page:X}=$.query;Y(X?Number(X):1),watch(U,()=>{const nn=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,nn)},100)})}),()=>h$4("div",{id:"article-list",class:"article-wrapper"},W.value.length?[...W.value.map(({info:X,path:nn},an)=>h$4(DropTransition,{appear:!0,delay:an*.04},()=>h$4(ArticleItem,{key:nn,info:X,path:nn}))),h$4(Pagination,{current:U.value,perPage:G.value,total:b.items.length,onUpdateCurrentPage:Y})]:h$4(EmptyIcon))}}),categoryList="",CategoryList=defineComponent({name:"CategoryList",setup(){const b=useRoute(),$=useCategoryMap();return()=>h$4("ul",{class:"category-list-wrapper"},Object.entries($.value.map).map(([j,{path:Z,items:U}])=>h$4("li",{class:["category",`category${Gt(j,9)}`,{active:Z===b.path}]},h$4(RouterLink,{to:Z},()=>[j,h$4("span",{class:"category-num"},U.length)]))))}}),tagList="",TagList=defineComponent({name:"TagList",setup(){const b=usePageFrontmatter(),$=useTagMap(),j=Z=>{var U;return Z===((U=b.value.blog)==null?void 0:U.name)};return()=>h$4("ul",{class:"tag-list-wrapper"},Object.entries($.value.map).map(([Z,{path:U,items:G}])=>h$4("li",{class:["tag",`tag${Gt(Z,9)}`,{active:j(Z)}]},h$4(RouterLink,{to:U},()=>[Z,h$4("span",{class:"tag-num"},G.length)]))))}}),timelineList="",TimelineList=defineComponent({name:"TimelineList",setup(){const b=useThemeLocaleData(),$=useTimelines(),j=useNavigate(),Z=computed(()=>b.value.blogLocales.timeline);return()=>h$4("div",{class:"timeline-list-wrapper"},[h$4("div",{class:"timeline-list-title",onClick:()=>j($.value.path)},[h$4(TimelineIcon),h$4("span",{class:"num"},$.value.items.length),Z.value]),h$4("hr"),h$4("div",{class:"timeline-content"},h$4("ul",{class:"timeline-list"},$.value.config.map(({year:U,items:G},W)=>h$4(DropTransition,{appear:!0,delay:.08*(W+1)},()=>h$4("li",[h$4("h3",{class:"timeline-year"},U),h$4("ul",{class:"timeline-year-wrapper"},G.map(({date:Y,info:X,path:nn})=>h$4("li",{class:"timeline-item"},[h$4("span",{class:"timeline-date"},Y),h$4(RouterLink,{class:"timeline-title",to:nn},()=>X.title)])))])))))])}}),infoList="",InfoList=defineComponent({name:"InfoList",setup(){const b=useThemeLocaleData(),$=useArticles(),j=useCategoryMap(),Z=computed(()=>Object.keys(j.value.map).length),U=useStars(),G=useTagMap(),W=computed(()=>Object.keys(G.value.map).length),Y=useNavigate(),X=ref("article"),nn=computed(()=>b.value.blogLocales),an=[["article",ArticleIcon],["category",CategoryIcon],["tag",TagIcon],["timeline",TimelineIcon]];return()=>h$4("div",{class:"blog-info-list"},[h$4("div",{class:"blog-type-wrapper"},an.map(([tn,sn])=>h$4("button",{class:"blog-type-button",onClick:()=>{X.value=tn}},h$4("div",{class:["icon-wrapper",{active:X.value===tn}],"aria-label":nn.value[tn],"data-balloon-pos":"up"},h$4(sn))))),h$4(DropTransition,()=>X.value==="article"?h$4("div",{class:"sticky-article-wrapper"},[h$4("div",{class:"title",onClick:()=>Y($.value.path)},[h$4(ArticleIcon),h$4("span",{class:"num"},$.value.items.length),nn.value.article]),h$4("hr"),h$4("ul",{class:"sticky-article-list"},U.value.items.map(({info:tn,path:sn},on)=>h$4(DropTransition,{appear:!0,delay:.08*(on+1)},()=>h$4("li",{class:"sticky-article"},h$4(RouterLink,{to:sn},()=>tn.title)))))]):X.value==="category"?h$4("div",{class:"category-wrapper"},[Z.value?h$4("div",{class:"title",onClick:()=>Y(j.value.path)},[h$4(CategoryIcon),h$4("span",{class:"num"},Z.value),nn.value.category]):null,h$4("hr"),h$4(DropTransition,{delay:.04},()=>h$4(CategoryList))]):X.value==="tag"?h$4("div",{class:"tag-wrapper"},[W.value?h$4("div",{class:"title",onClick:()=>Y(G.value.path)},[h$4(TagIcon),h$4("span",{class:"num"},W.value),nn.value.tag]):null,h$4("hr"),h$4(DropTransition,{delay:.04},()=>h$4(TagList))]):h$4(DropTransition,()=>h$4(TimelineList)))])}}),page="",BlogWrapper=defineComponent({name:"BlogWrapper",setup(b,{slots:$}){const{isMobile:j}=useWindowSize();return()=>[h$4(SkipLink),h$4(CommonWrapper,{noSidebar:!0},{default:()=>{var Z;return(Z=$.default)==null?void 0:Z.call($)},navScreenBottom:()=>h$4(BloggerInfo),...j.value?{sidebar:()=>h$4(InfoList)}:{}})]}}),infoPanel="",InfoPanel=()=>h$4("aside",{class:"blog-info-wrapper"},[h$4(DropTransition,()=>h$4(BloggerInfo)),h$4(DropTransition,{delay:.04},()=>h$4(InfoList))]);InfoPanel.displayName="InfoPanel";const BlogCategory=defineComponent({name:"BlogPage",components:{CategoryList,TagList},setup(){const b=usePageFrontmatter(),$=useRoute(),j=useCategoryMap(),Z=useTagMap(),U=computed(()=>b.value.blog||{}),G=computed(()=>{const{key:Y=""}=U.value;return Y==="category"?"CategoryList":Y==="tag"?"TagList":null}),W=computed(()=>{const{name:Y="",key:X=""}=U.value;return X==="category"?Y?j.value.map[Y].items:[]:X==="tag"?Y?Z.value.map[Y].items:[]:[]});return()=>h$4(BlogWrapper,()=>h$4("div",{class:"page blog"},h$4("div",{class:"blog-page-wrapper"},[h$4("main",{class:"blog-main",id:"main-content"},[h$4(DropTransition,()=>G.value?h$4(resolveComponent(G.value)):null),U.value.name?h$4(DropTransition,{appear:!0,delay:.24},()=>h$4(ArticleList,{key:$.path,items:W.value})):null]),h$4(DropTransition,{delay:.16},()=>h$4(InfoPanel))])))}}),defaultHeroBgImagePath="/assets/hero-197a9d2d.jpg",blogHero="",BlogHero=defineComponent({name:"BlogHero",setup(){const b=usePageHeadTitle(),$=usePageFrontmatter(),j=ref(),Z=computed(()=>$.value.heroImage||null),U=computed(()=>$.value.heroFullScreen||!1),G=computed(()=>({...{maxHeight:"180px",margin:$.value.heroText===!1?"6rem auto 1.5rem":"1rem auto"},...$.value.heroImageStyle})),W=computed(()=>$.value.bgImage?withBase($.value.bgImage):$.value.bgImage??defaultHeroBgImagePath),Y=computed(()=>({...{height:"350px",textAlign:"center",overflow:"hidden"},...$.value.bgImageStyle}));return()=>$.value.hero===!1?null:h$4("div",{ref:j,class:["blog-hero",{fullscreen:U.value}],style:Y.value},[W.value?h$4("div",{class:"mask",style:{background:`url(${W.value}) center/cover no-repeat`}}):null,h$4(DropTransition,{appear:!0,delay:.04},()=>Z.value?h$4("img",{class:"hero-image",style:G.value,src:withBase(Z.value),alt:$.value.heroAlt||"hero image"}):null),h$4(DropTransition,{appear:!0,delay:.08},()=>$.value.heroText===!1?null:h$4("h1",$.value.heroText||b.value)),h$4(DropTransition,{appear:!0,delay:.12},()=>$.value.tagline?h$4("p",{class:"description",innerHTML:$.value.tagline}):null),U.value?h$4("button",{class:"slide-down-button",onClick:()=>{window.scrollTo({top:j.value.clientHeight,behavior:"smooth"})}},[h$4(SlideDownIcon),h$4(SlideDownIcon)]):null])}}),projectPanel="",AVAILABLE_PROJECT_TYPES=["link","article","book","project","friend"],ProjectPanel=defineComponent({name:"ProjectPanel",components:{ArticleIcon,BookIcon,FriendIcon,LinkIcon,ProjectIcon},setup(){const b=usePageFrontmatter(),$=usePure(),j=useNavigate(),Z=(U="",G="icon")=>AVAILABLE_PROJECT_TYPES.includes(U)?h$4(resolveComponent(`${U}-icon`)):isLinkHttp(U)?h$4("img",{src:U,alt:G,class:"image"}):ue(U)?h$4("img",{src:withBase(U),alt:G,class:"image"}):h$4(Icon,{icon:U});return()=>{var U;return(U=b.value.projects)!=null&&U.length?h$4("div",{class:"project-panel"},b.value.projects.map(({icon:G,link:W,name:Y,desc:X},nn)=>h$4("div",{class:["project",{[`project${nn%9}`]:!$.value}],onClick:()=>j(W)},[Z(G,Y),h$4("div",{class:"name"},Y),h$4("div",{class:"desc"},X)]))):null}}}),home="",BlogHome$1=defineComponent({name:"BlogHome",setup(){const b=useArticles();return()=>h$4("div",{class:"page blog"},[h$4(BlogHero),h$4("div",{class:"blog-page-wrapper"},[h$4("main",{class:"blog-home",id:"main-content"},[h$4(DropTransition,{appear:!0,delay:.16},()=>h$4(ProjectPanel)),h$4(DropTransition,{appear:!0,delay:.24},()=>h$4(ArticleList,{items:b.value.items}))]),h$4(DropTransition,{appear:!0,delay:.16},()=>h$4(InfoPanel))]),h$4(DropTransition,{appear:!0,delay:.28},()=>h$4(MarkdownContent))])}}),BlogHome=defineComponent({name:"BlogHome",setup(){return()=>h$4(BlogWrapper,()=>h$4(BlogHome$1))}}),articleType="",ArticleType=defineComponent({name:"ArticleType",setup(){const b=useRouteLocale(),$=useThemeLocaleData(),j=useRoute(),Z=useArticles(),U=useStars(),G=computed(()=>{const W=$.value.blogLocales;return[{text:W.all,path:Z.value.path},{text:W.star,path:U.value.path},...[].map(({key:Y,path:X})=>({text:W[Y],path:X.replace(/^\//,b.value)}))]});return()=>h$4("ul",{class:"article-type-wrapper"},G.value.map(W=>h$4("li",{class:["article-type",{active:W.path===j.path}]},h$4(RouterLink,{to:W.path},()=>W.text))))}}),BlogType=defineComponent({name:"BlogPage",setup(){const b=C(),$=usePageFrontmatter(),j=useRoute(),Z=useArticles(),U=useStars(),G=computed(()=>{const{key:W="",type:Y}=$.value.blog||{};return W==="star"?U.value.items:Y==="type"&&W?b.value.items:Z.value.items});return()=>h$4(BlogWrapper,()=>h$4("div",{class:"page blog"},h$4("div",{class:"blog-page-wrapper"},[h$4("main",{class:"blog-main",id:"main-content"},[h$4(DropTransition,()=>h$4(ArticleType)),h$4(DropTransition,{appear:!0,delay:.24},()=>h$4(ArticleList,{key:j.path,items:G.value}))]),h$4(DropTransition,{delay:.16},()=>h$4(InfoPanel))])))}}),timelineItems="",TimelineItems=defineComponent({name:"TimelineItems",setup(){const b=useBlogOptions(),$=useThemeLocaleData(),j=useTimelines(),Z=computed(()=>b.value.timeline||$.value.blogLocales.timelineTitle),U=computed(()=>j.value.config.map(({year:G})=>({title:G.toString(),level:2,slug:G.toString(),children:[]})));return()=>h$4("div",{class:"timeline-wrapper"},h$4("ul",{class:"timeline-content"},[h$4(DropTransition,()=>h$4("li",{class:"motto"},Z.value)),h$4(TOC,{items:U.value}),...j.value.config.map(({year:G,items:W},Y)=>h$4(DropTransition,{appear:!0,delay:.08*(Y+1),type:"group"},()=>[h$4("h3",{key:"title",id:G,class:"timeline-year-title"},h$4("span",G)),h$4("li",{key:"content",class:"timeline-year-list"},[h$4("ul",{class:"timeline-year-wrapper"},W.map(({date:X,info:nn,path:an})=>h$4("li",{class:"timeline-item"},[h$4("span",{class:"timeline-date"},X),h$4(RouterLink,{class:"timeline-title",to:an},()=>nn.title)])))])]))]))}}),Timeline=defineComponent({name:"Timeline",components:{ArticleType,CategoryList,TagList},setup(){return()=>h$4(BlogWrapper,()=>h$4("div",{class:"page blog"},h$4("div",{class:"blog-page-wrapper"},[h$4("main",{class:"blog-main",id:"main-content"},[h$4(DropTransition,{appear:!0,delay:.24},()=>h$4(TimelineItems))]),h$4(DropTransition,{delay:.16},()=>h$4(InfoPanel))])))}}),layout="",passwordModal="",PasswordModal=defineComponent({name:"PasswordModal",props:{full:Boolean},emits:{verify:(b,$)=>!0},setup(b,{emit:$}){const j=usePageFrontmatter(),Z=useThemeLocaleData(),U=ref(""),G=ref(!1),W=ref(!1),Y=computed(()=>Z.value.encryptLocales);let X=null;const nn=()=>{X&&clearTimeout(X),G.value=!1,$("verify",U.value,W.value),nextTick().then(()=>{G.value=!0,X=setTimeout(()=>{G.value=!1},1e3)})};return()=>h$4("div",{class:["password-layer",{expand:b.full||j.value.home}]},h$4("div",{class:"password-modal"},[h$4("div",{class:["hint",{tried:G.value}]},G.value?Y.value.errorHint:h$4(LockIcon,{"aria-label":Y.value.iconLabel})),h$4("div",{class:"password"},[h$4("input",{type:"password",value:U.value,placeholder:Y.value.placeholder,onInput:({target:an})=>{U.value=an.value},onKeydown:({key:an})=>{an==="Enter"&&nn()}})]),h$4("div",{class:"remember-password"},[h$4("input",{type:"checkbox",value:W.value,onChange:()=>W.value=!W.value}),Y.value.remember]),h$4("button",{class:"submit",onClick:()=>nn()},"OK")]))}}),r="./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),t=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,54,55,56,57,58,59,60,61,62,63,-1,-1,-1,-1,-1,-1,-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,-1,-1,-1,-1,-1,-1,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,-1,-1,-1,-1,-1],e=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],n=[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946,1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055,3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504,976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462],o=[1332899944,1700884034,1701343084,1684370003,1668446532,1869963892],s=(b,$)=>{if($<=0||$>b.length)throw Error(`Illegal len: ${$}`);let j,Z,U=0;const G=[];for(;U<$;){if(j=255&b[U++],G.push(r[j>>2&63]),j=(3&j)<<4,U>=$){G.push(r[63&j]);break}if(Z=255&b[U++],j|=Z>>4&15,G.push(r[63&j]),j=(15&Z)<<2,U>=$){G.push(r[63&j]);break}Z=255&b[U++],j|=Z>>6&3,G.push(r[63&j]),G.push(r[63&Z])}return G.join("")},l=typeof process<"u"&&process&&typeof process.nextTick=="function"?typeof setImmediate=="function"?setImmediate:process.nextTick:setTimeout,f$1=(b,$,j,Z)=>{let U,G=b[$],W=b[$+1];return G^=j[0],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[1],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[2],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[3],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[4],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[5],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[6],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[7],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[8],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[9],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[10],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[11],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[12],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[13],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[14],U=Z[G>>>24],U+=Z[256|G>>16&255],U^=Z[512|G>>8&255],U+=Z[768|255&G],W^=U^j[15],U=Z[W>>>24],U+=Z[256|W>>16&255],U^=Z[512|W>>8&255],U+=Z[768|255&W],G^=U^j[16],b[$]=W^j[17],b[$+1]=G,b},i=(b,$)=>{let j=0;for(let Z=0;Z<4;++Z)j=j<<8|255&b[$],$=($+1)%b.length;return{key:j,offp:$}},u$1=(b,$,j)=>{const Z=$.length,U=j.length;let G,W=0,Y=[0,0];for(let X=0;X<Z;X++)G=i(b,W),W=G.offp,$[X]=$[X]^G.key;for(let X=0;X<Z;X+=2)Y=f$1(Y,0,$,j),$[X]=Y[0],$[X+1]=Y[1];for(let X=0;X<U;X+=2)Y=f$1(Y,0,$,j),j[X]=Y[0],j[X+1]=Y[1]},h$1=(b,$,j,Z,U)=>{const G=o.slice(),W=G.length;if(j<4||j>31){const sn=new Error(`Illegal number of rounds (4-31): ${j}`);if(Z===!1)return Promise.reject(sn);throw sn}if($.length!==16){const sn=new Error(`Illegal salt length: ${$.length} != 16`);if(Z===!1)return Promise.reject(sn);throw sn}let Y,X;j=1<<j>>>0;let nn,an=0;Int32Array?(Y=new Int32Array(e),X=new Int32Array(n)):(Y=e.slice(),X=n.slice()),((sn,on,pn,en)=>{const cn=pn.length,mn=en.length;let rn,fn=0,Ln=[0,0];for(let wn=0;wn<cn;wn++)rn=i(on,fn),fn=rn.offp,pn[wn]=pn[wn]^rn.key;fn=0;for(let wn=0;wn<cn;wn+=2)rn=i(sn,fn),fn=rn.offp,Ln[0]^=rn.key,rn=i(sn,fn),fn=rn.offp,Ln[1]^=rn.key,Ln=f$1(Ln,0,pn,en),pn[wn]=Ln[0],pn[wn+1]=Ln[1];for(let wn=0;wn<mn;wn+=2)rn=i(sn,fn),fn=rn.offp,Ln[0]^=rn.key,rn=i(sn,fn),fn=rn.offp,Ln[1]^=rn.key,Ln=f$1(Ln,0,pn,en),en[wn]=Ln[0],en[wn+1]=Ln[1]})($,b,Y,X);const tn=()=>{if(U&&U(an/j),!(an<j)){for(an=0;an<64;an++)for(nn=0;nn<W>>1;nn++)f$1(G,nn<<1,Y,X);const sn=[];for(an=0;an<W;an++)sn.push((G[an]>>24&255)>>>0),sn.push((G[an]>>16&255)>>>0),sn.push((G[an]>>8&255)>>>0),sn.push((255&G[an])>>>0);return Z===!1?Promise.resolve(sn):sn}{const sn=Date.now();for(;an<j&&(an+=1,u$1(b,Y,X),u$1($,Y,X),!(Date.now()-sn>100)););}if(Z===!1)return new Promise(sn=>l(()=>{tn().then(sn)}))};if(Z===!1)return tn();{let sn;for(;;)if((sn=tn())!==void 0)return sn||[]}},p$1=(b=10)=>{if(typeof b!="number")throw Error("Illegal arguments: "+typeof b);b<4?b=4:b>31&&(b=31);const $=[];return $.push("$2a$"),b<10&&$.push("0"),$.push(b.toString()),$.push("$"),$.push(s((j=>{try{let Z;return(self.crypto||self.msCrypto).getRandomValues(Z=new Uint32Array(j)),Array.prototype.slice.call(Z)}catch{throw Error("WebCryptoAPI is not available")}})(16),16)),$.join("")};function g(b,$,j,Z){if(typeof b!="string"||typeof $!="string"){const tn=new Error("Invalid string / salt: Not a string");if(j===!1)return Promise.reject(tn);throw tn}let U,G;if($.charAt(0)!=="$"||$.charAt(1)!=="2"){const tn=new Error("Invalid salt version: "+$.substring(0,2));if(j===!1)return Promise.reject(tn);throw tn}if($.charAt(2)==="$")U=String.fromCharCode(0),G=3;else{if(U=$.charAt(2),U!=="a"&&U!=="b"&&U!=="y"||$.charAt(3)!=="$"){const tn=Error("Invalid salt revision: "+$.substring(2,4));if(j===!1)return Promise.reject(tn);throw tn}G=4}if($.charAt(G+2)>"$"){const tn=new Error("Missing salt rounds");if(j===!1)return Promise.reject(tn);throw tn}const W=10*parseInt($.substring(G,G+1),10)+parseInt($.substring(G+1,G+2),10),Y=$.substring(G+3,G+25),X=(tn=>{const sn=[];let on=0;var pn;return pn=en=>{sn.push(en)},((en,cn)=>{let mn,rn=null;for(;(mn=rn!==null?rn:en())!==null;)mn>=55296&&mn<=57343&&(rn=en())!==null&&rn>=56320&&rn<=57343?(cn(1024*(mn-55296)+rn-56320+65536),rn=null):cn(mn);rn!==null&&cn(rn)})(()=>on>=tn.length?null:tn.charCodeAt(on++),function(en){((cn,mn)=>{let rn=null;for(typeof cn=="number"&&(rn=cn,cn=()=>null);rn!==null||(rn=cn())!==null;)rn<128?mn(127&rn):rn<2048?(mn(rn>>6&31|192),mn(63&rn|128)):rn<65536?(mn(rn>>12&15|224),mn(rn>>6&63|128),mn(63&rn|128)):(mn(rn>>18&7|240),mn(rn>>12&63|128),mn(rn>>6&63|128),mn(63&rn|128)),rn=null})(en,pn)}),sn})(b+=U>="a"?"\0":""),nn=((tn,sn)=>{if(sn<=0)throw Error(`Illegal len: ${sn}`);const on=tn.length;let pn,en,cn,mn,rn,fn,Ln=0,wn=0;const Tn=[];for(;Ln<on-1&&wn<sn&&(fn=tn.charCodeAt(Ln++),pn=fn<t.length?t[fn]:-1,fn=tn.charCodeAt(Ln++),en=fn<t.length?t[fn]:-1,pn!=-1&&en!=-1)&&(rn=pn<<2>>>0,rn|=(48&en)>>4,Tn.push(String.fromCharCode(rn)),!(++wn>=sn||Ln>=on))&&(fn=tn.charCodeAt(Ln++),cn=fn<t.length?t[fn]:-1,cn!=-1)&&(rn=(15&en)<<4>>>0,rn|=(60&cn)>>2,Tn.push(String.fromCharCode(rn)),!(++wn>=sn||Ln>=on));)fn=tn.charCodeAt(Ln++),mn=fn<t.length?t[fn]:-1,rn=(3&cn)<<6>>>0,rn|=mn,Tn.push(String.fromCharCode(rn)),++wn;return Tn.map(kn=>kn.charCodeAt(0))})(Y,16),an=tn=>{const sn=[];return sn.push("$2"),U>="a"&&sn.push(U),sn.push("$"),W<10&&sn.push("0"),sn.push(W.toString()),sn.push("$"),sn.push(s(nn,nn.length)),sn.push(s(tn,4*o.length-1)),sn.join("")};return j===!1?h$1(X,nn,W,!1,Z).then(tn=>an(tn)):an(h$1(X,nn,W,!0,Z))}const c=(b,$=10)=>{if(typeof $=="number"&&($=p$1($)),typeof b!="string"||typeof $!="string")throw Error("Illegal arguments: "+typeof b+", "+typeof $);return g(b,$,!0)},m$1=(b,$)=>{if(typeof b!="string"||typeof $!="string")throw Error("Illegal arguments: "+typeof b+", "+typeof $);return $.length===60&&c(b,$.substring(0,$.length-31))===$},useEncryptData=()=>{const b=useThemeData();return computed(()=>b.value.encrypt||{})},STORAGE_KEY$1="VUEPRESS_HOPE_GLOBAL_TOKEN",useGlobalEncrypt=()=>{const b=useEncryptData(),$=useStorage$1(STORAGE_KEY$1,""),j=useSessionStorage(STORAGE_KEY$1,"");return{isGlobalEncrypted:computed(()=>b.value.global&&b.value.admin?$.value?b.value.admin.every(G=>!m$1($.value,G)):j.value?b.value.admin.every(G=>!m$1(j.value,G)):!0:!1),validateGlobalToken:(G,W=!1)=>{(W?$:j).value=G}}},checkToken=(b="",$)=>Boolean(b)&&m$1(b,$),STORAGE_KEY="VUEPRESS_HOPE_PATH_TOKEN",usePathEncrypt=()=>{const b=useRoute(),$=useEncryptData(),j=useStorage$1(STORAGE_KEY,{}),Z=useSessionStorage(STORAGE_KEY,{}),U=X=>isPlainObject($.value.config)?Object.keys($.value.config).filter(nn=>decodeURI(X).startsWith(nn)).sort((nn,an)=>an.length-nn.length):[],G=X=>{const nn=U(X);if(nn.length!==0){const{config:an={}}=$.value;return!nn.some(tn=>j.value[tn]&&an[tn].some(sn=>checkToken(j.value[tn],sn))||Z.value[tn]&&an[tn].some(sn=>checkToken(Z.value[tn],sn)))}return!1};return{isEncrypted:computed(()=>G(b.path)),getPathEncryptStatus:G,validateToken:(X,nn=!1)=>{const{config:an={}}=$.value,tn=U(b.path);for(const sn of tn)if(an[sn].filter(on=>checkToken(X,on))){(nn?j:Z).value[sn]=X;break}}}},GlobalEncrypt=defineComponent({name:"GlobalEncrypt",setup(b,{slots:$}){const{isGlobalEncrypted:j,validateGlobalToken:Z}=useGlobalEncrypt();return()=>h$4(FadeSlideY,()=>{var U;return j.value?h$4(PasswordModal,{full:!0,onVerify:Z}):(U=$.default)==null?void 0:U.call($)})}}),LocalEncrypt=defineComponent({name:"LocalEncrypt",setup(b,{slots:$}){const{isEncrypted:j,validateToken:Z}=usePathEncrypt();return()=>{var U;return j.value?h$4(PasswordModal,{full:!0,onVerify:Z}):((U=$.default)==null?void 0:U.call($))||null}}}),slidePage="",d$1=()=>h$4(P$5,{name:"back"},()=>h$4("path",{d:"M1014.749 449.156v125.688H260.626l345.64 345.64-89.239 89.237L19.307 512l497.72-497.721 89.238 89.238-345.64 345.64h754.124z"})),h=()=>h$4(P$5,{name:"home"},()=>h$4("path",{d:"M780.106 420.978L506.994 147.866 233.882 420.978h.045v455.11H780.06v-455.11h.046zm90.977 90.976V876.09a91.022 91.022 0 01-91.023 91.022H233.927a91.022 91.022 0 01-91.022-91.022V511.954l-67.22 67.175-64.307-64.307 431.309-431.31c35.498-35.498 93.115-35.498 128.614 0l431.309 431.31-64.307 64.307L871.083 512z"}));var f=defineComponent({name:"SlidePage",setup(){const b=useRouter(),$=ref(!1),j=ref(),Z=()=>{$.value=!$.value},U=()=>{$.value=!1},G=()=>{U(),window.history.go(-1)},W=()=>{U(),b.push("/")};return onClickOutside(j,U),()=>h$4("div",{class:"presentation"},[h$4(Content),h$4("div",{ref:j,class:["menu",{active:$.value}]},[h$4("button",{class:"menu-button",onClick:()=>Z()},h$4("span",{class:"icon"})),h$4("button",{class:"back-button",onClick:()=>G()},h$4(d$1)),h$4("button",{class:"home-button",onClick:()=>W()},h$4(h))])])}});const clientConfig11=defineClientConfig({enhance:({app:b,router:$})=>{const{scrollBehavior:j}=$.options;$.options.scrollBehavior=async(...Z)=>(await useScrollPromise().wait(),j(...Z)),injectDarkMode(b),b.component("BloggerInfo",BloggerInfo),b.component("GlobalEncrypt",GlobalEncrypt),b.component("LocalEncrypt",LocalEncrypt)},setup:()=>{setupDarkMode(),setupSidebarItems(),setupBlog()},layouts:{Layout,NotFound,BlogCategory,BlogHome,BlogType,Timeline,Slide:f}});var _a;const isClient=typeof window<"u",isFunction=b=>typeof b=="function",isString=b=>typeof b=="string",noop=()=>{};isClient&&((_a=window==null?void 0:window.navigator)!=null&&_a.userAgent)&&/iP(ad|hone|od)/.test(window.navigator.userAgent);function resolveUnref(b){return typeof b=="function"?b():unref(b)}function createFilterWrapper(b,$){function j(...Z){return new Promise((U,G)=>{Promise.resolve(b(()=>$.apply(this,Z),{fn:$,thisArg:this,args:Z})).then(U).catch(G)})}return j}const bypassFilter=b=>b();function debounceFilter(b,$={}){let j,Z,U=noop;const G=Y=>{clearTimeout(Y),U(),U=noop};return Y=>{const X=resolveUnref(b),nn=resolveUnref($.maxWait);return j&&G(j),X<=0||nn!==void 0&&nn<=0?(Z&&(G(Z),Z=null),Promise.resolve(Y())):new Promise((an,tn)=>{U=$.rejectOnCancel?tn:an,nn&&!Z&&(Z=setTimeout(()=>{j&&G(j),Z=null,an(Y())},nn)),j=setTimeout(()=>{Z&&G(Z),Z=null,an(Y())},X)})}}function pausableFilter(b=bypassFilter){const $=ref(!0);function j(){$.value=!1}function Z(){$.value=!0}const U=(...G)=>{$.value&&b(...G)};return{isActive:readonly($),pause:j,resume:Z,eventFilter:U}}function identity(b){return b}function tryOnScopeDispose(b){return getCurrentScope()?(onScopeDispose(b),!0):!1}function useDebounceFn(b,$=200,j={}){return createFilterWrapper(debounceFilter($,j),b)}var __getOwnPropSymbols$6=Object.getOwnPropertySymbols,__hasOwnProp$6=Object.prototype.hasOwnProperty,__propIsEnum$6=Object.prototype.propertyIsEnumerable,__objRest$5=(b,$)=>{var j={};for(var Z in b)__hasOwnProp$6.call(b,Z)&&$.indexOf(Z)<0&&(j[Z]=b[Z]);if(b!=null&&__getOwnPropSymbols$6)for(var Z of __getOwnPropSymbols$6(b))$.indexOf(Z)<0&&__propIsEnum$6.call(b,Z)&&(j[Z]=b[Z]);return j};function watchWithFilter(b,$,j={}){const Z=j,{eventFilter:U=bypassFilter}=Z,G=__objRest$5(Z,["eventFilter"]);return watch(b,createFilterWrapper(U,$),G)}var __defProp$2=Object.defineProperty,__defProps$2=Object.defineProperties,__getOwnPropDescs$2=Object.getOwnPropertyDescriptors,__getOwnPropSymbols$2=Object.getOwnPropertySymbols,__hasOwnProp$2=Object.prototype.hasOwnProperty,__propIsEnum$2=Object.prototype.propertyIsEnumerable,__defNormalProp$2=(b,$,j)=>$ in b?__defProp$2(b,$,{enumerable:!0,configurable:!0,writable:!0,value:j}):b[$]=j,__spreadValues$2=(b,$)=>{for(var j in $||($={}))__hasOwnProp$2.call($,j)&&__defNormalProp$2(b,j,$[j]);if(__getOwnPropSymbols$2)for(var j of __getOwnPropSymbols$2($))__propIsEnum$2.call($,j)&&__defNormalProp$2(b,j,$[j]);return b},__spreadProps$2=(b,$)=>__defProps$2(b,__getOwnPropDescs$2($)),__objRest$1=(b,$)=>{var j={};for(var Z in b)__hasOwnProp$2.call(b,Z)&&$.indexOf(Z)<0&&(j[Z]=b[Z]);if(b!=null&&__getOwnPropSymbols$2)for(var Z of __getOwnPropSymbols$2(b))$.indexOf(Z)<0&&__propIsEnum$2.call(b,Z)&&(j[Z]=b[Z]);return j};function watchPausable(b,$,j={}){const Z=j,{eventFilter:U}=Z,G=__objRest$1(Z,["eventFilter"]),{eventFilter:W,pause:Y,resume:X,isActive:nn}=pausableFilter(U);return{stop:watchWithFilter(b,$,__spreadProps$2(__spreadValues$2({},G),{eventFilter:W})),pause:Y,resume:X,isActive:nn}}function unrefElement(b){var $;const j=resolveUnref(b);return($=j==null?void 0:j.$el)!=null?$:j}const defaultWindow=isClient?window:void 0;isClient&&window.document;isClient&&window.navigator;isClient&&window.location;function useEventListener(...b){let $,j,Z,U;if(isString(b[0])||Array.isArray(b[0])?([j,Z,U]=b,$=defaultWindow):[$,j,Z,U]=b,!$)return noop;Array.isArray(j)||(j=[j]),Array.isArray(Z)||(Z=[Z]);const G=[],W=()=>{G.forEach(an=>an()),G.length=0},Y=(an,tn,sn)=>(an.addEventListener(tn,sn,U),()=>an.removeEventListener(tn,sn,U)),X=watch(()=>unrefElement($),an=>{W(),an&&G.push(...j.flatMap(tn=>Z.map(sn=>Y(an,tn,sn))))},{immediate:!0,flush:"post"}),nn=()=>{X(),W()};return tryOnScopeDispose(nn),nn}const _global=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},globalKey="__vueuse_ssr_handlers__";_global[globalKey]=_global[globalKey]||{};const handlers=_global[globalKey];function getSSRHandler(b,$){return handlers[b]||$}function guessSerializerType(b){return b==null?"any":b instanceof Set?"set":b instanceof Map?"map":b instanceof Date?"date":typeof b=="boolean"?"boolean":typeof b=="string"?"string":typeof b=="object"?"object":Number.isNaN(b)?"any":"number"}var __defProp$j=Object.defineProperty,__getOwnPropSymbols$l=Object.getOwnPropertySymbols,__hasOwnProp$l=Object.prototype.hasOwnProperty,__propIsEnum$l=Object.prototype.propertyIsEnumerable,__defNormalProp$j=(b,$,j)=>$ in b?__defProp$j(b,$,{enumerable:!0,configurable:!0,writable:!0,value:j}):b[$]=j,__spreadValues$j=(b,$)=>{for(var j in $||($={}))__hasOwnProp$l.call($,j)&&__defNormalProp$j(b,j,$[j]);if(__getOwnPropSymbols$l)for(var j of __getOwnPropSymbols$l($))__propIsEnum$l.call($,j)&&__defNormalProp$j(b,j,$[j]);return b};const StorageSerializers={boolean:{read:b=>b==="true",write:b=>String(b)},object:{read:b=>JSON.parse(b),write:b=>JSON.stringify(b)},number:{read:b=>Number.parseFloat(b),write:b=>String(b)},any:{read:b=>b,write:b=>String(b)},string:{read:b=>b,write:b=>String(b)},map:{read:b=>new Map(JSON.parse(b)),write:b=>JSON.stringify(Array.from(b.entries()))},set:{read:b=>new Set(JSON.parse(b)),write:b=>JSON.stringify(Array.from(b))},date:{read:b=>new Date(b),write:b=>b.toISOString()}};function useStorage(b,$,j,Z={}){var U;const{flush:G="pre",deep:W=!0,listenToStorageChanges:Y=!0,writeDefaults:X=!0,mergeDefaults:nn=!1,shallow:an,window:tn=defaultWindow,eventFilter:sn,onError:on=kn=>{console.error(kn)}}=Z,pn=(an?shallowRef:ref)($);if(!j)try{j=getSSRHandler("getDefaultStorage",()=>{var kn;return(kn=defaultWindow)==null?void 0:kn.localStorage})()}catch(kn){on(kn)}if(!j)return pn;const en=resolveUnref($),cn=guessSerializerType(en),mn=(U=Z.serializer)!=null?U:StorageSerializers[cn],{pause:rn,resume:fn}=watchPausable(pn,()=>Ln(pn.value),{flush:G,deep:W,eventFilter:sn});return tn&&Y&&useEventListener(tn,"storage",Tn),Tn(),pn;function Ln(kn){try{if(kn==null)j.removeItem(b);else{const vn=mn.write(kn),hn=j.getItem(b);hn!==vn&&(j.setItem(b,vn),tn&&(tn==null||tn.dispatchEvent(new StorageEvent("storage",{key:b,oldValue:hn,newValue:vn,storageArea:j}))))}}catch(vn){on(vn)}}function wn(kn){const vn=kn?kn.newValue:j.getItem(b);if(vn==null)return X&&en!==null&&j.setItem(b,mn.write(en)),en;if(!kn&&nn){const hn=mn.read(vn);return isFunction(nn)?nn(hn,en):cn==="object"&&!Array.isArray(hn)?__spreadValues$j(__spreadValues$j({},en),hn):hn}else return typeof vn!="string"?vn:mn.read(vn)}function Tn(kn){if(!(kn&&kn.storageArea!==j)){if(kn&&kn.key==null){pn.value=en;return}if(!(kn&&kn.key!==b)){rn();try{pn.value=wn(kn)}catch(vn){on(vn)}finally{kn?nextTick(fn):fn()}}}}}function useLocalStorage(b,$,j={}){const{window:Z=defaultWindow}=j;return useStorage(b,$,Z==null?void 0:Z.localStorage,j)}var SwipeDirection;(function(b){b.UP="UP",b.RIGHT="RIGHT",b.DOWN="DOWN",b.LEFT="LEFT",b.NONE="NONE"})(SwipeDirection||(SwipeDirection={}));var __defProp=Object.defineProperty,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp=(b,$,j)=>$ in b?__defProp(b,$,{enumerable:!0,configurable:!0,writable:!0,value:j}):b[$]=j,__spreadValues=(b,$)=>{for(var j in $||($={}))__hasOwnProp.call($,j)&&__defNormalProp(b,j,$[j]);if(__getOwnPropSymbols)for(var j of __getOwnPropSymbols($))__propIsEnum.call($,j)&&__defNormalProp(b,j,$[j]);return b};const _TransitionPresets={easeInSine:[.12,0,.39,0],easeOutSine:[.61,1,.88,1],easeInOutSine:[.37,0,.63,1],easeInQuad:[.11,0,.5,0],easeOutQuad:[.5,1,.89,1],easeInOutQuad:[.45,0,.55,1],easeInCubic:[.32,0,.67,0],easeOutCubic:[.33,1,.68,1],easeInOutCubic:[.65,0,.35,1],easeInQuart:[.5,0,.75,0],easeOutQuart:[.25,1,.5,1],easeInOutQuart:[.76,0,.24,1],easeInQuint:[.64,0,.78,0],easeOutQuint:[.22,1,.36,1],easeInOutQuint:[.83,0,.17,1],easeInExpo:[.7,0,.84,0],easeOutExpo:[.16,1,.3,1],easeInOutExpo:[.87,0,.13,1],easeInCirc:[.55,0,1,.45],easeOutCirc:[0,.55,.45,1],easeInOutCirc:[.85,0,.15,1],easeInBack:[.36,0,.66,-.56],easeOutBack:[.34,1.56,.64,1],easeInOutBack:[.68,-.6,.32,1.6]};__spreadValues({linear:identity},_TransitionPresets);const P=({name:b="",color:$="currentColor"},{slots:j})=>{var Z;return h$4("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${b}-icon`],viewBox:"0 0 1024 1024",fill:$,"aria-label":`${b} icon`},(Z=j.default)==null?void 0:Z.call(j))};P.displayName="IconBase";const kt=b=>{const $=useRouteLocale();return computed(()=>b[$.value])},Ht=b=>/\b(?:Android|iPhone)/i.test(b),Bt=b=>{const $=atob(b);return strFromU8(unzlibSync(strToU8($,!0)))};var K=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},nt={},qt={get exports(){return nt},set exports(b){nt=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K,function(){var j=1e3,Z=6e4,U=36e5,G="millisecond",W="second",Y="minute",X="hour",nn="day",an="week",tn="month",sn="quarter",on="year",pn="date",en="Invalid Date",cn=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,mn=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,rn={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(bn){var dn=["th","st","nd","rd"],ln=bn%100;return"["+bn+(dn[(ln-20)%10]||dn[ln]||dn[0])+"]"}},fn=function(bn,dn,ln){var _n=String(bn);return!_n||_n.length>=dn?bn:""+Array(dn+1-_n.length).join(ln)+bn},Ln={s:fn,z:function(bn){var dn=-bn.utcOffset(),ln=Math.abs(dn),_n=Math.floor(ln/60),un=ln%60;return(dn<=0?"+":"-")+fn(_n,2,"0")+":"+fn(un,2,"0")},m:function bn(dn,ln){if(dn.date()<ln.date())return-bn(ln,dn);var _n=12*(ln.year()-dn.year())+(ln.month()-dn.month()),un=dn.clone().add(_n,tn),yn=ln-un<0,gn=dn.clone().add(_n+(yn?-1:1),tn);return+(-(_n+(ln-un)/(yn?un-gn:gn-un))||0)},a:function(bn){return bn<0?Math.ceil(bn)||0:Math.floor(bn)},p:function(bn){return{M:tn,y:on,w:an,d:nn,D:pn,h:X,m:Y,s:W,ms:G,Q:sn}[bn]||String(bn||"").toLowerCase().replace(/s$/,"")},u:function(bn){return bn===void 0}},wn="en",Tn={};Tn[wn]=rn;var kn=function(bn){return bn instanceof In},vn=function bn(dn,ln,_n){var un;if(!dn)return wn;if(typeof dn=="string"){var yn=dn.toLowerCase();Tn[yn]&&(un=yn),ln&&(Tn[yn]=ln,un=yn);var gn=dn.split("-");if(!un&&gn.length>1)return bn(gn[0])}else{var En=dn.name;Tn[En]=dn,un=En}return!_n&&un&&(wn=un),un||!_n&&wn},hn=function(bn,dn){if(kn(bn))return bn.clone();var ln=typeof dn=="object"?dn:{};return ln.date=bn,ln.args=arguments,new In(ln)},Pn=Ln;Pn.l=vn,Pn.i=kn,Pn.w=function(bn,dn){return hn(bn,{locale:dn.$L,utc:dn.$u,x:dn.$x,$offset:dn.$offset})};var In=function(){function bn(ln){this.$L=vn(ln.locale,null,!0),this.parse(ln)}var dn=bn.prototype;return dn.parse=function(ln){this.$d=function(_n){var un=_n.date,yn=_n.utc;if(un===null)return new Date(NaN);if(Pn.u(un))return new Date;if(un instanceof Date)return new Date(un);if(typeof un=="string"&&!/Z$/i.test(un)){var gn=un.match(cn);if(gn){var En=gn[2]-1||0,An=(gn[7]||"0").substring(0,3);return yn?new Date(Date.UTC(gn[1],En,gn[3]||1,gn[4]||0,gn[5]||0,gn[6]||0,An)):new Date(gn[1],En,gn[3]||1,gn[4]||0,gn[5]||0,gn[6]||0,An)}}return new Date(un)}(ln),this.$x=ln.x||{},this.init()},dn.init=function(){var ln=this.$d;this.$y=ln.getFullYear(),this.$M=ln.getMonth(),this.$D=ln.getDate(),this.$W=ln.getDay(),this.$H=ln.getHours(),this.$m=ln.getMinutes(),this.$s=ln.getSeconds(),this.$ms=ln.getMilliseconds()},dn.$utils=function(){return Pn},dn.isValid=function(){return this.$d.toString()!==en},dn.isSame=function(ln,_n){var un=hn(ln);return this.startOf(_n)<=un&&un<=this.endOf(_n)},dn.isAfter=function(ln,_n){return hn(ln)<this.startOf(_n)},dn.isBefore=function(ln,_n){return this.endOf(_n)<hn(ln)},dn.$g=function(ln,_n,un){return Pn.u(ln)?this[_n]:this.set(un,ln)},dn.unix=function(){return Math.floor(this.valueOf()/1e3)},dn.valueOf=function(){return this.$d.getTime()},dn.startOf=function(ln,_n){var un=this,yn=!!Pn.u(_n)||_n,gn=Pn.p(ln),En=function(Rn,Cn){var Sn=Pn.w(un.$u?Date.UTC(un.$y,Cn,Rn):new Date(un.$y,Cn,Rn),un);return yn?Sn:Sn.endOf(nn)},An=function(Rn,Cn){return Pn.w(un.toDate()[Rn].apply(un.toDate("s"),(yn?[0,0,0,0]:[23,59,59,999]).slice(Cn)),un)},xn=this.$W,$n=this.$M,On=this.$D,Dn="set"+(this.$u?"UTC":"");switch(gn){case on:return yn?En(1,0):En(31,11);case tn:return yn?En(1,$n):En(0,$n+1);case an:var Vn=this.$locale().weekStart||0,Mn=(xn<Vn?xn+7:xn)-Vn;return En(yn?On-Mn:On+(6-Mn),$n);case nn:case pn:return An(Dn+"Hours",0);case X:return An(Dn+"Minutes",1);case Y:return An(Dn+"Seconds",2);case W:return An(Dn+"Milliseconds",3);default:return this.clone()}},dn.endOf=function(ln){return this.startOf(ln,!1)},dn.$set=function(ln,_n){var un,yn=Pn.p(ln),gn="set"+(this.$u?"UTC":""),En=(un={},un[nn]=gn+"Date",un[pn]=gn+"Date",un[tn]=gn+"Month",un[on]=gn+"FullYear",un[X]=gn+"Hours",un[Y]=gn+"Minutes",un[W]=gn+"Seconds",un[G]=gn+"Milliseconds",un)[yn],An=yn===nn?this.$D+(_n-this.$W):_n;if(yn===tn||yn===on){var xn=this.clone().set(pn,1);xn.$d[En](An),xn.init(),this.$d=xn.set(pn,Math.min(this.$D,xn.daysInMonth())).$d}else En&&this.$d[En](An);return this.init(),this},dn.set=function(ln,_n){return this.clone().$set(ln,_n)},dn.get=function(ln){return this[Pn.p(ln)]()},dn.add=function(ln,_n){var un,yn=this;ln=Number(ln);var gn=Pn.p(_n),En=function($n){var On=hn(yn);return Pn.w(On.date(On.date()+Math.round($n*ln)),yn)};if(gn===tn)return this.set(tn,this.$M+ln);if(gn===on)return this.set(on,this.$y+ln);if(gn===nn)return En(1);if(gn===an)return En(7);var An=(un={},un[Y]=Z,un[X]=U,un[W]=j,un)[gn]||1,xn=this.$d.getTime()+ln*An;return Pn.w(xn,this)},dn.subtract=function(ln,_n){return this.add(-1*ln,_n)},dn.format=function(ln){var _n=this,un=this.$locale();if(!this.isValid())return un.invalidDate||en;var yn=ln||"YYYY-MM-DDTHH:mm:ssZ",gn=Pn.z(this),En=this.$H,An=this.$m,xn=this.$M,$n=un.weekdays,On=un.months,Dn=function(Cn,Sn,Fn,Bn){return Cn&&(Cn[Sn]||Cn(_n,yn))||Fn[Sn].slice(0,Bn)},Vn=function(Cn){return Pn.s(En%12||12,Cn,"0")},Mn=un.meridiem||function(Cn,Sn,Fn){var Bn=Cn<12?"AM":"PM";return Fn?Bn.toLowerCase():Bn},Rn={YY:String(this.$y).slice(-2),YYYY:this.$y,M:xn+1,MM:Pn.s(xn+1,2,"0"),MMM:Dn(un.monthsShort,xn,On,3),MMMM:Dn(On,xn),D:this.$D,DD:Pn.s(this.$D,2,"0"),d:String(this.$W),dd:Dn(un.weekdaysMin,this.$W,$n,2),ddd:Dn(un.weekdaysShort,this.$W,$n,3),dddd:$n[this.$W],H:String(En),HH:Pn.s(En,2,"0"),h:Vn(1),hh:Vn(2),a:Mn(En,An,!0),A:Mn(En,An,!1),m:String(An),mm:Pn.s(An,2,"0"),s:String(this.$s),ss:Pn.s(this.$s,2,"0"),SSS:Pn.s(this.$ms,3,"0"),Z:gn};return yn.replace(mn,function(Cn,Sn){return Sn||Rn[Cn]||gn.replace(":","")})},dn.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},dn.diff=function(ln,_n,un){var yn,gn=Pn.p(_n),En=hn(ln),An=(En.utcOffset()-this.utcOffset())*Z,xn=this-En,$n=Pn.m(this,En);return $n=(yn={},yn[on]=$n/12,yn[tn]=$n,yn[sn]=$n/3,yn[an]=(xn-An)/6048e5,yn[nn]=(xn-An)/864e5,yn[X]=xn/U,yn[Y]=xn/Z,yn[W]=xn/j,yn)[gn]||xn,un?$n:Pn.a($n)},dn.daysInMonth=function(){return this.endOf(tn).$D},dn.$locale=function(){return Tn[this.$L]},dn.locale=function(ln,_n){if(!ln)return this.$L;var un=this.clone(),yn=vn(ln,_n,!0);return yn&&(un.$L=yn),un},dn.clone=function(){return Pn.w(this.$d,this)},dn.toDate=function(){return new Date(this.valueOf())},dn.toJSON=function(){return this.isValid()?this.toISOString():null},dn.toISOString=function(){return this.$d.toISOString()},dn.toString=function(){return this.$d.toUTCString()},bn}(),zn=In.prototype;return hn.prototype=zn,[["$ms",G],["$s",W],["$m",Y],["$H",X],["$W",nn],["$M",tn],["$y",on],["$D",pn]].forEach(function(bn){zn[bn[1]]=function(dn){return this.$g(dn,bn[0],bn[1])}}),hn.extend=function(bn,dn){return bn.$i||(bn(dn,In,hn),bn.$i=!0),hn},hn.locale=vn,hn.isDayjs=kn,hn.unix=function(bn){return hn(1e3*bn)},hn.en=Tn[wn],hn.Ls=Tn,hn.p={},hn})})(qt);var R=nt,it={},Qt={get exports(){return it},set exports(b){it=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K,function(){return function(j,Z,U){var G=Z.prototype,W=function(sn){var on,pn=sn.date,en=sn.utc,cn={};if(!((on=pn)instanceof Date||on instanceof Array||G.$utils().u(on)||on.constructor.name!=="Object")){if(!Object.keys(pn).length)return new Date;var mn=en?U.utc():U();Object.keys(pn).forEach(function(hn){var Pn,In;cn[Pn=hn,In=G.$utils().p(Pn),In==="date"?"day":In]=pn[hn]});var rn=cn.day||(cn.year||cn.month>=0?1:mn.date()),fn=cn.year||mn.year(),Ln=cn.month>=0?cn.month:cn.year||cn.day?0:mn.month(),wn=cn.hour||0,Tn=cn.minute||0,kn=cn.second||0,vn=cn.millisecond||0;return en?new Date(Date.UTC(fn,Ln,rn,wn,Tn,kn,vn)):new Date(fn,Ln,rn,wn,Tn,kn,vn)}return pn},Y=G.parse;G.parse=function(sn){sn.date=W.bind(this)(sn),Y.bind(this)(sn)};var X=G.set,nn=G.add,an=G.subtract,tn=function(sn,on,pn,en){en===void 0&&(en=1);var cn=Object.keys(on),mn=this;return cn.forEach(function(rn){mn=sn.bind(mn)(on[rn]*en,rn)}),mn};G.set=function(sn,on){return on=on===void 0?sn:on,sn.constructor.name==="Object"?tn.bind(this)(function(pn,en){return X.bind(this)(en,pn)},on,sn):X.bind(this)(sn,on)},G.add=function(sn,on){return sn.constructor.name==="Object"?tn.bind(this)(nn,sn,on):nn.bind(this)(sn,on)},G.subtract=function(sn,on){return sn.constructor.name==="Object"?tn.bind(this)(nn,sn,on,-1):an.bind(this)(sn,on)}}})})(Qt);var Kt=it,rt={},Xt={get exports(){return rt},set exports(b){rt=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K,function(){var j={year:0,month:1,day:2,hour:3,minute:4,second:5},Z={};return function(U,G,W){var Y,X=function(sn,on,pn){pn===void 0&&(pn={});var en=new Date(sn),cn=function(mn,rn){rn===void 0&&(rn={});var fn=rn.timeZoneName||"short",Ln=mn+"|"+fn,wn=Z[Ln];return wn||(wn=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:mn,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:fn}),Z[Ln]=wn),wn}(on,pn);return cn.formatToParts(en)},nn=function(sn,on){for(var pn=X(sn,on),en=[],cn=0;cn<pn.length;cn+=1){var mn=pn[cn],rn=mn.type,fn=mn.value,Ln=j[rn];Ln>=0&&(en[Ln]=parseInt(fn,10))}var wn=en[3],Tn=wn===24?0:wn,kn=en[0]+"-"+en[1]+"-"+en[2]+" "+Tn+":"+en[4]+":"+en[5]+":000",vn=+sn;return(W.utc(kn).valueOf()-(vn-=vn%1e3))/6e4},an=G.prototype;an.tz=function(sn,on){sn===void 0&&(sn=Y);var pn=this.utcOffset(),en=this.toDate(),cn=en.toLocaleString("en-US",{timeZone:sn}),mn=Math.round((en-new Date(cn))/1e3/60),rn=W(cn).$set("millisecond",this.$ms).utcOffset(15*-Math.round(en.getTimezoneOffset()/15)-mn,!0);if(on){var fn=rn.utcOffset();rn=rn.add(pn-fn,"minute")}return rn.$x.$timezone=sn,rn},an.offsetName=function(sn){var on=this.$x.$timezone||W.tz.guess(),pn=X(this.valueOf(),on,{timeZoneName:sn}).find(function(en){return en.type.toLowerCase()==="timezonename"});return pn&&pn.value};var tn=an.startOf;an.startOf=function(sn,on){if(!this.$x||!this.$x.$timezone)return tn.call(this,sn,on);var pn=W(this.format("YYYY-MM-DD HH:mm:ss:SSS"));return tn.call(pn,sn,on).tz(this.$x.$timezone,!0)},W.tz=function(sn,on,pn){var en=pn&&on,cn=pn||on||Y,mn=nn(+W(),cn);if(typeof sn!="string")return W(sn).tz(cn);var rn=function(Tn,kn,vn){var hn=Tn-60*kn*1e3,Pn=nn(hn,vn);if(kn===Pn)return[hn,kn];var In=nn(hn-=60*(Pn-kn)*1e3,vn);return Pn===In?[hn,Pn]:[Tn-60*Math.min(Pn,In)*1e3,Math.max(Pn,In)]}(W.utc(sn,en).valueOf(),mn,cn),fn=rn[0],Ln=rn[1],wn=W(fn).utcOffset(Ln);return wn.$x.$timezone=cn,wn},W.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},W.tz.setDefault=function(sn){Y=sn}}})})(Xt);var te=rt,st={},ee={get exports(){return st},set exports(b){st=b}};(function(b,$){(function(j,Z){b.exports=Z()})(K,function(){var j="minute",Z=/[+-]\d\d(?::?\d\d)?/g,U=/([+-]|\d\d)/g;return function(G,W,Y){var X=W.prototype;Y.utc=function(en){var cn={date:en,utc:!0,args:arguments};return new W(cn)},X.utc=function(en){var cn=Y(this.toDate(),{locale:this.$L,utc:!0});return en?cn.add(this.utcOffset(),j):cn},X.local=function(){return Y(this.toDate(),{locale:this.$L,utc:!1})};var nn=X.parse;X.parse=function(en){en.utc&&(this.$u=!0),this.$utils().u(en.$offset)||(this.$offset=en.$offset),nn.call(this,en)};var an=X.init;X.init=function(){if(this.$u){var en=this.$d;this.$y=en.getUTCFullYear(),this.$M=en.getUTCMonth(),this.$D=en.getUTCDate(),this.$W=en.getUTCDay(),this.$H=en.getUTCHours(),this.$m=en.getUTCMinutes(),this.$s=en.getUTCSeconds(),this.$ms=en.getUTCMilliseconds()}else an.call(this)};var tn=X.utcOffset;X.utcOffset=function(en,cn){var mn=this.$utils().u;if(mn(en))return this.$u?0:mn(this.$offset)?tn.call(this):this.$offset;if(typeof en=="string"&&(en=function(wn){wn===void 0&&(wn="");var Tn=wn.match(Z);if(!Tn)return null;var kn=(""+Tn[0]).match(U)||["-",0,0],vn=kn[0],hn=60*+kn[1]+ +kn[2];return hn===0?0:vn==="+"?hn:-hn}(en),en===null))return this;var rn=Math.abs(en)<=16?60*en:en,fn=this;if(cn)return fn.$offset=rn,fn.$u=en===0,fn;if(en!==0){var Ln=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(fn=this.local().add(rn+Ln,j)).$offset=rn,fn.$x.$localOffset=Ln}else fn=this.utc();return fn};var sn=X.format;X.format=function(en){var cn=en||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return sn.call(this,cn)},X.valueOf=function(){var en=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*en},X.isUTC=function(){return!!this.$u},X.toISOString=function(){return this.toDate().toISOString()},X.toString=function(){return this.toDate().toUTCString()};var on=X.toDate;X.toDate=function(en){return en==="s"&&this.$offset?Y(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():on.call(this)};var pn=X.diff;X.diff=function(en,cn,mn){if(en&&this.$u===en.$u)return pn.call(this,en,cn,mn);var rn=this.local(),fn=Y(en).local();return pn.call(rn,fn,cn,mn)}}})})(ee);var ne=st;R.extend(Kt),R.extend(ne),R.extend(te);const searchBox="",searchModal="",u=()=>h$4(P,{name:"search"},()=>h$4("path",{d:"M192 480a256 256 0 1 1 512 0 256 256 0 0 1-512 0m631.776 362.496-143.2-143.168A318.464 318.464 0 0 0 768 480c0-176.736-143.264-320-320-320S128 303.264 128 480s143.264 320 320 320a318.016 318.016 0 0 0 184.16-58.592l146.336 146.368c12.512 12.48 32.768 12.48 45.28 0 12.48-12.512 12.48-32.768 0-45.28"}));u.displayName="SearchIcon";const d=Symbol.for("search-pro"),S=()=>{const b=ref(!1);provide(d,b)},E=[{key:"k",ctrl:!0}],p={"/":{cancel:"取消",placeholder:"搜索",search:"搜索",select:"选择",navigate:"切换",exit:"关闭",history:"搜索历史",emptyHistory:"无搜索历史",emptyResult:"没有找到结果",loading:"正在加载搜索索引..."}},L=b=>b instanceof Element?document.activeElement===b&&(["TEXTAREA","SELECT","INPUT"].includes(b.tagName)||b.hasAttribute("contenteditable")):!1,T=b=>E.some($=>{const{key:j,ctrl:Z=!1,shift:U=!1,alt:G=!1}=$;return j===b.key&&Z===b.ctrlKey&&U===b.shiftKey&&G===b.altKey});var A=defineComponent({name:"SearchBox",setup(){const b=kt(p),$=inject(d);return useEventListener("keydown",j=>{!$.value&&T(j)&&!L(j.target)&&(j.preventDefault(),$.value=!0)}),()=>[h$4("button",{class:"search-pro-button",role:"search","aria-label":b.value.search,onClick:()=>{$.value=!0}},h$4(u))]}});const m=()=>h$4("svg",{xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32",preserveAspectRatio:"xMidYMid",viewBox:"0 0 100 100"},[h$4("circle",{cx:"28",cy:"75",r:"11",fill:"currentColor"},h$4("animate",{attributeName:"fill-opacity",begin:"0s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),h$4("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 47a28 28 0 0 1 28 28"},h$4("animate",{attributeName:"stroke-opacity",begin:"0.1s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),h$4("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 25a50 50 0 0 1 50 50"},h$4("animate",{attributeName:"stroke-opacity",begin:"0.2s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"}))]);m.displayName="LoadingIcon";const x=defineComponent({name:"SearchLoading",setup(){const b=kt(p);return()=>h$4("div",{class:"search-pro-result loading"},[h$4(m),b.value.loading])}}),H=defineAsyncComponent({loader:()=>__vitePreload(()=>import("./SearchResult-ee2335b5.js"),["assets/SearchResult-ee2335b5.js","assets/framework-9a29aaa0.js"]),loadingComponent:x});var I=defineComponent({name:"SearchModal",setup(){const b=inject(d),$=kt(p),j=ref(""),Z=ref(!1),U=ref();return useEventListener("keydown",G=>{b.value&&G.key==="Escape"&&(b.value=!1)}),onMounted(()=>{Z.value=Ht(navigator.userAgent),watch(b,G=>{var W;G&&((W=U.value)==null||W.focus())})}),()=>b.value?h$4("div",{class:"search-pro-modal-wrapper"},[h$4("div",{class:"background",onClick:()=>{b.value=!1,j.value=""}}),h$4("div",{class:"search-pro-modal"},[h$4("div",{class:"search-pro-box"},[h$4(u),h$4("input",{ref:U,type:"text",class:"search-pro-input",placeholder:$.value.placeholder,spellcheck:"false",value:j.value,onInput:({target:G})=>{j.value=G.value}}),h$4("button",{class:"close-button",onClick:()=>{b.value=!1,j.value=""}},$.value.cancel)]),h$4(H,{query:j.value,onClose:()=>{b.value=!1},onUpdateQuery:G=>{j.value=G}}),Z.value?null:h$4("div",{class:"search-pro-hints"},[h$4("span",{class:"search-pro-hint"},[h$4("kbd",{innerHTML:'<svg width="15" height="15" aria-label="Enter key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M12 3.53088v3c0 1-1 2-2 2H4M7 11.53088l-3-3 3-3"></path></g></svg>'}),$.value.select]),h$4("span",{class:"search-pro-hint"},[h$4("kbd",{innerHTML:'<svg width="15" height="15" aria-label="Arrow down" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 3.5v8M10.5 8.5l-3 3-3-3"></path></g></svg>'}),h$4("kbd",{innerHTML:'<svg width="15" height="15" aria-label="Arrow up" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 11.5v-8M10.5 6.5l-3-3-3 3"></path></g></svg>'}),$.value.navigate]),h$4("span",{class:"search-pro-hint"},[h$4("kbd",{innerHTML:'<svg width="15" height="15" aria-label="Escape key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M13.6167 8.936c-.1065.3583-.6883.962-1.4875.962-.7993 0-1.653-.9165-1.653-2.1258v-.5678c0-1.2548.7896-2.1016 1.653-2.1016.8634 0 1.3601.4778 1.4875 1.0724M9 6c-.1352-.4735-.7506-.9219-1.46-.8972-.7092.0246-1.344.57-1.344 1.2166s.4198.8812 1.3445.9805C8.465 7.3992 8.968 7.9337 9 8.5c.032.5663-.454 1.398-1.4595 1.398C6.6593 9.898 6 9 5.963 8.4851m-1.4748.5368c-.2635.5941-.8099.876-1.5443.876s-1.7073-.6248-1.7073-2.204v-.4603c0-1.0416.721-2.131 1.7073-2.131.9864 0 1.6425 1.031 1.5443 2.2492h-2.956"></path></g></svg>'}),$.value.exit])])])]):null}}),N=defineClientConfig({enhance({app:b}){b.component("SearchBox",A)},setup(){S()},rootComponents:[I]});const clientConfigs=[clientConfig0,clientConfig1,clientConfig2,a$2,clientConfig4,clientConfig5,clientConfig6,s$1,D$1,clientConfig9,y,clientConfig11,N],pagesRoutes=[["v-8daa1a0e","/",{y:"h",title:"程序员小x",i:"home"},["/index.html","/README.md"]],["v-184f4da6","/intro.html",{d:"2023-01-15T07:42:21.000Z",e:`<h1> 介绍页</h1>
<p>将你的个人介绍和档案放置在此处。</p>
`,r:{minutes:.07,words:20},y:"a",title:"介绍页",i:"info"},["/intro","/intro.md"]],["v-2e3eac9e","/slides.html",{d:"2023-01-15T07:42:21.000Z",e:`<!-- markdownlint-disable MD024 MD033 MD051 -->
`,r:{minutes:4.54,words:1362},y:"s",title:"幻灯片页",i:"slides"},["/slides","/slides.md"]],["v-c9504c8e","/posts/Interview/cpp.html",{d:"2023-05-11T07:52:53.000Z",c:["面经"],g:["c++面经"],e:`<h1> c++面经</h1>
<h2> c++基础</h2>
<h3> ++i和i++哪个效率更高？</h3>
<p>对于<strong>内建数据类型</strong>，效率没有区别。</p>
<p>对于<strong>自定义的数据类型</strong>， 前缀式(++i)可以返回对象的引用，而后缀式(i++)必须返回对象的值，存在复制开销。因此++i效率更高。</p>
<h3> c++中const的作用</h3>
<ul>
<li>1.用于定义常量(注意修饰指针时的含义)</li>
<li>2.用于修饰函数形参</li>
</ul>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.95,words:286},y:"a",title:"c++面经"},["/posts/Interview/cpp","/posts/Interview/cpp.md"]],["v-2efa750a","/posts/Interview/database.html",{d:"2023-05-26T03:16:52.000Z",y:"a",title:""},["/posts/Interview/database","/posts/Interview/database.md"]],["v-7893963a","/posts/Interview/datastructure_algorithm.html",{d:"2023-05-26T03:16:52.000Z",y:"a",title:""},["/posts/Interview/datastructure_algorithm","/posts/Interview/datastructure&algorithm.html","/posts/Interview/datastructure&algorithm.md"]],["v-221fd50a","/posts/Interview/designPattern.html",{d:"2023-05-26T03:16:52.000Z",y:"a",title:""},["/posts/Interview/designPattern","/posts/Interview/designPattern.md"]],["v-fbb8d2e4","/posts/Interview/network.html",{d:"2023-05-26T03:16:52.000Z",y:"a",title:""},["/posts/Interview/network","/posts/Interview/network.md"]],["v-8999d71c","/posts/Interview/os.html",{d:"2023-05-26T03:16:52.000Z",y:"a",title:""},["/posts/Interview/os","/posts/Interview/os.md"]],["v-68d68bba","/posts/about/about.html",{d:"2023-02-12T08:15:41.000Z",y:"a",title:""},["/posts/about/about","/posts/about/about.md"]],["v-5f688ebf","/posts/database/",{d:"2023-05-26T07:33:51.000Z",y:"a",title:""},["/posts/database/index.html","/posts/database/readme.md"]],["v-65d16685","/posts/datastructure_algorithm/bubble-sort.html",{d:"2023-06-26T02:27:49.000Z",y:"a",title:""},["/posts/datastructure_algorithm/bubble-sort","/posts/datastructure_algorithm/bubble-sort.md"]],["v-2dd55e63","/posts/datastructure_algorithm/bucket-sort.html",{d:"2023-06-26T02:27:49.000Z",c:["data structure"],g:["data structure"],e:`<h1> 桶排序分析</h1>
<h2> 桶排序概述</h2>
<p>桶排序的流程：</p>
<ul>
<li>创建几个存储桶，将元素分别划分到存储桶中</li>
<li>分别对存储桶中的元素进行排序</li>
<li>将存储桶中的元素进行收集</li>
</ul>
<p>适用场景：
输入均匀地分布在一个范围内。</p>
<h2> 桶排序代码</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Bucket sort in C++</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NARRAY</span> <span class="token expression"><span class="token number">7</span>   </span><span class="token comment">// Array size</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NBUCKET</span> <span class="token expression"><span class="token number">6</span>  </span><span class="token comment">// Number of buckets</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INTERVAL</span> <span class="token expression"><span class="token number">10</span>  </span><span class="token comment">// Each bucket capacity</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">BucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span><span class="token function">InsertionSort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">printBuckets</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">getBucketIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Sorting function</span>
<span class="token keyword">void</span> <span class="token function">BucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span><span class="token operator">*</span>buckets<span class="token punctuation">;</span>

    <span class="token comment">// Create buckets and allocate memory size</span>
    buckets <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> NBUCKET<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Initialize empty buckets</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NBUCKET<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Fill the buckets with respective elements</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NARRAY<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>current<span class="token punctuation">;</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">getBucketIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        current <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        current<span class="token operator">-&gt;</span>data <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        current<span class="token operator">-&gt;</span>next <span class="token operator">=</span> buckets<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
        buckets<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Print the buckets along with their elements</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NBUCKET<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bucket["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] : "</span><span class="token punctuation">;</span>
        <span class="token function">printBuckets</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Sort the elements of each bucket</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NBUCKET<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">InsertionSort</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bucktets after sorted"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NBUCKET<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bucket["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] : "</span><span class="token punctuation">;</span>
        <span class="token function">printBuckets</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Put sorted elements on arr</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NBUCKET<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>node<span class="token punctuation">;</span>
        node <span class="token operator">=</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NBUCKET<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>node<span class="token punctuation">;</span>
        node <span class="token operator">=</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> node<span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Function to sort the elements of each bucket</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span><span class="token function">InsertionSort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>k<span class="token punctuation">,</span> <span class="token operator">*</span>nodeList<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> list<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    nodeList <span class="token operator">=</span> list<span class="token punctuation">;</span>
    k <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    nodeList<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeList<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> k<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> k<span class="token punctuation">;</span>
        k <span class="token operator">=</span> k<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> nodeList<span class="token punctuation">;</span>
        nodeList <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> nodeList<span class="token punctuation">;</span> ptr<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> k<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> k<span class="token punctuation">;</span>
        k <span class="token operator">=</span> k<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        ptr<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        ptr<span class="token operator">-&gt;</span>next <span class="token operator">=</span> k<span class="token punctuation">;</span>
        k <span class="token operator">=</span> k<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nodeList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getBucketIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">/</span> INTERVAL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Print buckets</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NARRAY<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> ar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printBuckets</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>cur <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> cur<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Driver code</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> array<span class="token punctuation">[</span>NARRAY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Initial array: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token function">BucketSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sorted array: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


执行结果：

\`\`\`shell
Initial array<span class="token operator">:</span> 
 <span class="token number">42</span> <span class="token number">32</span> <span class="token number">33</span> <span class="token number">52</span> <span class="token number">37</span> <span class="token number">47</span> <span class="token number">51</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
Bucket<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> 
Bucket<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> 
Bucket<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> 
Bucket<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">:</span>  <span class="token number">37</span> <span class="token number">33</span> <span class="token number">32</span>
Bucket<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">:</span>  <span class="token number">47</span> <span class="token number">42</span>
Bucket<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">:</span>  <span class="token number">51</span> <span class="token number">52</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
Bucktets after sorted
Bucket<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> 
Bucket<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> 
Bucket<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> 
Bucket<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">:</span>  <span class="token number">32</span> <span class="token number">33</span> <span class="token number">37</span>
Bucket<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">:</span>  <span class="token number">42</span> <span class="token number">47</span>
Bucket<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">:</span>  <span class="token number">51</span> <span class="token number">52</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
Sorted array<span class="token operator">:</span> 
 <span class="token number">32</span> <span class="token number">33</span> <span class="token number">37</span> <span class="token number">42</span> <span class="token number">47</span> <span class="token number">51</span> <span class="token number">52</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2,words:601},y:"a",title:"桶排序分析"},["/posts/datastructure_algorithm/bucket-sort","/posts/datastructure_algorithm/bucket-sort.md"]],["v-7dd6beec","/posts/datastructure_algorithm/counting-sort.html",{d:"2023-06-26T02:27:49.000Z",c:["data structure"],g:["data structure"],e:`<h1> 计数排序分析</h1>
<h1> 算法描述</h1>
<ul>
<li>1.找出待排序的数组中最大和最小的元素；</li>
<li>2.统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>3.对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>4.反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/datastructure_algorithm/counting-sort/countingSort.gif" alt="counting-sort" tabindex="0" loading="lazy"><figcaption>counting-sort</figcaption></figure>`,r:{minutes:1.29,words:386},y:"a",title:"计数排序分析"},["/posts/datastructure_algorithm/counting-sort","/posts/datastructure_algorithm/counting-sort.md"]],["v-b411f97a","/posts/datastructure_algorithm/heapsort-sort.html",{d:"2023-07-05T05:05:34.000Z",c:["data structure"],g:["data structure"],e:`<h1> 堆排序算法及其稳定性分析</h1>
<h2> 什么是堆排序？</h2>
<p>堆排序是利用数据结构堆而设计的一种排序算法。</p>
<p>堆分为两种，<strong>大顶堆</strong>和<strong>小顶堆</strong>。</p>
<p>所谓大顶堆就是每个节点的值都大于或者等于其左右孩子节点的值。</p>
<p>小顶堆则是相反的，每个节点的值都小于或者等于其左右孩子节点的值。</p>
<p>下面是一个大顶堆的示例，其拥有下面的性质:</p>
<p><code>arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]</code></p>`,r:{minutes:6.27,words:1882},y:"a",title:"堆排序算法及其稳定性分析"},["/posts/datastructure_algorithm/heapsort-sort","/posts/datastructure_algorithm/heapsort-sort.md"]],["v-6a1935c6","/posts/datastructure_algorithm/heapsort-stable.html",{d:"2023-06-18T12:24:59.000Z",c:["data structure"],g:["data structure"],e:`<h1> 面试题：堆排序是一种稳定排序吗？</h1>
<p>在回答该问题前，首先需要了解什么是稳定排序。</p>
<p><strong>稳定性</strong>就是指对于两个关键字相等的记录，它们在序列中的相对位置，在排序之前和排序之后没有发生改变。通俗地讲就是有两个关键字相等的数据A、B，排序前，A的位置是 i ，B的位置是 j，此时 i &lt; j，则如果在排序后A的位置还是在B之前，那么称它是稳定的。</p>
<p>那么堆排序是一个稳定排序吗？</p>
<h2> 堆排序的稳定性分析</h2>
<p>直接上答案堆排序并不是一个稳定排序。</p>
<p>堆排序的会将原始的数组转化成一个大顶堆或一个小顶堆，在输出堆顶后，此时需要维护堆，操作如下：</p>`,r:{minutes:2.65,words:795},y:"a",title:"面试题：堆排序是一种稳定排序吗？"},["/posts/datastructure_algorithm/heapsort-stable","/posts/datastructure_algorithm/heapsort-stable.md"]],["v-62bb3f1c","/posts/datastructure_algorithm/insert-sort.html",{d:"2023-06-25T14:42:35.000Z",c:["data structure"],g:["data structure"],e:`<h1> 直接插入排序分析</h1>
<h2> 过程分析</h2>
<p>插入排序是比较好理解的排序算法之一，其原理类似于打扑克排的理牌。</p>
<p>打扑克牌时，我们会依次抓牌并理牌，在理牌的过程中，我们会根据牌的大小确定在那个位置将牌插入进去。</p>
<p>插入排序的原理是类似的，其过程如下所示：</p>
<ul>
<li>1.第一个元素可以跳过，因为单个元素始终是有序的。</li>
<li>2.取出下一个元素，向前进行扫描。</li>
<li>3.如果该元素大于向前扫描的元素，则将元素移动到下一个位置</li>
<li>4.重复步骤3，扫描到的元素小于等于新元素</li>
<li>5.将元素插入到该位置</li>
<li>6.重复步骤2-5</li>
</ul>`,r:{minutes:1.7,words:509},y:"a",title:"直接插入排序分析"},["/posts/datastructure_algorithm/insert-sort","/posts/datastructure_algorithm/insert-sort.md"]],["v-2f79de8a","/posts/datastructure_algorithm/merge-sort.html",{d:"2023-06-26T02:27:49.000Z",y:"a",title:""},["/posts/datastructure_algorithm/merge-sort","/posts/datastructure_algorithm/merge-sort.md"]],["v-28526711","/posts/datastructure_algorithm/quicksort-stable.html",{d:"2023-06-25T06:10:51.000Z",c:["data structure"],g:["data structure"],e:`<h1> 快速排序及其稳定性分析</h1>
<h2> 快速排序代码</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
 
<span class="token comment">//将Int数组a中的第i个元素和第j个元素互换</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
	a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token operator">=</span>tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">//以第一个元素作为划分，将它放入中间</span>
<span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&gt;=</span>j<span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	a<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
	a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
	<span class="token keyword">return</span> j<span class="token punctuation">;</span>
 
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>start<span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.7,words:211},y:"a",title:"快速排序及其稳定性分析"},["/posts/datastructure_algorithm/quicksort-stable","/posts/datastructure_algorithm/quicksort-stable.md"]],["v-33473187","/posts/datastructure_algorithm/radix-sort.html",{d:"2023-06-26T02:27:49.000Z",y:"a",title:""},["/posts/datastructure_algorithm/radix-sort","/posts/datastructure_algorithm/radix-sort.md"]],["v-55b5ca16","/posts/datastructure_algorithm/select-sort.html",{d:"2023-06-20T05:35:02.000Z",c:["data structure"],g:["data structure"],e:`<h1> 直接选择排序及其稳定性分析</h1>
<p>直接选择排序是一种很直观的排序方法。其操作是这样：先在未排序的序列中选择最小的元素（或最大的元素），把它与第一个元素交换，放在第一个位置，再在剩余未排序序列中选择第二小的，与第二个元素交换，放在第二个位置，以此类推，直到所有序列排序完毕。</p>
<p>这种排序方法应该是大部分人最直观的一种排序方法，下面就根据一个实际例子来看看其过程。</p>
<h2> 排序过程</h2>
<p>下面以一个未排序的数组[5,1,2,3,4]为例，展示其排序过程：</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/datastructure_algorithm/select_sort/select_sort.png" alt="select_sort" tabindex="0" loading="lazy"><figcaption>select_sort</figcaption></figure>`,r:{minutes:2.97,words:892},y:"a",title:"直接选择排序及其稳定性分析"},["/posts/datastructure_algorithm/select-sort","/posts/datastructure_algorithm/select-sort.md"]],["v-1501f717","/posts/datastructure_algorithm/shell-sort-stable.html",{d:"2023-06-25T02:44:20.000Z",c:["data structure"],g:["data structure"],e:`<h1> 面试题：希尔排序是一种稳定排序吗？</h1>
<p>对于算法的稳定性，有这样一个记忆技巧，不稳定排序是"快些选队"，对应于快速排序/希尔排序/选择排序/堆排序。希尔排序也名列其中，因此也是一种不稳定排序，本文将通过例子来解析希尔排序不稳定的原因。</p>
<h2> 稳定性的定义</h2>
<p><strong>稳定性</strong>就是指对于两个关键字相等的记录，它们在序列中的相对位置，在排序之前和排序之后没有发生改变。通俗地讲就是有两个关键字相等的数据A、B，排序前，A的位置是 i ，B的位置是 j，此时 i &lt; j，则如果在排序后A的位置还是在B之前，那么称它是稳定的。</p>`,r:{minutes:1.53,words:459},y:"a",title:"面试题：希尔排序是一种稳定排序吗？"},["/posts/datastructure_algorithm/shell-sort-stable","/posts/datastructure_algorithm/shell-sort-stable.md"]],["v-49e1ca10","/posts/design-pattern/Interpreter.html",{d:"2023-04-27T02:08:04.000Z",e:`<h1> 解释器模式</h1>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Context</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Context</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> val<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">val_</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string val_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">IExpression</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">IExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">IExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">const</span> Context<span class="token operator">&amp;</span> context<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AExpression</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IExpression</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">const</span> Context<span class="token operator">&amp;</span> context<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'A'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">BExpression</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IExpression</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">const</span> Context<span class="token operator">&amp;</span> context<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'B'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Context <span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"AAABBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    IExpression<span class="token operator">*</span> expression1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    IExpression<span class="token operator">*</span> expression2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">BExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Aexpression get val "</span> <span class="token operator">&lt;&lt;</span> expression1<span class="token operator">-&gt;</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bexpression get val "</span> <span class="token operator">&lt;&lt;</span> expression2<span class="token operator">-&gt;</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">delete</span> expression1<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> expression2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.45,words:136},y:"a",title:"解释器模式"},["/posts/design-pattern/Interpreter","/posts/design-pattern/Interpreter.md"]],["v-52652ba3","/posts/design-pattern/adapter.html",{d:"2023-03-25T12:42:18.000Z",c:["设计模式"],g:["设计模式"],e:`<h1> 设计模式 - 适配器模式</h1>
<h2> 组合方式</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Target</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Adaptee</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">output110v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">110</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Target</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Adapter</span><span class="token punctuation">(</span>Adaptee<span class="token operator">*</span> adaptee<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"create the 110v to 220v adater"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        m_adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> origin_voltage <span class="token operator">=</span> m_adaptee<span class="token operator">-&gt;</span><span class="token function">output110v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">convertVoltage</span><span class="token punctuation">(</span>origin_voltage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">convertVoltage</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"convert the 110v to 220v "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Adaptee <span class="token operator">*</span>m_adaptee<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Adaptee <span class="token operator">*</span>adaptee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Adaptee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Target <span class="token operator">*</span>target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Adapter</span><span class="token punctuation">(</span>adaptee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    target<span class="token operator">-&gt;</span><span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.56,words:167},y:"a",title:"设计模式 - 适配器模式"},["/posts/design-pattern/adapter","/posts/design-pattern/adapter.md"]],["v-e683e5b2","/posts/design-pattern/command.html",{d:"2023-04-25T15:24:12.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>设计模式
tag:</li>
<li>设计模式</li>
</ul>
<hr>
<h1> 设计模式 - 命令模式(行为型)</h1>
<p>命令模式主要解决了什么问题？</p>
<p>在软件系统中，<strong>行为的请求者</strong>和<strong>行为的执行者</strong>通常是一种<strong>紧耦合</strong>的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p>
<p>在网上也看到其他一些对于命令模式的理解，我觉得也有一定道理。</p>`,r:{minutes:2.5,words:751},y:"a",title:"设计模式 - 命令模式(行为型)"},["/posts/design-pattern/command","/posts/design-pattern/command.md"]],["v-db9b3b8e","/posts/design-pattern/",{d:"2023-04-25T02:03:59.000Z",e:`<h1> 设计模式</h1>
<h2> 创建型</h2>
<h2> 结构型</h2>
<ul>
<li>适配器模式</li>
</ul>
<h2> 行为型</h2>
<ul>
<li>命令模式</li>
<li>策略模式</li>
<li>解释器模式</li>
</ul>
`,r:{minutes:.1,words:31},y:"a",title:"设计模式"},["/posts/design-pattern/index.html","/posts/design-pattern/readme.md"]],["v-04538fad","/posts/design-pattern/strategy.html",{d:"2023-04-26T02:30:52.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>设计模式
tag:</li>
<li>设计模式</li>
</ul>
<hr>
<h1> 策略模式</h1>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">IStrategy</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">IStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">IStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">StrategyA</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IStrategy</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">StrategyA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">StrategyA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"StrategyA::exec()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">StrategyB</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IStrategy</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">StrategyB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">StrategyB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"StrategyB::exec()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">Context</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">Context</span><span class="token punctuation">(</span>IStrategy<span class="token operator">*</span> strategy<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">strategy_</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">setStrategy</span><span class="token punctuation">(</span>IStrategy<span class="token operator">*</span> strategy<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        strategy_ <span class="token operator">=</span> strategy<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span> 
        strategy_<span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    IStrategy<span class="token operator">*</span> strategy_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    IStrategy<span class="token operator">*</span> strategy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">StrategyA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    IStrategy<span class="token operator">*</span> strategy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">StrategyB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    Context<span class="token operator">*</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Context</span><span class="token punctuation">(</span>strategy1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    context<span class="token operator">-&gt;</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.39,words:118},y:"a",title:"策略模式"},["/posts/design-pattern/strategy","/posts/design-pattern/strategy.md"]],["v-6370e458","/posts/electricity/electrical_experiment.html",{d:"2023-11-17T09:03:00.000Z",e:`<p>中国科学技术大学《数字电路实验》: <a href="https://soc.ustc.edu.cn/Digital/" target="_blank" rel="noopener noreferrer">https://soc.ustc.edu.cn/Digital/</a></p>
`,r:{minutes:.06,words:17},y:"a",title:""},["/posts/electricity/electrical_experiment","/posts/electricity/electrical_experiment.md"]],["v-6c1fae1c","/posts/english/Witness_for_the_Prosecution.html",{d:"2023-08-20T03:45:03.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>English</li>
</ul>
<hr>
<h1> 控方证人电影台词</h1>
<p><strong>1.Silence. Be upstanding in court.</strong></p>
<p>肃静。出庭人全体起立。</p>
<p>be upstanding ： 在正式场合中让人们起立。</p>
<p><strong>2.All persons who have anything to do before my lords,</strong></p>
<p>为了在女王座前伸张正义。</p>
<p>lord：统治者，上帝</p>`,r:{minutes:59.93,words:17978},y:"a",title:"控方证人电影台词"},["/posts/english/Witness_for_the_Prosecution","/posts/english/Witness_for_the_Prosecution.md"]],["v-38cd66fc","/posts/network/docker-network.html",{d:"2023-09-22T09:12:08.000Z",c:["network"],e:`<h1> 使用veth和bridge模拟容器网络</h1>
<p>随着虚拟化技术、容器化技术的发展，我们在工作中会使用到虚拟化网络技术。简单来说，以往的网卡、交换机、路由器，当前可以通过操作系统使用程序来进行模拟。</p>
<p>通常使用最为广泛的是下面的虚拟设备：</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>veth</td>
<td>一对相互连接的网卡，常用于连接两个namespace</td>
</tr>
<tr>
<td>bridge</td>
<td>相当于一个二层交换机，如果配置了ip地址，则是一个三层交换机</td>
</tr>
<tr>
<td>tun/tap</td>
<td>虚拟网卡，常用于实现vpn</td>
</tr>
</tbody>
</table>`,r:{minutes:10.14,words:3042},y:"a",title:"使用veth和bridge模拟容器网络"},["/posts/network/docker-network","/posts/network/docker-network.md"]],["v-483131d1","/posts/network/modbus-tcp.html",{d:"2023-11-09T07:05:30.000Z",c:["network"],e:`<h1> modbus-TCP协议详解</h1>
<p>1996年施耐德公司推出基于以太网TCP/IP的modbus协议：modbus-TCP。</p>
<p>MODBUS-TCP使MODBUS-RTU协议运行于以太网，MODBUS-TCP使用TCP/IP以太网在站点间传送MODBUS报文，MODBUS-TCP结合了以太网物理网络和网络标准TCP/IP以及以MODBUS作为应用协议标准的数据表示方法。MODBUS-TCP通信报文包在以太网TCP/IP数据包中。与传统的串口方式，MODBUS-TCP插入一个标准的MODBUS报文到TCP报文中，不再带有数据校验和地址。</p>
<h2> MODBUS报文解析</h2>`,r:{minutes:13.01,words:3902},y:"a",title:"modbus-TCP协议详解"},["/posts/network/modbus-tcp","/posts/network/modbus-tcp.md"]],["v-16c8a73f","/posts/network/mqtt.html",{d:"2023-11-07T13:40:27.000Z",e:`<p><a href="https://zhuanlan.zhihu.com/p/458663373" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/458663373</a></p>
`,r:{minutes:.01,words:4},y:"a",title:""},["/posts/network/mqtt","/posts/network/mqtt.md"]],["v-b6b78c94","/posts/network/",{d:"2023-04-25T02:03:59.000Z",e:`<h1> 计算机网络</h1>
`,r:{minutes:.02,words:5},y:"a",title:"计算机网络"},["/posts/network/index.html","/posts/network/readme.md"]],["v-cba98e84","/posts/network/sock5.html",{d:"2023-10-20T08:06:39.000Z",e:`<h1> socks5 protocol</h1>
<p><a href="https://wiyi.org/socks5-protocol-in-deep.html" target="_blank" rel="noopener noreferrer">https://wiyi.org/socks5-protocol-in-deep.html</a></p>
`,r:{minutes:.03,words:8},y:"a",title:"socks5 protocol"},["/posts/network/sock5","/posts/network/sock5.md"]],["v-e928ce0e","/posts/network/virtual-machine-network-mode.html",{d:"2023-09-21T10:15:44.000Z",c:["network"],e:`<h1> Vmware虚拟机网络模式原理</h1>
<h2> 1.bridged(桥接模式)</h2>
<p>Vmware虚拟机网络模式原理</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/virtual_machine_network_mode/mac-address.png" alt="mac-address" tabindex="0" loading="lazy"><figcaption>mac-address</figcaption></figure>`,r:{minutes:.17,words:51},y:"a",title:"Vmware虚拟机网络模式原理"},["/posts/network/virtual-machine-network-mode","/posts/network/virtual-machine-network-mode.md"]],["v-530ce597","/posts/resource/awesome-class.html",{d:"2024-02-27T08:28:41.000Z",e:`<p><strong>模拟电路</strong>：</p>
<p>王文军： <a href="https://www.bilibili.com/video/BV18Z4y1Q7iq/?spm_id_from=333.999.0.0&amp;vd_source=f174cbb16fb929c791f935fabe0ad300" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV18Z4y1Q7iq/?spm_id_from=333.999.0.0&amp;vd_source=f174cbb16fb929c791f935fabe0ad300</a></p>`,r:{minutes:.29,words:88},y:"a",title:""},["/posts/resource/awesome-class","/posts/resource/awesome-class.md"]],["v-08691c96","/posts/tool/how-to-control-stop-flow-in-systemd.html",{d:"2023-04-25T01:50:11.000Z",c:["Linux"],e:`<h1> 关机时，如何控制systemd服务的关闭顺序?</h1>
<p>在工作中，我们通常遇到的问题是，如何控制systemd服务的启动顺序，同志们第一反应就会是使用Before=或者After=去进行控制。 问题来了，如果服务启动时没有顺序要求，但是关闭时有顺序要求， 该如何操作？</p>
<p>通过查找如下相关文档， 我查到了这样一段话：</p>
<p><a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html" target="_blank" rel="noopener noreferrer">https://www.freedesktop.org/software/systemd/man/systemd.unit.html</a></p>`,r:{minutes:3.19,words:956},y:"a",title:"关机时，如何控制systemd服务的关闭顺序?"},["/posts/tool/how-to-control-stop-flow-in-systemd","/posts/tool/how-to-control-stop-flow-in-systemd.md"]],["v-5ad41c0c","/posts/tool/license.html",{d:"2023-05-18T05:54:29.000Z",c:["tool"],g:["tool"],e:`<h1> sofware license</h1>
<h2> GPL</h2>
<p>GPL最典型的例子就是Linux。</p>
<p>GPL协议的主要内容是只要在一个软件中使用(“使用"指<strong>类库引用</strong>，<strong>修改后的代码</strong>或者<strong>衍生代码</strong>)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>
<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p>`,r:{minutes:1.37,words:410},y:"a",title:"sofware license"},["/posts/tool/license","/posts/tool/license.md"]],["v-099747c2","/posts/tool/",{d:"2023-04-25T02:03:59.000Z",e:`<h1> 工具</h1>
`,r:{minutes:.01,words:2},y:"a",title:"工具"},["/posts/tool/index.html","/posts/tool/readme.md"]],["v-476ace43","/posts/tool/utf8-gbk.html",{d:"2023-01-18T09:45:19.000Z",c:["编码"],e:`<h1> UTF8转GBK代码</h1>
<p>目录结构如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost gbk-utf8<span class="token punctuation">]</span><span class="token comment"># tree</span>
<span class="token builtin class-name">.</span>
├── main.c
├── utf8.c
└── utf8.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.14,words:941},y:"a",title:"UTF8转GBK代码"},["/posts/tool/utf8-gbk","/posts/tool/utf8-gbk.md"]],["v-78524d46","/posts/tool/vim-usefull-key.html",{d:"2024-01-22T06:15:50.000Z",e:`<h1> vim中使用的快捷键</h1>
<p>vim 删除当前光标位置到文件末尾   dG</p>
<p>vim 删除当前光标位置到文件开头   d1G</p>
`,r:{minutes:.13,words:38},y:"a",title:"vim中使用的快捷键"},["/posts/tool/vim-usefull-key","/posts/tool/vim-usefull-key.md"]],["v-bcb672aa","/posts/Program_language/cpp/cpp11_condition_var_issue.html",{d:"2023-08-28T07:18:11.000Z",c:["C++"],e:`<h1> 条件变量的虚假唤醒和唤醒丢失问题</h1>
<p>条件变量时多线程同步的重要手段，然而不正确的使用条件变量将导致很多问题。典型的问题就是<strong>虚假唤醒</strong>和<strong>唤醒丢失</strong>。本文将探索这两个问题的产生原因以及解决办法。</p>
<h2> 什么是虚假唤醒？</h2>
<p><strong>虚假唤醒</strong>是指当你对线程进行唤醒时，你不希望被唤醒的线程也被唤醒的现象。</p>
<p><strong>虚假唤醒</strong>既可能是<strong>操作系统层面</strong>导致，也可能是<strong>应用层代码</strong>导致。</p>`,r:{minutes:6.26,words:1877},y:"a",title:"条件变量的虚假唤醒和唤醒丢失问题"},["/posts/Program_language/cpp/cpp11_condition_var_issue","/posts/Program_language/cpp/cpp11_condition_var_issue.md"]],["v-48644d60","/posts/Program_language/cpp/cpp11_thread.html",{d:"2023-04-24T15:45:50.000Z",c:["C++"],e:`<h1> c++11中的多线程std::thread</h1>
<h2> 简介</h2>
<p>在c++11中提供了新的多线程的创建方式<code>std::thread</code>, 丰富了对于多线程的使用。本文将从下面几个角度对<code>std::thread</code>进行讲解。</p>
<ul>
<li>std::thread的原型</li>
<li>std::thread创建线程的方式</li>
<li>std::thread的销毁</li>
<li>std::thread的传参</li>
<li>如何获取线程的返回值</li>
</ul>
<h2> std::thread的原型</h2>`,r:{minutes:9.36,words:2809},y:"a",title:"c++11中的多线程std::thread"},["/posts/Program_language/cpp/cpp11_thread","/posts/Program_language/cpp/cpp11_thread.md"]],["v-87c26978","/posts/Program_language/cpp/cpp11_threadpool.html",{d:"2023-07-26T02:29:25.000Z",e:`<p>c++11 线程池
<a href="https://github.com/progschj/ThreadPool" target="_blank" rel="noopener noreferrer">https://github.com/progschj/ThreadPool</a></p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">THREAD_POOL_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">THREAD_POOL_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;future&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ThreadPool</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
    <span class="token keyword">auto</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>F<span class="token operator">&amp;&amp;</span> f<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> 
        <span class="token operator">-&gt;</span> std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>result_of<span class="token operator">&lt;</span><span class="token function">F</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// need to keep track of threads so we can join them</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>thread <span class="token operator">&gt;</span> workers<span class="token punctuation">;</span>
    <span class="token comment">// the task queue</span>
    std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> tasks<span class="token punctuation">;</span>
    
    <span class="token comment">// synchronization</span>
    std<span class="token double-colon punctuation">::</span>mutex queue_mutex<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>condition_variable condition<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> stop<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// the constructor just launches some amount of workers</span>
<span class="token keyword">inline</span> <span class="token class-name">ThreadPool</span><span class="token double-colon punctuation">::</span><span class="token function">ThreadPool</span><span class="token punctuation">(</span>size_t threads<span class="token punctuation">)</span>
    <span class="token operator">:</span>   <span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>threads<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
        workers<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> task<span class="token punctuation">;</span>

                    <span class="token punctuation">{</span>
                        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>queue_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token operator">-&gt;</span>condition<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span>
                            <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>stop <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>tasks<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>stop <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>tasks<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">return</span><span class="token punctuation">;</span>
                        task <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>tasks<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token operator">-&gt;</span>tasks<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// add new work item to the pool</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
<span class="token keyword">auto</span> <span class="token class-name">ThreadPool</span><span class="token double-colon punctuation">::</span><span class="token function">enqueue</span><span class="token punctuation">(</span>F<span class="token operator">&amp;&amp;</span> f<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> 
    <span class="token operator">-&gt;</span> std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>result_of<span class="token operator">&lt;</span><span class="token function">F</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> return_type <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>result_of<span class="token operator">&lt;</span><span class="token function">F</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">;</span>

    <span class="token keyword">auto</span> task <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>packaged_task<span class="token operator">&lt;</span><span class="token function">return_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
            std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>F<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span>return_type<span class="token operator">&gt;</span> res <span class="token operator">=</span> task<span class="token operator">-&gt;</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>queue_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// don't allow enqueueing after stopping the pool</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">"enqueue on stopped ThreadPool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        tasks<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token punctuation">[</span>task<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token operator">*</span>task<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    condition<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// the destructor joins all threads</span>
<span class="token keyword">inline</span> <span class="token class-name">ThreadPool</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>queue_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    condition<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>thread <span class="token operator">&amp;</span>worker<span class="token operator">:</span> workers<span class="token punctuation">)</span>
        worker<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.1,words:331},y:"a",title:""},["/posts/Program_language/cpp/cpp11_threadpool","/posts/Program_language/cpp/cpp11_threadpool.md"]],["v-62851eba","/posts/Program_language/cpp/cpp_align.html",{d:"2023-09-04T08:41:38.000Z",c:["C++"],e:`<h1> c++中的对齐问题</h1>
<h2> 需要对齐的原因</h2>
<p>尽管内存是以字节为单位，但是大部分处理器并不是按字节块来存取内存的.它一般会以双字节,四字节,8字节,16字节甚至32字节为单位来存取内存，我们将上述这些存取单位称为内存存取粒度.</p>
<p>现在考虑4字节存取粒度的处理器取int类型变量（32位系统），该处理器只能从地址为4的倍数的内存开始读取数据。</p>
<p>假如没有内存对齐机制，数据可以任意存放，现在一个int变量存放在从地址1开始的联系四个字节地址中，该处理器去取数据时，要先从0地址开始读取第一个4字节块,剔除不想要的字节（0地址）,然后从地址4开始读取下一个4字节块,同样剔除不要的数据（5，6，7地址）,最后留下的两块数据合并放入寄存器.这需要做很多工作.</p>`,r:{minutes:6.8,words:2040},y:"a",title:"c++中的对齐问题"},["/posts/Program_language/cpp/cpp_align","/posts/Program_language/cpp/cpp_align.md"]],["v-03bd7406","/posts/Program_language/cpp/cpp_cpp11_small_feature.html",{d:"2023-06-14T08:39:26.000Z",c:["C++"],g:["C++"],e:`<h1> c++14的新增的小的特性</h1>
<h2> std::decay</h2>
<p>类型退化：</p>
<ul>
<li>去除const和volatile</li>
<li>去除引用</li>
<li>数组退化为指针</li>
<li>函数退化为指针</li>
</ul>
<p>如果类型T是一个函数类型，那么从函数到指针的类型转换将被应用，并且T的衰变类型等同于：</p>
<p><code>add_pointer&lt;T&gt;::type</code></p>
<p>如果类型T是一个数组类型，那么从数组到指针的类型转换将被应用，并且T的衰变类型等同于：</p>
<p><code>add_pointer&lt;remove_extent&lt;remove_reference&lt;T&gt;::type&gt;::type&gt;::type</code></p>`,r:{minutes:.78,words:233},y:"a",title:"c++14的新增的小的特性"},["/posts/Program_language/cpp/cpp_cpp11_small_feature","/posts/Program_language/cpp/cpp_cpp11_small_feature.md"]],["v-8aba11ba","/posts/Program_language/cpp/cpp_cpp14_small_feature.html",{d:"2023-06-12T10:14:10.000Z",c:["C++"],g:["C++"],e:`<h1> c++14的新增的小的特性</h1>
`,r:{minutes:.05,words:14},y:"a",title:"c++14的新增的小的特性"},["/posts/Program_language/cpp/cpp_cpp14_small_feature","/posts/Program_language/cpp/cpp_cpp14_small_feature.md"]],["v-ee2c91dc","/posts/Program_language/cpp/cpp_cpp17_any.html",{d:"2023-06-14T08:39:26.000Z",c:["C++"],g:["C++"],e:`<h1> std::any</h1>
`,r:{minutes:.02,words:6},y:"a",title:"std::any"},["/posts/Program_language/cpp/cpp_cpp17_any","/posts/Program_language/cpp/cpp_cpp17_any.md"]],["v-71887a40","/posts/Program_language/cpp/cpp_cpp17_small_feature.html",{d:"2023-06-08T09:19:57.000Z",c:["C++"],g:["C++"],e:`<h1> c++17的新增的小的特性</h1>
<h2> std::any</h2>
<p>std::any是一种动态类型，可以动态指向不同的数据类型。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;any&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha<span class="token punctuation">;</span>
 
    <span class="token comment">// any type</span>
    std<span class="token double-colon punctuation">::</span>any a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
 
    <span class="token comment">// bad cast</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>bad_any_cast<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// has value</span>
    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">has_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
 
    <span class="token comment">// reset</span>
    a<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span><span class="token function">has_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no value\\n"</span><span class="token punctuation">;</span>
 
    <span class="token comment">// pointer to contained data</span>
    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> i <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.02,words:307},y:"a",title:"c++17的新增的小的特性"},["/posts/Program_language/cpp/cpp_cpp17_small_feature","/posts/Program_language/cpp/cpp_cpp17_small_feature.md"]],["v-40696b34","/posts/Program_language/cpp/cpp_decltype.html",{d:"2023-09-12T05:20:08.000Z",e:`<h1> decltype</h1>
<p>左值表达式有哪些?</p>
<ul>
<li>++操作</li>
</ul>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">value_</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> value_<span class="token punctuation">}</span><span class="token punctuation">;</span>

    Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">++</span>value_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Test <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Test <span class="token function">ret</span><span class="token punctuation">(</span>value_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>value_<span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.85,words:255},y:"a",title:"decltype"},["/posts/Program_language/cpp/cpp_decltype","/posts/Program_language/cpp/cpp_decltype.md"]],["v-9f0e5862","/posts/Program_language/cpp/cpp_detect_public_protect_private.html",{d:"2023-05-24T06:08:01.000Z",e:`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">PrivateX</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ProtectedX</span> <span class="token punctuation">{</span> <span class="token keyword">protected</span><span class="token operator">:</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">PublicX</span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">NoX</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">IsPublicMember</span> <span class="token punctuation">{</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> T<span class="token operator">&gt;</span>
  <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>true_type <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">declval</span><span class="token generic class-name"><span class="token operator">&lt;</span>U<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> T<span class="token operator">&gt;</span>
  <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>false_type <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">constexpr</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">IsProtectedMember</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">T</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> Derived<span class="token operator">&gt;</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>true_type <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">declval</span><span class="token generic class-name"><span class="token operator">&lt;</span>U<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> Derived<span class="token operator">&gt;</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>false_type <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">constexpr</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token class-name">Derived</span><span class="token double-colon punctuation">::</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">IsPrivateMember</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Fallback</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Fallback</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> Derived<span class="token operator">&gt;</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>false_type <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">declval</span><span class="token generic class-name"><span class="token operator">&lt;</span>U<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> Derived<span class="token operator">&gt;</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>true_type <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">constexpr</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">constexpr</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token class-name">Derived</span><span class="token double-colon punctuation">::</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">DetectMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>IsPublicMember<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"public"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>IsProtectedMember<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"protected"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>IsPrivateMember<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"private"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"member does not exist"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">DetectMember</span><span class="token generic class-name"><span class="token operator">&lt;</span>PublicX<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">DetectMember</span><span class="token generic class-name"><span class="token operator">&lt;</span>ProtectedX<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">DetectMember</span><span class="token generic class-name"><span class="token operator">&lt;</span>PrivateX<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">DetectMember</span><span class="token generic class-name"><span class="token operator">&lt;</span>NoX<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.73,words:220},y:"a",title:""},["/posts/Program_language/cpp/cpp_detect_public_protect_private","/posts/Program_language/cpp/cpp_detect_public_protect_private.md"]],["v-1b557605","/posts/Program_language/cpp/cpp_externC.html",{d:"2023-05-25T08:48:28.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> c++中的extern "C"</h1>
<p>在一些c语言的library库中，我们经常可以还看下面这样的结构</p>
<div class="language-h line-numbers-mode" data-ext="h"><pre class="language-h"><code>#ifndef __TEST_H
#define __TEST_H

#ifdef _cplusplus
extern "C" {
#endif

/*...*/

#ifdef _cplusplus
}
#endif
#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.65,words:1396},y:"a",title:'c++中的extern "C"'},["/posts/Program_language/cpp/cpp_externC","/posts/Program_language/cpp/cpp_externC.md"]],["v-21ba21da","/posts/Program_language/cpp/cpp_googlestyle_static_global_var.html",{d:"2023-04-24T15:45:50.000Z",c:["C++"],e:`<h1> c++谷歌规范 静态和全局变量</h1>
<p>2.5. 静态和全局变量
Tip</p>
<p>禁止定义静态储存周期非POD变量，禁止使用含有副作用的函数初始化POD全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。</p>
<p>禁止使用类的 静态储存周期 变量：由于构造和析构函数调用顺序的不确定性，它们会导致难以发现的 bug 。不过 constexpr 变量除外，毕竟它们又不涉及动态初始化或析构。</p>
<p>静态生存周期的对象，即包括了全局变量，静态变量，静态类成员变量和函数静态变量，都必须是原生数据类型 (POD : Plain Old Data): 即 int, char 和 float, 以及 POD 类型的指针、数组和结构体。</p>`,r:{minutes:4.07,words:1222},y:"a",title:"c++谷歌规范 静态和全局变量"},["/posts/Program_language/cpp/cpp_googlestyle_static_global_var","/posts/Program_language/cpp/cpp_googlestyle_static_global_var.md"]],["v-7c1a7ba3","/posts/Program_language/cpp/cpp_lambda.html",{d:"2023-04-24T15:45:50.000Z",c:["C++"],e:`<h1> c++中的lambda表达式</h1>
<h2> 简介</h2>
<p>在c++11中引入了Lambda表达式，利用Lambda表达式可以方便的定义和创建匿名函数。</p>
<p>为什么需要匿名函数这种语法呢？我个人觉得主要有以下一些原因：</p>
<ul>
<li>程序员起名字是个麻烦事，有时候有的函数只在有限的地方调用，希望不通过名字调用。</li>
<li>避免命名冲突(当然避免命名冲突有很多种方法)</li>
<li>丰富c++11的语法类型，就像写作文的同义词一样，同样的事情可以有不同的实现方式，本身就可以丰富代码的多样性。</li>
</ul>
<p>so， 下面就看看Lambda表达式具体的写法吧。</p>`,r:{minutes:1.07,words:322},y:"a",title:"c++中的lambda表达式"},["/posts/Program_language/cpp/cpp_lambda","/posts/Program_language/cpp/cpp_lambda.md"]],["v-dc094c8c","/posts/Program_language/cpp/cpp_memory_order.html",{d:"2023-05-24T05:50:46.000Z",c:["C++"],g:["C++"],e:`<h1> c++11原子变量与内存序</h1>
<h2> 多线程中共享变量进行操作的问题</h2>
<p>在多线程中，共享一个变量用于计数或者流程控制是一个很常见的需求，在这个过程中就带来了两个常见的问题：</p>
<p>(1)i++问题</p>
<p>两个线程同时对一个变量执行i++操作，结果得到的值却不是期望的，这便是i++问题。</p>
<p>i++的问题的原因在于岂不是一个原子操作：</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>thread 1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>读取内存的值(i)到寄存器</td>
</tr>
<tr>
<td>2</td>
<td>寄存器的值+1</td>
</tr>
<tr>
<td>3</td>
<td>将寄存器的值写回内存(i)</td>
</tr>
</tbody>
</table>`,r:{minutes:10.64,words:3191},y:"a",title:"c++11原子变量与内存序"},["/posts/Program_language/cpp/cpp_memory_order","/posts/Program_language/cpp/cpp_memory_order.md"]],["v-3e8a84f0","/posts/Program_language/cpp/cpp_noexcept.html",{d:"2023-09-11T01:58:47.000Z",c:["C++"],e:`<h1> noexcept</h1>
<h2> vector容器扩容时</h2>
<p>如下面的代码</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  
<span class="token keyword">public</span><span class="token operator">:</span>  
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~A()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A(const A&amp; other)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    
    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"operator=(const A&amp; other"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    
    <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A(A&amp;&amp; other)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    
    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A&amp; operator=(A&amp;&amp; other)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>  
  


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    A a1<span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.33,words:399},y:"a",title:"noexcept"},["/posts/Program_language/cpp/cpp_noexcept","/posts/Program_language/cpp/cpp_noexcept.md"]],["v-10d3936a","/posts/Program_language/cpp/cpp_optional.html",{d:"2023-09-03T15:03:21.000Z",c:["C++"],e:`<h1> std::optional的使用与实现</h1>
<h2> 使用</h2>
<h2> 实现原理</h2>
<p>Optional为任意的数据类型添加了空的语义。实际就是对原始的类型进行包装，为其添加一个bool变量，表明是否已经初始化。一个最直接的想法就是下面的形式：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Optional</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> m_hasInit<span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    T data_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.36,words:708},y:"a",title:"std::optional的使用与实现"},["/posts/Program_language/cpp/cpp_optional","/posts/Program_language/cpp/cpp_optional.md"]],["v-4b1e4810","/posts/Program_language/cpp/cpp_pimpl.html",{d:"2023-05-04T14:21:15.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> c++中的编程技巧pImpl</h1>
<h2> 代码</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// ----------------------</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span> <span class="token comment">// PImpl</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// Constructor and Destructors</span>
 
    <span class="token operator">~</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">explicit</span> <span class="token function">User</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// Assignment Operator and Copy Constructor</span>
 
    <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">const</span> User<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
    User<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>User rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// Getter</span>
    <span class="token keyword">int</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
 
    <span class="token comment">// Setter</span>
    <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// Internal implementation class</span>
    <span class="token keyword">class</span> <span class="token class-name">Impl</span><span class="token punctuation">;</span>
 
    <span class="token comment">// Pointer to the internal implementation</span>
    unique_ptr<span class="token operator">&lt;</span>Impl<span class="token operator">&gt;</span> pimpl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
 
<span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">Impl</span></span> <span class="token punctuation">{</span>
 
    <span class="token function">Impl</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token function">move</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token operator">~</span><span class="token function">Impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token function">welcomeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Welcome, "</span>
             <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    string name<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> salary<span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// Constructor connected with our Impl structure</span>
<span class="token class-name">User</span><span class="token double-colon punctuation">::</span><span class="token function">User</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">pimpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Impl</span><span class="token punctuation">(</span><span class="token function">move</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    pimpl<span class="token operator">-&gt;</span><span class="token function">welcomeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// Default Constructor</span>
<span class="token class-name">User</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
 
<span class="token comment">// Assignment operator and Copy constructor</span>
 
<span class="token class-name">User</span><span class="token double-colon punctuation">::</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">const</span> User<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">pimpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Impl</span><span class="token punctuation">(</span><span class="token operator">*</span>other<span class="token punctuation">.</span>pimpl<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
 
User<span class="token operator">&amp;</span> User<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>User rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>pimpl<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>pimpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// Getter and setter</span>
<span class="token keyword">int</span> <span class="token class-name">User</span><span class="token double-colon punctuation">::</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> pimpl<span class="token operator">-&gt;</span>salary<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token class-name">User</span><span class="token double-colon punctuation">::</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">int</span> salary<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    pimpl<span class="token operator">-&gt;</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Salary set to "</span>
         <span class="token operator">&lt;&lt;</span> salary <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    User <span class="token function">user</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.86,words:257},y:"a",title:"c++中的编程技巧pImpl"},["/posts/Program_language/cpp/cpp_pimpl","/posts/Program_language/cpp/cpp_pimpl.md"]],["v-22b98e3f","/posts/Program_language/cpp/cpp_realize_defer.html",{d:"2023-04-24T15:45:50.000Z",c:["C++"],e:`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEFER_LINENAME_CAT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> line<span class="token punctuation">)</span> name</span><span class="token punctuation">##</span><span class="token expression">line</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEFER_LINENAME</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token function">DEFER_LINENAME_CAT</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> line<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">defer</span><span class="token expression"><span class="token punctuation">(</span>deferFunction<span class="token punctuation">)</span> RAIIDefer <span class="token function">DEFER_LINENAME</span><span class="token punctuation">(</span>DEFER_NAME_<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deferFunction<span class="token punctuation">)</span></span></span>

<span class="token keyword">class</span> <span class="token class-name">RAIIDefer</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">RAIIDefer</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> fDeferFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		m_fDeferFunction <span class="token operator">=</span> fDeferFunction<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
	<span class="token operator">~</span><span class="token function">RAIIDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>m_fDeferFunction<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">m_fDeferFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token function">RAIIDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> m_fDeferFunction<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>   
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"lock"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>mutex mutex<span class="token punctuation">;</span>
	mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">defer</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"unlock"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
			mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">/*
        equals to 
        RAIIDefer DEFER_NAME_36([&amp;] { std::cout &lt;&lt; "unlock" &lt;&lt; std::endl; mutex.unlock(); })
    */</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"doing something"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"will exit.."</span> <span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.36,words:109},y:"a",title:"C++中如何实现go语言中的defer？"},["/posts/Program_language/cpp/cpp_realize_defer","/posts/Program_language/cpp/cpp_realize_defer.md"]],["v-98d0ba14","/posts/Program_language/cpp/cpp_shared_ptr.html",{d:"2023-09-08T03:27:37.000Z",c:["C++"],e:`<h1> c++智能指针之shared_ptr</h1>
<h2> std::shared_ptr简介</h2>
<h2> shared_ptr自定义删除器</h2>
<h3> 函数指针</h3>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">deleter</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"function pointor deleter"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> pNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> spNum1<span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">spNum2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  deleter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        spNum1 <span class="token operator">=</span> spNum2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>spNum1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.03,words:609},y:"a",title:"c++智能指针之shared_ptr"},["/posts/Program_language/cpp/cpp_shared_ptr","/posts/Program_language/cpp/cpp_shared_ptr.md"]],["v-00d2774a","/posts/Program_language/cpp/cpp_singleton_summarize.html",{d:"2023-04-24T15:45:50.000Z",c:["C++"],e:`<h1> c++中单例模式总结</h1>
<p>通常而言，c++的单例模式通常有如下一些实现办法：</p>
<ul>
<li>普通懒汉</li>
<li>加锁懒汉</li>
<li>静态内部变量</li>
<li>饿汉单例</li>
<li>std::call_once单例</li>
</ul>
<h2> 普通懒汉</h2>
<p>对于普通懒汉：</p>
<ul>
<li><strong>构造函数和析构函数</strong>应该为<strong>private</strong>类型，禁止外部构造和析构</li>
<li><strong>拷贝构造函数</strong>和<strong>赋值运算符</strong>应为<strong>private</strong>类型或者加上** = delete**标记，禁止外部拷贝和赋值，确保单例的唯一性</li>
<li>Singleton的有一个静态的函数getInstance用于获取静态对象。</li>
</ul>`,r:{minutes:2.1,words:631},y:"a",title:"c++中单例模式总结"},["/posts/Program_language/cpp/cpp_singleton_summarize","/posts/Program_language/cpp/cpp_singleton_summarize.md"]],["v-47df4fec","/posts/Program_language/cpp/cpp_special_function.html",{d:"2023-08-28T14:45:59.000Z",c:["C++"],e:`<h1> 深入理解c++特殊成员函数</h1>
<p>在c++中，特殊成员函数有下面6个：</p>
<ul>
<li>构造函数</li>
<li>析构函数</li>
<li>复制构造函数(拷贝构造函数)</li>
<li>赋值运算符(拷贝运算符)</li>
<li>移动构造函数(c++11引入)</li>
<li>移动运算符(c++11引入)</li>
</ul>
<p>以Widget类为例，其特殊成员函数的签名如下所示：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造函数</span>
    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//析构函数</span>
    <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//复制构造函数(拷贝构造函数)</span>
    Widget<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值运算符(拷贝运算符)</span>
    <span class="token function">Widget</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移动构造函数</span>
    Widget<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移动运算符</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:18.91,words:5673},y:"a",title:"深入理解c++特殊成员函数"},["/posts/Program_language/cpp/cpp_special_function","/posts/Program_language/cpp/cpp_special_function.md"]],["v-cbd9a754","/posts/Program_language/cpp/cpp_std_function.html",{d:"2023-09-26T14:18:53.000Z",e:`<p><code>std::function</code>是怎样实现的？
首先必须实现一个默认的模板函数，然后根据参数个数特例化不同的实现，在没有变长参数模块语法支持时，只能根据参数个数特例化多个实现，非常繁琐。有了语法支持后，可以使用变长参数模板轻松实现任意个数参数的function。</p>
<p>大致实现如下：</p>
<p>不需要参数时：
C++</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> my <span class="token punctuation">{</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">TR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> PFunc <span class="token operator">=</span> <span class="token function">TR</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PFunc pfunc_<span class="token punctuation">;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">function</span><span class="token punctuation">(</span>PFunc pfunc<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>pfunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    TR <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.21,words:362},y:"a",title:""},["/posts/Program_language/cpp/cpp_std_function","/posts/Program_language/cpp/cpp_std_function.md"]],["v-ca742b06","/posts/Program_language/cpp/cpp_std_move.html",{d:"2023-09-10T02:38:47.000Z",c:["C++"],e:`<h1> std::move</h1>
<h2> std::move返回局部变量</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~A()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"A(const A&amp; other)"</span><span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"const A&amp; other"</span><span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
    <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"A&amp;&amp; other"</span><span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"A&amp; operator=(A&amp;&amp; other)"</span><span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

A <span class="token function">GetA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    A a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

A <span class="token function">GetA_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    A a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

A <span class="token function">GetA_3</span><span class="token punctuation">(</span>A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> other<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

A <span class="token function">GetA_4</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    A a1 <span class="token operator">=</span> <span class="token function">GetA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    A a2 <span class="token operator">=</span> <span class="token function">GetA_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
    A a3<span class="token punctuation">;</span>
    A a4 <span class="token operator">=</span> <span class="token function">GetA_3</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
    A a5<span class="token punctuation">;</span>
    A a6 <span class="token operator">=</span> <span class="token function">GetA_4</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.48,words:143},y:"a",title:"std::move"},["/posts/Program_language/cpp/cpp_std_move","/posts/Program_language/cpp/cpp_std_move.md"]],["v-52aaa766","/posts/Program_language/cpp/cpp_stl_memory_release.html",{d:"2023-11-21T10:02:55.000Z",e:`<div class="language-CPP line-numbers-mode" data-ext="CPP"><pre class="language-CPP"><code>{ 
    std::vector&lt;int&gt; tmp;   
    vec.swap(tmp); 
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.49,words:146},y:"a",title:""},["/posts/Program_language/cpp/cpp_stl_memory_release","/posts/Program_language/cpp/cpp_stl_memory_release.md"]],["v-617c5d0a","/posts/Program_language/cpp/cpp_unique_ptr.html",{d:"2023-09-06T03:01:39.000Z",c:["C++"],e:`<h1> c++智能指针之unique_ptr</h1>
<h2> std::unique_ptr简介</h2>
<p>std::unique_ptr是一种几乎和原始指针一样高效的智能指针，对所管理的指针资源拥有独占权。由C++11标准引入，用于替代C++98中过时的std::auto_ptr智能指针。相比而言，std::unique_ptr的优点有：</p>
<ul>
<li>语义更清晰：std::auto_ptr进行拷贝的时候实际执行的是移动语义，但C++98中并没有定义出移动语义，所以使用的时候可能会违背直觉。而std::unique_ptr利用了C++11中新定义的移动语义，只允许移动操作，禁止拷贝操作，从而让语义更加清晰。</li>
<li>允许自定义删除器：由于std::unique_ptr将删除器作为自己的成员变量，所以传入自定义删除器之前需要在模板参数中指定删除器的类型std::unique_ptr&lt;T, D&gt; up(nullptr, deleter)。</li>
<li>支持STL容器：在C++98中，容器要求元素必须是可以拷贝的，比如«effective STL»中提到的，对容器中的元素进行std::sort时，会从区间中选一个元素拷贝为主元素（pivot），然后再对所有元素进行分区操作。但是std::auto_ptr的拷贝操作执行的却是移动语义，这样就会造成bug。在C++11中，STL容器是支持移动语义的，std::unique_ptr只提供移动操作删除了拷贝操作，并且移动操作是noexcept的（这一点很重要，因为STL容器有些操作需要保证强异常安全会要求要么用拷贝操作要么用无异常的移动操作）。只要不涉及到拷贝的容器操作，比如fill函数，那么std::unique_ptr作为容器元素是正确的。</li>
</ul>`,r:{minutes:7.66,words:2298},y:"a",title:"c++智能指针之unique_ptr"},["/posts/Program_language/cpp/cpp_unique_ptr","/posts/Program_language/cpp/cpp_unique_ptr.md"]],["v-1d2b7397","/posts/Program_language/cpp/cpp_virtual_destructor_with_override.html",{d:"2023-06-27T02:58:56.000Z",c:["C++"],e:`<h1> c++小技巧之为析构函数增加override签名</h1>
<p>在有<strong>继承</strong>和<strong>多态</strong>的使用场景下，如果父类的析构函数没有添加virtual签名，那么在使用delete删除对象时，就不会调用父类的析构函数，这可能就会造成一些资源泄露。</p>
<p>例如下面的例子，当使用<code>Base* b = new Derived();</code>创建对象时，delete该对象不会调用Base类的析构函数。</p>
<p>注意，这个问题仅限于继承+多态组合的情况。如果你使用<code>Derived *d = new Derived();</code>创建对象，delete该对象时不会有问题。</p>`,r:{minutes:1.25,words:376},y:"a",title:"c++小技巧之为析构函数增加override签名"},["/posts/Program_language/cpp/cpp_virtual_destructor_with_override","/posts/Program_language/cpp/cpp_virtual_destructor_with_override.md"]],["v-a111f632","/posts/Program_language/cpp/placement_operator_new.html",{d:"2023-04-24T15:45:50.000Z",c:["C++"],g:["C++面试题"],e:`<h1> C++中的new、operator new与placement new</h1>
<h2> new operator</h2>
<p>当我们使用了new关键字去创建一个对象时，你知道背后做了哪些事情吗？</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>A<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> A<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:5.94,words:1781},y:"a",title:"C++中的new、operator new与placement new"},["/posts/Program_language/cpp/placement_operator_new","/posts/Program_language/cpp/placement_operator_new.md"]],["v-3ebbce5a","/posts/Program_language/cpp/",{d:"2023-04-25T02:03:59.000Z",e:`<h1> C++语言</h1>
`,r:{minutes:.01,words:3},y:"a",title:"C++语言"},["/posts/Program_language/cpp/index.html","/posts/Program_language/cpp/readme.md"]],["v-b7b35d00","/posts/Program_language/go/",{d:"2023-05-25T08:48:28.000Z",y:"a",title:""},["/posts/Program_language/go/index.html","/posts/Program_language/go/Readme.md"]],["v-9a249a36","/posts/Program_language/shell/monitor.html",{d:"2023-10-19T08:27:29.000Z",e:`<p>监控某个进程的内存</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">function</span> <span class="token function-name function">getPhyMem</span>
<span class="token punctuation">{</span>
    <span class="token assign-left variable">MEMUsage</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-o</span> rss <span class="token parameter variable">-p</span> $1<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> RSS<span class="token variable">)</span></span>
    <span class="token assign-left variable">MEM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $MEMUsage + <span class="token number">0</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1024</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">MEMUsageMB</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">awk</span> <span class="token string">'BEGIN{printf "%.2f\\n",'</span>$MEM<span class="token string">'/'</span>$num<span class="token string">'}'</span><span class="token variable">)</span></span>

    <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span> $<span class="token punctuation">(</span>echo "$MEMUsageMB <span class="token operator">&gt;</span> $MemPhyMem"<span class="token operator">|</span>bc <span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">then</span>
        <span class="token assign-left variable">MemPhyMem</span><span class="token operator">=</span><span class="token variable">$MEMUsageMB</span>
    <span class="token keyword">fi</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"process <span class="token variable">$1</span> current phy mem is "</span> <span class="token variable">$MEMUsageMB</span> <span class="token string">" MB"</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">getVirtMem</span>
<span class="token punctuation">{</span>

    <span class="token assign-left variable">MEMUsage</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-o</span> vsz <span class="token parameter variable">-p</span> $1<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> VSZ<span class="token variable">)</span></span>
    <span class="token assign-left variable">MEM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $MEMUsage + <span class="token number">0</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1024</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">MEMUsageMB</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">awk</span> <span class="token string">'BEGIN{printf "%.2f\\n",'</span>$MEM<span class="token string">'/'</span>$num<span class="token string">'}'</span><span class="token variable">)</span></span>
    <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span> $<span class="token punctuation">(</span>echo "$MEMUsageMB <span class="token operator">&gt;</span> $MemVirtMem"<span class="token operator">|</span>bc <span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">then</span>
        <span class="token assign-left variable">MemVirtMem</span><span class="token operator">=</span><span class="token variable">$MEMUsageMB</span>
    <span class="token keyword">fi</span>

    <span class="token builtin class-name">echo</span> <span class="token string">"process <span class="token variable">$1</span> current virt mem is "</span> <span class="token variable">$MEMUsageMB</span> <span class="token string">" MB"</span>
<span class="token punctuation">}</span>

<span class="token assign-left variable">MemPhyMem</span><span class="token operator">=</span><span class="token number">0.0</span>
<span class="token assign-left variable">MemVirtMem</span><span class="token operator">=</span><span class="token number">0.0</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>
<span class="token keyword">do</span>
    getPhyMem <span class="token variable">$1</span>
    getVirtMem <span class="token variable">$1</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"process <span class="token variable">$1</span> peak phy mem is "</span> <span class="token variable">$MemPhyMem</span> <span class="token string">" MB"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"process <span class="token variable">$1</span> peak virt mem is "</span> <span class="token variable">$MemVirtMem</span> <span class="token string">" MB"</span>
    <span class="token function">sleep</span> 1s
<span class="token keyword">done</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.97,words:290},y:"a",title:""},["/posts/Program_language/shell/monitor","/posts/Program_language/shell/monitor.md"]],["v-b1aa3aa8","/posts/Program_language/verilog/shiftRegister.html",{d:"2024-01-02T06:07:49.000Z",c:["Verilog"],e:`<h1> 移位寄存器简介</h1>
<p>移位寄存器内的数据可以在<strong>移位脉冲</strong>（时钟信号）的作用下依次左移或右移。移位寄存器不仅可以存储数据，还可以用来实现数据的串并转换、分频，构成序列码发生器、序列码检测器，进行数值运算以及数据处理等，它也是数字系统中应用非常广泛的时序逻辑部件之一。</p>
<p>4位右移位寄存器工作原理:</p>
<p><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1478em;vertical-align:-0.2935em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8542em;"><span style="top:-2.4065em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2935em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9587em;vertical-align:-0.2753em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.4247em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2753em;"><span></span></span></span></span></span></span></span></span></span></p>`,r:{minutes:1.6,words:479},y:"a",title:"移位寄存器简介"},["/posts/Program_language/verilog/shiftRegister","/posts/Program_language/verilog/shiftRegister.md"]],["v-424a6368","/posts/Linux/application-dev/Linux-EINTR-signal.html",{d:"2023-11-06T07:24:16.000Z",c:["Linux"],e:`<h1> socket编程中的EINTR是什么?</h1>
<p>在socket编程中，我们时常在accept/read/write等接口调用的异常处理的部分看到对于EINTR的处理，例如下面这样的语句：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>repeat<span class="token operator">:</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.08,words:2123},y:"a",title:"socket编程中的EINTR是什么?"},["/posts/Linux/application-dev/Linux-EINTR-signal","/posts/Linux/application-dev/Linux-EINTR-signal.md"]],["v-c72fa816","/posts/Linux/application-dev/Linux-cpu-cache-line.html",{d:"2023-08-03T08:04:22.000Z",c:["Linux"],e:`<h1> CPU缓存那些事儿</h1>
<p>CPU高速缓存集成于CPU的内部，其是CPU可以高效运行的成分之一，本文围绕下面三个话题来讲解CPU缓存的作用：</p>
<ul>
<li>为什么需要高速缓存？</li>
<li>高速缓存的内部结构是怎样的？</li>
<li>如何利用好cache，优化代码执行效率？</li>
</ul>
<h2> 为什么需要高速缓存？</h2>
<p>在现代计算机的体系架构中，为了存储数据，引入了下面一些元件</p>
<ul>
<li>1.CPU寄存器</li>
<li>2.CPU高速缓存</li>
<li>3.内存</li>
<li>4.硬盘</li>
</ul>`,r:{minutes:9.34,words:2803},y:"a",title:"CPU缓存那些事儿"},["/posts/Linux/application-dev/Linux-cpu-cache-line","/posts/Linux/application-dev/Linux-cpu-cache-line.md"]],["v-bf0b1b8a","/posts/Linux/application-dev/Linux-cpu-cache-mesi.html",{d:"2023-07-03T06:53:25.000Z",c:["Linux"],e:`<h1> CPU缓存一致性原理</h1>
<p>在本站的文章<strong>CPU缓存那些事儿</strong>中， 介绍了cpu的多级缓存的架构和cpu缓存行cache line的结构。CPU对于缓存的操作包含读和写，读操作在cache line中有所涉及，在本文中，将重点讨论CPU对于缓存进行写时的行为。</p>
<h2> 单核CPU对高速缓存的读操作</h2>
<p>CPU对于高速缓存的读操作的过程在之前的文章中有提到过，这里梳理一下其流程：</p>
<ul>
<li>1.首先对于一个内存地址，CPU会按照索引规则（直接映射/多路组相连/全相连）优先去cache line中进行检索。</li>
<li>2.如果检索到了，意味着该内存地址的内容已经存在于cache中，则直接读取内容到CPU中，流程结束。如果没有检索到，进行步骤3。</li>
<li>3.此时确认内存的数据不在cache line中，如果cache已经存满或者已经被其他内存地址映射，则进入步骤4，如果cache line中还有空位，则进入步骤5.</li>
<li>4.执行缓存淘汰策略，腾出位置</li>
<li>5.加载内存数据到cache line中，将cache块上的内容读取到cpu中。</li>
</ul>`,r:{minutes:11.94,words:3582},y:"a",title:"CPU缓存一致性原理"},["/posts/Linux/application-dev/Linux-cpu-cache-mesi","/posts/Linux/application-dev/Linux-cpu-cache-mesi.md"]],["v-3096a586","/posts/Linux/application-dev/Linux-glibc-sem.html",{d:"2023-07-06T06:10:02.000Z",c:["Linux"],e:`<h1> 深入了解posix的信号量</h1>
<p>信号量是一种用于不同进程间或者同一进程间同步手段的方式。</p>
<p>典型的信号量具有P/V两个操作。</p>
<p>P操作又称之为等待(wait)操作。Edsger Dijkstra 称它为 P 操作，代表荷兰语单词 Proberen（意思是尝试）。它将尝试将信号量进行减1的操作。</p>
<p>V操作又称之为挂出(post)操作。V代表荷兰语单词 Verhogen（意思是增加）。其将对信号量执行加1操作。</p>
<p>我们所熟知的互斥锁其实就是一种特别的信号量，它是一种二值信号量，只有0/1两个值，同一时刻只能有一个对象拿到互斥锁的拥有权。</p>`,r:{minutes:1.99,words:596},y:"a",title:"深入了解posix的信号量"},["/posts/Linux/application-dev/Linux-glibc-sem","/posts/Linux/application-dev/Linux-glibc-sem.md"]],["v-f92c0794","/posts/Linux/application-dev/Linux-max-filefd.html",{d:"2023-10-20T07:03:10.000Z",c:["Linux"],e:`<h1> Linux 最大可以打开多少文件描述符？</h1>
<p>在日常开发中，对文件的操作可谓是再寻常不过的一件事情。那么你是否有这样一个疑问，我最多可以打开多少个文件呢？</p>
<p>在Linux系统中，当某个程序<strong>打开文件</strong>时，内核会返回相应的<strong>文件描述符</strong> (fd: file descriptors），也就是所谓的文件句柄，程序为了处理该文件必须引用此描述符。</p>
<p><strong>文件描述符</strong>是大于等于0的整数，其可以标明每一个被进程所打开的文件和 socket。最前面的三个文件描述符（0，1，2）分别与标准输入（stdin），标准输出（stdout）和标准错误（stderr）对应，后面打开的文件依此类推对应 3、4…… 。</p>`,r:{minutes:7.88,words:2365},y:"a",title:"Linux 最大可以打开多少文件描述符？"},["/posts/Linux/application-dev/Linux-max-filefd","/posts/Linux/application-dev/Linux-max-filefd.md"]],["v-341bce10","/posts/Linux/application-dev/atomic-principle.html",{d:"2023-07-03T03:12:22.000Z",c:["Linux"],e:`<h1> 原子变量的底层实现原理</h1>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> value  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">__sync_fetch_and_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.55,words:465},y:"a",title:"原子变量的底层实现原理"},["/posts/Linux/application-dev/atomic-principle","/posts/Linux/application-dev/atomic-principle.md"]],["v-f8c6564a","/posts/Linux/application-dev/exit-unlock-mutex.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],e:`<h1> 如果持有互斥锁的线程没有解锁退出了，该如何处理？</h1>
<h2> 问题引入</h2>
<p>看下面一段代码，两个线程将竞争互斥锁mutex而进入临界区， 线程2在竞争互斥锁之前会sleep 2秒， 因此大概率线程1将获得互斥锁。 然而线程1执行完临界区的代码之后， 没有执行解锁操作，就退出了。</p>
<p>这样会导致线程2将死锁，因为该锁的状态将永远是锁定状态， 它将永远都不能获得锁。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
pthread_mutex_t mutex<span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> param<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func1 get lock"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> param<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2 get lock"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pthread_t tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> func1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> func2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.03,words:908},y:"a",title:"如果持有互斥锁的线程没有解锁退出了，该如何处理？"},["/posts/Linux/application-dev/exit-unlock-mutex","/posts/Linux/application-dev/exit-unlock-mutex.md"]],["v-7911f9e9","/posts/Linux/application-dev/how-to-get-environ.html",{d:"2023-04-18T06:37:05.000Z",c:["Linux"],e:`<h1> c/c++如何通过代码获取到环境变量</h1>
<h2> 方法1：通过main函数的参数</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> env<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> env<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"env[%d]: %s\\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> env<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.44,words:133},y:"a",title:"c/c++如何通过代码获取到环境变量"},["/posts/Linux/application-dev/how-to-get-environ","/posts/Linux/application-dev/how-to-get-environ.md"]],["v-373f7f8a","/posts/Linux/application-dev/linux-glibc-barrier.html",{d:"2023-07-03T06:53:25.000Z",c:["Linux"],e:`<h1> 深入理解glibc barrier的实现原理</h1>
<p>在多线程的同步方式中，屏障可以协调多个线程，使其同时停止在某一个点，然后再统一运行,其效果如下所示：</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/barrier/barrier.png" alt="barrier" tabindex="0" loading="lazy"><figcaption>barrier</figcaption></figure>`,r:{minutes:7.55,words:2266},y:"a",title:"深入理解glibc barrier的实现原理"},["/posts/Linux/application-dev/linux-glibc-barrier","/posts/Linux/application-dev/linux-glibc-barrier.md"]],["v-489a808c","/posts/Linux/application-dev/linux-glibc-condition-var.html",{d:"2023-06-29T10:06:35.000Z",c:["Linux"],e:`<h1> 深入了解glibc的条件变量</h1>
<p><strong>条件变量</strong>是日常开发中进行<strong>多线程同步</strong>的一个重要手段，使用条件变量，可以使得我们可以构建出<strong>生产者-消费者</strong>这样的模型。</p>
<p>本文将从glibc条件变量的源码出发，讲解其背后的实现原理。</p>
<h2> pthread_cond_t的结构</h2>
<p><code>pthread_cond_t</code>是glibc的条件变量的结构，其<code>___data</code>字段比较重要，进一步我们查看<code>__pthread_cond_s</code>的定义。</p>`,r:{minutes:19.9,words:5969},y:"a",title:"深入了解glibc的条件变量"},["/posts/Linux/application-dev/linux-glibc-condition-var","/posts/Linux/application-dev/linux-glibc-condition-var.md"]],["v-0cd8f0c2","/posts/Linux/application-dev/linux-glibc-mutex.html",{d:"2023-06-29T01:44:39.000Z",c:["Linux"],e:`<h1> 深入了解glibc的互斥锁</h1>
<p>互斥锁是<strong>多线程</strong>同步时常用的手段，使用互斥锁可以保护对<strong>共享资源</strong>的操作。<strong>共享资源</strong>也被称为<strong>临界区</strong>，当一个线程对一个临界区加锁后，其他线程就不能进入该临界区，直到持有临界区锁的线程释放该锁。</p>
<p>本文以glibc中mutex的实现为例，讲解其背后的实现原理。</p>
<h2> glibc mutex类型</h2>
<p>glibc的互斥锁的类型名称为<strong>pthread_mutex_t</strong>，其结构可以用下面的结构体表示：</p>`,r:{minutes:9.95,words:2986},y:"a",title:"深入了解glibc的互斥锁"},["/posts/Linux/application-dev/linux-glibc-mutex","/posts/Linux/application-dev/linux-glibc-mutex.md"]],["v-114cb350","/posts/Linux/application-dev/memory-order.html",{d:"2023-07-07T05:28:28.000Z",e:`<h2> 编译器指令重排</h2>
<h2> CPU指令重排</h2>
<h2> 内存屏障</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">::</span><span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span> is just a compiler barrier<span class="token punctuation">.</span>
<span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token string">"mfence"</span> <span class="token operator">::</span><span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span> is both a compiler barrier and CPU barrier<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.19,words:56},y:"a",title:""},["/posts/Linux/application-dev/memory-order","/posts/Linux/application-dev/memory-order.md"]],["v-23ded876","/posts/Linux/application-dev/mutex-with-fork.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],e:`<h1> Fork之前创建了互斥锁，Fork之后是否可以保护临界区？</h1>
<p>这是一道某数通公司的面试题。</p>
<p>这个问题按照我的理解意思是，在fork之前创建一把互斥锁，在fork之后，如果子进程使用该锁lock住一段临界区，那么父进程是否需要等待子进程unlock该锁才可以进入临界区?</p>
<p>反之也一样，如果父进程使用该锁lock住一段临界区，那么子进程是否需要等待父进程unlock该锁才可以进入临界区?</p>
<p>经过一番思索，我认为该问题需要分为两个情况进行讨论， 即该互斥锁是<strong>线程锁</strong>还是<strong>进程锁</strong>两种场景进行讨论。</p>`,r:{minutes:6.48,words:1943},y:"a",title:"Fork之前创建了互斥锁，Fork之后是否可以保护临界区？"},["/posts/Linux/application-dev/mutex-with-fork","/posts/Linux/application-dev/mutex-with-fork.md"]],["v-50c2cb0a","/posts/Linux/application-dev/mutex-with-fork2.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],e:`<h1> Fork之前创建了互斥锁，要警惕死锁问题</h1>
<p>下面的这段代码会导致子进程出现死锁问题，您看出来了吗？</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span>
pthread_mutex_t mutex <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    pthread_t tid<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"before get lock\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"after get lock\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork failed\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.76,words:1727},y:"a",title:"Fork之前创建了互斥锁，要警惕死锁问题"},["/posts/Linux/application-dev/mutex-with-fork2","/posts/Linux/application-dev/mutex-with-fork2.md"]],["v-d6087b44","/posts/Linux/application-dev/read-write-mutex-deadlock.html",{d:"2023-10-07T04:19:07.000Z",c:["Linux"],e:`<h1> Linux读写锁的容易犯的问题</h1>
<p><strong>读写锁</strong>是互斥锁之外的另一种用于多线程之间同步的一种方式。</p>
<p>多线程对于一个共享变量的<strong>读操作</strong>是安全的， 而<strong>写操作</strong>是不安全的。如果在一个读很多而写很少的场景之下，那么使用互斥锁将会阻碍大量的线程安全的读操作的进行。在这种场景下，读写锁这样一种设计便诞生了。</p>
<p>读写锁的特性如下表所示， 总结起来就是<strong>读读不互斥</strong>， <strong>读写互斥</strong>， <strong>写写互斥</strong>。</p>`,r:{minutes:7.07,words:2122},y:"a",title:"Linux读写锁的容易犯的问题"},["/posts/Linux/application-dev/read-write-mutex-deadlock","/posts/Linux/application-dev/read-write-mutex-deadlock.md"]],["v-7f0a63b2","/posts/Linux/application-dev/",{d:"2023-04-25T02:03:59.000Z",e:`<h1> Linux应用层开发</h1>
<p>本模块主要介绍glibc所提供的接口和应用层开发所常见的话题。</p>
<h2> Fork之前创建了互斥锁，要警惕死锁问题</h2>
`,r:{minutes:.16,words:48},y:"a",title:"Linux应用层开发"},["/posts/Linux/application-dev/index.html","/posts/Linux/application-dev/readme.md"]],["v-39aec4ca","/posts/Linux/compile/duplicate_symbol_in_so.html",{d:"2023-05-23T06:57:14.000Z",c:["编译原理","Linux","ELF文件"],e:`<h1> 动态库中包含了相同的符号，行为是怎样的？</h1>
<h2> 分析</h2>
<p>主程序依赖了两个库libA的funcA函数和libB的funcB函数。示意的代码(main.cpp)如下：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,"</span><span class="token punctuation">,</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\\n"</span><span class="token punctuation">,</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.54,words:763},y:"a",title:"动态库中包含了相同的符号，行为是怎样的？"},["/posts/Linux/compile/duplicate_symbol_in_so","/posts/Linux/compile/duplicate_symbol_in_so.md"]],["v-6461b009","/posts/Linux/compile/dynamic_fpic.html",{d:"2024-02-20T07:52:46.000Z",c:["编译原理","Linux","ELF文件"],e:`<h1> 地址无关代码fPIC</h1>
<ul>
<li>1.模块内部的函数调用、跳转</li>
<li>2.模块内部的数据访问，例如本模块中定义的全局变量</li>
<li>3.模块外部的函数调用、跳转</li>
<li>4.模块外部的数据访问，例如访问其他模块中定义的全局变量</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">ext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//类型2</span>
    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//类型4</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment">//类型1</span>
    <span class="token function">ext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类型3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.79,words:1138},y:"a",title:"地址无关代码fPIC"},["/posts/Linux/compile/dynamic_fpic","/posts/Linux/compile/dynamic_fpic.md"]],["v-4cc38e03","/posts/Linux/compile/dynamic_lib_loading.html",{d:"2024-02-19T07:22:59.000Z",c:["Linux","ELF文件","动态库"],e:`<h1> 动态链接库的加载(翻译)</h1>
<h2> 什么是动态库</h2>
<p>library（函数库）是一个包含编译后的代码和数据的文件。 library大多情况下是非常有用的，因为它们可以让编译过程更加的快速，因为你不必每次编译所有依赖的文件，这使得我们可以进行模块化开发。静态库可以被链接到一个已经编译好的可执行文件中或者其他库中，在编译之后，静态库中的内容就被嵌入到了可执行文件或者其他库当中。动态库则是可执行文件在<strong>运行时刻</strong>才被加载的，这意味着这样的过程将会更加的复杂。</p>
<h2> 搭建demo</h2>
<p>为了更好的探索动态链接库，我们使用一个例子贯穿整文。 我们以三个源文件开始。</p>`,r:{minutes:15.37,words:4610},y:"a",title:"动态链接库的加载(翻译)"},["/posts/Linux/compile/dynamic_lib_loading","/posts/Linux/compile/dynamic_lib_loading.md"]],["v-ccbe3652","/posts/Linux/compile/elf-relocation.html",{d:"2024-02-21T10:08:58.000Z",c:["编译原理","Linux","ELF文件"],e:`<h1> 链接 - 重定位</h1>
<p>重定位的元素(Entries)的定义如下所示，英文中使用entries来表示表中的一行记录。</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Elf32_Addr   r_offset<span class="token punctuation">;</span>
    ELF32_Word   r_info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Elf32_Rel<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Elf32_Addr   r_offset<span class="token punctuation">;</span>
    ELF32_Word   r_info<span class="token punctuation">;</span>
    Elf32_Sword  r_addend<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Elf32_Rela<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.88,words:1165},y:"a",title:"链接 - 重定位"},["/posts/Linux/compile/elf-relocation","/posts/Linux/compile/elf-relocation.md"]],["v-d190b8c0","/posts/Linux/compile/got_plt.html",{d:"2023-04-23T07:50:51.000Z",c:["编译原理","Linux","ELF文件"],e:`<h1> 深入了解GOT,PLT和动态链接</h1>
<p>我们使用一个简单的例子来了解动态链接库的链接过程，以及在这个过程中使用到的GOT和PLT的作用是什么。</p>
<h2> 文件准备</h2>
<p>代码结构如下所示：</p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@localhost test]# tree .
.
├── main.c
└── symbol.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.04,words:1513},y:"a",title:"深入了解GOT,PLT和动态链接"},["/posts/Linux/compile/got_plt","/posts/Linux/compile/got_plt.md"]],["v-2a7d4f2b","/posts/Linux/compile/ldconfig-soname.html",{d:"2024-02-06T10:06:26.000Z",c:["编译原理","Linux","ELF文件"],e:`<h1> Linux中的SO-NAME与动态库的版本</h1>
<p>由于动态库有着诸多优点，其在程序中的运用非常广泛。现代的系统中一般存在大量的动态库。如何组织管理好这些动态库是一个非常重要的问题。Linux系统对于共享库的管理有一套很成熟的体系，这对于开发者而言进行程序的维护升级带来了方便。本文将对于Linux系统对于动态库的管理体系进行介绍。</p>
<h1> 共享库的兼容性问题</h1>
<p>对于一个库而言，开发者会不停地更新共享库的版本，修复一些问题，增加库的功能以及对性能的改进等等。由于共享库的特性，应用程序的共享库和应用程序本身可以独立开发和更新。例如Hello_World程序依赖于一个动态库libhello.so。当libhello.so的开发者开发出新的版本后，理论上只需要使用新的libhello.so去替换旧的版本就可以。</p>`,r:{minutes:9.37,words:2811},y:"a",title:"Linux中的SO-NAME与动态库的版本"},["/posts/Linux/compile/ldconfig-soname","/posts/Linux/compile/ldconfig-soname.md"]],["v-5eb4dd6c","/posts/Linux/compile/",{d:"2023-04-25T02:03:59.000Z",e:`<h1> 编译原理</h1>
`,r:{minutes:.01,words:4},y:"a",title:"编译原理"},["/posts/Linux/compile/index.html","/posts/Linux/compile/readme.md"]],["v-09ea77fb","/posts/Linux/compile/relocation_rel_text.html",{d:"2023-05-23T06:43:11.000Z",c:["编译原理","Linux","ELF文件"],e:`<h1> ELF文件函数重定位</h1>
<h2> 文件准备</h2>
<p>代码结构如下所示：</p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── main.c
├── foo.c
├── makefile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.59,words:776},y:"a",title:"ELF文件函数重定位"},["/posts/Linux/compile/relocation_rel_text","/posts/Linux/compile/relocation_rel_text.md"]],["v-60f2aa2e","/posts/Linux/coroutine/stackful-stackless.html",{d:"2023-06-08T02:19:36.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>Linux
tag:</li>
<li>协程</li>
</ul>
<hr>
<h1> 无栈协程和有栈协程的对比</h1>
<h2> 有栈协程</h2>
<h2> 无栈协程</h2>
<h3> 无栈协程兼容同步代码会导致async/await关键字的传染</h3>
<p>下面的例子是python的一个例子，由于sleep函数是一个异步函数，而sum函数调用了它，则sum函数需要添加async/await。而sum_wrapper1调用了sum函数，因此
sum_wrapper1也需要添加async/await。sum_wrapper2和sum_wrapper_final也是相同的原因，都添加上了async/await。</p>`,r:{minutes:.76,words:229},y:"a",title:"无栈协程和有栈协程的对比"},["/posts/Linux/coroutine/stackful-stackless","/posts/Linux/coroutine/stackful-stackless.md"]],["v-e3803fe8","/posts/database/mysql/mysql-bin-log-parse.html",{d:"2023-11-22T05:18:22.000Z",e:`<p><a href="https://www.modb.pro/db/397973" target="_blank" rel="noopener noreferrer">https://www.modb.pro/db/397973</a></p>
`,r:{minutes:.01,words:4},y:"a",title:""},["/posts/database/mysql/mysql-bin-log-parse","/posts/database/mysql/mysql-bin-log-parse.md"]],["v-29447cd9","/posts/database/mysql/mysql-data-line.html",{d:"2023-07-19T09:34:53.000Z",c:["Mysql"],e:`<h1> mysql中的行格式之compact格式分析</h1>
<h2> mysql行格式</h2>
<p>所谓行格式，就是指mysql一行数据的存储格式。</p>
<p>InnoDB 储存引擎支持有四种行储存格式：Compact、Redundant、Dynamic 和 Compressed。</p>
<p>Redundant是很古老的行格式了，因为占用空间最多，导致内存碎片化最严重，比较低效，现在基本上已经不用了，</p>
<p>Compact是MySQL 5.0之后引入的行记录存储方式，是一种紧凑的行格式，设计的初衷就是为了让一个数据页中可以存放更多的行记录，从 MySQL 5.1 版本之后，行格式默认设置成 Compact。</p>`,r:{minutes:5.89,words:1766},y:"a",title:"mysql中的行格式之compact格式分析"},["/posts/database/mysql/mysql-data-line","/posts/database/mysql/mysql-data-line.md"]],["v-3dbda982","/posts/database/mysql/mysql_b_tree_index.html",{d:"2023-11-21T10:02:55.000Z",c:["Mysql"],e:`<h1> MySQL B+树的原理</h1>
<p><a href="https://www.zhihu.com/question/454704334" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/454704334</a></p>
<p><a href="https://www.xiaolincoding.com/mysql/index/page.html#innodb-%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84" target="_blank" rel="noopener noreferrer">https://www.xiaolincoding.com/mysql/index/page.html#innodb-是如何存储数据的</a></p>`,r:{minutes:.14,words:42},y:"a",title:"MySQL B+树的原理"},["/posts/database/mysql/mysql_b_tree_index","/posts/database/mysql/mysql_b+tree_index.html","/posts/database/mysql/mysql_b+tree_index.md"]],["v-3c64f81c","/posts/database/mysql/mysql_ibd_file_format.html",{d:"2023-11-22T05:18:22.000Z",c:["Mysql"],e:`<h1> mysql ibd文件格式</h1>
<p>数据页结构图</p>
<p>File Header(38 字节)
Page Header(56 字节)
Infimum + Supermum 26字节
User Records(不确定大小)
Free Space(不确定大小)
Paga Directory(不确定大小)
File Trailer(8字节)</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/database/mysql/mysql-data-page/page-format.png" alt="mysql" tabindex="0" loading="lazy"><figcaption>mysql</figcaption></figure>`,r:{minutes:.53,words:159},y:"a",title:"mysql ibd文件格式"},["/posts/database/mysql/mysql_ibd_file_format","/posts/database/mysql/mysql_ibd_file_format.md"]],["v-0e77baf2","/posts/database/mysql/mysql_mvcc.html",{d:"2023-10-20T07:48:09.000Z",c:["Mysql"],e:`<h1> mysql MVCC机制详解</h1>
<p>MVCC, 是Multi Version Concurrency Control的缩写，其含义是<strong>多版本并发控制</strong>。这一概念的提出是为了使得MySQL可以实<strong>现RC隔离级别</strong>和<strong>RR隔离级别</strong>。</p>
<p>这里回顾一下MySQL的事务， MySQL的隔离级别和各种隔离级别所存在的问题。</p>
<p>事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。</p>
<p>不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。</p>`,r:{minutes:10.82,words:3247},y:"a",title:"mysql MVCC机制详解"},["/posts/database/mysql/mysql_mvcc","/posts/database/mysql/mysql_mvcc.md"]],["v-571ee3bc","/posts/database/mysql/mysql_source_code_build.html",{d:"2023-07-09T14:54:01.000Z",c:["Mysql"],e:`<h1> mysql 8.0.33源码编译及调试记录</h1>
<p>由于想对mysql的行锁的实现进行一些研究，于是希望自己编译mysql的debug版本进行调试，本文用于记录编译的过程。</p>
<h2> 编译步骤</h2>
<p>首先需要下载源码，mysql的源码在github上可以找到，这里选择8.0.33版本进行下载，下载地址为：</p>
<p><a href="https://github.com/mysql/mysql-server/archive/refs/tags/mysql-8.0.33.tar.gz" target="_blank" rel="noopener noreferrer">https://github.com/mysql/mysql-server/archive/refs/tags/mysql-8.0.33.tar.gz</a></p>`,r:{minutes:6.31,words:1892},y:"a",title:"mysql 8.0.33源码编译及调试记录"},["/posts/database/mysql/mysql_source_code_build","/posts/database/mysql/mysql_source_code_build.md"]],["v-82706408","/posts/database/sqlite/sqlite-cmd.html",{d:"2023-09-01T09:01:55.000Z",c:["Database","sqlite"],e:`<h1> sqlite命令行工具</h1>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.open database</td>
<td>打开一个数据库文件</td>
</tr>
<tr>
<td>.databases</td>
<td>列出数据库的名称及其所依附的文件</td>
</tr>
<tr>
<td>.help</td>
<td>显示帮助信息</td>
</tr>
</tbody>
</table>
`,r:{minutes:.16,words:48},y:"a",title:"sqlite命令行工具"},["/posts/database/sqlite/sqlite-cmd","/posts/database/sqlite/sqlite-cmd.md"]],["v-e1e3fc24","/posts/electricity/7-memory/ROM.html",{d:"2023-08-07T15:17:30.000Z",e:`<h1> ROM</h1>
<p>这里需要回顾一下二级管的与门和或门。</p>
<figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/electricity/memory/ROM/diode_and.png" alt="二极管与门" tabindex="0" loading="lazy"><figcaption>二极管与门</figcaption></figure>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>`,r:{minutes:.17,words:51},y:"a",title:"ROM"},["/posts/electricity/7-memory/ROM","/posts/electricity/7-memory/ROM.md"]],["v-98409ff2","/posts/electricity/HDL/nonblock-block.html",{d:"2023-07-28T06:36:59.000Z",e:`<h1> verilog</h1>
<p>a = 2, b = 1</p>
<p>b = 2, c = 1</p>
<div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token important">always @</span><span class="token punctuation">(</span> <span class="token keyword">posedge</span> clk <span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    b<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>
    c<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.12,words:37},y:"a",title:"verilog"},["/posts/electricity/HDL/nonblock-block","/posts/electricity/HDL/nonblock-block.md"]],["v-357b5e82","/posts/electricity/Latch/trigger.html",{d:"2023-11-22T01:57:29.000Z",c:["electrical"],e:`<h1> 触发器</h1>
<h2> SR锁存器</h2>
<p>SR锁存器可以由或非门组成：</p>
<figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/electricity/SR-latch/SR-latch.png" alt="SR锁存器" tabindex="0" loading="lazy"><figcaption>SR锁存器</figcaption></figure>
<p>其特性表如下所示：</p>
<table>
<thead>
<tr>
<th><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></th>
<th><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></th>
<th><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></th>
<th><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8831em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span></span></span></span></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>`,r:{minutes:2.75,words:824},y:"a",title:"触发器"},["/posts/electricity/Latch/trigger","/posts/electricity/Latch/trigger.md"]],["v-eba6b246","/posts/electricity/cmos/cmos.html",{d:"2023-06-27T15:16:34.000Z",e:`<h1> CMOS反相器</h1>
<figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/electricity/cmos/cmos1.png" alt="cmos反相器" tabindex="0" loading="lazy"><figcaption>cmos反相器</figcaption></figure>
<p>真值表如下所示：</p>
<table>
<thead>
<tr>
<th></th>
<th>vi</th>
<th>vo</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>`,r:{minutes:.24,words:73},y:"a",title:"CMOS反相器"},["/posts/electricity/cmos/cmos","/posts/electricity/cmos/cmos.md"]],["v-0e7fe57d","/posts/electricity/triode/triode.html",{d:"2023-06-17T06:28:33.000Z",c:["electronic technique"],e:`<h1> 理解空穴电流</h1>
<p>近日闲来无事，翻起来模电看了起来，在看到关于三极管的一张图时，对三极管的<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">EP</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>电流无法理解。</p>`,r:{minutes:3.4,words:1020},y:"a",title:"理解空穴电流"},["/posts/electricity/triode/triode","/posts/electricity/triode/triode.md"]],["v-767de411","/posts/life/2023/self-judge.html",{d:"2023-11-03T08:39:42.000Z",e:`<p>绩效考核工作汇报的时候，有一些感悟，为此想记录下来，也想看看大家有什么更好的思路和想法。欢迎大家评论分享，感谢！</p>
<p>总体：分为四大块</p>
<p>主要工作及产出
自我评价
不足及改进
后须规划
一、介绍
1.主要工作及产出
主要说明自己在考核时间内自己的核心工作内容，重点思考自己的产出。</p>
<p>重点在于让领导看见自己的产出，书写格式:以完成了XX，正在进行XX</p>
<p>一目了然，也不要输出太多。挑重点，简练总结，尽量在5条左右。</p>
<p>2.自我评价
主要从工作方面对能力提升和软实力方面去进行评价</p>
<p>突出自己能力与工作的匹配度，让领导认为自己是可以培养的对象</p>`,r:{minutes:2.42,words:726},y:"a",title:""},["/posts/life/2023/self-judge","/posts/life/2023/self-judge.md"]],["v-59c305ab","/posts/open_source_project/MyTinySTL/algobase.html",{d:"2023-05-24T10:03:05.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> algobase</h1>
<h2> 分析</h2>
<h3> unchecked_copy</h3>
<p>unchecked_copy有两个版本，一个接受平凡的对象类型的参数，其他的类型则进入normal版本。</p>
<p><strong>1.normal版本</strong></p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIter</span><span class="token operator">&gt;</span>
OutputIter 
<span class="token function">unchecked_copy</span><span class="token punctuation">(</span>InputIter first<span class="token punctuation">,</span> InputIter last<span class="token punctuation">,</span> OutputIter result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">unchecked_copy_cat</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token function">iterator_category</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.32,words:395},y:"a",title:"algobase"},["/posts/open_source_project/MyTinySTL/algobase","/posts/open_source_project/MyTinySTL/algobase.md"]],["v-518f27a8","/posts/open_source_project/MyTinySTL/construct.html",{d:"2023-05-11T07:29:57.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> construct</h1>
<h2> 分析</h2>
<h3> construct</h3>
<p>construct有多个重载的模板。</p>
<p>下面这个版本是调用全局的placement new操作符调用无参构造函数构造对象。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Ty</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span>Ty<span class="token operator">*</span> ptr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token double-colon punctuation">::</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span> <span class="token function">Ty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.41,words:123},y:"a",title:"construct"},["/posts/open_source_project/MyTinySTL/construct","/posts/open_source_project/MyTinySTL/construct.md"]],["v-47c314d7","/posts/open_source_project/MyTinySTL/exceptdef.html",{d:"2023-05-25T06:02:03.000Z",e:`<p>category:</p>
<ul>
<li>C++
tag:</li>
<li>C++</li>
<li>MyTinySTL</li>
</ul>
<hr>
<h1> exceptdef</h1>
<h2> 分析</h2>
<h3> 相关宏定义</h3>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MYSTL_DEBUG</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">assert</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span>  </span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THROW_LENGTH_ERROR_IF</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> what<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">length_error</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THROW_OUT_OF_RANGE_IF</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> what<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THROW_RUNTIME_ERROR_IF</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> what<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.16,words:49},y:"a",title:"exceptdef"},["/posts/open_source_project/MyTinySTL/exceptdef","/posts/open_source_project/MyTinySTL/exceptdef.md"]],["v-22834b21","/posts/open_source_project/MyTinySTL/iterator.html",{d:"2023-04-24T07:52:15.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> 迭代器</h1>
<h2> 萃取器</h2>
<p>萃取器的作用是在编译器获取一个迭代器的类型。其有三个版本。</p>
<p>第一个版本就是最common的场景，Iterator是一个class类型的type， 例如list类型。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 萃取迭代器的特性</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iterator</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span> 
  <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">iterator_traits_helper</span><span class="token operator">&lt;</span><span class="token class-name">Iterator</span><span class="token punctuation">,</span> <span class="token class-name">has_iterator_cat</span><span class="token operator">&lt;</span><span class="token class-name">Iterator</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token class-name">value</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.17,words:952},y:"a",title:"迭代器"},["/posts/open_source_project/MyTinySTL/iterator","/posts/open_source_project/MyTinySTL/iterator.md"]],["v-2607abf1","/posts/open_source_project/MyTinySTL/list.html",{d:"2023-04-26T06:18:31.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> list的实现</h1>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>mystl<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> l1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.81,words:242},y:"a",title:"list的实现"},["/posts/open_source_project/MyTinySTL/list","/posts/open_source_project/MyTinySTL/list.md"]],["v-4bd99572","/posts/open_source_project/MyTinySTL/map.html",{d:"2023-05-25T06:02:03.000Z",y:"a",title:""},["/posts/open_source_project/MyTinySTL/map","/posts/open_source_project/MyTinySTL/map.md"]],["v-2bd87fee","/posts/open_source_project/MyTinySTL/memory.html",{d:"2023-05-25T06:02:03.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> memory</h1>
<h2> 分析</h2>
<h3> address_of</h3>
<p>该函数的作用是获取value的地址。但是该实现可能并不正确，当Tp类型重载了&amp;运算符时，下面的实现就不能取到真时的地址。</p>
<p>可以考虑使用<code>std::addressof</code>解决。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取对象地址</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> Tp<span class="token operator">*</span> <span class="token function">address_of</span><span class="token punctuation">(</span>Tp<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.29,words:87},y:"a",title:"memory"},["/posts/open_source_project/MyTinySTL/memory","/posts/open_source_project/MyTinySTL/memory.md"]],["v-78fad7f6","/posts/open_source_project/MyTinySTL/rb_tree.html",{d:"2023-05-25T06:02:03.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> rb_tree</h1>
<h2> 分析</h2>
<h3> basic定义</h3>
<p>定义了node的颜色类型， 红色是false，黑色是false。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">bool</span> rb_tree_color_type<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">constexpr</span> rb_tree_color_type rb_tree_red   <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">constexpr</span> rb_tree_color_type rb_tree_black <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.71,words:214},y:"a",title:"rb_tree"},["/posts/open_source_project/MyTinySTL/rb_tree","/posts/open_source_project/MyTinySTL/rb_tree.md"]],["v-3ba2891b","/posts/open_source_project/MyTinySTL/stack.html",{d:"2023-05-22T04:10:38.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> stack</h1>
<h2> stack实现概述</h2>
<p>下面的代码是stack的类数据部分的定义，其是一个类模板。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> mystl<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">stack</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> Container                           container_type<span class="token punctuation">;</span>
    <span class="token comment">// 使用底层容器的型别</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>value_type      value_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>size_type       size_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>reference       reference<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span>

    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> value_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
                    <span class="token string">"the value_type of Container should be same with T"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    container_type c_<span class="token punctuation">;</span>  <span class="token comment">// 用底层容器表现 stack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.35,words:104},y:"a",title:"stack"},["/posts/open_source_project/MyTinySTL/stack","/posts/open_source_project/MyTinySTL/stack.md"]],["v-93560ec4","/posts/open_source_project/MyTinySTL/uninitiallized.html",{d:"2023-05-24T10:03:05.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> uninitialized模块</h1>
<h2> 分析</h2>
<h3> uninitialized_copy</h3>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIter</span><span class="token operator">&gt;</span>
ForwardIter <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>InputIter first<span class="token punctuation">,</span> InputIter last<span class="token punctuation">,</span> ForwardIter result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">unchecked_uninit_copy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> result<span class="token punctuation">,</span> 
                                     std<span class="token double-colon punctuation">::</span>is_trivially_copy_assignable<span class="token operator">&lt;</span>
                                     <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>
                                     value_type<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.81,words:242},y:"a",title:"uninitialized模块"},["/posts/open_source_project/MyTinySTL/uninitiallized","/posts/open_source_project/MyTinySTL/uninitiallized.md"]],["v-ec75fe1c","/posts/open_source_project/MyTinySTL/unordered_map.html",{d:"2023-05-25T06:02:03.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> unordered_map</h1>
<h2> 分析</h2>
<h3> unordered_map</h3>
`,r:{minutes:.03,words:9},y:"a",title:"unordered_map"},["/posts/open_source_project/MyTinySTL/unordered_map","/posts/open_source_project/MyTinySTL/unordered_map.md"]],["v-971129e6","/posts/open_source_project/MyTinySTL/util.html",{d:"2023-05-22T05:37:28.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> util</h1>
<p>util.h主要实现了一些通用的模板方法，例如move， forward， swap等函数， 以及pair等。</p>
<h2> remove_reference</h2>
<p>util.h并没有自己实现自己的remove_reference版本，而是直接调用了<code>std::remove_reference</code>。这里还是有必要了解其实现的原理。</p>
<p>首先讲解一下remove_reference的作用，其作用是为了去除&amp;的标记。</p>
<p>例如，T&amp;&amp; -&gt; T， T&amp; -&gt; T， T -&gt; T。</p>`,r:{minutes:2.95,words:885},y:"a",title:"util"},["/posts/open_source_project/MyTinySTL/util","/posts/open_source_project/MyTinySTL/util.md"]],["v-0c109628","/posts/open_source_project/MyTinySTL/vector.html",{d:"2023-05-24T03:29:32.000Z",c:["C++"],g:["C++","MyTinySTL"],e:`<h1> MyTinySTL-vector容器</h1>
<p>vector是STL中使用最为广泛的容器之一，vector的动态内存的管理功能给我们写程序带来了很大的便利性。本节就通过分析MyTinySTL中关于vector的源码了解其实现原理。</p>
<h2> 分析</h2>
<h3> vector数据部分的定义</h3>
<p>下面是vector这个模板类数据部分的定义。可以看到public部分都是一些类型定义， 例如迭代器类型，const迭代器类型，reverse迭代器类型， const reverse迭代器类型等等。</p>
<p>private部分比较简单，就是三个<strong>原始指针</strong>类型的迭代器。</p>`,r:{minutes:10.42,words:3125},y:"a",title:"MyTinySTL-vector容器"},["/posts/open_source_project/MyTinySTL/vector","/posts/open_source_project/MyTinySTL/vector.md"]],["v-331152ca","/posts/open_source_project/workflow/workflow-threadpool.html",{d:"2023-08-15T06:04:52.000Z",c:["Linux"],e:`<h1> 深入分析 workflow 线程池</h1>
<p>线程池是日常开发中很常用的一种管理线程的工具。它是<strong>池化技术</strong>中的一种。</p>
<p>池化技术的初衷就是将一些资源进行重复利用，以避免重复的构建来提高执行效率。类似的还有数据库连接池，字符串常量池，httpClient 连接池。</p>
<p>本文将分享一个好用的线程池，其来源于搜狗开源高性能网络框架workflow。</p>
<p>workflow 是搜狗公司近期开源发布的一款 C++ 服务器引擎，支撑搜狗几乎所有后端 C++ 在线服务，包括所有搜索服务，云输入法，在线广告等，每日处理超百亿请求。</p>`,r:{minutes:16.73,words:5019},y:"a",title:"深入分析 workflow 线程池"},["/posts/open_source_project/workflow/workflow-threadpool","/posts/open_source_project/workflow/workflow-threadpool.md"]],["v-3b52279e","/posts/tool/build-tool/cmake.html",{d:"2023-08-03T08:36:59.000Z",e:`<h1> cmake set命令</h1>
<p><a href="https://blog.csdn.net/Jay_Xio/article/details/121033423" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Jay_Xio/article/details/121033423</a></p>
<h1> cmake find_package</h1>
<p>DemoExampleRepo\\cmake\\demo\\find_package_module_demo1</p>
<p>删除make install的文件</p>`,r:{minutes:.55,words:165},y:"a",title:"cmake set命令"},["/posts/tool/build-tool/cmake","/posts/tool/build-tool/cmake.md"]],["v-025645a8","/posts/tool/build-tool/makefile-knowledge.html",{d:"2023-08-03T08:36:59.000Z",c:["Linux","Makefile"],e:`<h1> makefile案例学习</h1>
<p>很多时候， 我们在<code>git clone</code>完一个project之后，就会让我们使用<code>make</code>命令进行项目的构建。这个make命令的背后就是按照了Makefile文件定义的格式去完成项目构建。</p>
<p>因此Makefile的作用就是帮助程序员进行项目的构建，它按照项目的需求个性化的定义自己的构建过程。Makefile并不限定编程语言，但是在c/c++项目中使用相对较多。其他的一些构建工具，例如qmake，也是将*.pro文件转化为Makefile，再进行构建。</p>
<p>可以看出Makefile的应用面还是非常广泛的， 下面将一步一步的讲解Makefile最常使用的语法， 并通过案例进行实践， 一步一步深入Makefile， 本文的案例主要使用了C++语言。</p>`,r:{minutes:14.31,words:4292},y:"a",title:"makefile案例学习"},["/posts/tool/build-tool/makefile-knowledge","/posts/tool/build-tool/makefile-knowledge.md"]],["v-ffec0bb6","/posts/tool/gdb/gdb_cmd.html",{d:"2023-07-28T06:36:59.000Z",c:["C++","gdb"],g:["C++"],e:`<h1> gdb的基础命令使用</h1>
<p>gdb是c/c++程序的调试利器，在日常工作中，十分有利。</p>
<p>有人说， 有了像clion，visual studio这样的IDE工具，我们还有必要去了解gdb工具吗？</p>
<p>其实是有必要的，在日常的代码开发中，使用这些IDE工具确实能够很好地帮助我们进行开发，但是你很难确定所有的环境都有IDE，比如线上环境，客户环境，因此了解gdb的指令还是很有必要的，本文就一些常用的gdb指令进行梳理。</p>
<ul>
<li><a href="#gdb%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8">gdb的基础命令使用</a>
<ul>
<li><a href="#gdb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">gdb常用命令</a></li>
<li><a href="#gdb%E5%91%BD%E4%BB%A4%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3">gdb命令案例详解</a>
<ul>
<li><a href="#run">run</a></li>
<li><a href="#continue">continue</a></li>
<li><a href="#next">next</a></li>
<li><a href="#step">step</a></li>
<li><a href="#until">until</a></li>
<li><a href="#finish">finish</a></li>
<li><a href="#call">call</a></li>
<li><a href="#break">break</a></li>
<li><a href="#watch">watch</a></li>
<li><a href="#print">print</a></li>
<li><a href="#display">display</a></li>
<li><a href="#backtrace">backtrace</a></li>
<li><a href="#info">info</a></li>
<li><a href="#x%E5%91%BD%E4%BB%A4">x命令</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
</ul>
</li>
</ul>`,r:{minutes:18.74,words:5621},y:"a",title:"gdb的基础命令使用"},["/posts/tool/gdb/gdb_cmd","/posts/tool/gdb/gdb_cmd.md"]],["v-813bc77e","/posts/tool/gdb/gdb_multithread_multiprocess.html",{d:"2023-07-28T06:36:59.000Z",c:["C++","gdb"],g:["C++"],e:`<h1> gdb的多进程多线程调试技巧</h1>
<p>前面我们了解过了gdb使用过程中的一些基础指令，在实际的开发过程中，程序通常都是多进程，多线程的。本节就将针对多线程和多进程场景下，如何使用gdb进行调试进行总结。</p>
<h2> 多线程</h2>
<h2> 多线程调试常用命令</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>info threads</code></td>
<td>显示当前可调试的所有线程，每个线程会有一个id，带有*标记的是当前调试的线程。</td>
</tr>
<tr>
<td><code>thread &lt;ID&gt;</code></td>
<td>切换当前调试线程为指定的线程</td>
</tr>
<tr>
<td><code>set scheduler-locking off</code></td>
<td>不锁定任何线程，也就是所有线程都执行，这是默认值</td>
</tr>
<tr>
<td><code>set scheduler-locking on</code></td>
<td>只有当前被调试程序会执行</td>
</tr>
<tr>
<td><code>set scheduler-locking on step</code></td>
<td>在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行</td>
</tr>
<tr>
<td><code>thread apply all command</code></td>
<td>让所有被调试线程执行GDB命令command</td>
</tr>
<tr>
<td><code>thread apply ID1 ID2 command</code></td>
<td>让一个或者多个线程执行GDB命令command</td>
</tr>
<tr>
<td><code>break thread_test.c:123</code> thread all</td>
<td>在所有线程中相应的行上设置断点</td>
</tr>
<tr>
<td><code>set print thread-events</code></td>
<td>控制是否打印线程启动、退出消息</td>
</tr>
</tbody>
</table>`,r:{minutes:1.48,words:445},y:"a",title:"gdb的多进程多线程调试技巧"},["/posts/tool/gdb/gdb_multithread_multiprocess","/posts/tool/gdb/gdb_multithread_multiprocess.md"]],["v-1bae868b","/posts/tool/git/git-merge-git-rebase.html",{d:"2023-08-03T08:36:59.000Z",c:["git"],e:`<h1> git merge和git rebase有什么区别</h1>
<p><code>git rebase</code>和<code>git merge</code>是在日常开发中常用的用于分支合并的命令，也是非常容易误用的两个命令。本文将通过图文的方式去详解二者之间的区别。</p>
<h2> git merge</h2>
<p><code>git merge</code>会为本次的合并过程生成一条新的commit，并将该commit添加到目的分支上。通常用于将<strong>feature分支的内容向主分支</strong>进行合并。</p>
<p>如下图所示，在main分支的c2提交后checkout了一个新分支feature。随后feature分支上提交了c3，c5和c7三个提交。于此同时，main分支也在往前推进，产生了c4，c6，c8三个提交。此时由于feture分支已经开发完毕，向main分支进行合并，在解决完冲突之后，main分支上产生了一个新的提交c9。</p>`,r:{minutes:3.23,words:968},y:"a",title:"git merge和git rebase有什么区别"},["/posts/tool/git/git-merge-git-rebase","/posts/tool/git/git-merge-git-rebase.md"]],["v-5ad99f25","/posts/tool/git/git-proxy.html",{d:"2024-01-23T02:51:40.000Z",e:`<p>设置https 代理</p>
<p>Git代理有两种设置方式，分别是全局代理和只对Github代理，建议只对github 代理。
代理协议也有两种，分别是使用http代理和使用socks5代理，建议使用socks5代理。
注意下面代码的端口号需要根据你自己的代理端口设定，比如我的代理socks端口是51837。</p>
<p>全局设置（不推荐）</p>
<p>使用http代理</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://127.0.0.1:58591
<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy https://127.0.0.1:58591
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.98,words:594},y:"a",title:"Linux、MacOS"},["/posts/tool/git/git-proxy","/posts/tool/git/git-proxy.md"]],["v-781d1713","/posts/tool/git/git-submodule-usage.html",{d:"2023-08-03T08:36:59.000Z",c:["git"],e:`<h1> git submodule的使用</h1>
<p>git clone <a href="mailto:git@github.com">git@github.com</a>:zgjsxx/submodule_parent.git</p>
<p>git submodule add <a href="mailto:git@github.com">git@github.com</a>:zgjsxx/submodule_child.git third_party</p>
`,r:{minutes:.07,words:21},y:"a",title:"git submodule的使用"},["/posts/tool/git/git-submodule-usage","/posts/tool/git/git-submodule-usage.md"]],["v-e6061940","/posts/tool/git/how-to-configure-git-with-multiple-user.html",{d:"2023-08-03T08:36:59.000Z",c:["git"],e:`<h1> 如何配置git，使其支持多用户？</h1>
<p>在多数时候， 我们使用git进行操作时，只需要在本地配置一个用户的ssh key，就可以完成基本的pull/push操作。如果现在我有两个github的账号，并需要在一台电脑中操作其中的repo，有没有什么较好的办法呢？</p>
<p>下面就将详解其配置过程。</p>
<h2> 清除全局用户配置</h2>
<p>该步骤是必须的， 在本地设置多账户之后， 就不再使用全局的用户名和email了， 因此需要先unset掉global的用户名和邮箱。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.email
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.41,words:1023},y:"a",title:"如何配置git，使其支持多用户？"},["/posts/tool/git/how-to-configure-git-with-multiple-user","/posts/tool/git/how-to-configure-git-with-multiple-user.md"]],["v-8ed49434","/posts/tool/linux-cmd/linux-frequently-used-cmd.html",{d:"2023-10-07T02:17:51.000Z",c:["Linux","tool"],e:`<h1> Linux 高频使用的命令</h1>
<p>查看一个目录文件的大小</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">du</span> <span class="token parameter variable">-h</span> --max-depth<span class="token operator">=</span><span class="token number">1</span> ./test

<span class="token number">1</span>.7M    ./test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.11,words:33},y:"a",title:"Linux 高频使用的命令"},["/posts/tool/linux-cmd/linux-frequently-used-cmd","/posts/tool/linux-cmd/linux-frequently-used-cmd.md"]],["v-422e9a49","/posts/tool/linux-cmd/linux-iostat-cmd.html",{d:"2023-08-07T02:42:48.000Z",c:["Linux","tool"],e:`<h1> Linux性能分析之iostat命令详解</h1>
<p>iostat命令是IO性能分析的常用工具，其是input/output statistics的缩写。本文将着重于下面几个方面介绍iostat命令：</p>
<ul>
<li>iostat的安装</li>
<li>iostat命令行选项说明</li>
<li>iostat输出内容分析</li>
<li>如何确定磁盘IO的瓶颈</li>
<li>iostat实际案例</li>
</ul>
<h2> 命令的安装</h2>
<p>iostat位于sysstat包中，使用yum可以对其进行安装。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> sysstat <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:10.05,words:3015},y:"a",title:"Linux性能分析之iostat命令详解"},["/posts/tool/linux-cmd/linux-iostat-cmd","/posts/tool/linux-cmd/linux-iostat-cmd.md"]],["v-051d8b78","/posts/tool/linux-cmd/linux-iptables.html",{d:"2023-09-23T14:18:47.000Z",y:"a",title:""},["/posts/tool/linux-cmd/linux-iptables","/posts/tool/linux-cmd/linux-iptables.md"]],["v-1ceae136","/posts/tool/linux-cmd/linux-lsof-cmd.html",{d:"2023-08-07T02:42:48.000Z",c:["Linux","tool"],e:`<h1> Linux工具之lsof命令详解</h1>
<h2> 基本概念</h2>
<p>命令 lsof （ list opened files ）负责列出系统中已经打开的文件，包括普通文件，目录，块特殊文件，字符特殊文件，正在执行的文本引用，库，流或网络文件（例如：网络套接字，NFS文件或UNIX域套接字）。</p>
<h2> 常用参数</h2>
<p>-p pid : 输出指定进程打开的文件；</p>
<p>-l : 输出中使用ID代替用户名；</p>
<p>-u userName : 输出指定用户打开的文件；</p>
<p>-c string : 输出 COMMAND 列中包含 string 的项；</p>`,r:{minutes:.96,words:287},y:"a",title:"Linux工具之lsof命令详解"},["/posts/tool/linux-cmd/linux-lsof-cmd","/posts/tool/linux-cmd/linux-lsof-cmd.md"]],["v-46314d5a","/posts/tool/linux-cmd/linux-mitm-proxy.html",{d:"2023-10-17T08:07:55.000Z",e:`<h1> mitmproxy</h1>
<p>设置上游代理，并且只对目的地址为<code>127.0.0.1:443</code>的流量进行解密</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mitmdump <span class="token parameter variable">--mode</span> upstream:http://127.0.0.1:1081 --allow-hosts <span class="token number">127.0</span>.0.1:443
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.12,words:36},y:"a",title:"mitmproxy"},["/posts/tool/linux-cmd/linux-mitm-proxy","/posts/tool/linux-cmd/linux-mitm-proxy.md"]],["v-02e4930c","/posts/tool/linux-cmd/linux-perf-cmd.html",{d:"2023-09-21T15:11:58.000Z",c:["Linux","tool"],e:`<h1> Linux工具之perf命令详解</h1>
<h2> 安装</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> perf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> perf工具简述</h2>`,r:{minutes:3.06,words:918},y:"a",title:"Linux工具之perf命令详解"},["/posts/tool/linux-cmd/linux-perf-cmd","/posts/tool/linux-cmd/linux-perf-cmd.md"]],["v-0e5bbbf6","/posts/tool/linux-cmd/linux-pidstat-cmd.html",{d:"2023-08-14T09:47:47.000Z",e:`<h1> pidstat 概述</h1>
<p>pidstat是sysstat工具的一个命令，用于监控全部或指定进程的cpu、内存、线程、设备IO等系统资源的占用情况。pidstat首次运行时显示自系统启动开始的各项统计信息，之后运行pidstat将显示自上次运行该命令以后的统计信息。用户可以通过指定统计的次数和时间来获得所需的统计信息。</p>
<h2> 命令的安装</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> sysstat <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.26,words:677},y:"a",title:"pidstat 概述"},["/posts/tool/linux-cmd/linux-pidstat-cmd","/posts/tool/linux-cmd/linux-pidstat-cmd.md"]],["v-7376518c","/posts/tool/linux-cmd/linux-route-cmd.html",{d:"2023-09-21T15:11:58.000Z",c:["Linux","tool"],e:`<h1> Linux路由表详解</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM_139_74_centos ~<span class="token punctuation">]</span><span class="token comment"># route</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         gateway         <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">10.0</span>.0.10       <span class="token number">10.139</span>.128.1    <span class="token number">255.255</span>.255.255 UGH   <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">10.139</span>.128.0    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.224.0   U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0
link-local      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">1002</span>   <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> docker0
<span class="token number">172.18</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> br-0ab63c131848
<span class="token number">172.19</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> br-bccbfb788da0
<span class="token number">172.20</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> br-7485db25f958
<span class="token punctuation">[</span>root@VM_139_74_centos ~<span class="token punctuation">]</span><span class="token comment"># route -n</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
<span class="token number">0.0</span>.0.0         <span class="token number">10.139</span>.128.1    <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">10.0</span>.0.10       <span class="token number">10.139</span>.128.1    <span class="token number">255.255</span>.255.255 UGH   <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">10.139</span>.128.0    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.224.0   U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">169.254</span>.0.0     <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">1002</span>   <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> docker0
<span class="token number">172.18</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> br-0ab63c131848
<span class="token number">172.19</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> br-bccbfb788da0
<span class="token number">172.20</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> br-7485db25f958
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.13,words:339},y:"a",title:"Linux路由表详解"},["/posts/tool/linux-cmd/linux-route-cmd","/posts/tool/linux-cmd/linux-route-cmd.md"]],["v-6cf506de","/posts/tool/linux-cmd/linux-sar-cmd.html",{d:"2023-08-15T05:26:28.000Z",e:`<h1> sar</h1>
<h2> sar –n DEV查看网络流量</h2>
<p>sar –n DEV  1 2</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  <span class="token function">cat</span>  monitor_net.sh
<span class="token comment">############################################################</span>
<span class="token comment">#!/bin/bash</span>

<span class="token assign-left variable">ethn</span><span class="token operator">=</span><span class="token variable">$1</span>

<span class="token keyword">while</span> <span class="token boolean">true</span>
<span class="token keyword">do</span>
  <span class="token assign-left variable">RX_pre</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /proc/net/dev <span class="token operator">|</span> <span class="token function">grep</span> $ethn <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/:/ /g'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">)</span></span>
  <span class="token assign-left variable">TX_pre</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /proc/net/dev <span class="token operator">|</span> <span class="token function">grep</span> $ethn <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/:/ /g'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $10}'</span><span class="token variable">)</span></span>
  <span class="token function">sleep</span> <span class="token number">1</span>
  <span class="token assign-left variable">RX_next</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /proc/net/dev <span class="token operator">|</span> <span class="token function">grep</span> $ethn <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/:/ /g'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">)</span></span>
  <span class="token assign-left variable">TX_next</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /proc/net/dev <span class="token operator">|</span> <span class="token function">grep</span> $ethn <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/:/ /g'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $10}'</span><span class="token variable">)</span></span>

  <span class="token function">clear</span>
  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\\t">\\t</span> RX <span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> +%k:%M:%S<span class="token variable">\`</span></span> TX"</span>

  <span class="token assign-left variable">RX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>\${RX_next}<span class="token operator">-</span>\${RX_pre}<span class="token variable">))</span></span>
  <span class="token assign-left variable">TX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>\${TX_next}<span class="token operator">-</span>\${TX_pre}<span class="token variable">))</span></span>

  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$RX</span> <span class="token parameter variable">-lt</span> <span class="token number">1024</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
    <span class="token assign-left variable">RX</span><span class="token operator">=</span><span class="token string">"<span class="token variable">\${RX}</span>B/s"</span>
  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$RX</span> <span class="token parameter variable">-gt</span> <span class="token number">1048576</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
    <span class="token assign-left variable">RX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $RX <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1/1048576 "MB/s"}'</span><span class="token variable">)</span></span>
  <span class="token keyword">else</span>
    <span class="token assign-left variable">RX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $RX <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1/1024 "KB/s"}'</span><span class="token variable">)</span></span>
  <span class="token keyword">fi</span>

  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$TX</span> <span class="token parameter variable">-lt</span> <span class="token number">1024</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
    <span class="token assign-left variable">TX</span><span class="token operator">=</span><span class="token string">"<span class="token variable">\${TX}</span>B/s"</span>
  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$TX</span> <span class="token parameter variable">-gt</span> <span class="token number">1048576</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
    <span class="token assign-left variable">TX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $TX <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1/1048576 "MB/s"}'</span><span class="token variable">)</span></span>
  <span class="token keyword">else</span>
    <span class="token assign-left variable">TX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $TX <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1/1024 "KB/s"}'</span><span class="token variable">)</span></span>
  <span class="token keyword">fi</span>

  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$ethn</span> <span class="token entity" title="\\t">\\t</span> <span class="token variable">$RX</span>   <span class="token variable">$TX</span> "</span>

<span class="token keyword">done</span>
<span class="token comment">############################################################</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.58,words:174},y:"a",title:"sar"},["/posts/tool/linux-cmd/linux-sar-cmd","/posts/tool/linux-cmd/linux-sar-cmd.md"]],["v-0d260640","/posts/tool/linux-cmd/linux-top-cmd.html",{d:"2023-08-07T02:42:48.000Z",c:["Linux","tool"],e:`<h1> top命令详解</h1>
<h2> 概述</h2>
<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，其作用类似于windows系统中的任务管理器。</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/tool/top/windows_task_manger.png" alt="git ssh key" tabindex="0" loading="lazy"><figcaption>git ssh key</figcaption></figure>`,r:{minutes:11.81,words:3542},y:"a",title:"top命令详解"},["/posts/tool/linux-cmd/linux-top-cmd","/posts/tool/linux-cmd/linux-top-cmd.md"]],["v-ef348746","/posts/tool/linux-cmd/linux-valgrind.html",{d:"2023-10-18T13:57:39.000Z",c:["Linux","tool","valgrind"],e:`<h1> 使用Valgrind解决内存问题</h1>
<h2> 1.什么是Valgrind? 如何运行Valgrind</h2>
<p>Valgrind是一个用于检测内存问题的工具，尤其擅长处理<strong>内存泄漏</strong>问题和非法内存访问的问题。<strong>内存泄漏</strong>是指通过申请内存的方法(例如malloc)申请了内存确没有使用释放内存的方法(例如free)释放内存而导致的问题。非法的内存访问可能会引起程序的段错误(Segmentaion fault)。 Valgrind工具可以有效的帮助你分析出问题的产生的原因。</p>
<p>注意：</p>
<ul>
<li>为了使得Valgrind可以给出具体详细的信息，你需要在编译c程序时添加-g的选项。</li>
</ul>`,r:{minutes:12.8,words:3839},y:"a",title:"使用Valgrind解决内存问题"},["/posts/tool/linux-cmd/linux-valgrind","/posts/tool/linux-cmd/linux-valgrind.md"]],["v-0e976c58","/posts/tool/linux-cmd/linux-vmstat-cmd.html",{d:"2023-08-14T09:47:47.000Z",y:"a",title:""},["/posts/tool/linux-cmd/linux-vmstat-cmd","/posts/tool/linux-cmd/linux-vmstat-cmd.md"]],["v-7f055018","/posts/Program_language/Assembly_language/fullerton_CSci241/Group-Assignment1-greet-the-user.html",{d:"2024-02-26T07:20:37.000Z",c:["汇编语言"],e:`<h1> 小组作业</h1>
<h2> 小组作业#1</h2>
<p>为了让你可以更加熟悉汇编语言， 这里是我们的小组作业：</p>
<blockquote>
<p>编写一个汇编程序，提示用户输入姓名，打印 What is your name?然后接受最多255个字符的输入，然后打印出Hello，name，nice to meet you！随后是换行符。</p>
</blockquote>
<p>您必须同时使用 <code>SYS_WRITE</code> (= 1) 和 <code>SYS_READ</code> (= 0) 系统调用。使用以下 <code>.data</code> 部分：</p>`,r:{minutes:1.21,words:363},y:"a",title:"小组作业"},["/posts/Program_language/Assembly_language/fullerton_CSci241/Group-Assignment1-greet-the-user","/posts/Program_language/Assembly_language/fullerton_CSci241/Group-Assignment1-greet-the-user.md"]],["v-535a440e","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture1-computer-organization-assembly-language.html",{d:"2024-02-28T08:13:01.000Z",c:["汇编语言"],e:`<h1> 第一讲：计算机的组织架构和汇编语言</h1>
<h2> 汇编语言</h2>
<p>汇编语言和C/C++语言的区别是什么？</p>
<ul>
<li>
<p>汇编语言是底层语言，更接近于CPU本身可以理解的内容。CPU可以理解的是纯粹的字节流(机器语言)。几乎不会有人愿意通过写原始的字节流进行编程。汇编语言处于机器语言的上层， 将CPU可以理解的操作码(Opcode)抽象成了人类可以理解的命令， 例如<code>add</code>,<code>mov</code>等等。这些名字被称之为<strong>助记符</strong>。</p>
</li>
<li>
<p>和C/C++语言相比，汇编语言的工具较少。没有所谓的"标准汇编语言库"。如果你想要写一个字符串处理的方法，你只能自己编写。</p>
</li>
<li>
<p>汇编语言不能移植到其他类型的CPU上(x86 vs ARM)或者其他类型的操作系统上(Windows vs Linux)， 甚至不能和其它类型的汇编语言(<a href="https://en.wikibooks.org/wiki/X86_Assembly/x86_Assemblers" target="_blank" rel="noopener noreferrer">YASM vs MASM vs GAS</a>)都无法兼容。</p>
</li>
</ul>`,r:{minutes:29.79,words:8937},y:"a",title:"第一讲：计算机的组织架构和汇编语言"},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture1-computer-organization-assembly-language","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture1-computer-organization-assembly-language.md"]],["v-a0280be2","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture14-structure-strcuture-packing.html",{d:"2024-02-26T05:11:56.000Z",c:["汇编语言"],e:`<h2> 十四讲 结构体</h2>
<p>C/C++结构体实际上只不过是按照一定的排列方式存储在内存中的多个数据。如果我们想要与使用结构体的C/C++程序进行交互，我们需要了解如何在汇编语言中构造出等效的内容。</p>
<p>一个简单的结构体的例子如下所示：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">thing</span> <span class="token punctuation">{</span> 
    <span class="token keyword">double</span> a<span class="token punctuation">;</span>  <span class="token comment">// 8 bytes</span>
    <span class="token keyword">char</span>   b<span class="token punctuation">;</span>  <span class="token comment">// 1 byte</span>
    <span class="token keyword">int</span>    c<span class="token punctuation">;</span>  <span class="token comment">// 4 bytes</span>
    <span class="token keyword">char</span><span class="token operator">*</span>  d<span class="token punctuation">;</span>  <span class="token comment">// 8 bytes    </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.4,words:120},y:"a",title:""},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture14-structure-strcuture-packing","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture14-structure-strcuture-packing.md"]],["v-78553716","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture18-Memory-management.html",{d:"2024-02-26T06:32:16.000Z",c:["汇编语言"],e:`<h1> 内存管理</h1>
<h2> 大页内存</h2>
<p>x86-64 默认内存页面大小为 4KB，但可以使用大小为 2MB、4MB 和 1GB 的页面。</p>
`,r:{minutes:.13,words:40},y:"a",title:"内存管理"},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture18-Memory-management","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture18-Memory-management.md"]],["v-ca5a5eb8","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture2-digital-circuits.html",{d:"2024-02-23T08:09:48.000Z",c:["汇编语言"],e:`<h1> 第二讲：数字电路</h1>
<h2> 数字电路</h2>
<p>CPU 由一组复杂的数字电路实现。数字电路是由逻辑门构建的（逻辑门又是使用晶体管构建的）。在数字电路设计中，在数字电路设计中，我们展示逻辑信号（开/关值）如何从输入流经逻辑门到输出。如果有电流流过逻辑信号，则逻辑信号为高（开）；如果没有电流（或电流非常小），则逻辑信号为低（关）。</p>
<p>逻辑门的基本类型有：</p>
<ul>
<li>
<p>非门(NOT)：单输入、单输出门，反转其输入。如果输入为高电平，则输出为低电平，反之亦然。
<img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/NOT-gate.png" alt="NOT-gate" loading="lazy"></p>
<p>非(NOT) 在 C/C++ 中运算符是<code>~</code>。这个符号是按位非，与逻辑非(<code>!</code>)不同。</p>
</li>
<li>
<p>与门(AND)：双输入、单输出门：当且仅当两个输入均为高电平时，输出为高电平，否则为低电平。</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/AND-gate.png" alt="AND-gate" tabindex="0" loading="lazy"><figcaption>AND-gate</figcaption></figure>
<p>AND 的 C/C++ 运算符是 &amp;（这是按位与，与 &amp;&amp; 逻辑与 不同）。</p>
</li>
<li>
<p>或门(OR)：双输入、单输出门：如果其中一个或两个输入都为高电平，则输出为高电平，否则（如果两个输入均为低电平）输出为低电平。</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/OR-gate.png" alt="OR-gate" tabindex="0" loading="lazy"><figcaption>OR-gate</figcaption></figure>
<p>C/C++ 中与运算符是 | （这又是按位或，不同于逻辑或 ||）</p>
</li>
<li>
<p>异或门(XOR)：双输入，单输出门。如果其中一个输入为高电平但不是两个输入都是高电平，则输出为高电平。否则，当两个输入都为高电平或者两个输入都是低电平，则输出为低电平。实际上，如果输入不同(一高一低)，则输出为高，如果输入相同，则输出为低。</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/XOR-gate.png" alt="XOR-gate" tabindex="0" loading="lazy"><figcaption>XOR-gate</figcaption></figure>
<p>C/C++中代表异或的运算符是<code>^</code>（这个是按位异或， 没有逻辑上的异或)。 注意<code>^</code>不是求幂运算符，C/C++中没有求幂的运算符。</p>
</li>
<li>
<p>与非门(NAND)：输出端带有非门的与门。也就是说，如果两个输入都为高电平，则输出为低电平，否则为高电平。</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/NAND-gate.png" alt="NAND-gate" tabindex="0" loading="lazy"><figcaption>NAND-gate</figcaption></figure>
<p>C/C++没有直接的与非运算符。可以使用<code>&amp;</code>和<code>~</code>组合起来起到相同的效果。</p>
</li>
<li>
<p>或非(NOR)：在或门的输出端带有一个非门。如果两个输入均为低电平，则输出为高电平，否则为低电平。</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/NOR-gate.png" alt="NOR-gate" tabindex="0" loading="lazy"><figcaption>NOR-gate</figcaption></figure>
<p>C/C++没有直接的或非运算符。可以使用<code>|</code>和<code>~</code>组合起来起到相同的效果。</p>
</li>
<li>
<p>同或(XNOR)：输出端带有非门的异或门。如果两个输入相同（均为低电平或均为高电平），则输出为高电平，否则为低电平。</p>
<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/XNOR-gate.png" alt="XNOR-gate" tabindex="0" loading="lazy"><figcaption>XNOR-gate</figcaption></figure>
<p>C/C++没有直接的同或运算符。可以使用<code>^</code>和<code>~</code>组合起来起到相同的效果。</p>
</li>
</ul>`,r:{minutes:9.19,words:2758},y:"a",title:"第二讲：数字电路"},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture2-digital-circuits","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture2-digital-circuits.md"]],["v-77b6e668","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture3-register-numeric-representations.html",{d:"2024-02-28T09:23:15.000Z",c:["汇编语言"],e:`<h1> 第三讲：数字表示</h1>
<div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>;;; 
;;; hello.s
;;; Prints "Hello, world!"
;;;

section .data

msg:            db      "Hello, world!", 10
MSGLEN:         equ     $-msg

section .text

;; Program code goes here

global _start
_start:

    mov     rax,    1               ; Syscall code in rax
    mov     rdi,    1               ; 1st arg, file desc. to write to
    mov     rsi,    msg             ; 2nd arg, addr. of message
    mov     rdx,    MSGLEN          ; 3rd arg, num. of chars to print
    syscall

    ;; Terminate process
    mov     rax,    60              ; Syscall code in rax
    mov     rdi,    0               ; First parameter in rdi
    syscall                         ; End process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:20.61,words:6183},y:"a",title:"第三讲：数字表示"},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture3-register-numeric-representations","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture3-register-numeric-representations.md"]],["v-4ab9f3e6","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture4-twos-complement-arithmetic-instructions.html",{d:"2024-02-29T05:33:27.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>汇编语言</li>
</ul>
<hr>
<h1> 第四讲：算术运算和简单函数</h1>
<p>今天我们将介绍：</p>
<ul>
<li>负值的二进制表示。</li>
<li>多字节数字的内存表示。</li>
<li>专用寄存器 <code>rip</code>、<code>rflags</code> 和其他一些寄存器。</li>
<li>算术指令<code>add</code>、<code>sub</code>、<code>inc</code>、<code>dec</code>。</li>
<li>算术指令对对标志寄存器 rflags 的影响。</li>
<li>我们将简要了解无符号乘法/除法/模指令 mul 和 div。</li>
<li>函数指令call和ret</li>
</ul>`,r:{minutes:10.24,words:3072},y:"a",title:"第四讲：算术运算和简单函数"},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture4-twos-complement-arithmetic-instructions","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture4-twos-complement-arithmetic-instructions.md"]],["v-0a0aeea4","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture5-branch.html",{d:"2024-02-26T05:11:56.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>汇编语言</li>
</ul>
<hr>
<h1> 第五讲：</h1>
<h2> 函数 分支 和 条件指令</h2>
<ul>
<li>分支（也称为跳转、goto 语句等）跳转到程序中的新位置</li>
<li>比较比较两个操作数，然后适当地设置标志寄存器。只有一条比较指令，它执行所有可能的比较（等于、小于、等于零等）</li>
<li>条件分支通常执行分支或继续执行下一条指令，具体取决于其中一个标志的状态（之前通过比较操作设置）。</li>
<li>条件移动是否执行移动取决于标志之一的状态。</li>
</ul>
<p>函数调用和返回只是操作堆栈的分支的特殊形式。</p>`,r:{minutes:1.8,words:539},y:"a",title:"第五讲："},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture5-branch","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture5-branch.md"]],["v-5bc2b0c3","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture6-calling-c-functions.html",{d:"2024-02-26T05:11:56.000Z",e:`<h2> 函数调用规约</h2>
<p>回顾一下，当我们调用一个函数时，我们必须选择一些寄存器用于参数，至少一个用于返回值，一些寄存器用于调用者保存（可供函数临时使用），一些寄存器用于被调用者已保存。我们对这些函数的选择是为了与标准 Unix C ABI 调用约定保持一致，因此，通过更多的工作，我们的函数将与 C 标准库兼容。、</p>
<p>调用函数的一般流程是这样的</p>
<div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>...
    push r10        ; Push any caller-saved registers in use
    call func   
    pop r10         ; Restore after return
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.72,words:217},y:"a",title:""},["/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture6-calling-c-functions","/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture6-calling-c-functions.md"]],["v-250d4089","/posts/Program_language/cpp/cpp-template/cpp_SFINAE.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],e:`<h1> C++模板之SFINAE</h1>
<h2> 概念</h2>
<p><strong>SFINAE</strong>是<strong>Substitution Failure Is Not An Error</strong>的缩写，翻译过来的意思是替换失败并不是一个错误。</p>
<p><strong>SFINAE</strong>是<strong>模板元编程</strong>中常见的一种技巧，如果模板实例化后的某个模板函数（模板类）对该调用无效，那么将继续寻找其他重载决议，而不是引发一个编译错误。</p>
<p>因此一句话概括SFINAE，就是模板匹配过程中会尝试各个模板，直到所有模板都匹配失败，才会认为是真正的错误。</p>`,r:{minutes:2.12,words:636},y:"a",title:"C++模板之SFINAE"},["/posts/Program_language/cpp/cpp-template/cpp_SFINAE","/posts/Program_language/cpp/cpp-template/cpp_SFINAE.md"]],["v-38f5dc4c","/posts/Program_language/cpp/cpp-template/cpp_T_T__t__.html",{d:"2024-02-27T08:12:39.000Z",e:`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">Toy</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Toy</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">Toy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> name_<span class="token punctuation">;</span>
        name_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">Toy</span><span class="token punctuation">(</span>Toy <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Toy(Toy &amp;t)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        name_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>name_<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>name_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">Toy</span><span class="token punctuation">(</span>Toy<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Toy(Toy &amp;&amp;t)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"move constrctor"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        name_ <span class="token operator">=</span> t<span class="token punctuation">.</span>name_<span class="token punctuation">;</span>
        t<span class="token punctuation">.</span>name_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Toy<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Toy <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Toy(Toy &amp;t)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>name_<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>name_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Toy<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Toy <span class="token operator">&amp;&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Toy&amp; operator=(Toy &amp;&amp;t)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        name_ <span class="token operator">=</span> t<span class="token punctuation">.</span>name_<span class="token punctuation">;</span>
        t<span class="token punctuation">.</span>name_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">char</span><span class="token operator">*</span> name_<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>Toy t<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Toy <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"baby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.2,words:360},y:"a",title:""},["/posts/Program_language/cpp/cpp-template/cpp_T_T__t__","/posts/Program_language/cpp/cpp-template/cpp_T_T&_t&&.html","/posts/Program_language/cpp/cpp-template/cpp_T_T&_t&&.md"]],["v-63709ed8","/posts/Program_language/cpp/cpp-template/cpp_enable_if.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> enable_if</h1>
<p>C++11中引入了<code>std::enable_if</code>，函数原型如下:</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">bool</span> B<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">enable_if</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.44,words:432},y:"a",title:"enable_if"},["/posts/Program_language/cpp/cpp-template/cpp_enable_if","/posts/Program_language/cpp/cpp-template/cpp_enable_if.md"]],["v-9c64b522","/posts/Program_language/cpp/cpp-template/cpp_if_constexpr.html",{d:"2024-02-27T08:12:39.000Z",e:`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">input_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">output_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">forward_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">input_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">bidirectional_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">forward_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">random_access_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">bidirectional_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">advance_dispatch_bid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span>

<span class="token comment">// advance 的 random_access_iterator_tag 的版本</span>
<span class="token keyword">void</span> <span class="token function">advance_dispatch_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Type</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">advance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
     <span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> random_access_iterator_tag<span class="token operator">&gt;</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token function">advance_dispatch_random</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token function">advance_dispatch_bid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token generic-function"><span class="token function">advance</span><span class="token generic class-name"><span class="token operator">&lt;</span>random_access_iterator_tag<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.16,words:49},y:"a",title:""},["/posts/Program_language/cpp/cpp-template/cpp_if_constexpr","/posts/Program_language/cpp/cpp-template/cpp_if_constexpr.md"]],["v-b8ccb92a","/posts/Program_language/cpp/cpp20/cpp_cpp20_atomic_wait.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> c++20实用小特性之原子变量的wait/signal</h1>
<blockquote>
<p>These functions are guaranteed to return only if value has changed, even if the underlying implementation unblocks spuriously.</p>
</blockquote>
<p>仅当值发生更改时，这些函数才保证返回，即使底层实现虚假地解除阻塞</p>
<p>也就是说原子变量的wait在应用层可以确保不会虚假唤醒， 这就可以避免条件变量那样的循环测试条件。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;future&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>literals<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> all_tasks_completed<span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">&gt;</span> completion_count<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> task_futures<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">&gt;</span> outstanding_task_count<span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Spawn several tasks which take different amounts of</span>
    <span class="token comment">// time, then decrement the outstanding task count.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> task_future <span class="token operator">:</span> task_futures<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        task_future <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// This sleep represents doing real work...</span>
            std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span><span class="token number">2000</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token operator">++</span>completion_count<span class="token punctuation">;</span>
            <span class="token operator">--</span>outstanding_task_count<span class="token punctuation">;</span>

            <span class="token comment">// When the task count falls to zero, notify</span>
            <span class="token comment">// the waiter (main thread in this case).</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>outstanding_task_count<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                all_tasks_completed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                all_tasks_completed<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    all_tasks_completed<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tasks completed = "</span> <span class="token operator">&lt;&lt;</span> completion_count<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\\n'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.8,words:239},y:"a",title:"c++20实用小特性之原子变量的wait/signal"},["/posts/Program_language/cpp/cpp20/cpp_cpp20_atomic_wait","/posts/Program_language/cpp/cpp20/cpp_cpp20_atomic_wait.md"]],["v-dd28cada","/posts/Program_language/cpp/cpp20/cpp_cpp20_concepts.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> c++20 concepts</h1>
<p>concepts在c++20中被引入，其作用是对模板参数进行约束，极大地增强了c++模板的功能。</p>
<p>在c++20之前，如果希望获取类似的效果，使用起来并不方便。</p>
<h2> 没有concept时，如何实现对模板参数进行约束？</h2>
<h3> static_assert</h3>
<p>我们可以使用static_assert去对模板类型T进行约束。如下所示：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">is_integral</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T is integral"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">test</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.44,words:1333},y:"a",title:"c++20 concepts"},["/posts/Program_language/cpp/cpp20/cpp_cpp20_concepts","/posts/Program_language/cpp/cpp20/cpp_cpp20_concepts.md"]],["v-26a743bc","/posts/Program_language/cpp/cpp20/cpp_cpp20_coroutine.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> c++20 coroutine</h1>
<p>在c++20中，千呼万唤的协程终于来了，本文将对c++20的协程进行讲解，了解其使用方法。</p>
<h2> 简介</h2>
<p>c++20的协程是<strong>无栈协程</strong>，通俗讲其是一种可以支持暂停和恢复运行的函数。</p>
<p>为此c++20新引入了3个关键字， co_await，co_yield和co_return，定义包含了上述三个关键字之一的函数是协程。</p>
<p><strong>co_await</strong> 表达式——用于暂停执行，直到恢复：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>task<span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token function">tcp_echo_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>size_t n <span class="token operator">=</span> <span class="token keyword">co_await</span> socket<span class="token punctuation">.</span><span class="token function">async_read_some</span><span class="token punctuation">(</span><span class="token function">buffer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">co_await</span> <span class="token function">async_write</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token function">buffer</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.57,words:2271},y:"a",title:"c++20 coroutine"},["/posts/Program_language/cpp/cpp20/cpp_cpp20_coroutine","/posts/Program_language/cpp/cpp20/cpp_cpp20_coroutine.md"]],["v-1d55d840","/posts/Program_language/cpp/cpp20/cpp_cpp20_jthread.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> c++20 jthread</h1>
<p>jthread是c++20所支持的新的线程类型，jthread = joinable thread, 即可以自动join的线程。我们知道在c++11之后，c++标准库开始支持多线程编程，那么thread和jthread之间有何区别，本文将进行重点讲解。</p>
<h2> c++11 thread</h2>
<p>c++11中thread对象如果在销毁之前处于可join的状态，却没有join的话，将会引发一个异常， 例如下面的例子：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha<span class="token punctuation">;</span>
    
    std<span class="token double-colon punctuation">::</span>thread thr<span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Joinable std::thread"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"thr.joinable(): "</span> <span class="token operator">&lt;&lt;</span> thr<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.52,words:1356},y:"a",title:"c++20 jthread"},["/posts/Program_language/cpp/cpp20/cpp_cpp20_jthread","/posts/Program_language/cpp/cpp20/cpp_cpp20_jthread.md"]],["v-3cd1f112","/posts/Program_language/cpp/cpp20/cpp_cpp20_module.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> c++20 module的理解</h1>
<p>在c++20之前，在一个模块中(.cpp)想要获取别的模块的声明， 就需要使用<code>#include</code>去包含其他模块的头文件。 c++20引入了module关键字，使得c++拥有了类似于java和python的包管理机制，本文就来讲解一下module这个语法糖。</p>
<h2> include头文件与module方式的对比</h2>
<p><code>#include</code>头文件有下面这些负面影响：</p>
<ul>
<li>低效：头文件的本职工作是提供前置声明，而提供前置声明的方式采用了文本拷贝，文本拷贝过程不带有语法分析，会一股脑将需要的、不需要的声明全部拷贝到源文件中。</li>
<li>传递性：最底层的头文件中宏、变量等实体的可见性，可以通过中间头文件“透传”给最上层的头文件，这种透传会带来很多麻烦。</li>
<li>降低编译速度：加入 a.h 被三个模块包含，则 a 会被展开三次、编译三次。</li>
<li>顺序相关：程序的行为受头文件的包含顺影响，也受是否包含某一个头文件影响，在 C++ 中尤为严重（重载）。</li>
<li>不确定性：同一个头文件在不同的源文件中可能表现出不同的行为，导致这些不同的原因，可能源自源文件（比如该源文件包含的其他头文件、该源文件中定义的宏等），也可能源自编译选项。</li>
</ul>`,r:{minutes:7.38,words:2214},y:"a",title:"c++20 module的理解"},["/posts/Program_language/cpp/cpp20/cpp_cpp20_module","/posts/Program_language/cpp/cpp20/cpp_cpp20_module.md"]],["v-50fccc12","/posts/Program_language/cpp/cpp20/cpp_cpp20_range.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> c++20 ranges</h1>
<p>c++20四大特性为coroutine， module，concept和range。本文将对range进行探索。</p>
<h2> 什么是range</h2>
<p>首先看看range的定义， range其实是一个concept，concept用于对模板的参数进行一定的约束，而range的约束就是要求<code>ranges::begin(t)</code>和<code>ranges::end(t)</code>可以被正常的解析。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">&gt;</span>
<span class="token keyword">concept</span> <span class="token class-name">range</span> <span class="token operator">=</span> <span class="token keyword">requires</span><span class="token punctuation">(</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ranges<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// equality-preserving for forward iterators</span>
    ranges<span class="token double-colon punctuation">::</span><span class="token function">end</span>  <span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.29,words:1286},y:"a",title:"c++20 ranges"},["/posts/Program_language/cpp/cpp20/cpp_cpp20_range","/posts/Program_language/cpp/cpp20/cpp_cpp20_range.md"]],["v-f44eddd4","/posts/Program_language/cpp/cpp20/cpp_cpp20_small_feature.html",{d:"2024-02-27T08:12:39.000Z",c:["C++"],g:["C++"],e:`<h1> c++20的新增的小的特性</h1>
<p>c++20新增的特性非常多，其中concept，coroutine，module和range为四大特性，在之前的章节中已有涉及，本文则对其他的一些小改动进行讲解。</p>
<ul>
<li><a href="#c20%E7%9A%84%E6%96%B0%E5%A2%9E%E7%9A%84%E5%B0%8F%E7%9A%84%E7%89%B9%E6%80%A7">c++20的新增的小的特性</a>
<ul>
<li><a href="#stdformat">std::format</a></li>
<li><a href="#calendar">Calendar</a></li>
<li><a href="#timezone">timezone</a></li>
<li><a href="#stdsource_location">std::source_location</a></li>
<li><a href="#stdspan">std::span</a></li>
<li><a href="#%E8%88%AA%E5%A4%A9%E9%A3%9E%E6%9C%BA%E8%BF%90%E7%AE%97%E7%AC%A6-">航天飞机运算符 &lt;=&gt;</a></li>
<li><a href="#stdendian%E5%88%A4%E6%96%AD%E5%A4%A7%E5%B0%8F%E7%AB%AF">std::endian判断大小端</a></li>
<li><a href="#stdremove_cvref">std::remove_cvref</a></li>
<li><a href="#bind_front">bind_front</a></li>
<li><a href="#stdatomic_ref">std::atomic_ref</a></li>
<li><a href="#stdmapkeytcompareallocatorcontains"><code>std::map&lt;Key,T,Compare,Allocator&gt;::contains</code></a></li>
<li><a href="#stdbarrier">std::barrier</a></li>
<li><a href="#stdlatch%E9%94%81%E5%AD%98%E5%99%A8">std::latch锁存器</a></li>
<li><a href="#stdcounting_semaphore">std::counting_semaphore</a></li>
<li><a href="#stringstarts_with--ends_with">string::starts_with / ends_with</a></li>
<li><a href="#stdsize">std::size</a></li>
<li><a href="#stdis_bounded_array_v%E5%92%8Cstdis_unbounded_array">std::is_bounded_array_v和std::is_unbounded_array</a></li>
<li><a href="#stderase_if">std::erase_if</a></li>
<li><a href="#mathematical-constants">Mathematical constants</a></li>
<li><a href="#stdmidpoint">std::midpoint</a></li>
<li><a href="#stdlerp">std::lerp</a></li>
</ul>
</li>
</ul>`,r:{minutes:8.02,words:2406},y:"a",title:"c++20的新增的小的特性"},["/posts/Program_language/cpp/cpp20/cpp_cpp20_small_feature","/posts/Program_language/cpp/cpp20/cpp_cpp20_small_feature.md"]],["v-0d78042d","/posts/Program_language/cpp/effective-STL/effective-STL-1.html",{d:"2023-05-30T02:59:02.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-1 仔细选择你的容器</h1>
<p>标准STL序列容器：vector, string, deque, list;
标准STL关联容器：set, multiset, map, multimap;
非标准序列容器:  slist(单向链表)， rope(重型字符串)；
非标准关联容器hash_set, hash_multiset, hash_map, hash_multimap；
<code>vector&lt;char&gt;</code>可以作为string的替代品；
vector作为标准关联容器的替代品；
几种标准非STL容器：数组、bitset、valarray、stakc、queue、priority_queue；
vectors是一种可以默认使用的序列类型；
频繁的对序列中部进行插入、删除时应该用list；
大部分插入和删除发生在序列的头或尾时可用选择deque；</p>`,r:{minutes:2.68,words:805},y:"a",title:"effective STL-1 仔细选择你的容器"},["/posts/Program_language/cpp/effective-STL/effective-STL-1","/posts/Program_language/cpp/effective-STL/effective-STL-1.md"]],["v-b5b591da","/posts/Program_language/cpp/effective-STL/effective-STL-12.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-12 对STL容器的线程安全性的期待现实一些</h1>
<p>STL并不是线程安全的，因此需要使用者自己去做保证。</p>
`,r:{minutes:.17,words:52},y:"a",title:"effective STL-12 对STL容器的线程安全性的期待现实一些"},["/posts/Program_language/cpp/effective-STL/effective-STL-12","/posts/Program_language/cpp/effective-STL/effective-STL-12.md"]],["v-a4a51ba4","/posts/Program_language/cpp/effective-STL/effective-STL-17.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-17 使用交换技巧来修整过剩容量</h1>
<p>这个是一个STL的使用技巧。当一个容器需要收缩尺寸的时候，可以使用本文中的方法。</p>
<p>这在对内存有较高要求的场景下，非常有效。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
	vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这时强制把vec设置为容量是1000</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//经过循环vec只真正用了10个int内存，还剩990int内存</span>
	<span class="token punctuation">{</span>
		vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修剪vec的容量，使其释放多余的内存容量，尽可能保持最小容量</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果将容器的空间减少到0</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.93,words:280},y:"a",title:"effective STL-17 使用交换技巧来修整过剩容量"},["/posts/Program_language/cpp/effective-STL/effective-STL-17","/posts/Program_language/cpp/effective-STL/effective-STL-17.md"]],["v-0f2cdccc","/posts/Program_language/cpp/effective-STL/effective-STL-2.html",{d:"2023-06-01T03:03:25.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-02 小心对"容器无关代码"的幻想</h1>
<p>STL是建立在泛化的基础上的。</p>
<ul>
<li>数组泛化为容器，参数泛化所包含对象的类型。</li>
<li>函数泛化为算法，参数泛化所用的迭代器类型。</li>
<li>指针泛化为迭代器，参数泛化所指向的对象的类型。</li>
</ul>
<p>不同容器是不同的，优点和缺点大不相同，不要去对它们做包装</p>
<ul>
<li>序列容器支持push_front、push_back，但关联容器不支持</li>
<li>关联容器提供logN复杂度的lower_bound、upper_bound和equal_range，（N叉树）</li>
<li>不同的容器是不同的，优缺点有重大不同。它们不被设计成可互换的，而且你做不了什么包装的工作</li>
</ul>`,r:{minutes:1.65,words:496},y:"a",title:'effective STL-02 小心对"容器无关代码"的幻想'},["/posts/Program_language/cpp/effective-STL/effective-STL-2","/posts/Program_language/cpp/effective-STL/effective-STL-2.md"]],["v-10e1b56b","/posts/Program_language/cpp/effective-STL/effective-STL-3.html",{d:"2023-06-02T02:19:44.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-03 使容器里对象的拷贝操作轻量而正确</h1>
<p>STL里的容器，所有的操作，都是基于拷贝的，插入，读取，删除(导致移动)</p>
<p>分割问题表明把派生类对象插入基类对象的容器几乎总是错的</p>
<p>解决办法是是建立智能指针的容器，拷贝指针很快</p>
`,r:{minutes:.35,words:104},y:"a",title:"effective STL-03 使容器里对象的拷贝操作轻量而正确"},["/posts/Program_language/cpp/effective-STL/effective-STL-3","/posts/Program_language/cpp/effective-STL/effective-STL-3.md"]],["v-12968e0a","/posts/Program_language/cpp/effective-STL/effective-STL-4.html",{d:"2023-06-01T03:03:25.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-04 用empty来代替检查size()是否为0</h1>
<p>事实上empty的典型实现是一个返回size是否返回0的内联函数，对所有的标准容器</p>
<ul>
<li>
<p>empty()总是常数时间(因为只检查有没有)</p>
</li>
<li>
<p>size()不一定是常数时间(可能需要遍历所有的成员比如list)</p>
</li>
</ul>
<p>参考文章：</p>
<p><a href="https://www.cnblogs.com/yan1345/p/Note_of_Effective_STL.html#02-%E5%B0%8F%E5%BF%83%E5%AF%B9%E5%AE%B9%E5%99%A8%E6%97%A0%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B9%BB%E6%83%B3" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/yan1345/p/Note_of_Effective_STL.html#02-小心对容器无关代码的幻想</a></p>`,r:{minutes:.47,words:142},y:"a",title:"effective STL-04 用empty来代替检查size()是否为0"},["/posts/Program_language/cpp/effective-STL/effective-STL-4","/posts/Program_language/cpp/effective-STL/effective-STL-4.md"]],["v-42231037","/posts/Program_language/cpp/effective-STL/effective-STL-41.html",{d:"2023-05-30T02:56:45.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因</h1>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">AddObj</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">AddObj</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a_</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b_</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a + b = "</span> <span class="token operator">&lt;&lt;</span>  a_ <span class="token operator">+</span> b_  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a_<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b_<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>AddObj<span class="token operator">&gt;</span>  addObjVec<span class="token punctuation">{</span>  <span class="token punctuation">{</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token punctuation">{</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token punctuation">{</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token punctuation">{</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token punctuation">{</span><span class="token number">7</span> <span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
                            <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">for_each</span><span class="token punctuation">(</span>addObjVec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addObjVec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">mem_fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>AddObj<span class="token double-colon punctuation">::</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.62,words:185},y:"a",title:"effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因"},["/posts/Program_language/cpp/effective-STL/effective-STL-41","/posts/Program_language/cpp/effective-STL/effective-STL-41.md"]],["v-43d7e8d6","/posts/Program_language/cpp/effective-STL/effective-STL-42.html",{d:"2023-05-29T07:36:22.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-42 确保<code>less&lt;T&gt;</code>和operator&lt;具有相同的语义</h1>
<h2> 分析</h2>
<p>下面有一个类，其有重量和速度两个属性，在<code>operator&lt;</code>中是对weight大小进行比较的。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Widget</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    size_t <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    size_t <span class="token function">maxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> w<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> w<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是按照重量从小到大排序</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.49,words:448},y:"a",title:"effective STL-42 确保less<T>和operator<具有相同的语义"},["/posts/Program_language/cpp/effective-STL/effective-STL-42","/posts/Program_language/cpp/effective-STL/effective-STL-42.md"]],["v-458cc175","/posts/Program_language/cpp/effective-STL/effective-STL-43.html",{d:"2023-06-01T03:03:25.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-43 尽量用算法调用代替手写循环</h1>
<ul>
<li>很多要用循环来实现的任务可以改用算法来实现，算法内部也包含一个循环</li>
<li>使用算法有三个原因：高效、正确、可维护（直观易读）</li>
</ul>
`,r:{minutes:.26,words:78},y:"a",title:"effective STL-43 尽量用算法调用代替手写循环"},["/posts/Program_language/cpp/effective-STL/effective-STL-43","/posts/Program_language/cpp/effective-STL/effective-STL-43.md"]],["v-47419a14","/posts/Program_language/cpp/effective-STL/effective-STL-44.html",{d:"2023-09-17T12:07:20.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-44 尽量用成员函数替代同名的算法</h1>
`,r:{minutes:.09,words:27},y:"a",title:"effective STL-44 尽量用成员函数替代同名的算法"},["/posts/Program_language/cpp/effective-STL/effective-STL-44","/posts/Program_language/cpp/effective-STL/effective-STL-44.md"]],["v-4e14fc90","/posts/Program_language/cpp/effective-STL/effective-STL-48.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-48 总是include适当的头文件</h1>
<p>有的时候即使漏掉了必要的头文件，程序同样可以编译，这是因为C++标准并没有规定标准库中头文件之间的相互包含关系。这就导致了某个头文件可能会包含其他头文件。</p>
<p>例如，A平台的STL版本中<code>&lt;vector&gt;</code>可能包含了<code>&lt;string&gt;</code>,那么下面的代码在A平台就是可以编译通过的。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.25,words:376},y:"a",title:"effective STL-48 总是include适当的头文件"},["/posts/Program_language/cpp/effective-STL/effective-STL-48","/posts/Program_language/cpp/effective-STL/effective-STL-48.md"]],["v-144b66a9","/posts/Program_language/cpp/effective-STL/effective-STL-5.html",{d:"2023-06-05T03:02:19.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-05 用区间成员函数代替单元素操作</h1>
<p>区间成员函数：</p>
<p>区间构造： container::container</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v2</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.26,words:79},y:"a",title:"effective STL-05 用区间成员函数代替单元素操作"},["/posts/Program_language/cpp/effective-STL/effective-STL-5","/posts/Program_language/cpp/effective-STL/effective-STL-5.md"]],["v-16003f48","/posts/Program_language/cpp/effective-STL/effective-STL-6.html",{d:"2023-06-06T02:04:02.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-06 警惕C++最令人恼怒的解析</h1>
<p>假设有一个int文件，将这些int拷贝到一个list中</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ifstream <span class="token function">dataFile</span><span class="token punctuation">(</span><span class="token string">"ints.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">istream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>dataFile<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">istream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//list&lt;int&gt; 是类型，声明名为data的函数</span>
<span class="token comment">//不要在参数内递临时构建对象再来传入，而是先构建，再传入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.52,words:155},y:"a",title:"effective STL-06 警惕C++最令人恼怒的解析"},["/posts/Program_language/cpp/effective-STL/effective-STL-6","/posts/Program_language/cpp/effective-STL/effective-STL-6.md"]],["v-17b517e7","/posts/Program_language/cpp/effective-STL/effective-STL-7.html",{d:"2023-05-31T02:38:48.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-7 当使用new的指针的容器时,记得在销毁容器前delete那些指针</h1>
<p>条款7：当使用new得指针的容器时，记得在销毁容器前delete那些指针
STL中的容器非常优秀。它们提供了前向和逆向遍历的迭代器（通过begin、end、rbegin等）；它们能告诉你所容纳的对象类型（通过value_type的typedef）；在插入和删除中，它们负责任何需要的内存管理；它们报告容纳了多少对象和最多可能容纳的数量（分别通过size和max_size）；而且当然当容器自己被销毁时会自动销毁容纳的每个对象。</p>
<p>给了这样聪明的容器，很多程序员不再担心用完以后的清除工作。呵呵，他们说，他们的容器会帮他们解决那个麻烦。在很多情况下，他们是对的，但当容器容纳的是指向通过new分配的对象的指针时，他们就错了。的确，当一个指针的容器被销毁时，会销毁它（那个容器）包含的每个元素，但指针的“析构函数”是无操作！它肯定不会调用delete。</p>`,r:{minutes:6.75,words:2024},y:"a",title:"effective STL-7 当使用new的指针的容器时,记得在销毁容器前delete那些指针"},["/posts/Program_language/cpp/effective-STL/effective-STL-7","/posts/Program_language/cpp/effective-STL/effective-STL-7.md"]],["v-1969f086","/posts/Program_language/cpp/effective-STL/effective-STL-8.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective STL读书笔记"],e:`<h1> effective STL-8 永不建立auto_ptr的容器。</h1>
<p>auto_ptr是deprecated的了。因此本条款可以不用看了。</p>
`,r:{minutes:.12,words:37},y:"a",title:"effective STL-8 永不建立auto_ptr的容器。"},["/posts/Program_language/cpp/effective-STL/effective-STL-8","/posts/Program_language/cpp/effective-STL/effective-STL-8.md"]],["v-068e46e5","/posts/Program_language/cpp/effective-cpp/",{d:"2023-05-18T02:05:46.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++系列</h1>
<h2> 章节</h2>
<p><a href="https://zgjsxx.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-01.html" target="_blank" rel="noopener noreferrer">01-视c++为一个语言联邦</a></p>
<p><a href="https://zgjsxx.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-02.html" target="_blank" rel="noopener noreferrer">02-尽量以 const，enum，inline 替换 #define</a></p>`,r:{minutes:4.08,words:1224},y:"a",title:"effective c++系列"},["/posts/Program_language/cpp/effective-cpp/index.html","/posts/Program_language/cpp/effective-cpp/Readme.md"]],["v-deb16f3a","/posts/Program_language/cpp/effective-cpp/effective-cpp-01.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 01-视c++为一个语言联邦</h1>
<p>这一节主要解释了c++可以分为哪些模块去学习。c++拥有非常多的特性，因此学习c++是一个过程。</p>
<p>这一节就是一个大纲，直接看总结。</p>
<h2> 总结</h2>
<p>c++主要分为如下四大块：</p>
<ul>
<li>c</li>
<li>面向对象部分</li>
<li>模板</li>
<li>STL</li>
</ul>
`,r:{minutes:.32,words:97},y:"a",title:"effective c++ 01-视c++为一个语言联邦"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-01","/posts/Program_language/cpp/effective-cpp/effective-cpp-01.md"]],["v-db47bdfc","/posts/Program_language/cpp/effective-cpp/effective-cpp-02.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 02-尽量以 const，enum，inline 替换 #define</h1>
<p>题干中使用了<strong>尽量</strong>二字，说明<code>#define</code>并非一无是处，只不过<code>#define</code>对开发者使用上要求较高，用不好的话出现问题，查错调试的成本较大。</p>
<p>这里主要从两个角度阐述如何替代define：</p>
<ul>
<li>如何替代define定义常量？</li>
<li>如何替代define定义宏函数？</li>
</ul>
<h2> 如何替代define定义常量</h2>
<p>对于<code>#define</code>定义一个常量ASPECT_RATIO，</p>`,r:{minutes:1.72,words:516},y:"a",title:"effective c++ 02-尽量以 const，enum，inline 替换 #define"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-02","/posts/Program_language/cpp/effective-cpp/effective-cpp-02.md"]],["v-d7de0cbe","/posts/Program_language/cpp/effective-cpp/effective-cpp-03.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 03 尽可能使用const</h1>
<p>在本节中，作者建议我们要尽可能使用const， 这样可以尽可能在编译期暴露一些问题。</p>
<h2> 分析</h2>
<h3> 在可以使用const的地方尽量使用const，可以避免很多错误</h3>
<p>const可被用在下面的场景：</p>
<ul>
<li>任何作用域的对象</li>
<li>函数参数</li>
<li>函数返回值类型</li>
<li>成员函数本体</li>
</ul>
<h3> 如果在const函数内部需要修改成员变量， 则需要使用mutable</h3>
<p>编译器通常是bitwise constness，即const成员函数内不能修改任何一个bit。然而现实中，有时候我们需要logical constness,即一个const成员函数可以修改它所处理的对象内的某些bits。 这个时候就需要使用mutable。</p>`,r:{minutes:2.08,words:625},y:"a",title:"effective c++ 03 尽可能使用const"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-03","/posts/Program_language/cpp/effective-cpp/effective-cpp-03.md"]],["v-d4745b80","/posts/Program_language/cpp/effective-cpp/effective-cpp-04.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 04 确定对象被使用前已被初始化</h1>
<p>在本节中，作者主要强调了对象使用前一定要进行显式的初始化。其中要区分构造函数中的赋值和初始化。另外跨编译模块的初始化问题需要引起注意(通常可以使用单例模式解决)。</p>
<h2> 分析</h2>
<h3> 使用成员变量初始化列表进行初始化</h3>
<p>在构造函数中，下面的形式是赋值:</p>
<div class="language-CPP line-numbers-mode" data-ext="CPP"><pre class="language-CPP"><code>//01. Assignments
ABEntry::ABEntry(const std::string&amp; name, const std::string&amp; address, const std::list&lt;PhoneNumber&gt;&amp; phones)
{
	// these are all assignments.
	theName = name;
	theAddress = address;
	thePhones = phones;
	numTimesConsulted = 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.51,words:453},y:"a",title:"effective c++ 04 确定对象被使用前已被初始化"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-04","/posts/Program_language/cpp/effective-cpp/effective-cpp-04.md"]],["v-d10aaa42","/posts/Program_language/cpp/effective-cpp/effective-cpp-05.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 05 了解c++默默编写并调用哪些函数</h1>
<h2> 分析</h2>
<p>c++会一个类默认编写一些函数， 下面是一个例子：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Empty</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">Empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> Empty<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token operator">~</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	Empty<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Empty<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.42,words:127},y:"a",title:"effective c++ 05 了解c++默默编写并调用哪些函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-05","/posts/Program_language/cpp/effective-cpp/effective-cpp-05.md"]],["v-cda0f904","/posts/Program_language/cpp/effective-cpp/effective-cpp-06.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 06 不自动生成的函数，就明确拒绝</h1>
<p>在item-5中提到了，c++会为我们所定义的类创建一些默认的方法。大多数时候，这可以让我们少敲一些键盘，让我们避免得腱鞘炎。然而有的时候我们却不需要某些自动创建的方法，这个时候我们就需要显式的拒绝。</p>
<h2> 分析</h2>
<p>本文阐述了两种方法，在更新的c++标准中，还拥有=delete这样的声明方法，可以在effective modern c++中进行了解。</p>
<h3> 方法1:将成员函数声明为private并不予实现</h3>
<p>下面是一个例子，这个例子如果进行赋值编译将不会通过。</p>`,r:{minutes:1.05,words:316},y:"a",title:"effective c++ 06 不自动生成的函数，就明确拒绝"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-06","/posts/Program_language/cpp/effective-cpp/effective-cpp-06.md"]],["v-ca3747c6","/posts/Program_language/cpp/effective-cpp/effective-cpp-07.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 07 为多态基类声明virtual析构函数</h1>
<p>本章节主要讲解了c++中涉及多态时的一个很容易犯错误的点。也是面试题常问的点。</p>
<h2> 分析</h2>
<p>涉及多态时，Base类需要在析构函数上需要加上virtual。</p>
<p>首先我们看一个例子，这个例子中基类的析构函数没有加上virtual。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Base"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Derived"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">{</span>
		Base<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">delete</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">{</span>
		Derived<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">delete</span> b<span class="token punctuation">;</span>		
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.36,words:407},y:"a",title:"effective c++ 07 为多态基类声明virtual析构函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-07","/posts/Program_language/cpp/effective-cpp/effective-cpp-07.md"]],["v-c6cd9688","/posts/Program_language/cpp/effective-cpp/effective-cpp-08.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 08 别让异常逃离析构函数</h1>
<p>本文主要讲解了在日常编码中需要注意的一个原则，即在类的析构函数中不要抛出异常。因为类的析构函数的作用是对对象的资源
进行释放。而一旦在析构函数中抛出了异常，那么某些资源就可能无法正常释放。</p>
<h2> 分析</h2>
<p>作者使用的例子是一个数据库连接的例子。如下所示， DBConnection是一个数据库连接的类，create方法可以创建一个连接， 而close方法就用于关闭该连接，但是关闭过程中可会失败，这个时候就会抛出异常。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">DBConnection</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token comment">// Function to return DBConnection objects.</span>
	<span class="token keyword">static</span> DBConnection <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">static</span> DBConnection db<span class="token punctuation">;</span>
		<span class="token keyword">return</span> db<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Close connection; throw an exception if closing fails.</span>
	<span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.5,words:750},y:"a",title:"effective c++ 08 别让异常逃离析构函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-08","/posts/Program_language/cpp/effective-cpp/effective-cpp-08.md"]],["v-c363e54a","/posts/Program_language/cpp/effective-cpp/effective-cpp-09.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 09 绝不要在构造和析构过程中调用virtual函数</h1>
<p>本文主要介绍的是一个误区，即在基类的构造函数中调用虚函数，该调用不会下降到派生类中的虚函数中执行。</p>
<h2> 分析</h2>
<p>看下面的一个例子，我们在main函数中创建了Derived对象， 该对象会首先调用Base类的构造函数去初始化基类的成分。在Base类的构造函数中，其调用了虚函数doSomething，试想我们最终会调用那个版本的doSomething？ <code>Base::doSomething</code>还是<code>Derived::doSomething</code>?</p>`,r:{minutes:1.65,words:495},y:"a",title:"effective c++ 09 绝不要在构造和析构过程中调用virtual函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-09","/posts/Program_language/cpp/effective-cpp/effective-cpp-09.md"]],["v-784ea9f6","/posts/Program_language/cpp/effective-cpp/effective-cpp-10.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 10 令operator= 返回一个reference to * this</h1>
<p>本章节也是作者的一个建议，并无强制性，不这样做并不会造成编译上的问题。</p>
<p>作者建议我们在operator=的运算符返回指向自身的引用，这样可以使用连等形式的运算。</p>
<h2> 分析</h2>
<p>看下面的一个例子，为了能让<code>w3 = w2 = w1</code>的表达式成立，我们需要在赋值运算符中返回<code>*this</code>。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Widget</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a_</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token comment">// Standard copy assignment operators.</span>
	Widget<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        a_ <span class="token operator">=</span> rhs<span class="token punctuation">.</span>a_<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Convention applies to +=, -=, *=, etc.</span>
	Widget<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        a_ <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>a_<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Applies even if operator's parameter is unconventional.</span>
	Widget<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> rhs<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        a_ <span class="token operator">+=</span> rhs<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a_<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Widget <span class="token function">w1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Widget w2<span class="token punctuation">;</span>
    Widget w3<span class="token punctuation">;</span>

    w3 <span class="token operator">=</span> w2 <span class="token operator">=</span> w1<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> w3<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> w2<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> w1<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.9,words:271},y:"a",title:"effective c++ 10 令operator= 返回一个reference to * this"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-10","/posts/Program_language/cpp/effective-cpp/effective-cpp-10.md"]],["v-74e4f8b8","/posts/Program_language/cpp/effective-cpp/effective-cpp-11.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 11 operator= 处理自我赋值</h1>
<p>我们知道复制构造函数和赋值运算符的区别是赋值构造函数用于创建一个新的对象，而赋值运算符用于给一个已经存在的对象重新赋值。</p>
<p>因此赋值运算符就可能存在把自己赋值给自己的情况，本节就是专门讨论这个场景的。</p>
<h2> 分析</h2>
<p>本文介绍了三种办法来处理这个问题，其实作者后续不仅仅讨论了自我赋值的问题，还讨论了赋值运算符的<strong>异常安全问题</strong>。</p>
<p>第一种方法比较简单，既然operator=可能存在自我赋值的场景，那么我们便在进入赋值运算符的函数内部首先做一个"证同测试"。如果是同一个对象，就直接返回。</p>`,r:{minutes:2.36,words:708},y:"a",title:"effective c++ 11 operator= 处理自我赋值"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-11","/posts/Program_language/cpp/effective-cpp/effective-cpp-11.md"]],["v-717b477a","/posts/Program_language/cpp/effective-cpp/effective-cpp-12.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 12 复制对象时勿忘其每一个成分</h1>
<p>本文也是主要讲解的是赋值构造函数需要复制应该复制的每一个成分，这里面最容易忘记<strong>复制的就是基类的成分</strong>。</p>
<h2> 分析</h2>
<p>本例主要强调在自定义复制构造函数和赋值运算符时一定要检查是否复制了所需要的元素。尤其是派生类中不能忘记复制基类的成分。</p>
<p>下面便是一个例子，其中的派生类中处理了复制基类的成分。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">b_</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Base<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> b_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">int</span> b_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token operator">:</span>
	<span class="token function">b_</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>b_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

Base<span class="token operator">&amp;</span> Base<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

	b_ <span class="token operator">=</span> rhs<span class="token punctuation">.</span>b_<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Derived</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">d_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Base</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token function">Derived</span><span class="token punctuation">(</span><span class="token keyword">const</span> Derived<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Derived<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Derived<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">printVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d_ = "</span> <span class="token operator">&lt;&lt;</span> d_ <span class="token operator">&lt;&lt;</span> <span class="token string">", b_ = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">int</span> d_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Derived</span><span class="token double-colon punctuation">::</span><span class="token function">Derived</span><span class="token punctuation">(</span><span class="token keyword">const</span> Derived<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">d_</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>d_<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Base</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

Derived<span class="token operator">&amp;</span> Derived<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Derived<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	d_ <span class="token operator">=</span> rhs<span class="token punctuation">.</span>d_<span class="token punctuation">;</span>
    Base<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Derived <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d1<span class="token punctuation">.</span><span class="token function">printVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Derived <span class="token function">d2</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    d2<span class="token punctuation">.</span><span class="token function">printVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Derived <span class="token function">d3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d3<span class="token punctuation">.</span><span class="token function">printVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d3 <span class="token operator">=</span> d1<span class="token punctuation">;</span>
    d3<span class="token punctuation">.</span><span class="token function">printVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.22,words:367},y:"a",title:"effective c++ 12 复制对象时勿忘其每一个成分"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-12","/posts/Program_language/cpp/effective-cpp/effective-cpp-12.md"]],["v-6e11963c","/posts/Program_language/cpp/effective-cpp/effective-cpp-13.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 13 以对象管理资源</h1>
<p>本章节主要讲解的就是C++中常用的一种设计模式RAII，使用对象进行管理资源，从而有效的防止资源泄露。</p>
<h2> 分析</h2>
<p>最典型的使用RAII的例子就是智能指针。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call ~A()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> ptrA <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> ptrA <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.73,words:218},y:"a",title:"effective c++ 13 以对象管理资源"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-13","/posts/Program_language/cpp/effective-cpp/effective-cpp-13.md"]],["v-6aa7e4fe","/posts/Program_language/cpp/effective-cpp/effective-cpp-14.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 14 资源管理类中小心copying行为</h1>
<p>本节还是继续讨论RAII这个设计模式。</p>
<h2> 分析</h2>
<p>上节中讨论了RAII设计模式，但是该模式其实是有一些需要关注的点。本节讨论的便是RAII类中的复制行为需要特别关注。</p>
<p>通常RAII类对于copy行为实行两种方法，<strong>抑制copy</strong>和<strong>施行引用计数</strong>。</p>
<p>例如像互斥锁的RAII类型， 我们是不愿意其被复制的。 如果可以被复制，就意味着互斥锁可能被unlock两次，这不是我们想要的。因此对于互斥锁这样的类型，通常将其copy构造函数和赋值运算符delete掉， 避免其复制行为。=delete的标记在item-06中有讨论过。</p>`,r:{minutes:1.27,words:380},y:"a",title:"effective c++ 14 资源管理类中小心copying行为"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-14","/posts/Program_language/cpp/effective-cpp/effective-cpp-14.md"]],["v-673e33c0","/posts/Program_language/cpp/effective-cpp/effective-cpp-15.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 15 在资源管理类中提供对原始资源的访问</h1>
<p>本章节继续讨论RAII类的注意点。作者建议对于RAII类，需要提供对于原始资源的访问。</p>
<p>在item-28中作者建议避免返回handles指向对象内部的成分，在item-28中就解释过，这一原则并不是绝对的。 本章节便是item-28的一个例外。</p>
<h2> 分析</h2>
<p>这里我们以shared_ptr为例， 其就为获取原始资源提供了get()方法。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call ~A()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> ptrA <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		
		A<span class="token operator">*</span> a <span class="token operator">=</span> ptrA<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.84,words:253},y:"a",title:"effective c++ 15 在资源管理类中提供对原始资源的访问"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-15","/posts/Program_language/cpp/effective-cpp/effective-cpp-15.md"]],["v-63d48282","/posts/Program_language/cpp/effective-cpp/effective-cpp-16.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 16 成对使用new和delete时采取相同形式</h1>
<p>这一节其实是面试题经常会问的一个话题。也很简单。我们直接通过例子来进行演示。</p>
<h2> 分析</h2>
<p>下面就是一个关于本节原则的一个演示。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call ~A()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">{</span>
		A<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> A<span class="token punctuation">;</span>
		<span class="token keyword">delete</span> a<span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token punctuation">{</span>
		A<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> A<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.57,words:171},y:"a",title:"effective c++ 16 成对使用new和delete时采取相同形式"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-16","/posts/Program_language/cpp/effective-cpp/effective-cpp-16.md"]],["v-606ad144","/posts/Program_language/cpp/effective-cpp/effective-cpp-17.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 17 独立语句将newed对象置入智能指针</h1>
<p>智能指针可以帮助用户更好的管理资源，避免资源泄露。但是如果使用不当，还是可能出现资源泄露。本文便是讲解了智能指针使用不当可能出现资源泄漏的一个场景。</p>
<h2> 分析</h2>
<p>考虑下面的函数：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">processWidget</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> Widget<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.93,words:278},y:"a",title:"effective c++ 17 独立语句将newed对象置入智能指针"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-17","/posts/Program_language/cpp/effective-cpp/effective-cpp-17.md"]],["v-5d012006","/posts/Program_language/cpp/effective-cpp/effective-cpp-18.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 18 让接口容易被正确使用， 不易被误用</h1>
<p>在本节中作者建议大家在写代码的时候要提供的接口需要拥有正确性和易用性。 写代码时你可能根据第一感觉就写出了一个接口，这个时候你可能需要再思考思考这个接口是否好用， 是否可能被误用。作者这里用了一些例子来说明如此写出好的接口。 实际工作中， 开发出好的接口远比本节讲的要复杂的多。 个人的理解就是你可以根据第一感觉写出接口， 但是建议再思考思考这样是不是最好的。 如果你的同事抱怨你的接口不好用， 这个时候你就更应该重新思考你的接口。</p>
<h2> 分析</h2>
<p>作者这里给了一个例子，设计了如下的一个日期的类。 乍一看好像没有啥问题， 哈哈。其实实际工作中大部分人都是这么干的。</p>`,r:{minutes:2.29,words:687},y:"a",title:"effective c++ 18 让接口容易被正确使用， 不易被误用"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-18","/posts/Program_language/cpp/effective-cpp/effective-cpp-18.md"]],["v-59976ec8","/posts/Program_language/cpp/effective-cpp/effective-cpp-19.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 19 设置class犹如设计type</h1>
<p>哎，该讲也是一个非常宽泛的话题。需要程序员在工作中不断积累。作者在本节中也没有举任何的例子，本节的话题实在太大， 本人的建议就是去多看看优秀的开源项目， 看看别人是如何设计类的，看的多了自然就会有进步。</p>
<h2> 分析</h2>
<p>当你需要设计一个新的type时，你可以思考下面的一些问题。</p>
<ul>
<li>新type的对象应该如何被创建和销毁</li>
<li>对象的初始化和对象的复制应该有什么样的差别。</li>
<li>新type的对象如果被passed by value，意味着什么?</li>
<li>什么时新type的"合法值"。</li>
<li>你的新type需要配合某个继承体系吗?</li>
<li>你的新type需要什么样的转换?</li>
<li>什么样的操作符和函数对此新type而言是合理的?</li>
<li>什么样的标准函数应该驳回?</li>
<li>什么是新type的"未声明接口"?</li>
<li>你的新type有多么一般化?</li>
<li>你真的需要一个新type吗?</li>
</ul>`,r:{minutes:1.45,words:436},y:"a",title:"effective c++ 19 设置class犹如设计type"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-19","/posts/Program_language/cpp/effective-cpp/effective-cpp-19.md"]],["v-0e823374","/posts/Program_language/cpp/effective-cpp/effective-cpp-20.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 20 传引用代替传值</h1>
<p>本节，作者开始讨论引用。我们知道c语言已经有了指针，通过指针我们也就可以修改变量本身，而不是修改变量的副本（传值）， 那么在c++中又搞出来个引用， 那么其是不是有点重复？</p>
<h2> 分析</h2>
<p>我们知道在函数的传参中，如果传递的是指针， 那么就不可避免的要进行取地址和解引用，如下面的这段代码所示，就需要使用"&amp;"和"*"。这就可给我们的代码增加了一定的复杂性。其实c++引入引用也就是为了简化这种写法。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.98,words:893},y:"a",title:"effective c++ 20 传引用代替传值"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-20","/posts/Program_language/cpp/effective-cpp/effective-cpp-20.md"]],["v-0b188236","/posts/Program_language/cpp/effective-cpp/effective-cpp-21.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 21  必须返回对象时， 别妄想返回其reference</h1>
<p>本节主要讨论，函数的返回值如果需要返回引用时需要注意的点。下面将通过例子详细分析。</p>
<h2> 分析</h2>
<p>我们有一个Ratinoal的类， 我们现在想要得到两个Ratinoal类的对象相乘的结果。</p>
<p>于是一个新手程序员写出了下面的代码。其返回了一个指向栈上的对象的引用。这个一个非常错误的实现，当<code>operator*</code>函数执行完毕之后， result对象就被析构了，这个时候还返回了该对象的引用。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>	<span class="token comment">//Bad code #1</span>
	<span class="token keyword">friend</span> <span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Rational <span class="token function">result</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>n <span class="token operator">*</span> rhs<span class="token punctuation">.</span>n<span class="token punctuation">,</span> lhs<span class="token punctuation">.</span>d <span class="token operator">*</span> rhs<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.4,words:719},y:"a",title:"effective c++ 21  必须返回对象时， 别妄想返回其reference"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-21","/posts/Program_language/cpp/effective-cpp/effective-cpp-21.md"]],["v-07aed0f8","/posts/Program_language/cpp/effective-cpp/effective-cpp-22.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 22 将成员变量声明为private</h1>
<p>成员变量通常需要声明为private， 这使得我们的类具有更好的封装性。</p>
<p>在讲解之前，我们可以回忆一下三种类型以及对应不同的继承时的行为。</p>
<table>
<thead>
<tr>
<th>继承方式</th>
<th>基类public成员</th>
<th>基类protected成员</th>
<th>基类private成员</th>
</tr>
</thead>
<tbody>
<tr>
<td>public继承</td>
<td>public</td>
<td>protected</td>
<td>不可见</td>
</tr>
<tr>
<td>protected继承</td>
<td>protected</td>
<td>protected</td>
<td>不可见</td>
</tr>
<tr>
<td>private继承</td>
<td>private</td>
<td>private</td>
<td>不可见</td>
</tr>
</tbody>
</table>`,r:{minutes:1.48,words:445},y:"a",title:"effective c++ 22 将成员变量声明为private"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-22","/posts/Program_language/cpp/effective-cpp/effective-cpp-22.md"]],["v-04451fba","/posts/Program_language/cpp/effective-cpp/effective-cpp-23.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 23 宁以non-member、non-friend替换member函数</h1>
<p>本章节所讲解的内容并不复杂，但是在实战中去运用才是关键。下面就通过例子来看看作者想要表达的观点。</p>
<h2> 分析</h2>
<p>我们现在有一个WebBrowser的类，目前其提供了clearCache，clearHistory， removeCookies三个函数，分别用于清除缓存，清除历史记录和清除cookie。 那么我们如果需要提供一个clear所有内容的函数clearBrowser，我们是该提供一个成员函数还是提供一个全局的函数呢？</p>
<p><strong>提供一个成员函数</strong>：</p>`,r:{minutes:1.09,words:327},y:"a",title:"effective c++ 23 宁以non-member、non-friend替换member函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-23","/posts/Program_language/cpp/effective-cpp/effective-cpp-23.md"]],["v-00db6e7c","/posts/Program_language/cpp/effective-cpp/effective-cpp-24.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 24 若所有参数皆需要类型转换，请为此采用non-member函数</h1>
<p>本节所讲解的点是一个比较细节的点，本文所focus的点和隐式转换强相关，实际工作中并不会经常用到，因为我们并不推荐使用隐式类型转换。因此，本章节直接通过例子理解作者所要表达的观点即可。</p>
<h2> 分析</h2>
<p>现在有一个Rational类，这个类重载了<code>operator*</code>运算符。Rational的构造函数并不是explicit的，它允许隐式转化。</p>
<p>因此，下面的表达式中，前三个表达式将可以成功通过编译， 然而最后一个将不能成功通过编译。因为没有一个
<code>operator*(int ，Rational)</code>的运算符。</p>`,r:{minutes:1.6,words:480},y:"a",title:"effective c++ 24 若所有参数皆需要类型转换，请为此采用non-member函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-24","/posts/Program_language/cpp/effective-cpp/effective-cpp-24.md"]],["v-01472161","/posts/Program_language/cpp/effective-cpp/effective-cpp-25.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 25 考虑写一个不抛出任何异常的swap函数</h1>
<p>本节的内容比较长， 一步一步讲解了如何实现一个不抛任何异常的swap函数。</p>
<h2> 分析</h2>
<p>我们可以调用std下的swap函数，这是一个模板函数：既可以：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"a = "</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b = "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.54,words:1063},y:"a",title:"effective c++ 25 考虑写一个不抛出任何异常的swap函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-25","/posts/Program_language/cpp/effective-cpp/effective-cpp-25.md"]],["v-02fbfa00","/posts/Program_language/cpp/effective-cpp/effective-cpp-26.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 26 尽量延后变量定义式的出现时间</h1>
<p>本节主要介绍，在很多时候，<strong>如果变量定义的过早，可能变量的定义将无效</strong>。</p>
<p>例如下面的例子，如果password长度小于8，函数将会抛出异常， 那么定义的encrypted的构造和析构将毫无意义。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>string <span class="token function">encryptPassword</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> password<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string encrypted<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">logic_error</span><span class="token punctuation">(</span><span class="token string">"Password too short"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

    encrypted <span class="token operator">=</span> password<span class="token punctuation">;</span>
	<span class="token function">encrypt</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> encrypted<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.68,words:205},y:"a",title:"effective c++ 26 尽量延后变量定义式的出现时间"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-26","/posts/Program_language/cpp/effective-cpp/effective-cpp-26.md"]],["v-04b0d29f","/posts/Program_language/cpp/effective-cpp/effective-cpp-27.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 27 尽量少做转型动作</h1>
<p>本节主要讨论强制类型转换的相关问题，并指出平常开发中尽可能少用强制类型转换，这不利于运行效率，有时候还可能引起意想不到的问题。</p>
<h2> 分析</h2>
<p>在c语言中，强制类型转换格式是像下面这样的：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span>T<span class="token punctuation">)</span>expression <span class="token comment">//将expression转型为T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.84,words:1151},y:"a",title:"effective c++ 27 尽量少做转型动作"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-27","/posts/Program_language/cpp/effective-cpp/effective-cpp-27.md"]],["v-0665ab3e","/posts/Program_language/cpp/effective-cpp/effective-cpp-28.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 28 避免返回handles指向对象内部成分</h1>
<p>本节也是作者的一个建议，让我们避免返回handles，handle包含了指针，引用和迭代器等等，并阐述了如果返回handle可能会引起哪些问题。和上一节类似，是作者的一个建议，并不意味着在任何时候都不可以返回handle。</p>
<p>下面就看看返回handle可能存在的问题。upperLeft是一个const函数，但是其返回了Point&amp;， 这就意味着，虽然在upperLeft内部虽然不会修改成员变量，但在函数外部却可以进行修改！ 这是矛盾的，也一定程度上破坏了封装性。</p>
<h2> 分析</h2>`,r:{minutes:2.26,words:679},y:"a",title:"effective c++ 28 避免返回handles指向对象内部成分"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-28","/posts/Program_language/cpp/effective-cpp/effective-cpp-28.md"]],["v-081a83dd","/posts/Program_language/cpp/effective-cpp/effective-cpp-29.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 29 为异常安全而努力是值得的</h1>
<p>本节主要阐述了面对异常我们该做的事情。用数据库进行类比，数据库中有事务的概念，即要么都执行成功，要么都不执行。类比于异常，当异常发生时，我们最好要恢复到调用之前的状态。</p>
<h2> 分析</h2>
<p>下面先看一个经典的错误案例：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> pm<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//锁定pm所指的互斥器</span>
<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> pm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将互斥器解锁</span>

<span class="token keyword">class</span> <span class="token class-name">PrettyMenu</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">changeBackground</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> imgSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//取得互斥器</span>
        <span class="token keyword">delete</span> bgImage<span class="token punctuation">;</span> <span class="token comment">//删除旧图片</span>
        <span class="token operator">++</span>imageChanges<span class="token punctuation">;</span> <span class="token comment">//修改图像更改次数</span>
        bgImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//安装新的背景图片</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放互斥器</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Mutex mutex<span class="token punctuation">;</span>     <span class="token comment">//互斥器</span>
    Image<span class="token operator">*</span> bgImage<span class="token punctuation">;</span>  <span class="token comment">//目前使用的背景图片</span>
    <span class="token keyword">int</span> imageChanges<span class="token punctuation">;</span><span class="token comment">//图片被修改的次数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.11,words:1534},y:"a",title:"effective c++ 29 为异常安全而努力是值得的"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-29","/posts/Program_language/cpp/effective-cpp/effective-cpp-29.md"]],["v-2da52187","/posts/Program_language/cpp/effective-cpp/effective-cpp-30.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 30 彻底了解inline的里里外外</h1>
<p>本节主要介绍inline的条条框框。</p>
<h2> 分析</h2>
<p>我们首先讨论inline的好处。</p>
<ul>
<li>inline函数相当于将代码copy到调用的地方，可以减少函数调用的额外开销。</li>
<li>可以替代define的宏函数却又比宏函数安全。</li>
</ul>
<p>但是天下没有免费的午餐。</p>
<p>inline的坏处也很明显：</p>
<ul>
<li>inline可能造成程序体积膨胀</li>
<li>可能造成额外的换页行为，降低指令高速缓存命中率</li>
</ul>`,r:{minutes:1.21,words:363},y:"a",title:"effective c++ 30 彻底了解inline的里里外外"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-30","/posts/Program_language/cpp/effective-cpp/effective-cpp-30.md"]],["v-2f59fa26","/posts/Program_language/cpp/effective-cpp/effective-cpp-31.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 31 文件间的编译依存关系降低至最低</h1>
<p>本文中介绍了两种接口与实现分离的两种方法。本文的实用性非常强，本文介绍的pImpl方法在实际项目中使用频率非常高。</p>
<h2> Handle classes(pImpl设计)</h2>
<p>常见的pImpl代码格式如下所示：</p>
<p>由于满足了封装性，所以Impl中的数据可以是public的，因此可以使用struct来声明Impl。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Address</span> 
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Address</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">address_</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> address_<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>string address_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Date</span> 
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Date</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string date<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">date_</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> date_<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>string date_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> birthday<span class="token punctuation">,</span> <span class="token keyword">const</span> Address<span class="token operator">&amp;</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">birthDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token comment">// ptr to implementation (Item13)</span>
	<span class="token keyword">struct</span> <span class="token class-name">Impl</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Impl<span class="token operator">&gt;</span> pImpl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">Impl</span></span>
<span class="token punctuation">{</span>
	<span class="token function">Impl</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> birthday<span class="token punctuation">,</span> <span class="token keyword">const</span> Address<span class="token operator">&amp;</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> theName<span class="token punctuation">;</span><span class="token punctuation">}</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">birthDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span> <span class="token keyword">return</span> theBirthDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> theAddress<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string theName<span class="token punctuation">;</span>	<span class="token comment">// implementation detail</span>
	Date theBirthDate<span class="token punctuation">;</span>		<span class="token comment">// implementation detail</span>
	Address theAddress<span class="token punctuation">;</span>		<span class="token comment">// implementation detail	</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Person<span class="token double-colon punctuation">::</span><span class="token class-name">Impl</span><span class="token double-colon punctuation">::</span><span class="token function">Impl</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> birthday<span class="token punctuation">,</span> <span class="token keyword">const</span> Address<span class="token operator">&amp;</span> addr<span class="token punctuation">)</span> <span class="token operator">:</span>
	<span class="token function">theName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">theBirthDate</span><span class="token punctuation">(</span>birthday<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">theAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>


<span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> birthday<span class="token punctuation">,</span> <span class="token keyword">const</span> Address<span class="token operator">&amp;</span> addr<span class="token punctuation">)</span> <span class="token operator">:</span>
	<span class="token function">pImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Impl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> pImpl<span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
std<span class="token double-colon punctuation">::</span>string <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">birthDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> pImpl<span class="token operator">-&gt;</span><span class="token function">birthDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
std<span class="token double-colon punctuation">::</span>string <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> pImpl<span class="token operator">-&gt;</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Date <span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"2022-9-10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Address <span class="token function">addr</span><span class="token punctuation">(</span><span class="token string">"nanjing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">birthDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.13,words:639},y:"a",title:"effective c++ 31 文件间的编译依存关系降低至最低"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-31","/posts/Program_language/cpp/effective-cpp/effective-cpp-31.md"]],["v-310ed2c5","/posts/Program_language/cpp/effective-cpp/effective-cpp-32.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 32 确定你的public继承塑模出is-a的关系</h1>
<p>本节主要分析了public继承的现实含义，public继承中，每个Derived类的对象都是Base类的对象。 Base比Derived表现出更为一般化的概念，而Derived比Base表现出更为特殊化的概念。</p>
<h2> 分析</h2>
<p>这里举了两个例子， 每个Student一定都是一个Person：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Person</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.74,words:221},y:"a",title:"effective c++ 32 确定你的public继承塑模出is-a的关系"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-32","/posts/Program_language/cpp/effective-cpp/effective-cpp-32.md"]],["v-32c3ab64","/posts/Program_language/cpp/effective-cpp/effective-cpp-33.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 33 避免遮掩继承而来的名称</h1>
<p>本节主要分析了在继承中，如果在Derived类中有和Base类中相同名称的方法，那么将遮掩Base类中的方法。</p>
<h2> 分析</h2>
<p>下面这个例子中，<code>Derived::mf1</code> 函数遮掩了<code>Base::mf1</code>和<code>Base::mf1(int)</code>, <code>Derived::mf3</code> 函数遮掩了<code>Base::mf3</code>和<code>Base::mf3(double)</code>。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mf1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mf1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mf2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">void</span> <span class="token function">mf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">mf3</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">int</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mf1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">mf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">mf4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> x<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	Derived d<span class="token punctuation">;</span>
	d<span class="token punctuation">.</span><span class="token function">mf1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Derived::mf1</span>
	<span class="token comment">// d.mf1(x);//错误， Derived::mf1遮掩了Base::mf1</span>
	d<span class="token punctuation">.</span><span class="token function">mf2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Base::mf2</span>
	d<span class="token punctuation">.</span><span class="token function">mf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Derived::mf3</span>
	<span class="token comment">// d.mf3(x);//错误，因为Derived::mf3遮掩了Base::mf3</span>
	d<span class="token punctuation">.</span><span class="token function">mf4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Derived::mf4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.46,words:438},y:"a",title:"effective c++ 33 避免遮掩继承而来的名称"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-33","/posts/Program_language/cpp/effective-cpp/effective-cpp-33.md"]],["v-34788403","/posts/Program_language/cpp/effective-cpp/effective-cpp-34.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 34 区分接口实现和实现继承</h1>
<p>本节内容比较简单， 对于一个写过一段时间c++代码同志不难理解。</p>
<h2> 分析</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">int</span> <span class="token function">objectID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.87,words:262},y:"a",title:"effective c++ 34 区分接口实现和实现继承"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-34","/posts/Program_language/cpp/effective-cpp/effective-cpp-34.md"]],["v-362d5ca2","/posts/Program_language/cpp/effective-cpp/effective-cpp-35.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 35 考虑virtual函数以外的其他选择</h1>
<p>在本节中，作者给出了一些可以替代调用virtual函数的方法。下面就一一进行介绍。</p>
<h2> 分析</h2>
<p><strong>1.考虑NVI的实现方式(模板方法设计模式)</strong></p>
<p>父类和子类都调用healthValue同一接口，但是返回值不同。这是一种public非virtual函数调用virtual函数的实现多态的方法。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">GameCharacter</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token comment">// derived classes do not redefine this</span>
	<span class="token keyword">int</span> <span class="token function">healthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> retVal <span class="token operator">=</span> <span class="token function">doHealthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token comment">// derived classes may redefine this</span>
	<span class="token comment">// default algorithm for calc health</span>
	<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">doHealthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">MyCoolCharacter</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">GameCharacter</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">int</span> <span class="token function">doHealthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">17</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyRichCharacter</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">GameCharacter</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">int</span> <span class="token function">doHealthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GameCharacter<span class="token operator">*</span> gameCharacter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyCoolCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> gameCharacter<span class="token operator">-&gt;</span><span class="token function">healthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>      

    GameCharacter<span class="token operator">*</span> gameCharacter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyRichCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> gameCharacter2<span class="token operator">-&gt;</span><span class="token function">healthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>      
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.37,words:1010},y:"a",title:"effective c++ 35 考虑virtual函数以外的其他选择"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-35","/posts/Program_language/cpp/effective-cpp/effective-cpp-35.md"]],["v-37e23541","/posts/Program_language/cpp/effective-cpp/effective-cpp-36.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 36 绝不重新定义继承而来的non-virtual函数</h1>
<p>该条款比较简单，只需记住就可以。该条款和item33是相辅相成的。</p>
<h2> 分析</h2>
<p>如下所示，如果在D内重新定义mf， 那么D就将基类中的mf给隐藏了。该条款是不建议这样做的，因为public继承是is-a的关系，D的对象也是一种B的对象，其mf方法里应该相同。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">B</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">mf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token comment">// hides B::mf() - Item33</span>
	<span class="token keyword">void</span> <span class="token function">mf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.54,words:162},y:"a",title:"effective c++ 36 绝不重新定义继承而来的non-virtual函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-36","/posts/Program_language/cpp/effective-cpp/effective-cpp-36.md"]],["v-39970de0","/posts/Program_language/cpp/effective-cpp/effective-cpp-37.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 37 不重新定义继承而来的缺省参数值</h1>
<p>本节主要讲解了和虚函数中的默认参数有关的话题。本节的话题在日常工作中使用到的频率不是很高。下面通过例子来具体说明。</p>
<h2> 分析</h2>
<p>我们有一个Shape类，其中含有一个名为draw的虚函数，draw含有一个入参color， 其默认参数为Red。目前我们有两个派生类Rectangle和Circle，其中Rectangle的draw方法的入参设置了color的默认参数为Green， 而Circle的默认参数没有指定参数的默认值。</p>
<p>我们新建了Rectangle和Circle的对象，并使用Shape的指针指向它们，并调用draw方法，并且不指定参数，那么color值将会是多少呢？</p>`,r:{minutes:1.5,words:449},y:"a",title:"effective c++ 37 不重新定义继承而来的缺省参数值"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-37","/posts/Program_language/cpp/effective-cpp/effective-cpp-37.md"]],["v-3b4be67f","/posts/Program_language/cpp/effective-cpp/effective-cpp-38.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 38 通过复合塑模出has-a或者根据某物实现出</h1>
<p>前面介绍过类和类之间的一种关系-继承。本节将介绍另一种类和类的关系-组合。其含义就是在某个类型中嵌入一个另外一个类的对象。</p>
<p>通过组合，我们可以实现出has-a或者is-implemented-in-terms-of。</p>
<h2> 分析</h2>
<p>has-a的关系也很好理解， 例如一个Person类型，其中含有一些属性地址， 电话号码， 如下所示：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token punctuation">{</span><span class="token punctuation">}</span>；
<span class="token keyword">class</span> <span class="token class-name">PhoneNumber</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>；

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
<span class="token keyword">public</span>：
<span class="token keyword">private</span>：
    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
    Address address<span class="token punctuation">;</span>
    PhoneNumber voicenumber<span class="token punctuation">;</span>
    PhoneNumber faxNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.21,words:362},y:"a",title:"effective c++ 38 通过复合塑模出has-a或者根据某物实现出"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-38","/posts/Program_language/cpp/effective-cpp/effective-cpp-38.md"]],["v-3d00bf1e","/posts/Program_language/cpp/effective-cpp/effective-cpp-39.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 39 明智而审慎地使用private继承</h1>
<p>什么是private继承？</p>
<p>下面例子中，我们称类Student private继承类Person。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">Person</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// private继承</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.07,words:1220},y:"a",title:"effective c++ 39 明智而审慎地使用private继承"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-39","/posts/Program_language/cpp/effective-cpp/effective-cpp-39.md"]],["v-628b5cc8","/posts/Program_language/cpp/effective-cpp/effective-cpp-40.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 40 明智而审慎地使用多重继承</h1>
<p>本节讲解了多重继承的话题。多重继承是大多数程序员都比较讨厌的，因为代码中一旦有多重继承，很多程序员就会心生畏惧。本节就讨论多重继承的问题以及如何正确的利用好多重继承这个方法。</p>
<h2> 分析</h2>
<p>1.当存在菱形继承时，需要使用virtual继承</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">File</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">// Virtual base class.</span>
<span class="token keyword">class</span> <span class="token class-name">InputFile</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">File</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">// Virtual base class.</span>
<span class="token keyword">class</span> <span class="token class-name">OutputFile</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">File</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">// Deadly Multiple Inheritance diamond.</span>
<span class="token keyword">class</span> <span class="token class-name">IOFile</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">InputFile</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">OutputFile</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.81,words:544},y:"a",title:"effective c++ 40 明智而审慎地使用多重继承"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-40","/posts/Program_language/cpp/effective-cpp/effective-cpp-40.md"]],["v-64403567","/posts/Program_language/cpp/effective-cpp/effective-cpp-41.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 41 隐式接口和编译器多态</h1>
<h2> 分析</h2>
<p>面向对象编程总是以显式接口和运行期多态解决问题。举个例子，给定这样“无意义”的类</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> std<span class="token double-colon punctuation">::</span>size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.2,words:959},y:"a",title:"effective c++ 41 隐式接口和编译器多态"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-41","/posts/Program_language/cpp/effective-cpp/effective-cpp-41.md"]],["v-65f50e06","/posts/Program_language/cpp/effective-cpp/effective-cpp-42.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 42-typename的双重含义</h1>
<h2> 1.在用于声明template参数的时候，class和typename的含义是相同的</h2>
<p>下面两种声明中，<code>class</code>和<code>typename</code>的含义是相同的。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token punctuation">;</span>                 <span class="token comment">// uses "class"</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token punctuation">;</span>              <span class="token comment">// uses "typename"</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.26,words:379},y:"a",title:"effective c++ 42-typename的双重含义"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-42","/posts/Program_language/cpp/effective-cpp/effective-cpp-42.md"]],["v-67a9e6a5","/posts/Program_language/cpp/effective-cpp/effective-cpp-43.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 43-处理模板化基类的名称</h1>
<p>该节主要分析了一个写模板时常常会遇到的一个编译错误。</p>
<h2> 分析</h2>
<p>这里有一个模板基类，有派生类继承了模板基类，并调用了基类中的方法，但是编译器却会报找不该方法，这是怎么回事？</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">CompanyA</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">sendCleartext</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A sendCleartext"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">sendEncrypted</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A sendEncrypted"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">CompanyB</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">sendCleartext</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B sendCleartext"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">sendEncrypted</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B sendEncrypted"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">MsgInfo</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MsgInfo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string msg<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">msg_</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>string msg_<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Company</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MsgSender</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>

	<span class="token keyword">void</span> <span class="token function">sendClear</span><span class="token punctuation">(</span><span class="token keyword">const</span> MsgInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>string msg<span class="token punctuation">;</span>
		Company c<span class="token punctuation">;</span>
		c<span class="token punctuation">.</span><span class="token function">sendCleartext</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">void</span> <span class="token function">sendSecret</span><span class="token punctuation">(</span><span class="token keyword">const</span> MsgInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Company</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">LoggingMsgSender</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MsgSender</span><span class="token operator">&lt;</span><span class="token class-name">Company</span><span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">sendClearMsg</span><span class="token punctuation">(</span><span class="token keyword">const</span> MsgInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        <span class="token function">sendClear</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MsgInfo <span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LoggingMsgSender<span class="token operator">&lt;</span>CompanyB<span class="token operator">&gt;</span> loggingMsgSender<span class="token punctuation">;</span>
    loggingMsgSender<span class="token punctuation">.</span><span class="token function">sendClearMsg</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.74,words:822},y:"a",title:"effective c++ 43-处理模板化基类的名称"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-43","/posts/Program_language/cpp/effective-cpp/effective-cpp-43.md"]],["v-695ebf44","/posts/Program_language/cpp/effective-cpp/effective-cpp-44.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 44 与参数无关的代码抽离templates</h1>
<h2> 分析</h2>
<p>如果模板中有类型无关的参数，那一定得小心，很容易就会出现模板膨胀的问题。</p>
<p>这里有一个矩阵类，并且有一个求逆的方法，这里我们假设这个invert方法有100行代码，为了便于下面进行计算。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t n<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">SquareMatrix</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//这里有100行代码</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.29,words:687},y:"a",title:"effective c++ 44 与参数无关的代码抽离templates"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-44","/posts/Program_language/cpp/effective-cpp/effective-cpp-44.md"]],["v-6b1397e3","/posts/Program_language/cpp/effective-cpp/effective-cpp-45.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 45 运用成员函数模板接受所有兼容类型</h1>
<p>Item 13提到智能指针可用来自动释放堆中的内存，STL中的迭代器也是一种智能指针，它甚至支持链表元素指针的++操作。 这些高级特性是普通指针所没有的。本文以智能指针为例，介绍成员函数模板的使用：</p>
<ul>
<li>成员函数模板可以使得函数可以接受所有兼容的类型。</li>
<li>如果你用成员函数模板声明了拷贝构造函数和赋值运算符，仍然需要手动编写普通拷贝构造函数和拷贝运算符。</li>
</ul>
<p><strong>隐式类型转换</strong></p>
<p>智能指针虽然比普通指针提供了更多有用的特性，但也存在一些问题，比如我们有一个类的层级：</p>`,r:{minutes:3.7,words:1109},y:"a",title:"effective c++ 45 运用成员函数模板接受所有兼容类型"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-45","/posts/Program_language/cpp/effective-cpp/effective-cpp-45.md"]],["v-6cc87082","/posts/Program_language/cpp/effective-cpp/effective-cpp-46.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 46 需要类型转换时请为模板定义非成员函数</h1>
<p>本节是在模板中出现所有参数都需要隐式类型转换时的要点，也是friend关键字的非常规的用法，了解即可，使用到的概率并不大，因为平常我们都不建议进行隐式转换。</p>
<h2> 分析</h2>
<p>看下面的例子，<code>oneHalf * 2</code>，我们希望将一个int类型的参数隐式转化成一个<code>Rational&lt;int&gt;</code>的类型。当<code>operator*</code>没有friend修饰时是不能通过编译的。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Rational</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Rational</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> numerator <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> denominator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>numerator<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">(</span>denominator<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> T <span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">const</span> T <span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">friend</span> <span class="token keyword">const</span> Rational <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Rational</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> rhs<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lhs<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> rhs<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	T n<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Rational<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">oneHalf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Rational<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> oneHalf <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.97,words:292},y:"a",title:"effective c++ 46 需要类型转换时请为模板定义非成员函数"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-46","/posts/Program_language/cpp/effective-cpp/effective-cpp-46.md"]],["v-6e7d4921","/posts/Program_language/cpp/effective-cpp/effective-cpp-47.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 47 请使用trait class 表现类型信息</h1>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token comment">//http://www.cplusplus.com/reference/iterator/iterator_traits/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">IterT</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">DistT</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">doAdvance</span><span class="token punctuation">(</span>IterT<span class="token operator">&amp;</span> iter<span class="token punctuation">,</span> DistT d<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>random_access_iterator_tag<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	iter <span class="token operator">+=</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">IterT</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">DistT</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">doAdvance</span><span class="token punctuation">(</span>IterT<span class="token operator">&amp;</span> iter<span class="token punctuation">,</span> DistT d<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>bidirectional_iterator_tag<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>d<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token operator">++</span>iter<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>d<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token operator">--</span>iter<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">IterT</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">DistT</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">doAdvance</span><span class="token punctuation">(</span>IterT<span class="token operator">&amp;</span> iter<span class="token punctuation">,</span> DistT d<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>input_iterator_tag<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">"Negative distance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>d<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token operator">++</span>iter<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">IterT</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">DistT</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">advance</span><span class="token punctuation">(</span>IterT<span class="token operator">&amp;</span> iter<span class="token punctuation">,</span> DistT d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//doAdvance(iter, d, typename std::iterator_traits&lt;IterT&gt;::iterator_category());</span>

	<span class="token keyword">auto</span> category <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span><span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>IterT<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">iterator_category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">doAdvance</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> d<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.62,words:185},y:"a",title:"effective c++ 47 请使用trait class 表现类型信息"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-47","/posts/Program_language/cpp/effective-cpp/effective-cpp-47.md"]],["v-703221c0","/posts/Program_language/cpp/effective-cpp/effective-cpp-48.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 48 认识template元编程</h1>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> n<span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">Fibonacci</span>
<span class="token punctuation">{</span>
	<span class="token keyword">enum</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> Fibonacci<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">+</span> Fibonacci<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">Fibonacci</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
	<span class="token keyword">enum</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">Fibonacci</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
	<span class="token keyword">enum</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//http://en.wikipedia.org/wiki/Fibonacci_number</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">5</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">6</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">7</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.66,words:199},y:"a",title:"effective c++ 48 认识template元编程"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-48","/posts/Program_language/cpp/effective-cpp/effective-cpp-48.md"]],["v-71e6fa5f","/posts/Program_language/cpp/effective-cpp/effective-cpp-49.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 49 了解new-handler的行为</h1>
<p>我们在编写代码时，经常会使用new来创建对象。如果内存不够了，new会是怎样的行为？</p>
<p>默认的行为是，new将抛出一个异常。然而有时候我们不希望这样的默认行为，这个时候我们就需要new-handler。</p>
<p>本章节主要探讨了如何自定义new-handler。</p>
<h2> 分析</h2>
<h3> new-handler的介绍</h3>
<p>作者在item-51节从给出了<code>::operator new</code>的一个伪代码，这个伪代码就比较清晰地显示了new-handler是何时被调用的。从下面的伪代码中我们也可以看到，new-handler如果被设置了，它将被循环调用。</p>`,r:{minutes:5.21,words:1562},y:"a",title:"effective c++ 49 了解new-handler的行为"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-49","/posts/Program_language/cpp/effective-cpp/effective-cpp-49.md"]],["v-d11ccfee","/posts/Program_language/cpp/effective-cpp/effective-cpp-50.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 50 了解new和delete的合理替换时机</h1>
<p>本文主要讲解什么场景下我们需要替换编译器提供的operator new或者operator delete。其实平常开发项目中很少会重载operator new和operator delete， 如果出现了这样的需求可以回过头来再来温习温习本节的内容。</p>
<h2> 分析</h2>
<ul>
<li>用来检测运用上的错误。</li>
<li>为了强化效能</li>
<li>为了收集使用上的统计数据</li>
<li>为了检测运用错误</li>
<li>为了收集动态分配内存之使用统计信息</li>
<li>为了增加分配和归还的速度。</li>
<li>为了降低缺省内存管理器带来的空间额外开销。</li>
<li>为了弥补缺省分配器中的非最佳齐位</li>
<li>为了将相关对象成簇集中</li>
<li>为了获得非传统的行为</li>
</ul>`,r:{minutes:.88,words:264},y:"a",title:"effective c++ 50 了解new和delete的合理替换时机"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-50","/posts/Program_language/cpp/effective-cpp/effective-cpp-50.md"]],["v-cdb31eb0","/posts/Program_language/cpp/effective-cpp/effective-cpp-51.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 51 编写new和delete时需固守常规</h1>
<p>本节主要讲解了如果我们需要重载operator new/operator delete，我们需要遵守的一些套路。</p>
<h2> 分析</h2>
<h3> new 0 bytes的处理</h3>
<p>C++ 规定，即使客户要求 0 bytes， operator new 也得返回一个合法指针。如下面 non-member operator new 伪代码：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>bad_alloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        尝试分配 size bytes<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>分配成功<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>一个指针，指向分配得来的内存<span class="token punctuation">)</span>；
        <span class="token punctuation">}</span>
        <span class="token comment">// 分配失败；找出目前的 new-handling 函数</span>
        new_handler globalHandler <span class="token operator">=</span> <span class="token function">set_new_handler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">set_new_handler</span><span class="token punctuation">(</span>globalHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>globalHandler<span class="token punctuation">)</span>
          <span class="token punctuation">(</span><span class="token operator">*</span>globalHandler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
          <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.99,words:898},y:"a",title:"effective c++ 51 编写new和delete时需固守常规"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-51","/posts/Program_language/cpp/effective-cpp/effective-cpp-51.md"]],["v-ca496d72","/posts/Program_language/cpp/effective-cpp/effective-cpp-52.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 52 写了placement new也要写placement delete</h1>
<p>本文主要介绍了关于在类中自定义placement new和placement delete需要注意的一些点。该条款已经属于比较进阶的条款，在日常开发中使用频率不高，但是了解该条款也许有助于你去理解一些三方库或者是解一些比较隐匿的bug。</p>
<h2> 分析</h2>
<p><strong>placement new</strong>通常是专指指定了位置的<code>new(std::size_t size, void *mem)</code>，用于vector申请capacity剩余的可用内存。 但广义的<strong>placement new</strong>指的是拥有额外参数的operator new(重载版本)。</p>`,r:{minutes:4.59,words:1377},y:"a",title:"effective c++ 52 写了placement new也要写placement delete"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-52","/posts/Program_language/cpp/effective-cpp/effective-cpp-52.md"]],["v-c6dfbc34","/posts/Program_language/cpp/effective-cpp/effective-cpp-53.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 53-不要忽略编译器的警告</h1>
<p>这一节所讲解的道理是很简单的，主要就是告诉大家要利用好编译器给出的warning信息，不要轻易忽视。但是在日常开发中，很多人都对warnging的警告不太重视。在编程方法中的很多优化方法都是将运行态的错误转移到编译态，可以如果在编译器给出的信息的重要性，因此我们不能忽略它，并且在日常开发中需要非常重视。</p>
<h2> 分析</h2>
<p>下面将会给出一些常见的warning，并给出一些解决办法。</p>
<h3> vector容器遍历的warning</h3>
<p>下面是一段遍历vector容器的代码，再普遍不过的代码了。</p>`,r:{minutes:2,words:599},y:"a",title:"effective c++ 53-不要忽略编译器的警告"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-53","/posts/Program_language/cpp/effective-cpp/effective-cpp-53.md"]],["v-c3760af6","/posts/Program_language/cpp/effective-cpp/effective-cpp-54.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 54-熟悉TR1在内的标准程序库</h1>
<p>这一节可以不用看了，过时了。</p>
<p>中间提到的<strong>智能指针</strong>，<strong>函数指针</strong>等等，目前应该去学习c++11/c++14/c++17中的部分。</p>
`,r:{minutes:.23,words:68},y:"a",title:"effective c++ 54-熟悉TR1在内的标准程序库"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-54","/posts/Program_language/cpp/effective-cpp/effective-cpp-54.md"]],["v-c00c59b8","/posts/Program_language/cpp/effective-cpp/effective-cpp-55.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["C++","effective c++读书笔记"],e:`<h1> effective c++ 55 熟悉boost</h1>
<p><a href="https://www.boost.org/" target="_blank" rel="noopener noreferrer">boost</a>提供了很多高质量的c++库，在平常的开发过程中可以多加关注。</p>
<h2> 分析</h2>
<p>除了Meyers以外，还有很多大佬们都推荐boost库，可见该库确实不同一般。</p>
<blockquote>
<p>"...one of the most highly regarded and expertly designed C++ library projects in the world."— Herb Sutter and Andrei Alexandrescu, C++ Coding Standards</p>
</blockquote>`,r:{minutes:.76,words:228},y:"a",title:"effective c++ 55 熟悉boost"},["/posts/Program_language/cpp/effective-cpp/effective-cpp-55","/posts/Program_language/cpp/effective-cpp/effective-cpp-55.md"]],["v-eaff3672","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-01.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item1：模板中的类型推导</h1>
<p>本文主要讨论c++模板中的类型推导过程。</p>
<p>通常，模板的格式如下所示：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>ParamType param<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:11.68,words:3505},y:"a",title:"Item1：模板中的类型推导"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-01","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-01.md"]],["v-e7958534","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-02.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item2：理解auto类型推导</h1>
<p>本文主要讨论c++中的auto类型推导过程。</p>
<p>auto的类型推导和item1中模板的推导过程是很相似的，只有很少的点是不同的，下面一一说来。</p>
<p>当一个变量使用auto进行声明时，auto扮演了模板中T的角色，变量的类型说明符扮演了ParamType的角色。考虑这个例子：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> x <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:7.44,words:2232},y:"a",title:"Item2：理解auto类型推导"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-02","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-02.md"]],["v-e42bd3f6","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-03.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item3：理解decltype</h1>
<p>本文主要讨论c++中的decltype。</p>
<p>decltype是一个奇怪的东西。给它一个名字或者表达式decltype就会告诉你这个名字或者表达式的类型。通常，它会精确的告诉你你想要的结果。但有时候它得出的结果也会让你挠头半天，最后只能求助网上问答或参考资料寻求启示。</p>
<p>我们将从一个简单的情况开始，没有任何令人惊讶的情况。相比模板类型推导和auto类型推导（参见Item1和Item2），decltype只是简单的返回名字或者表达式的类型：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">//decltype(i)是const int</span>

<span class="token keyword">bool</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//decltype(w)是const Widget&amp;</span>
                                <span class="token comment">//decltype(f)是bool(const Widget&amp;)</span>

<span class="token keyword">struct</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>                    <span class="token comment">//decltype(Point::x)是int</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>                              <span class="token comment">//decltype(Point::y)是int</span>

Widget w<span class="token punctuation">;</span>                       <span class="token comment">//decltype(w)是Widget</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>…                      <span class="token comment">//decltype(f(w))是bool</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>            <span class="token comment">//std::vector的简化版本</span>
<span class="token keyword">class</span> <span class="token class-name">vector</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    …
    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    …
<span class="token punctuation">}</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>                  <span class="token comment">//decltype(v)是vector&lt;int&gt;</span>
…
<span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>…                 <span class="token comment">//decltype(v[0])是int&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:11.38,words:3413},y:"a",title:"Item3：理解decltype"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-03","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-03.md"]],["v-e0c222b8","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-04.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item4：学会查看类型推导结果</h1>
<p>选择使用工具查看类型推导，取决于软件开发过程中你想在哪个阶段显示类型推导信息。我们探究三种方案：在你编辑代码的时候获得类型推导的结果，在编译期间获得结果，在运行时获得结果。</p>
<h2> IDE编辑器</h2>
<p>在IDE中的代码编辑器通常可以显示程序代码中变量，函数，参数的类型，你只需要简单的把鼠标移到它们的上面，举个例子，有这样的代码中：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> theAnswer <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

<span class="token keyword">auto</span> x <span class="token operator">=</span> theAnswer<span class="token punctuation">;</span>
<span class="token keyword">auto</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span>theAnswer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.32,words:2497},y:"a",title:"Item4：学会查看类型推导结果"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-04","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-04.md"]],["v-dd58717a","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-05.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item5：优先考虑auto而非显式类型声明</h1>
<h2> 总结</h2>
<ul>
<li>auto变量必须初始化，通常它可以避免一些移植性和效率性的问题，也使得重构更方便，还能让你少打几个字。</li>
<li>正如Item2和6讨论的，auto类型的变量可能会踩到一些陷阱。</li>
</ul>
`,r:{minutes:.31,words:93},y:"a",title:"Item5：优先考虑auto而非显式类型声明"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-05","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-05.md"]],["v-d6850efe","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-07.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item7：区别使用()和{}创建对象</h1>
<h2> 初始化的方式</h2>
<p>c++常见的初始化方式有如下几种：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//使用圆括号初始化</span>

<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token comment">//使用"="初始化</span>

<span class="token keyword">int</span> z<span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment">//使用花括号初始化</span>

<span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment">//使用"="和花括号， 和只有花括号没有区别</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.94,words:882},y:"a",title:"Item7：区别使用()和{}创建对象"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-07","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-07.md"]],["v-7dc90eb2","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-12.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item12：使用override声明重写函数</h1>
<h2> 总结</h2>
<p>请记住：</p>
<ul>
<li>为重写函数加上override</li>
<li>成员函数引用限定让我们可以区别对待左值对象和右值对象（即*this)</li>
</ul>
`,r:{minutes:.2,words:61},y:"a",title:"Item12：使用override声明重写函数"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-12","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-12.md"]],["v-6cb8987c","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-17.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<p>总而言之，C++11对于特殊成员函数处理的规则如下：</p>
<ul>
<li>
<p>默认构造函数：和C++98规则相同，仅当类不存在用户声明的构造函数时才自动生成。</p>
</li>
<li>
<p>析构函数：基本上和C++98相同；稍微不同的是现在析构函数默认noexcept，和C++98一样，仅当基类析构为虚函数，派生类的析构函数才是虚的。</p>
</li>
<li>
<p>复制构造函数：和C++98运行时行为一样：按成员进行非静态数据成员的复制构造。仅当类中不包含用户声明的复制构造时才生成。如果该类声明了移动操作，则复制构造函数将被删除。当已经存在复制赋值运算符或析构函数时，仍然生成复制构造函数已经成为了被废弃的行为。</p>
</li>
</ul>`,r:{minutes:1.37,words:411},y:"a",title:""},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-17","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-17.md"]],["v-694ee73e","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-18.html",{d:"2023-09-06T08:48:05.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item18 对于独占资源使用std::unique_ptr</h1>
`,r:{minutes:.07,words:21},y:"a",title:"Item18 对于独占资源使用std::unique_ptr"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-18","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-18.md"]],["v-13fc9830","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-22.html",{d:"2023-09-07T02:19:52.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item22 当使用Pimpl惯用法，请在实现文件中定义特殊成员函数</h1>
<p>亲测，下面这种写法在gcc编译器上，不会报delete incomplete 的问题。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//widget.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>                     
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">struct</span> <span class="token class-name">Impl</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Impl<span class="token operator">&gt;</span> pImpl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Widget</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">Impl</span></span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//根据条款21，通过std::make_unique</span>
<span class="token operator">:</span> <span class="token function">pImpl</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>Impl<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//来创建std::unique_ptr</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Widget w<span class="token punctuation">;</span>      
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.36,words:108},y:"a",title:"Item22 当使用Pimpl惯用法，请在实现文件中定义特殊成员函数"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-22","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-22.md"]],["v-1092e6f2","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-23.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item23：右值引用，移动语义，完美转发</h1>
<h2> 总结</h2>
<ul>
<li><code>std::move</code>执行到右值的无条件的转换，但就自身而言，它不移动任何东西。</li>
<li><code>std::forward</code>只有当它的参数被绑定到一个右值时，才将参数转换为右值。</li>
<li><code>std::move</code>和<code>std::forward</code>在运行期什么也不做。</li>
</ul>
`,r:{minutes:.31,words:94},y:"a",title:"Item23：右值引用，移动语义，完美转发"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-23","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-23.md"]],["v-30067906","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-35.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item35：优先考虑基于任务的编程而非基于线程的编程</h1>
<p>通常我们想执行一个异步任务的时候，通常会采用线程的方法。本节介绍了一种新的方法，即<code>std::async</code>。其和<code>std::thread</code>有很大的相似性。</p>
<p><code>std::async</code>的一个调用的例子如下所示：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> fut <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">async</span><span class="token punctuation">(</span>doAsyncWork<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"fut"表示"future"</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:1.95,words:585},y:"a",title:"Item35：优先考虑基于任务的编程而非基于线程的编程"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-35","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-35.md"]],["v-31bb51a5","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-36.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item36：如果有异步的必要请指定std::launch::async</h1>
<p>当你调用<code>std::async</code>执行函数时（或者其他可调用对象），你通常希望异步执行函数。但是这并不一定是你要求<code>std::async</code>执行的操作。你事实上要求这个函数按照<code>std::async</code>启动策略来执行。有两种标准策略，每种都通过<code>std::launch</code>这个限域<code>enum</code>的一个枚举名表示（关于枚举的更多细节参见<a href="/posts/Program_language/cpp/3.MovingToModernCpp/item10.html" target="blank">Item10</a>）。假定一个函数<code>f</code>传给<code>std::async</code>来执行：</p>`,r:{minutes:6.98,words:2094},y:"a",title:"Item36：如果有异步的必要请指定std::launch::async"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-36","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-36.md"]],["v-33702a44","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-37.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item37：使std::thread在所有路径最后都不可结合（unjoinable）</h1>
<p>如果一个线程没有被detach，那么必须确保线程在合适的时间都被join回收资源。而被detach过的线程，则会在线程执行完毕后自动释放资源(pthread结构体和栈)。使<code>std::thread</code>在所有路径最后都unjoinable就意味着我们需要确保线程执行完毕后释放了其占用的资源。</p>
<p>每个<code>std::thread</code>对象处于两个状态之一：<strong>可结合的（joinable）<strong>或者</strong>不可结合的（unjoinable）</strong>。</p>`,r:{minutes:9.01,words:2703},y:"a",title:"Item37：使std::thread在所有路径最后都不可结合（unjoinable）"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-37","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-37.md"]],["v-352502e3","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-38.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item38：关注不同线程句柄的析构行为</h1>
<p>本文主要focus线程的future句柄析构行的讨论上。</p>
<h2> 分析</h2>
<p>future的析构行为是要分场景的。</p>
<p>如果future的创建同时满足了一下几个条件，它的析构过程会阻塞到任务执行完毕：</p>
<ul>
<li>它关联到由于调用std::async而创建出的共享状态。</li>
<li>任务的启动策略是std::launch::async（参见Item36），原因是运行时系统选择了该策略，或者在对std::async的调用中指定了该策略。</li>
<li>这个future是关联共享状态的最后一个future。对于std::future，情况总是如此，对于std::shared_future，如果还有其他的std::shared_future，与要被销毁的future引用相同的共享状态，则要被销毁的future遵循正常行为（即简单地销毁它的数据成员）。</li>
</ul>`,r:{minutes:1.6,words:481},y:"a",title:"Item38：关注不同线程句柄的析构行为"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-38","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-38.md"]],["v-36d9db82","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-39.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item39: 对于一次性事件通信考虑使用void的futures</h1>
<p>通常我们需要在一个线程中<strong>通知</strong>另一个线程处理事务时，会使用条件变量去实现。本文提供了另外一种思路，即使用<code>std::promise</code>和<code>std::future</code>进行一次性的通讯。</p>
<h2> 分析</h2>
<p>我们首先看看使用条件变量是如何实现的。</p>
<p>这里的案例是一个反应任务等待检测任务的过程。检测任务完毕，触发反应任务执行。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable&gt;</span></span>

std<span class="token double-colon punctuation">::</span>mutex mutex<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>condition_variable cv<span class="token punctuation">;</span>
<span class="token keyword">bool</span> ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
    <span class="token keyword">auto</span> react_func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"react wait to work"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ready<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"react work finish"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">react</span><span class="token punctuation">(</span>react_func<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 等待工作线程处理数据。</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"detect start to run"</span> <span class="token operator">&lt;&lt;</span>  std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"detect work finish"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    cv<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    react<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.31,words:694},y:"a",title:"Item39: 对于一次性事件通信考虑使用void的futures"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-39","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-39.md"]],["v-5c64792c","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-40.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item39: 对于并发使用std::atomic，对于特殊内存使用volatile</h1>
<h2> 总结：</h2>
<ul>
<li>std::atomic用于在不使用互斥锁情况下，来使变量被多个线程访问的情况。是用来编写并发程序的一个工具。</li>
<li>volatile用在读取和写入不应被优化掉的内存上。是用来处理特殊内存的一个工具。</li>
</ul>
`,r:{minutes:.35,words:104},y:"a",title:"Item39: 对于并发使用std::atomic，对于特殊内存使用volatile"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-40","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-40.md"]],["v-5fce2a6a","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-42.html",{d:"2023-05-11T06:58:32.000Z",c:["C++"],g:["effective modern c++读书笔记"],e:`<h1> Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back)</h1>
<h2> 分析</h2>
<p>考虑我们有一个std::vector容器， 里面存放的内容是std::string。添加新元素时，我们需要使用如下的表达式：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> vs<span class="token punctuation">;</span>        <span class="token comment">//std::string的容器</span>
vs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"xyzzy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建临时std::string，把它传给push_back</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:14.05,words:4216},y:"a",title:"Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back)"},["/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-42","/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-42.md"]],["v-14745f7c","/posts/Program_language/verilog/questions/1.html",{d:"2023-10-10T04:21:23.000Z",e:`<p>Verilog学习之异步复位的串联T触发器设计</p>
<p><a href="https://blog.csdn.net/m0_52529907/article/details/125606498" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/m0_52529907/article/details/125606498</a></p>
`,r:{minutes:.08,words:23},y:"a",title:""},["/posts/Program_language/verilog/questions/1","/posts/Program_language/verilog/questions/1.md"]],["v-110aae3e","/posts/Program_language/verilog/questions/2.html",{d:"2023-10-10T07:19:45.000Z",e:`<h1> 使用子模块实现三输入数的大小比较</h1>
<p><a href="https://www.nowcoder.com/practice/bfc9e2f37fe84c678f6fd04dbce0ad27?tpId=301&amp;tqId=5000623&amp;ru=%2Fpractice%2Fbfc9e2f37fe84c678f6fd04dbce0ad27&amp;qru=%2Fta%2Fverilog-start%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DVerilog%25E7%25AF%2587%26topicId%3D301" target="_blank" rel="noopener noreferrer">https://www.nowcoder.com/practice/bfc9e2f37fe84c678f6fd04dbce0ad27?tpId=301&amp;tqId=5000623&amp;ru=%2Fpractice%2Fbfc9e2f37fe84c678f6fd04dbce0ad27&amp;qru=%2Fta%2Fverilog-start%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DVerilog%25E7%25AF%2587%26topicId%3D301</a></p>`,r:{minutes:.8,words:241},y:"a",title:"使用子模块实现三输入数的大小比较"},["/posts/Program_language/verilog/questions/2","/posts/Program_language/verilog/questions/2.md"]],["v-0fdec5fc","/posts/Program_language/verilog/questions/4-1multiplexer.html",{d:"2023-12-26T09:56:49.000Z",c:["Verilog"],e:`<h1> 四选一多路选择器</h1>
<p>1.使用assign 语句实现</p>
<div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">mux4_1</span><span class="token punctuation">(</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d0<span class="token punctuation">,</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>sel<span class="token punctuation">,</span>
<span class="token keyword">output</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>mux_out
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assign</span> mux_out <span class="token operator">=</span> <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">'b00</span><span class="token punctuation">)</span> <span class="token operator">?</span> d3<span class="token punctuation">:</span>
                 <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">'b01</span><span class="token punctuation">)</span> <span class="token operator">?</span> d2<span class="token punctuation">:</span>
                 <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">'b10</span><span class="token punctuation">)</span> <span class="token operator">?</span> d1<span class="token punctuation">:</span>
                 d0<span class="token punctuation">;</span>
                 
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.48,words:143},y:"a",title:"四选一多路选择器"},["/posts/Program_language/verilog/questions/4-1multiplexer","/posts/Program_language/verilog/questions/4-1multiplexer.md"]],["v-b0244f86","/posts/Program_language/verilog/questions/HDLbits.html",{d:"2023-12-28T08:55:18.000Z",e:`<p><a href="https://hdlbits.01xz.net/wiki/Count15" target="_blank" rel="noopener noreferrer">https://hdlbits.01xz.net/wiki/Count15</a></p>
<p>HDLbits answer:</p>
<p><a href="https://desert-surfboard-42e.notion.site/HDLbits-resolution-e63670bcf01345d38fb78bd4767e2072" target="_blank" rel="noopener noreferrer">https://desert-surfboard-42e.notion.site/HDLbits-resolution-e63670bcf01345d38fb78bd4767e2072</a></p>`,r:{minutes:.04,words:13},y:"a",title:""},["/posts/Program_language/verilog/questions/HDLbits","/posts/Program_language/verilog/questions/HDLbits.md"]],["v-31ce37c6","/posts/Linux/kernel/Linux-0.11/Linux-0.11-assemble-language.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11中的汇编</h1>
<h2> 内嵌汇编</h2>
<p>基本的格式是：</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">asm</span> <span class="token punctuation">(</span> <span class="token string">"statements"</span> 
    <span class="token operator">:</span> output_regs 
    <span class="token operator">:</span> input_regs 
    <span class="token operator">:</span> clobbered_regs
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.23,words:370},y:"a",title:"Linux-0.11中的汇编"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-assemble-language","/posts/Linux/kernel/Linux-0.11/Linux-0.11-assemble-language.md"]],["v-660e9229","/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-bootsect.html",{d:"2023-04-05T09:09:38.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 boot目录bootsect.s详解</h1>
<h2> 模块简介</h2>
<p>bootsect.s是磁盘启动的引导程序，其概括起来就是代码的搬运工，将代码搬到合适的位置。下图是对搬运过程的概括，可以有个印象，后面将详细讲解。</p>
<figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-boot/bootsect_boot.png" alt="启动中内存分布变化" tabindex="0" loading="lazy"><figcaption>启动中内存分布变化</figcaption></figure>`,r:{minutes:7.22,words:2165},y:"a",title:"Linux-0.11 boot目录bootsect.s详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-bootsect","/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-bootsect.md"]],["v-541c5c44","/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-head.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 boot目录head.s详解</h1>
<h2> 模块简介</h2>
<p>在head.s中，操作系统主要做了如下几件事：</p>
<ul>
<li>重新设置中断描述符和全局描述符</li>
<li>检查A20地址线是否开启</li>
<li>检查数学协处理器</li>
<li>初始化页表并开启分页</li>
<li>跳转到main函数执行</li>
</ul>
<h2> 过程详解</h2>
<h3> 重新设置IDT和GDT</h3>
<p>在setup.s中我们已经设置过了IDT和GDT， 为什么还要再设置一遍？</p>
<p>因为setup.s中设置的IDT和GDT后面会被覆盖，因此在head.S中会重新设置一遍。</p>`,r:{minutes:4.41,words:1323},y:"a",title:"Linux-0.11 boot目录head.s详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-head","/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-head.md"]],["v-0dd9b637","/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-setup.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 boot目录setup.s详解</h1>
<h2> 模块简介</h2>
<p>setup.s用于加载操作系统的一些信息，其主要处理了如下一些事情：</p>
<ul>
<li>打印硬件信息</li>
<li>重新搬运system的位置</li>
<li>设置IDT和GDT</li>
<li>打开A20地址线</li>
<li>切换32位保护模式</li>
<li>跳转到system.s中运行</li>
</ul>
<h2> 过程详解</h2>
<h3> 打印硬件信息</h3>
<p>这里将ds设置为INITSEG(0x9000)。这个值在bootsect.s中已经设置过，Linus认为目前程序是setup.s,因此这里重新设置了ds寄存器的值。</p>`,r:{minutes:2.42,words:725},y:"a",title:"Linux-0.11 boot目录setup.s详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-setup","/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-setup.md"]],["v-2b83240a","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-bitmap.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统bitmap.c详解</h1>
<h2> 模块简介</h2>
<p>该模块包含了两对函数，第一对是和i节点相关的<strong>free_inode()<strong>和</strong>new_inode()</strong>。第二对是和逻辑块相关的<strong>free_block()<strong>和</strong>new_block()</strong>。</p>
<h2> 函数详解</h2>
<h3> free_block</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">free_block</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.66,words:1098},y:"a",title:"Linux-0.11 文件系统bitmap.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-bitmap","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-bitmap.md"]],["v-63326e56","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-block_dev.html",{d:"2023-04-05T12:21:54.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统block_dev.c详解</h1>
<h2> 模块简介</h2>
<h2> 函数详解</h2>
<h3> block_write</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">block_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.02,words:606},y:"a",title:"Linux-0.11 文件系统block_dev.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-block_dev","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-block_dev.md"]],["v-f9de78ce","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-buffer.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统buffer.c详解</h1>
<h2> 模块简介</h2>
<h2> 函数详解</h2>
<h3> buffer_init</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">buffer_init</span><span class="token punctuation">(</span><span class="token keyword">long</span> buffer_end<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:9.74,words:2921},y:"a",title:"Linux-0.11 文件系统buffer.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-buffer","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-buffer.md"]],["v-60f8afad","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-char_dev.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统char_dev.c详解</h1>
<h2> 模块简介</h2>
<p>char_dev.c文件主要负责字符设备的访问方法。</p>
<h2> 函数详解</h2>
<h3> rw_ttyx</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_ttyx</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">,</span><span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:1.41,words:424},y:"a",title:"Linux-0.11 文件系统char_dev.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-char_dev","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-char_dev.md"]],["v-493b69e8","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-exec.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统exec.c详解</h1>
<h2> 模块简介</h2>
<p>该模块实现了二进制可执行文件和shell脚本文件的加载和执行。</p>
<h2> 函数详解</h2>
<h3> create_tables</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> <span class="token function">create_tables</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">int</span> envc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:6.23,words:1868},y:"a",title:"Linux-0.11 文件系统exec.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-exec","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-exec.md"]],["v-39a875f0","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-fcntl.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统fcntl.c详解</h1>
<h2> 模块简介</h2>
<p>本模块实现了文件描述符复制的系统调用dup和dup2。除此以外还包含了fcntl这个可以修改已经打开的文件的状态。</p>
<h2> 函数详解</h2>
<h3> dupfd</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dupfd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.27,words:680},y:"a",title:"Linux-0.11 文件系统fcntl.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-fcntl","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-fcntl.md"]],["v-324c5847","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-file_dev.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统file_dev.c详解</h1>
<h2> 模块简介</h2>
<p>该文件主要提供了普通文件的读写方法<strong>file_read</strong>和<strong>file_write</strong>，这两个函数在系统调用_sys_read和sys_write中被调用。</p>
<h2> 函数详解</h2>
<h3> file_read</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">file_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.07,words:920},y:"a",title:"Linux-0.11 文件系统file_dev.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-file_dev","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-file_dev.md"]],["v-f9fdca64","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-inode.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统inode.c详解</h1>
<h2> 模块简介</h2>
<p>Linux-0.11中使用的文件系统为minix， inode.c中的函数和该文件系统强关联。</p>
<p>inode节点在文件系统中与文件相关联，一个文件的就由一个inode来管理，这个inode节点将记录文件的权限，大小， 文件具体存储的逻辑块位置等等信息。</p>
<h2> 函数详解</h2>
<h3> read_inode</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:8.29,words:2487},y:"a",title:"Linux-0.11 文件系统inode.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-inode","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-inode.md"]],["v-d9e5e078","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-ioctl.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统ioctl.c详解</h1>
<h2> 模块简介</h2>
<p>该模块实现了输入/输出控制系统调用ioctl函数。在Linux-0.11版本中，仅包含了tty_ioctl的实现。</p>
<h2> 函数详解</h2>
<h3> sys_ioctl</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_ioctl</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:1.42,words:425},y:"a",title:"Linux-0.11 文件系统ioctl.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-ioctl","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-ioctl.md"]],["v-2cedf15b","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-namei.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统namei.c详解</h1>
<h2> 模块简介</h2>
<p>namei.c是整个linux-0.11版本的内核中最长的函数，总长度为700+行。其核心是<strong>namei函数</strong>，即根据文件路径寻找对应的i节点。 除此以外，该模块还包含一些创建目录，删除目录，创建目录项等系统调用。</p>
<p>在接触本模块的具体函数之前，可以回顾一下不同的i节点，这将对理解本模块的函数非常有帮助。</p>
<p>对于目录节点，其<code>i_zone[0]</code>指向的block中存放的是dir_entry。</p>
<p>对于文件节点，其<code>i_zone[0] - i_zone[6]</code>是直接寻址块。<code>i_zone[7]</code>是一次间接寻址块，<code>i_zone[8]</code>是二次间接寻址块。</p>`,r:{minutes:20.07,words:6022},y:"a",title:"Linux-0.11 文件系统namei.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-namei","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-namei.md"]],["v-30b8b062","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-open.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统open.c详解</h1>
<h2> 模块简介</h2>
<p>对于一个文件系统，需要提供一些封装好的系统调用提供给应用层调用。例如打开一个文件，对于应用层而言，其并不关心底层的inode和buffer_cache的操作。 open.c便是提供这样的一个功能。</p>
<p>同样是文件系统high-level的API的有:</p>
<ul>
<li><strong>open.c</strong></li>
<li>exec.c</li>
<li>stat.c</li>
<li>fcntl.c</li>
<li>ioctl.c</li>
</ul>
<h2> 函数详解</h2>`,r:{minutes:5.2,words:1560},y:"a",title:"Linux-0.11 文件系统open.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-open","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-open.md"]],["v-496e6a2a","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-pipe.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统pipe.c详解</h1>
<h2> 模块简介</h2>
<p>在Linux-0.11中提供了<strong>管道这种进程间通讯</strong>的方式。本程序包含了管道文件读写操作函数read_pipe()和write_pipe()。</p>
<h2> 函数详解</h2>
<h3> read_pipe</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">read_pipe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:4.58,words:1373},y:"a",title:"Linux-0.11 文件系统pipe.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-pipe","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-pipe.md"]],["v-088d2da3","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-read_write.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统read_write.c详解</h1>
<h2> 模块简介</h2>
<p>该模块实现了文件系统通用的读写的方法read/write/lseek。</p>
<p>根据文件类型的不同，在内部将调用不同的方法。如果是管道文件，则调用pipe.c中的读写方法，如果是字符设备，则会调用char_dev.c中的方法，如果是目录或者普通文件，将调用file_dev.c中的读写方法，如果是块设备文件，将调用block_dev.c中的读写方法。</p>
<h2> 函数详解</h2>
<h3> sys_read</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.66,words:797},y:"a",title:"Linux-0.11 文件系统read_write.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-read_write","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-read_write.md"]],["v-0ede3e05","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-stat.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统stat.c详解</h1>
<h2> 模块简介</h2>
<p>该模块给应用层提供了获取文件状态信息的接口stat和fstat。 stat是使用文件名进行获取， fstat是使用文件描述符进行获取。</p>
<h2> 函数详解</h2>
<h3> cp_stat</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cp_stat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.6,words:779},y:"a",title:"Linux-0.11 文件系统stat.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-stat","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-stat.md"]],["v-62961184","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-super.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统super.c详解</h1>
<h2> 模块简介</h2>
<p>该模块主要包含了对超级块的一些读写操作。</p>
<h2> 函数详解</h2>
<h3> lock_super</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lock_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:7.82,words:2346},y:"a",title:"Linux-0.11 文件系统super.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-super","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-super.md"]],["v-6b3e1233","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-truncate.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 文件系统truncate.c详解</h1>
<h2> 模块简介</h2>
<p>该模块中的truncate函数用于释放i节点所占用的所有逻辑块，从而将文件长度截取为0。</p>
<h2> 函数详解</h2>
<h3> free_ind</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">free_ind</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.24,words:671},y:"a",title:"Linux-0.11 文件系统truncate.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-truncate","/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-truncate.md"]],["v-372d937a","/posts/Linux/kernel/Linux-0.11/Linux-0.11-init-main.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 入口函数main.c详解</h1>
<h2> 模块简介</h2>
<p>main.c大部分代码主要是对内核进行初始化，而main.c开始，就都是c语言编写的内核了。</p>
<h2> 函数详解</h2>
<h3> time_init</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">time_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.55,words:1064},y:"a",title:"Linux-0.11 入口函数main.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-init-main","/posts/Linux/kernel/Linux-0.11/Linux-0.11-init-main.md"]],["v-51b12ace","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-asm.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录进程管理asm.s详解</h1>
<h2> 模块简介</h2>
<p>该模块和CPU异常处理相关，在代码结构上asm.s和traps.c强相关。 CPU探测到异常时，主要分为两种处理方式，一种是有错误码，另一种是没有错误码，对应的方法就是<strong>error_code</strong>和<strong>no_error_code</strong>。在下面的函数详解中，将主要以两个函数展开。</p>
<h2> 函数详解</h2>
<h3> no_error_code</h3>
<p>对于一些异常而言，CPU在出现这些异常时不会将error code压入栈中。其和一般的中断类似，会将ss,esp,eflags,cs,eip这几个寄存器的值压入内核栈中。如下图所示：</p>`,r:{minutes:3.56,words:1068},y:"a",title:"Linux-0.11 kernel目录进程管理asm.s详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-asm","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-asm.md"]],["v-44e1262a","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-exit.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录exit.c详解</h1>
<h2> 模块简介</h2>
<h2> 函数详解</h2>
<h3> release</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.45,words:1034},y:"a",title:"Linux-0.11 kernel目录exit.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-exit","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-exit.md"]],["v-d0b48072","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-fork.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录fork.c详解</h1>
<h2> 模块简介</h2>
<p>fork.c中主要实现内核对于创建新的进程的行为。其中copy_process是其最核心的函数。</p>
<h2> 函数详解</h2>
<h3> copy_process</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">copy_process</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">long</span> ebp<span class="token punctuation">,</span><span class="token keyword">long</span> edi<span class="token punctuation">,</span><span class="token keyword">long</span> esi<span class="token punctuation">,</span><span class="token keyword">long</span> gs<span class="token punctuation">,</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>
		<span class="token keyword">long</span> ebx<span class="token punctuation">,</span><span class="token keyword">long</span> ecx<span class="token punctuation">,</span><span class="token keyword">long</span> edx<span class="token punctuation">,</span>
		<span class="token keyword">long</span> fs<span class="token punctuation">,</span><span class="token keyword">long</span> es<span class="token punctuation">,</span><span class="token keyword">long</span> ds<span class="token punctuation">,</span>
		<span class="token keyword">long</span> eip<span class="token punctuation">,</span><span class="token keyword">long</span> cs<span class="token punctuation">,</span><span class="token keyword">long</span> eflags<span class="token punctuation">,</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> ss<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.04,words:1511},y:"a",title:"Linux-0.11 kernel目录fork.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-fork","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-fork.md"]],["v-ecf6a066","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-hd.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录hd.c详解</h1>
<h2> 模块简介</h2>
<p>在讲解hd.c的函数之前，需要先介绍一些宏定义，inb, inb_p, outb, outb_p。</p>
<p><strong>inb</strong>宏的作用是去IO端口读取一个byte的数据。</p>
<p>在内嵌汇编中， <code>:"d" (port))</code>是输入，将port值写入了edx。 <code>:"=a" (_v)</code>是输出，即将AL的值写入_v中。</p>
<p>而汇编指令<code>inb %%dx,%%al</code>的作用是从端口dx中读取一个字节放入al中。</p>`,r:{minutes:10.38,words:3113},y:"a",title:"Linux-0.11 kernel目录hd.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-hd","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-hd.md"]],["v-232bad63","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-ll-rw-blk.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录ll_rw_blk.c详解</h1>
<h2> 模块简介</h2>
<h2> 函数详解</h2>
<p>该模块的作用是处理块设备的读写，其中最重要的函数就是电梯算法<strong>add_request</strong>函数和<strong>ll_rw_block</strong>函数。</p>
<h3> add_request</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add_request</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blk_dev_struct</span> <span class="token operator">*</span> dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:7.21,words:2163},y:"a",title:"Linux-0.11 kernel目录ll_rw_blk.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-ll-rw-blk","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-ll-rw-blk.md"]],["v-4a77de84","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-mktime.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录mktime.c详解</h1>
<h2> 模块简介</h2>
<p>该模块较为简单，仅有一个函数，仅在内核中使用，计算系统开机时的滴答数。</p>
<h2> 函数详解</h2>
<h3> kernel_mktime</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">kernel_mktime</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span> tm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:1.07,words:322},y:"a",title:"Linux-0.11 kernel目录mktime.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-mktime","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-mktime.md"]],["v-1a1b9452","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-panic.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录panic.c详解</h1>
<h2> 模块简介</h2>
<p>该模块只有一个函数， 即panic函数， 用于显示内核错误信息并使系统进入死循环。</p>
<p>在内核中，如果内核代码执行时遇到了严重的错误就会调用该函数。</p>
<h2> 函数详解</h2>
<h3> panic</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">panic</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.62,words:185},y:"a",title:"Linux-0.11 kernel目录panic.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-panic","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-panic.md"]],["v-6c720eab","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-printk.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录printk.c详解</h1>
<h2> 模块简介</h2>
<p>该模块只有一个函数， 即printk函数， 用于在内核中向控制台打印字符串，</p>
<h2> 函数详解</h2>
<h3> printk</h3>
<p><strong>printk 与 printf 的差异</strong></p>
<p>其实这两个函数几乎是相同的, 出现这种差异是因为 tty_write 函数需要使用 fs 指向的被显示的字符串, 而 fs 是专门用于存放<strong>用户态段选择符</strong>的, 因此, 在内核态时, 为了配合 tty_write函数, printk 会把 fs 修改为<strong>内核态数据段</strong>选择符 ds 中的值, 这样才能正确指向内核的数据缓冲区, 当然这个操作会先对 fs 进行压栈保存, 调用 tty_write 完毕后再出栈恢复. 总结说来, printk 与 printf 的差异是由 fs 造成的, 所以差异也是围绕对 fs 的处理。</p>`,r:{minutes:1.28,words:384},y:"a",title:"Linux-0.11 kernel目录printk.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-printk","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-printk.md"]],["v-4354b7dc","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-sched.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录进程管理sched.c详解</h1>
<h2> 模块简介</h2>
<p>sched.c主要功能是负责进程的调度，其最核心的函数就是<strong>schedule</strong>。除schedule以外， sleep_on和wake_up也是相对重要的函数。</p>
<h2> 函数详解</h2>
<h3> schedule</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:9.72,words:2915},y:"a",title:"Linux-0.11 kernel目录进程管理sched.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-sched","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-sched.md"]],["v-febe7cbe","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-signal.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录进程管理signal.c详解</h1>
<h2> 模块简介</h2>
<p>signal.c主要涉及的是进程的信号处理。该章节中最难理解的是<strong>do_signal</strong>函数。</p>
<h2> 函数详解</h2>
<h3> sys_sgetmask</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_sgetmask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:6.46,words:1939},y:"a",title:"Linux-0.11 kernel目录进程管理signal.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-signal","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-signal.md"]],["v-31ae6c88","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-sys.html",{d:"2023-04-05T09:23:50.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录进程管理sys.c详解</h1>
<h2> 模块简介</h2>
<p>在sys.c模块中，有很多关于进程id、进程组id、用户id、用户组id的系统调用。 另外在该文件，诸如sys_ftime，sys_break等函数在Linux-0.11版本中尚未实现。</p>
<h2> 函数详解</h2>
<h3> sys_ftime</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_ftime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.19,words:958},y:"a",title:"Linux-0.11 kernel目录进程管理sys.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-sys","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-sys.md"]],["v-7dca628a","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录进程管理system_call.s详解</h1>
<h2> 模块简介</h2>
<p>本节主要介绍了在Linux-0.11中关于系统调用的相关实现。Linux-0.11使用<code>int 0x80</code>中断以及eax寄存器中存储的功能号去调用内核中所提供的功能，在系统调用发生的过程中伴随着用户态向内核态的主动切换。</p>
<p>需要注意的时，用户通常并不是直接使用系统调用的中断，而是libc中所提供的接口函数实现。</p>
<h2> 过程分析</h2>
<h3> system_call</h3>
<p>当0x80号中断发生的时候，CPU除了切入内核态之外，还会自动完成下列几件事：</p>`,r:{minutes:4.03,words:1209},y:"a",title:"Linux-0.11 kernel目录进程管理system_call.s详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.md"]],["v-7045a43c","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-trap.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录进程管理trap.c详解</h1>
<h2> 模块简介</h2>
<h2> 函数详解</h2>
<h3> die</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">long</span> esp_ptr<span class="token punctuation">,</span><span class="token keyword">long</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.44,words:733},y:"a",title:"Linux-0.11 kernel目录进程管理trap.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-trap","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-trap.md"]],["v-4da11e0f","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-tty-io.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录tty_io.c详解</h1>
<h2> 模块简介</h2>
<p>该章节是围绕终端读写展开的。在tty.h定义了tty_struct结构体，其中包含了三个非常重要的队列，即read_q，write_q和seconddary(辅助队列)。</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">termios</span> termios<span class="token punctuation">;</span>
	<span class="token keyword">int</span> pgrp<span class="token punctuation">;</span>
	<span class="token keyword">int</span> stopped<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> read_q<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> write_q<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> secondary<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.11,words:2134},y:"a",title:"Linux-0.11 kernel目录tty_io.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-tty-io","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-tty-io.md"]],["v-5f435f4c","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-tty_ioctl.html",{d:"2023-04-05T13:54:25.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 kernel目录tty_ioctl.c详解</h1>
<h2> 模块简介</h2>
<h2> 函数详解</h2>
<h3> change_speed</h3>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change_speed</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3,words:900},y:"a",title:"Linux-0.11 kernel目录tty_ioctl.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-tty_ioctl","/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-tty_ioctl.md"]],["v-aa8f706a","/posts/Linux/kernel/Linux-0.11/Linux-0.11-mm-memory.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 memory.c详解</h1>
<h2> 模块简介</h2>
<p>memory.c负责内存分页机制的管理。其中un_wp_page，copy_page_tables, do_no_page等函数较为重要。</p>
<p>在Linux-0.11中，内存区域划分如下图所示：</p>
<figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-memory/mem-area.png" alt="memory-area" tabindex="0" loading="lazy"><figcaption>memory-area</figcaption></figure>`,r:{minutes:12,words:3599},y:"a",title:"Linux-0.11 memory.c详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-mm-memory","/posts/Linux/kernel/Linux-0.11/Linux-0.11-mm-memory.md"]],["v-78a6a3bd","/posts/Linux/kernel/Linux-0.11/Linux-0.11-mm-page.html",{d:"2023-04-04T03:33:11.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 page.s详解</h1>
<h2> 模块简介</h2>
<h2> 过程详解</h2>
<h3> _page_fault</h3>
<p>_page_fault:
页异常中断处理程序(中断14)， 主要分为两种情况处理。 一种是由于缺页引起的页异常中断，通过调用do_no_page(error_code, address)来处理， 二是由页写保护引起的页异常， 此时用页写保护处理函数do_wp_page(error_code, address)来处理。</p>
<p>如果对这里的汇编指令不熟悉的， 可以看一下另一篇文章<strong>Linux-0.11中的汇编</strong>进行学习。</p>`,r:{minutes:.93,words:278},y:"a",title:"Linux-0.11 page.s详解"},["/posts/Linux/kernel/Linux-0.11/Linux-0.11-mm-page","/posts/Linux/kernel/Linux-0.11/Linux-0.11-mm-page.md"]],["v-9b30b154","/posts/Linux/kernel/Linux-0.11/",{d:"2023-04-25T02:03:59.000Z",c:["Linux"],g:["Linux-0.11代码解读系列"],e:`<h1> Linux-0.11 详解大纲</h1>
<p>本系列使用的源码: <a href="https://github.com/yuan-xy/Linux-0.11.git" target="_blank" rel="noopener noreferrer">https://github.com/yuan-xy/Linux-0.11.git</a></p>
<p>参考书籍:</p>
<ul>
<li>Linux-0.11深入解读.pdf</li>
</ul>
<h2> 汇编语言基础</h2>
<p><a href="https://zgjsxx.github.io/posts/Linux/kernel/Linux-0.11/Linux-0.11-assemble-language.html" target="_blank" rel="noopener noreferrer">Linux-0.11 汇编语言</a></p>`,r:{minutes:2.64,words:793},y:"a",title:"Linux-0.11 详解大纲"},["/posts/Linux/kernel/Linux-0.11/index.html","/posts/Linux/kernel/Linux-0.11/readme.md"]],["v-0cb8674d","/posts/Linux/kernel/MIT-6.828/intro.html",{d:"2024-02-28T10:08:30.000Z",e:`<p>课程主页：</p>
<p><a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html(%E6%9C%89video)" target="_blank" rel="noopener noreferrer">https://pdos.csail.mit.edu/6.828/2020/schedule.html(有video)</a></p>
<p>中英文视频</p>
<p><a href="https://www.bilibili.com/video/BV19k4y1C7kA/?spm_id_from=333.337.search-card.all.click" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV19k4y1C7kA/?spm_id_from=333.337.search-card.all.click</a></p>`,r:{minutes:.08,words:23},y:"a",title:""},["/posts/Linux/kernel/MIT-6.828/intro","/posts/Linux/kernel/MIT-6.828/intro.md"]],["v-ccb0bf46","/posts/life/2023/children_day/childrenday.html",{d:"2023-06-10T13:36:20.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>生活
tag:</li>
<li>生活</li>
</ul>
<hr>
<h1> 2023年儿童节</h1>
<p>2023年，马上年过30的我和我的媳妇重温了一次儿童节的感觉，我们完成了立体积木的搭建，拼出来了可达鸭和马里奥。</p>
<p>拼这个积木真的很费手。。。</p>
<figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/life/2023/children_day/kedaya1.jpg" alt="可达鸭1" tabindex="0" loading="lazy"><figcaption>可达鸭1</figcaption></figure>`,r:{minutes:.57,words:171},y:"a",title:"2023年儿童节"},["/posts/life/2023/children_day/childrenday","/posts/life/2023/children_day/childrenday.md"]],["v-5c48a706","/posts/life/2023/dragon_day/dragon_day_travel.html",{d:"2023-06-10T14:00:10.000Z",e:`<hr>
<p>category:</p>
<ul>
<li>生活
tag:</li>
<li>生活</li>
</ul>
<hr>
<h1> 端午节旅行</h1>
<p>宁波-东海半边山</p>
`,r:{minutes:.06,words:18},y:"a",title:"端午节旅行"},["/posts/life/2023/dragon_day/dragon_day_travel","/posts/life/2023/dragon_day/dragon_day_travel.md"]],["v-3706649a","/404.html",{y:"p",title:""},["/404"]],["v-416ddfa3","/posts/Interview/",{y:"p",title:"Interview"},["/posts/Interview/index.html"]],["v-e1e3da16","/posts/",{y:"p",title:"Posts"},["/posts/index.html"]],["v-082e9577","/posts/about/",{y:"p",title:"About"},["/posts/about/index.html"]],["v-2f6732ea","/posts/datastructure_algorithm/",{y:"p",title:"Datastructure Algorithm"},["/posts/datastructure_algorithm/index.html"]],["v-636ab15a","/posts/electricity/",{y:"p",title:"Electricity"},["/posts/electricity/index.html"]],["v-79f5fc98","/posts/english/",{y:"p",title:"English"},["/posts/english/index.html"]],["v-0287a2e8","/posts/resource/",{y:"p",title:"Resource"},["/posts/resource/index.html"]],["v-16687167","/posts/Program_language/",{y:"p",title:"Program Language"},["/posts/Program_language/index.html"]],["v-5b57f026","/posts/Program_language/shell/",{y:"p",title:"Shell"},["/posts/Program_language/shell/index.html"]],["v-d7d9ec10","/posts/Program_language/verilog/",{y:"p",title:"Verilog"},["/posts/Program_language/verilog/index.html"]],["v-3689fde0","/posts/Linux/",{y:"p",title:"Linux"},["/posts/Linux/index.html"]],["v-6c608567","/posts/Linux/coroutine/",{y:"p",title:"Coroutine"},["/posts/Linux/coroutine/index.html"]],["v-1eeb974c","/posts/database/mysql/",{y:"p",title:"Mysql"},["/posts/database/mysql/index.html"]],["v-244063f8","/posts/database/sqlite/",{y:"p",title:"Sqlite"},["/posts/database/sqlite/index.html"]],["v-176e85c5","/posts/electricity/7-memory/",{y:"p",title:"7 Memory"},["/posts/electricity/7-memory/index.html"]],["v-615aed9c","/posts/electricity/HDL/",{y:"p",title:"H D L"},["/posts/electricity/HDL/index.html"]],["v-4d540f9e","/posts/electricity/Latch/",{y:"p",title:"Latch"},["/posts/electricity/Latch/index.html"]],["v-1c8e46ae","/posts/electricity/cmos/",{y:"p",title:"Cmos"},["/posts/electricity/cmos/index.html"]],["v-84d81b12","/posts/electricity/triode/",{y:"p",title:"Triode"},["/posts/electricity/triode/index.html"]],["v-c4b7d21c","/posts/life/2023/",{y:"p",title:"2023"},["/posts/life/2023/index.html"]],["v-0923aede","/posts/life/",{y:"p",title:"Life"},["/posts/life/index.html"]],["v-dafeeb6c","/posts/open_source_project/MyTinySTL/",{y:"p",title:"My Tiny S T L"},["/posts/open_source_project/MyTinySTL/index.html"]],["v-1c197e5a","/posts/open_source_project/",{y:"p",title:"Open Source Project"},["/posts/open_source_project/index.html"]],["v-8e35b194","/posts/open_source_project/workflow/",{y:"p",title:"Workflow"},["/posts/open_source_project/workflow/index.html"]],["v-41034476","/posts/tool/build-tool/",{y:"p",title:"Build Tool"},["/posts/tool/build-tool/index.html"]],["v-5979ec6c","/posts/tool/gdb/",{y:"p",title:"Gdb"},["/posts/tool/gdb/index.html"]],["v-597a015f","/posts/tool/git/",{y:"p",title:"Git"},["/posts/tool/git/index.html"]],["v-0ba026a0","/posts/tool/linux-cmd/",{y:"p",title:"Linux Cmd"},["/posts/tool/linux-cmd/index.html"]],["v-6adb003a","/posts/Program_language/Assembly_language/fullerton_CSci241/",{y:"p",title:"Fullerton C Sci241"},["/posts/Program_language/Assembly_language/fullerton_CSci241/index.html"]],["v-48eeaa85","/posts/Program_language/Assembly_language/",{y:"p",title:"Assembly Language"},["/posts/Program_language/Assembly_language/index.html"]],["v-5e686550","/posts/Program_language/cpp/cpp-template/",{y:"p",title:"Cpp Template"},["/posts/Program_language/cpp/cpp-template/index.html"]],["v-3dc0a7c1","/posts/Program_language/cpp/cpp20/",{y:"p",title:"Cpp20"},["/posts/Program_language/cpp/cpp20/index.html"]],["v-0686937d","/posts/Program_language/cpp/effective-STL/",{y:"p",title:"Effective S T L"},["/posts/Program_language/cpp/effective-STL/index.html"]],["v-878f927e","/posts/Program_language/cpp/effective-modern-cpp/",{y:"p",title:"Effective Modern Cpp"},["/posts/Program_language/cpp/effective-modern-cpp/index.html"]],["v-430bdc7a","/posts/Program_language/verilog/questions/",{y:"p",title:"Questions"},["/posts/Program_language/verilog/questions/index.html"]],["v-dd9a2efc","/posts/Linux/kernel/",{y:"p",title:"Kernel"},["/posts/Linux/kernel/index.html"]],["v-c8dcbd40","/posts/Linux/kernel/MIT-6.828/",{y:"p",title:"M I T 6.828"},["/posts/Linux/kernel/MIT-6.828/index.html"]],["v-eb2516be","/posts/life/2023/children_day/",{y:"p",title:"Children Day"},["/posts/life/2023/children_day/index.html"]],["v-5a843c8d","/posts/life/2023/dragon_day/",{y:"p",title:"Dragon Day"},["/posts/life/2023/dragon_day/index.html"]],["v-5bc93818","/category/",{y:"p",title:"分类"},["/category/index.html"]],["v-744d024e","/tag/",{y:"p",title:"标签"},["/tag/index.html"]],["v-e52c881c","/article/",{y:"p",title:"文章"},["/article/index.html"]],["v-154dc4c4","/star/",{y:"p",title:"收藏"},["/star/index.html"]],["v-01560935","/timeline/",{y:"p",title:"时间轴"},["/timeline/index.html"]],["v-a9f4e09e","/category/%E9%9D%A2%E7%BB%8F/",{y:"p",title:"面经 分类"},["/category/面经/","/category/%E9%9D%A2%E7%BB%8F/index.html"]],["v-ac7a9398","/tag/c__%E9%9D%A2%E7%BB%8F/",{y:"p",title:"c++面经 标签"},["/tag/c__面经/","/tag/c__%E9%9D%A2%E7%BB%8F/index.html"]],["v-6af60407","/category/data-structure/",{y:"p",title:"data structure 分类"},["/category/data-structure/index.html"]],["v-ec2c71de","/tag/data-structure/",{y:"p",title:"data structure 标签"},["/tag/data-structure/index.html"]],["v-41590e77","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{y:"p",title:"设计模式 分类"},["/category/设计模式/","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html"]],["v-05b88e01","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{y:"p",title:"设计模式 标签"},["/tag/设计模式/","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html"]],["v-a074e84e","/category/network/",{y:"p",title:"network 分类"},["/category/network/index.html"]],["v-29350809","/tag/tool/",{y:"p",title:"tool 标签"},["/tag/tool/index.html"]],["v-9c48d85a","/category/linux/",{y:"p",title:"Linux 分类"},["/category/linux/index.html"]],["v-b314c74c","/tag/c__/",{y:"p",title:"C++ 标签"},["/tag/c__/index.html"]],["v-58c4e07f","/category/tool/",{y:"p",title:"tool 分类"},["/category/tool/index.html"]],["v-66cda8af","/tag/effective-c__%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",{y:"p",title:"effective c++读书笔记 标签"},["/tag/effective-c__读书笔记/","/tag/effective-c__%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.html"]],["v-63dde429","/category/%E7%BC%96%E7%A0%81/",{y:"p",title:"编码 分类"},["/category/编码/","/category/%E7%BC%96%E7%A0%81/index.html"]],["v-4c56b96d","/tag/c__%E9%9D%A2%E8%AF%95%E9%A2%98/",{y:"p",title:"C++面试题 标签"},["/tag/c__面试题/","/tag/c__%E9%9D%A2%E8%AF%95%E9%A2%98/index.html"]],["v-65eddd24","/category/c__/",{y:"p",title:"C++ 分类"},["/category/c__/index.html"]],["v-046d1644","/tag/mytinystl/",{y:"p",title:"MyTinySTL 标签"},["/tag/mytinystl/index.html"]],["v-2ac2e0ae","/category/verilog/",{y:"p",title:"Verilog 分类"},["/category/verilog/index.html"]],["v-46f2f307","/tag/effective-stl%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",{y:"p",title:"effective STL读书笔记 标签"},["/tag/effective-stl读书笔记/","/tag/effective-stl%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.html"]],["v-73142956","/category/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/",{y:"p",title:"编译原理 分类"},["/category/编译原理/","/category/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/index.html"]],["v-61c98e96","/tag/effective-modern-c__%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",{y:"p",title:"effective modern c++读书笔记 标签"},["/tag/effective-modern-c__读书笔记/","/tag/effective-modern-c__%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.html"]],["v-fc60e8d0","/category/elf%E6%96%87%E4%BB%B6/",{y:"p",title:"ELF文件 分类"},["/category/elf文件/","/category/elf%E6%96%87%E4%BB%B6/index.html"]],["v-1d6ab4a3","/tag/linux-0.11%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97/",{y:"p",title:"Linux-0.11代码解读系列 标签"},["/tag/linux-0.11代码解读系列/","/tag/linux-0.11%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97/index.html"]],["v-7e88e46b","/category/%E5%8A%A8%E6%80%81%E5%BA%93/",{y:"p",title:"动态库 分类"},["/category/动态库/","/category/%E5%8A%A8%E6%80%81%E5%BA%93/index.html"]],["v-9717cc36","/category/mysql/",{y:"p",title:"Mysql 分类"},["/category/mysql/index.html"]],["v-8f1cfe08","/category/database/",{y:"p",title:"Database 分类"},["/category/database/index.html"]],["v-09679e8b","/category/sqlite/",{y:"p",title:"sqlite 分类"},["/category/sqlite/index.html"]],["v-6a871c0f","/category/electrical/",{y:"p",title:"electrical 分类"},["/category/electrical/index.html"]],["v-5b0c0eb8","/category/electronic-technique/",{y:"p",title:"electronic technique 分类"},["/category/electronic-technique/index.html"]],["v-19d09bed","/category/makefile/",{y:"p",title:"Makefile 分类"},["/category/makefile/index.html"]],["v-65efc1c2","/category/gdb/",{y:"p",title:"gdb 分类"},["/category/gdb/index.html"]],["v-65efd6b5","/category/git/",{y:"p",title:"git 分类"},["/category/git/index.html"]],["v-ed9cde38","/category/valgrind/",{y:"p",title:"valgrind 分类"},["/category/valgrind/index.html"]],["v-6cf551b2","/category/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/",{y:"p",title:"汇编语言 分类"},["/category/汇编语言/","/category/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/index.html"]]];var Vuepress=defineComponent({name:"Vuepress",setup(){const b=usePageLayout();return()=>h$4(b.value)}}),createRoutes=()=>pagesRoutes.reduce((b,[$,j,Z,U])=>(b.push({name:$,path:j,component:Vuepress,meta:Z},...U.map(G=>({path:G,redirect:j}))),b),[{name:"404",path:"/:catchAll(.*)",component:Vuepress}]),historyCreator=createWebHistory,createVueRouter=()=>{const b=createRouter({history:historyCreator(removeEndingSlash("/")),routes:createRoutes(),scrollBehavior:($,j,Z)=>Z||($.hash?{el:$.hash}:{top:0})});return b.beforeResolve(async($,j)=>{var Z;($.path!==j.path||j===START_LOCATION_NORMALIZED)&&([pageData.value]=await Promise.all([resolvers.resolvePageData($.name),(Z=pagesComponents[$.name])==null?void 0:Z.__asyncLoader()]))}),b},setupGlobalComponents=b=>{b.component("ClientOnly",ClientOnly),b.component("Content",Content)},setupGlobalComputed=(b,$,j)=>{const Z=computed(()=>resolvers.resolveLayouts(j)),U=computed(()=>resolvers.resolveRouteLocale(siteData.value.locales,$.currentRoute.value.path)),G=computed(()=>resolvers.resolveSiteLocaleData(siteData.value,U.value)),W=computed(()=>resolvers.resolvePageFrontmatter(pageData.value)),Y=computed(()=>resolvers.resolvePageHeadTitle(pageData.value,G.value)),X=computed(()=>resolvers.resolvePageHead(Y.value,W.value,G.value)),nn=computed(()=>resolvers.resolvePageLang(pageData.value)),an=computed(()=>resolvers.resolvePageLayout(pageData.value,Z.value));return b.provide(layoutsSymbol,Z),b.provide(pageFrontmatterSymbol,W),b.provide(pageHeadTitleSymbol,Y),b.provide(pageHeadSymbol,X),b.provide(pageLangSymbol,nn),b.provide(pageLayoutSymbol,an),b.provide(routeLocaleSymbol,U),b.provide(siteLocaleDataSymbol,G),Object.defineProperties(b.config.globalProperties,{$frontmatter:{get:()=>W.value},$head:{get:()=>X.value},$headTitle:{get:()=>Y.value},$lang:{get:()=>nn.value},$page:{get:()=>pageData.value},$routeLocale:{get:()=>U.value},$site:{get:()=>siteData.value},$siteLocale:{get:()=>G.value},$withBase:{get:()=>withBase}}),{layouts:Z,pageData,pageFrontmatter:W,pageHead:X,pageHeadTitle:Y,pageLang:nn,pageLayout:an,routeLocale:U,siteData,siteLocaleData:G}},setupUpdateHead=()=>{const b=useRoute(),$=usePageHead(),j=usePageLang(),Z=ref([]),U=()=>{$.value.forEach(W=>{const Y=queryHeadTag(W);Y&&Z.value.push(Y)})},G=()=>{document.documentElement.lang=j.value,Z.value.forEach(W=>{W.parentNode===document.head&&document.head.removeChild(W)}),Z.value.splice(0,Z.value.length),$.value.forEach(W=>{const Y=createHeadTag(W);Y!==null&&(document.head.appendChild(Y),Z.value.push(Y))})};provide(updateHeadSymbol,G),onMounted(()=>{U(),G(),watch(()=>b.path,()=>G())})},queryHeadTag=([b,$,j=""])=>{const Z=Object.entries($).map(([Y,X])=>isString$2(X)?`[${Y}=${JSON.stringify(X)}]`:X===!0?`[${Y}]`:"").join(""),U=`head > ${b}${Z}`;return Array.from(document.querySelectorAll(U)).find(Y=>Y.innerText===j)||null},createHeadTag=([b,$,j])=>{if(!isString$2(b))return null;const Z=document.createElement(b);return isPlainObject($)&&Object.entries($).forEach(([U,G])=>{isString$2(G)?Z.setAttribute(U,G):G===!0&&Z.setAttribute(U,"")}),isString$2(j)&&Z.appendChild(document.createTextNode(j)),Z},appCreator=createSSRApp,createVueApp=async()=>{var j;const b=appCreator({name:"VuepressApp",setup(){var Z;setupUpdateHead();for(const U of clientConfigs)(Z=U.setup)==null||Z.call(U);return()=>[h$4(RouterView),...clientConfigs.flatMap(({rootComponents:U=[]})=>U.map(G=>h$4(G)))]}}),$=createVueRouter();setupGlobalComponents(b),setupGlobalComputed(b,$,clientConfigs);for(const Z of clientConfigs)await((j=Z.enhance)==null?void 0:j.call(Z,{app:b,router:$,siteData}));return b.use($),{app:b,router:$}};createVueApp().then(({app:b,router:$})=>{$.isReady().then(()=>{b.mount("#app")})});export{Bt as B,P$5 as P,__vitePreload as _,at as a,useLocalStorage as b,useRouteLocale as c,createVueApp,kt as d,useEventListener as e,disableBodyScroll as f,clearAllBodyScrollLocks as g,P as h,useDebounceFn as i,kt$1 as k,useSiteData as u};
