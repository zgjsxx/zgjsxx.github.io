import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<h1 id="linux-0-11-文件系统file-dev-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统file-dev-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统file_dev.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>该文件主要提供了普通文件的读写方法<strong>file_read</strong>和<strong>file_write</strong>，这两个函数在系统调用_sys_read和sys_write中被调用。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="file-read" tabindex="-1"><a class="header-anchor" href="#file-read" aria-hidden="true">#</a> file_read</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">file_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是文件读的函数。</p><p>首先定义了一些参数，这里不做介绍，下面用到时，再详解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> left<span class="token punctuation">,</span>chars<span class="token punctuation">,</span>nr<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着进行参数的校验， 如果入参count等于0， 代表不读任何数据，则直接返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">=</span>count<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，只要left值不为0，那么首先调用bmap函数(inode.c)获取当前文件指针指向的数据块磁盘上的位置nr(nr是绝对位置)。得到nr值之后，调用bread函数读取一个盘块的数据到bh块中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nr <span class="token operator">=</span> <span class="token function">bmap</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span><span class="token punctuation">(</span>filp<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">)</span><span class="token operator">/</span>BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
        bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来计算文件指针指向的数据块中还剩下多少内容，将其和left相比，计算出两者较小值赋值给chars。接着将文件指针加上chars，将left减去chars。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>nr <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>f_pos <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">;</span>
chars <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span> BLOCK_SIZE<span class="token operator">-</span>nr <span class="token punctuation">,</span> left <span class="token punctuation">)</span><span class="token punctuation">;</span>
filp<span class="token operator">-&gt;</span>f_pos <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
left <span class="token operator">-=</span> chars<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来便开始本轮的文件读，调用put_fs_bytes拷贝数据到buf中。本轮读写之后，如果left不为0，则还会进入下一轮循环。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> nr <span class="token operator">+</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行到此，代表已经读完了要读的数据。最后修改了文件的atime属性。返回读取的字节数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span><span class="token comment">//更新访问时间</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>count<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>count<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">-</span>ERROR<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file-write" tabindex="-1"><a class="header-anchor" href="#file-write" aria-hidden="true">#</a> file_write</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">file_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是文件写的函数。</p><p>首先定义了一些参数，这里不做介绍，下面用到时，再详解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token class-name">off_t</span> pos<span class="token punctuation">;</span>
    <span class="token keyword">int</span> block<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当flag中设置了<code>O_APPEND</code>参数时，将pos指针指向文件尾。否则指向当前文件指针的位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filp<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;</span> O_APPEND<span class="token punctuation">)</span>
        pos <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        pos <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，当i小于count时进入循环，首先调用create_block从磁盘上获取一个逻辑块号，调用bread将磁盘块中的内容拷贝到bh中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> <span class="token function">create_block</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>pos<span class="token operator">/</span>BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//该block是绝对位置</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于当前的逻辑块，其已经写 pos % BLOCK_SIZE个字节， 其距离数据块的末尾还有(BLOCK_SIZE - c)个字节。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    c <span class="token operator">=</span> pos <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">;</span>  
    p <span class="token operator">=</span> c <span class="token operator">+</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> BLOCK_SIZE<span class="token operator">-</span>c<span class="token punctuation">;</span><span class="token comment">//当前数据块还剩多少空间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> count<span class="token operator">-</span>i<span class="token punctuation">)</span> c <span class="token operator">=</span> count<span class="token operator">-</span>i<span class="token punctuation">;</span>
    pos <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> pos<span class="token punctuation">;</span>
        inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    i <span class="token operator">+=</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后调用get_fs_bytes指针将buf中的数据拷贝到bh块中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的最后，更新i节点的m_time。如果本次操作不是在文件尾添加数据，则将读写指针调整到当前读写位置pos处。修改i节点的change time为当前时间。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    inode<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>filp<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;</span> O_APPEND<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        filp<span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> pos<span class="token punctuation">;</span>
        inode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2><h3 id="_1-i-atime-i-ctime-i-mtime的区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-i-atime-i-ctime-i-mtime的区别是什么" aria-hidden="true">#</a> 1.i_atime/i_ctime/i_mtime的区别是什么？</h3><p>i_atime：文件最后访问时间，即是文件最后的读取时间，例如：用命令<code>cat filename</code>，此时间修改，其他两个时间不修改。</p><p>i_ctime：结点最后修改时间，即是修改inode结构的时间，例如：用命令<code>ln filename1 filename2</code>，此时间修改，其他两个时间不修改。</p><p>i_mtime：文件最后修改时间，即是对文件内容的修改时间，例如：用命令<code>echo aaa &gt;filename</code>，以上三个时间都修改。</p>`,39),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","Linux-0.11-fs-file_dev.html.vue"]]);export{u as default};
