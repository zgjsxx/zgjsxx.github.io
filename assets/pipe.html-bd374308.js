const a=JSON.parse('{"key":"v-121ecfb3","path":"/posts/Windows/application-dev/pipe.html","title":"pipe","lang":"zh-CN","frontmatter":{"description":"pipe PeekNamedPipe // Get data size available from pipe DWORD bytesAvail = 0; BOOL isOK = PeekNamedPipe(hPipe, NULL, 0, NULL, &amp;bytesAvail, NULL); if(!isOK) { // Check GetLastError() code } // Allocate buffer and peek data from pipe DWORD bytesRead = 0; std::vector&lt;char&gt; buffer(bytesAvail); isOK = PeekNamedPipe(hPipe, &amp;buffer[0], bytesAvail, &amp;bytesRead, NULL, NULL); if(!isOK) { // Check GetLastError() code }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Windows/application-dev/pipe.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"pipe"}],["meta",{"property":"og:description","content":"pipe PeekNamedPipe // Get data size available from pipe DWORD bytesAvail = 0; BOOL isOK = PeekNamedPipe(hPipe, NULL, 0, NULL, &amp;bytesAvail, NULL); if(!isOK) { // Check GetLastError() code } // Allocate buffer and peek data from pipe DWORD bytesRead = 0; std::vector&lt;char&gt; buffer(bytesAvail); isOK = PeekNamedPipe(hPipe, &amp;buffer[0], bytesAvail, &amp;bytesRead, NULL, NULL); if(!isOK) { // Check GetLastError() code }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T09:43:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-20T09:43:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pipe\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T09:43:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"PeekNamedPipe","slug":"peeknamedpipe","link":"#peeknamedpipe","children":[]}],"git":{"createdTime":1710900585000,"updatedTime":1710927806000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.34,"words":101},"filePathRelative":"posts/Windows/application-dev/pipe.md","localizedDate":"2024年3月20日","excerpt":"<h1> pipe</h1>\\n<h2> PeekNamedPipe</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">// Get data size available from pipe</span>\\nDWORD bytesAvail <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\nBOOL isOK <span class=\\"token operator\\">=</span> <span class=\\"token function\\">PeekNamedPipe</span><span class=\\"token punctuation\\">(</span>hPipe<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>bytesAvail<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>isOK<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token comment\\">// Check GetLastError() code</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Allocate buffer and peek data from pipe</span>\\nDWORD bytesRead <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>    \\nstd<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">buffer</span><span class=\\"token punctuation\\">(</span>bytesAvail<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nisOK <span class=\\"token operator\\">=</span> <span class=\\"token function\\">PeekNamedPipe</span><span class=\\"token punctuation\\">(</span>hPipe<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>buffer<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> bytesAvail<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>bytesRead<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>isOK<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token comment\\">// Check GetLastError() code</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
