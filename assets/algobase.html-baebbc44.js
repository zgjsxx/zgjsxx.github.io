import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},e=t(`<h1 id="algobase" tabindex="-1"><a class="header-anchor" href="#algobase" aria-hidden="true">#</a> algobase</h1><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="unchecked-copy" tabindex="-1"><a class="header-anchor" href="#unchecked-copy" aria-hidden="true">#</a> unchecked_copy</h3><p>unchecked_copy有两个版本，一个接受平凡的对象类型的参数，其他的类型则进入normal版本。</p><p><strong>1.normal版本</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIter</span><span class="token operator">&gt;</span>
OutputIter 
<span class="token function">unchecked_copy</span><span class="token punctuation">(</span>InputIter first<span class="token punctuation">,</span> InputIter last<span class="token punctuation">,</span> OutputIter result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">unchecked_copy_cat</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token function">iterator_category</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.平凡类型</strong></p><p>由于平凡数据类型没有自定义的拷贝构造函数，因此直接可以使用memmove直接进行内存拷贝。</p><p>这里使用<code>std::is_trivially_copy_assignable&lt;Up&gt;::value</code>去判断类型U的拷贝构造函数是否是平凡的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Up</span><span class="token operator">&gt;</span>
<span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>enable_if<span class="token operator">&lt;</span>
  std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>remove_const<span class="token operator">&lt;</span>Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">,</span> Up<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&amp;&amp;</span>
  std<span class="token double-colon punctuation">::</span>is_trivially_copy_assignable<span class="token operator">&lt;</span>Up<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
  Up<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type
<span class="token function">unchecked_copy</span><span class="token punctuation">(</span>Tp<span class="token operator">*</span> first<span class="token punctuation">,</span> Tp<span class="token operator">*</span> last<span class="token punctuation">,</span> Up<span class="token operator">*</span> result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span> n <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_t<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>last <span class="token operator">-</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">memmove</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> first<span class="token punctuation">,</span> n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Up<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result <span class="token operator">+</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","algobase.html.vue"]]);export{r as default};
