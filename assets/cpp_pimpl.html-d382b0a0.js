const n=JSON.parse('{"key":"v-4b1e4810","path":"/posts/Program_language/cpp/cpp_pimpl.html","title":"c++中的编程技巧pImpl","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"c++中的编程技巧pImpl 代码 // ---------------------- #include &lt;memory&gt; // PImpl #include &lt;string&gt; using namespace std; class User { public: // Constructor and Destructors ~User(); explicit User(string name); // Assignment Operator and Copy Constructor User(const User&amp; other); User&amp; operator=(User rhs); // Getter int getSalary() const; // Setter void setSalary(int); private: // Internal implementation class class Impl; // Pointer to the internal implementation unique_ptr&lt;Impl&gt; pimpl; }; #include &lt;iostream&gt; using namespace std; struct User::Impl { Impl(string name) : name(move(name)){}; ~Impl(){}; void welcomeMessage() const { cout &lt;&lt; \\"Welcome, \\" &lt;&lt; name &lt;&lt; endl; } string name{}; int salary{-1}; }; // Constructor connected with our Impl structure User::User(string name) : pimpl(new Impl(move(name))) { pimpl-&gt;welcomeMessage(); } // Default Constructor User::~User() = default; // Assignment operator and Copy constructor User::User(const User&amp; other) : pimpl(new Impl(*other.pimpl)) { } User&amp; User::operator=(User rhs) { swap(pimpl, rhs.pimpl); return *this; } // Getter and setter int User::getSalary() const { return pimpl-&gt;salary; } void User::setSalary(int salary) { pimpl-&gt;salary = salary; cout &lt;&lt; \\"Salary set to \\" &lt;&lt; salary &lt;&lt; endl; } int main() { User user(\\"demo\\"); user.setSalary(10000); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_pimpl.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++中的编程技巧pImpl"}],["meta",{"property":"og:description","content":"c++中的编程技巧pImpl 代码 // ---------------------- #include &lt;memory&gt; // PImpl #include &lt;string&gt; using namespace std; class User { public: // Constructor and Destructors ~User(); explicit User(string name); // Assignment Operator and Copy Constructor User(const User&amp; other); User&amp; operator=(User rhs); // Getter int getSalary() const; // Setter void setSalary(int); private: // Internal implementation class class Impl; // Pointer to the internal implementation unique_ptr&lt;Impl&gt; pimpl; }; #include &lt;iostream&gt; using namespace std; struct User::Impl { Impl(string name) : name(move(name)){}; ~Impl(){}; void welcomeMessage() const { cout &lt;&lt; \\"Welcome, \\" &lt;&lt; name &lt;&lt; endl; } string name{}; int salary{-1}; }; // Constructor connected with our Impl structure User::User(string name) : pimpl(new Impl(move(name))) { pimpl-&gt;welcomeMessage(); } // Default Constructor User::~User() = default; // Assignment operator and Copy constructor User::User(const User&amp; other) : pimpl(new Impl(*other.pimpl)) { } User&amp; User::operator=(User rhs) { swap(pimpl, rhs.pimpl); return *this; } // Getter and setter int User::getSalary() const { return pimpl-&gt;salary; } void User::setSalary(int salary) { pimpl-&gt;salary = salary; cout &lt;&lt; \\"Salary set to \\" &lt;&lt; salary &lt;&lt; endl; } int main() { User user(\\"demo\\"); user.setSalary(10000); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T02:19:31.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-06T02:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++中的编程技巧pImpl\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T02:19:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"pImpl的缺点","slug":"pimpl的缺点","link":"#pimpl的缺点","children":[]}],"git":{"createdTime":1683210075000,"updatedTime":1683339571000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":0.86,"words":257},"filePathRelative":"posts/Program_language/cpp/cpp_pimpl.md","localizedDate":"2023年5月4日","excerpt":"<h1> c++中的编程技巧pImpl</h1>\\n<h2> 代码</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">// ----------------------</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;memory&gt;</span> <span class=\\"token comment\\">// PImpl</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">// Constructor and Destructors</span>\\n \\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">explicit</span> <span class=\\"token function\\">User</span><span class=\\"token punctuation\\">(</span>string name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// Assignment Operator and Copy Constructor</span>\\n \\n    <span class=\\"token function\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> User<span class=\\"token operator\\">&amp;</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    User<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>User rhs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// Getter</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getSalary</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// Setter</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setSalary</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">// Internal implementation class</span>\\n    <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Impl</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// Pointer to the internal implementation</span>\\n    unique_ptr<span class=\\"token operator\\">&lt;</span>Impl<span class=\\"token operator\\">&gt;</span> pimpl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">User</span><span class=\\"token operator\\">:</span><span class=\\"token base-clause\\"><span class=\\"token operator\\">:</span><span class=\\"token class-name\\">Impl</span></span> <span class=\\"token punctuation\\">{</span>\\n \\n    <span class=\\"token function\\">Impl</span><span class=\\"token punctuation\\">(</span>string name<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token operator\\">:</span> <span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">move</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">Impl</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">welcomeMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> \\n    <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Welcome, \\"</span>\\n             <span class=\\"token operator\\">&lt;&lt;</span> name <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n \\n    string name<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> salary<span class=\\"token punctuation\\">{</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token comment\\">// Constructor connected with our Impl structure</span>\\n<span class=\\"token class-name\\">User</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">User</span><span class=\\"token punctuation\\">(</span>string name<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token operator\\">:</span> <span class=\\"token function\\">pimpl</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Impl</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">move</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    pimpl<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">welcomeMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token comment\\">// Default Constructor</span>\\n<span class=\\"token class-name\\">User</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token operator\\">~</span><span class=\\"token function\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token comment\\">// Assignment operator and Copy constructor</span>\\n \\n<span class=\\"token class-name\\">User</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> User<span class=\\"token operator\\">&amp;</span> other<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token operator\\">:</span> <span class=\\"token function\\">pimpl</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Impl</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>other<span class=\\"token punctuation\\">.</span>pimpl<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\nUser<span class=\\"token operator\\">&amp;</span> User<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>User rhs<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>pimpl<span class=\\"token punctuation\\">,</span> rhs<span class=\\"token punctuation\\">.</span>pimpl<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token comment\\">// Getter and setter</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token class-name\\">User</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">getSalary</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> pimpl<span class=\\"token operator\\">-&gt;</span>salary<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token keyword\\">void</span> <span class=\\"token class-name\\">User</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">setSalary</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> salary<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    pimpl<span class=\\"token operator\\">-&gt;</span>salary <span class=\\"token operator\\">=</span> salary<span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Salary set to \\"</span>\\n         <span class=\\"token operator\\">&lt;&lt;</span> salary <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    User <span class=\\"token function\\">user</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"demo\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    user<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setSalary</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
