const t=JSON.parse('{"key":"v-10d3936a","path":"/posts/Program_language/cpp/cpp_optional.html","title":"std::optional的实现原理","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"std::optional的实现原理 template &lt;typename T&gt; class optional { \\tbool _initialized; \\tstd::aligned_storage_t&lt;sizeof(T), alignof(T)&gt; _storage; public: // operations };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_optional.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"std::optional的实现原理"}],["meta",{"property":"og:description","content":"std::optional的实现原理 template &lt;typename T&gt; class optional { \\tbool _initialized; \\tstd::aligned_storage_t&lt;sizeof(T), alignof(T)&gt; _storage; public: // operations };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-17T12:33:21.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-17T12:33:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"std::optional的实现原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-17T12:33:21.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1693753401000,"updatedTime":1694954001000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.09,"words":27},"filePathRelative":"posts/Program_language/cpp/cpp_optional.md","localizedDate":"2023年9月3日","excerpt":"<h1> std::optional的实现原理</h1>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">T</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">optional</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">bool</span> _initialized<span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>aligned_storage_t<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>T<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">alignof</span><span class=\\"token punctuation\\">(</span>T<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&gt;</span> _storage<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span> \\n<span class=\\"token comment\\">// operations </span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
