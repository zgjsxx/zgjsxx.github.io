import{_ as n,V as s,W as a,a0 as p}from"./framework-c954d91f.js";const t={},e=p(`<h1 id="linux-0-11-文件系统read-write-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统read-write-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统read_write.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>该模块实现了文件系统通用的读写的方法read/write/lseek。</p><p>根据文件类型的不同，在内部将调用不同的方法。如果是管道文件，则调用pipe.c中的读写方法，如果是字符设备，则会调用char_dev.c中的方法，如果是目录或者普通文件，将调用file_dev.c中的读写方法，如果是块设备文件，将调用block_dev.c中的读写方法。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="sys-read" tabindex="-1"><a class="header-anchor" href="#sys-read" aria-hidden="true">#</a> sys_read</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是read函数的系统调用函数， 主要作用是实现各种类型的读的方法。</p><p>其实现原理是通过fd找到对应的inode节点， 然后根据inode节点的属性去调用对应的read方法， 包括read_pipe，rw_char,block_read,file_read。</p><p>这里首先对参数进行校验。如果fd大于进程对于fd的限制值NR_OPEN（20）， 会返回错误。除此以外， 如果需要读取的字符数量小于0或者fd对应的文件指针为空， 也都会返回错误。</p><p>如果count数量为0， 则直接返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&gt;=</span>NR_OPEN <span class="token operator">||</span> count<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token operator">=</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>count<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是通过if语句判断inode的属性去调用对应的read方法， 如果是管道文件， 就调用read_pipe，如果是字符型文件，就调用rw_char进行读取， 如果是块设备文件，就调用block_read， 如果是目录文件或者常规文件， 就调用file_read。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>inode <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_inode<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_mode<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">read_pipe</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">-</span>EIO<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">rw_char</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span><span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">block_read</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">S_ISREG</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">+</span>file<span class="token operator">-&gt;</span>f_pos <span class="token operator">&gt;</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span>
        count <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size <span class="token operator">-</span> file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">file_read</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>file<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-write" tabindex="-1"><a class="header-anchor" href="#sys-write" aria-hidden="true">#</a> sys_write</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_write</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用与sys_read是有相似之处的，其实现原理是通过fd找到对应的inode节点， 然后根据inode节点的属性去调用对应的write方法， 包括write_pipe，rw_char,block_write,file_write。</p><p>接下来就是通过if语句判断inode的属性去调用对应的write方法， 如果是管道文件， 就调用write_pipe，如果是字符型文件，就调用rw_char进行读取， 如果是块设备文件，就调用block_write， 如果是目录文件或者常规文件， 就调用file_write。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_mode<span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">write_pipe</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">-</span>EIO<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">rw_char</span><span class="token punctuation">(</span>WRITE<span class="token punctuation">,</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span><span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">block_write</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">file_write</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>file<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-lseek" tabindex="-1"><a class="header-anchor" href="#sys-lseek" aria-hidden="true">#</a> sys_lseek</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_lseek</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> origin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是重定位文件读写指针的系统调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token operator">=</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span>
	   <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">IS_SEEKABLE</span><span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//首先判断参数的有效性</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span><span class="token comment">//管道节点头尾指针不能随意移动</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ESPIPE<span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token comment">//SEEK_SET  绝对值</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>offset<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
			file<span class="token operator">-&gt;</span>f_pos<span class="token operator">=</span>offset<span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token comment">//SEEK_CUR  相对于当前偏移值</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_pos<span class="token operator">+</span>offset<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
			file<span class="token operator">-&gt;</span>f_pos <span class="token operator">+=</span> offset<span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token comment">//SEEK_END</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">=</span>file<span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_size<span class="token operator">+</span>offset<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
			file<span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-fs-read_write.html.vue"]]);export{r as default};
