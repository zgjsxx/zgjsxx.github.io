const e=JSON.parse('{"key":"v-763b3518","path":"/posts/Program_language/cpp/effective-cpp-20.html","title":"effective c++ 20 传引用代替传值","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 20 传引用代替传值 总结 尽量以传常引用去替代传值。前者通常比较高效，并且可以避免切割问题。 以上规则并不适用于内置类型 ，以及STL的迭代器和函数对象，对它们而言，传值往往比较合适。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp-20.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 20 传引用代替传值"}],["meta",{"property":"og:description","content":"effective c++ 20 传引用代替传值 总结 尽量以传常引用去替代传值。前者通常比较高效，并且可以避免切割问题。 以上规则并不适用于内置类型 ，以及STL的迭代器和函数对象，对它们而言，传值往往比较合适。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-08T05:45:44.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-08T05:45:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 20 传引用代替传值\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-08T05:45:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683524744000,"updatedTime":1683524744000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.3,"words":90},"filePathRelative":"posts/Program_language/cpp/effective-cpp-20.md","localizedDate":"2023年5月8日","excerpt":"<h1> effective c++ 20 传引用代替传值</h1>\\n<h2> 总结</h2>\\n<ul>\\n<li>尽量以传常引用去替代传值。前者通常比较高效，并且可以避免切割问题。</li>\\n<li>以上规则并不适用于内置类型 ，以及STL的迭代器和函数对象，对它们而言，传值往往比较合适。</li>\\n</ul>\\n","autoDesc":true}');export{e as data};
