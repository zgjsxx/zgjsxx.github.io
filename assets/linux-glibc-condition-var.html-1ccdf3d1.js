import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const e={},p=t(`<h1 id="深入了解glibc的条件变量" tabindex="-1"><a class="header-anchor" href="#深入了解glibc的条件变量" aria-hidden="true">#</a> 深入了解glibc的条件变量</h1><p><strong>条件变量</strong>是日常开发中进行<strong>多线程同步</strong>的一个重要手段，使用条件变量，可以使得我们可以构建出<strong>生产者-消费者</strong>这样的模型。</p><p>本文将从glibc条件变量的源码出发，讲解其背后的实现原理。</p><h2 id="pthread-cond-t的结构" tabindex="-1"><a class="header-anchor" href="#pthread-cond-t的结构" aria-hidden="true">#</a> pthread_cond_t的结构</h2><p><code>pthread_cond_t</code>是glibc的条件变量的结构，其<code>___data</code>字段比较重要，进一步我们查看<code>__pthread_cond_s</code>的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">union</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">__pthread_cond_s</span> __data<span class="token punctuation">;</span>
  <span class="token keyword">char</span> __size<span class="token punctuation">[</span>__SIZEOF_PTHREAD_COND_T<span class="token punctuation">]</span><span class="token punctuation">;</span>
  __extension__ <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> __align<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">pthread_cond_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__pthread_cond_s</code>的定义如下所示，字段很多，比之前的互斥锁复杂了很多。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">__pthread_cond_s</span>
<span class="token punctuation">{</span>
  __extension__ <span class="token keyword">union</span>
  <span class="token punctuation">{</span>
    __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> __wseq<span class="token punctuation">;</span>
    <span class="token keyword">struct</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __low<span class="token punctuation">;</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __high<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> __wseq32<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  __extension__ <span class="token keyword">union</span>
  <span class="token punctuation">{</span>
    __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> __g1_start<span class="token punctuation">;</span>
    <span class="token keyword">struct</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __low<span class="token punctuation">;</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __high<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> __g1_start32<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g_refs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> __LOCK_ALIGNMENT<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g_size<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g1_orig_size<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __wrefs<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g_signals<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其各个字段的解释如下所示：</p><ul><li>__wrefs: G1和G2所有等待的线程数，是按照8的倍数来的，1个线程为8，2个线程是16，以此类推。</li><li>__g1_start: G1的起点的在历史waiter中的序号。</li><li>__g1_orig_size: G1的原始长度。低2位代表条件变量的内部的锁。</li><li>__wseq32：等待的序列号。</li><li>__g_refs: 表示G1和G2futex waiter的引用计数，例如{2，2}表示G1和G2各有一个waiter。</li><li>__g_signals：可以被消费的信号数</li><li>__g_size：G1和G2在切换之后，G1里面剩余的waiter数量。</li></ul><p>附录中有源码中对于这些字段的详细解释，也可以参考。</p><p>总之这些字段是比较复杂的，下面将会对<code>pthread_cond_signal</code>和<code>pthread_cond_wait</code>两个函数进行详解，届时将会理解这些字段的含义。</p><h2 id="pthread-cond-signal" tabindex="-1"><a class="header-anchor" href="#pthread-cond-signal" aria-hidden="true">#</a> pthread_cond_signal</h2><p>pthread_cond_signal是条件变量发送信号的方法，其过程如下所示：</p><ul><li><ol><li>检查__wrefs, 若没有waiter则直接返回</li></ol></li><li><ol start="2"><li>有waiter, 检查是否需要切换组(G1为空，G2有一个等待者，则需要将 G2 切换为 G1)</li></ol></li><li><ol start="3"><li>唤醒G1中剩余的waiter。</li></ol></li></ul><p>这里开始涉及G1和G2的概念。这里给出其含义，即新的waiter将加入G2,signal将从G1中取waiter唤醒，如果G1没有waiter，在从G2中取信号唤醒。</p><p>接下来通过源码分析其执行过程。</p><p><code>pthread_cond_signal</code>首先将读取条件变量的等待任务的数量。 <code>__wref &gt;&gt; 3</code> 等同于<code>__wref/8</code>，wref每次是按照8递增的，在pthread_conf_wait函数中有相应实现。</p><p>__wref按照8递增的原因，在注释中也给出了,因为低3位有了其它用途。</p><blockquote><p>__wrefs: Waiter reference counter.</p><ul><li>Bit 2 is true if waiters should run futex_wake when they remove the last reference. pthread_cond_destroy uses this as futex word.</li><li>Bit 1 is the clock ID (0 == CLOCK_REALTIME, 1 == CLOCK_MONOTONIC).</li><li>Bit 0 is true iff this is a process-shared condvar.</li></ul></blockquote><p>如果没有waiter，就不用发送信号，于是直接返回。所谓waiter就是调用了pthread_cond_wait而陷入wait的任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> wrefs <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__wrefs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>wrefs <span class="token operator">&gt;&gt;</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来获取条件变量中的序列号，通过序列号来获取现在的G1数组的下标（0或者1）。</p><p>刚开始时wseq为偶数，因此G1的index为1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> wseq <span class="token operator">=</span> <span class="token function">__condvar_load_wseq_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> g1 <span class="token operator">=</span> <span class="token punctuation">(</span>wseq <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>
  wseq <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  bool do_futex_wake <span class="token operator">=</span> false<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着检查G1中是否有waiter，如果有，向G1组中发送信号值（对应的signals+2），并将G1中剩余的waiter减去1。</p><p>如果G1已经没有剩余的waiter，那么就需要从G2中取waiter。这里通过__condvar_quiesce_and_switch_g1实现，实际上__condvar_quiesce_and_switch_g1是将G1和G2的身份做了调换。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token operator">||</span> <span class="token function">__condvar_quiesce_and_switch_g1</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> wseq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g1<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* Add a signal.  Relaxed MO is fine because signaling does not need to
	 establish a happens-before relation (see above).  We do not mask the
	 release-MO store when initializing a group in
	 __condvar_quiesce_and_switch_g1 because we use an atomic
	 read-modify-write and thus extend that store&#39;s release sequence.  */</span>
      <span class="token function">atomic_fetch_add_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token comment">/* TODO Only set it if there are indeed futex waiters.  */</span>
      do_futex_wake <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面详细看看__condvar_quiesce_and_switch_g1都做了哪些事情，其定义在了<code>nptl/pthread_cond_common.c</code>文件中。</p><p>__condvar_quiesce_and_switch_g1首先检查G2是否有waiter，如果没有waiter，则不进行操作。即G1和G2不需要进行调整，新的waiter仍然记录在G2中。计算方法可以参考下图进行理解：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/cond-var2.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> old_orig_size <span class="token operator">=</span> <span class="token function">__condvar_get_orig_size</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> old_g1_start <span class="token operator">=</span> <span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>wseq <span class="token operator">-</span> old_g1_start <span class="token operator">-</span> old_orig_size<span class="token punctuation">)</span>
	  <span class="token operator">+</span> cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> false<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面将G1的signal值和1进行与操作，标记此时g1已经被close。因为程序的并发性，在G1和G2切换的时候可能还会有新的waiter加入到旧的G1中。于是就给他们发送特殊的信号值，使得这些waiter可以感知。从这个点，也能联想到为什么条件变量会存在<strong>虚假唤醒</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token function">atomic_fetch_or_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，将G1中剩下的waiter全部唤醒。实际上进入__condvar_quiesce_and_switch_g1方法时，G1的长度已经为0，这里G1又出现了waiter就是由于程序的并发生可能导致的问题。因此这里将G1剩下的waiter进行唤醒。这里__g_refs和已经调用futex_wait进行睡眠的waiter数量相关。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> r <span class="token operator">=</span> <span class="token function">atomic_fetch_or_release</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> spin <span class="token operator">=</span> maxspin<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>spin <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> spin<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        r <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        r <span class="token operator">=</span> <span class="token function">atomic_fetch_or_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">futex_wait_simple</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">,</span> r<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        r <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，开始对G1和G2进行切换。换的过程很简单，就是将G1的index和G2的index做了切换。</p><p>切换之后，为了知道当前G1的一些信息，会计算其起始下标和长度。这个起始下标的含义起始时针对历史上所有的waiter而言的。这个点不是很好理解，可以参考下文中对于pthread_cond_signal和pthread_conf_wait的梳理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    wseq <span class="token operator">=</span> <span class="token function">__condvar_fetch_xor_wseq_release</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    g1 <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>g1index <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> orig_size <span class="token operator">=</span> wseq <span class="token operator">-</span> <span class="token punctuation">(</span>old_g1_start <span class="token operator">+</span> old_orig_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__condvar_set_orig_size</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> orig_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Use and addition to not loose track of cancellations in what was
        previously G2.  */</span>
    cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span> <span class="token operator">+=</span> orig_size<span class="token punctuation">;</span><span class="token comment">//计算还有多少waiter没有唤醒</span>

    <span class="token comment">//如果waiter cacel了wait，可能会走到这个if语句中。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>

    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__condvar_quiesce_and_switch_g1到此为止就结束了，实际上就是当旧的G1中所有的waiter都唤醒时，将老的G1和G2身份对调。于是老的G2就成为了G1。后续将从G1继续唤醒waiter。</p><p>回到<code>pthread_cond_signal</code>，最后一部分代码则将互斥锁进行释放，接着如果需要进入内核，则调用<strong>futex_wake</strong>对waiter进行唤醒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token function">__condvar_release_lock</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_futex_wake<span class="token punctuation">)</span>
    <span class="token function">futex_wake</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pthread-cond-wait" tabindex="-1"><a class="header-anchor" href="#pthread-cond-wait" aria-hidden="true">#</a> pthread_cond_wait</h2><p><code>pthread_cond_wait</code>是等待条件变量的方法，其过程如下所示：</p><ol><li>申请一个新的__wseq，实际上就是老的__wseq加上2。</li><li>释放互斥锁</li><li>自旋等待，检查 __g_signals，自旋次数结束，进入futex_wait，休眠</li><li>完成后，需要对mutex进行加锁</li></ol><p>下面就对照源码进行解析。</p><p>pthread_cond_wait首先会获取一个等待的序列号。条件变量的结构体中有一个字段是__wseq，这个便是所谓的序列号，每次pthread_cond_wait都会将序列号加上2。</p><p>从条件变量的初始化可以知道，wseq初始值为0。而wseq每次原子地递增2，因此当前wseq是一个偶数。wseq的奇偶性不是一成不变的，当g1和g2发生切换时，wseq会发生变化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTHREAD_COND_INITIALIZER</span> <span class="token expression"><span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来将wseq和1进行与操作，由于wseq为偶数，因此g等于0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token class-name">uint64_t</span> wseq <span class="token operator">=</span> <span class="token function">__condvar_fetch_add_wseq_acquire</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> g <span class="token operator">=</span> wseq <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> seq <span class="token operator">=</span> wseq <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，使用原子函数atomic_fetch_add_relaxed将增加条件变量的等待数量，注意这里一次增加了8。这里使用了relaxed的memory order已经足够了，因为我们的目的仅仅为了将cond-&gt;__data.__wrefs增加8。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token function">atomic_fetch_add_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__wrefs<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来调用__pthread_mutex_unlock_usercnt释放互斥锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  err <span class="token operator">=</span> <span class="token function">__pthread_mutex_unlock_usercnt</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">__condvar_cancel_waiting</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> seq<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">__condvar_confirm_wakeup</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先自旋检查<code>cond-&gt;__data.__g_signals+ g</code>group中的信号数量，如果有信号，意味着不用进入内核态，而直接唤醒。这里也是条件变量出现<strong>虚假唤醒</strong>的原因。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> spin <span class="token operator">=</span> maxspin<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>signals <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> spin <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Check that we are not spinning on a group that&#39;s already
        closed.  */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>seq <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> done<span class="token punctuation">;</span>

        <span class="token comment">/* TODO Back off.  */</span>

        <span class="token comment">/* Reload signals.  See above for MO.  */</span>
        signals <span class="token operator">=</span> <span class="token function">atomic_load_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
        spin<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，如果signal的值是低位为1，意味着当前的组已经被closed，直接跳出wait方法。这个点和之前讲解pthread_signal是呼应的。</p><p>如果signals的值低位不是1，并且大于0，则认为获取到了有效的信号。跳过下面的逻辑。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>signals <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> done<span class="token punctuation">;</span>

    <span class="token comment">/* If there is an available signal, don&#39;t block.  */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>signals <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果逻辑没有走到这里，意味着自旋过程中，没有收到信号，于是尝试开始进行阻塞的动作。</p><p>首先将引用计数增加2，意味着将要进入内核wait。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token function">atomic_fetch_add_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">atomic_load_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token operator">||</span> <span class="token punctuation">(</span>seq <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Our group is closed.  Wake up any signalers that might be
        waiting.  */</span>
        <span class="token function">__condvar_dec_grefs</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面开始调用futex_wait进行等待。注意这里调用的是__futex_abstimed_wait_cancelable64，看起来好像是可以传递时间参数的。但是___pthread_cond_wait传入的参数是NULL，因此等同于futex_wait。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>
<span class="token function">___pthread_cond_wait</span> <span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>cond<span class="token punctuation">,</span> <span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* clockid is unused when abstime is NULL. */</span>
  <span class="token keyword">return</span> <span class="token function">__pthread_cond_wait_common</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> mutex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">struct</span> <span class="token class-name">_pthread_cleanup_buffer</span> buffer<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_condvar_cleanup_buffer</span> cbuffer<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>wseq <span class="token operator">=</span> wseq<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>cond <span class="token operator">=</span> cond<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>mutex <span class="token operator">=</span> mutex<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>private <span class="token operator">=</span> private<span class="token punctuation">;</span>
    <span class="token function">__pthread_cleanup_push</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> __condvar_cleanup_waiting<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cbuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token function">__futex_abstimed_wait_cancelable64</span> <span class="token punctuation">(</span>
    cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> clockid<span class="token punctuation">,</span> abstime<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">__pthread_cleanup_pop</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> ETIMEDOUT <span class="token operator">||</span> err <span class="token operator">==</span> EOVERFLOW<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">__condvar_dec_grefs</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* If we timed out, we effectively cancel waiting.  Note that
        we have decremented __g_refs before cancellation, so that a
        deadlock between waiting for quiescence of our group in
        __condvar_quiesce_and_switch_g1 and us trying to acquire
        the lock during cancellation is not possible.  */</span>
        <span class="token function">__condvar_cancel_waiting</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> seq<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> err<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token function">__condvar_dec_grefs</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Reload signals.  See above for MO.  */</span>
    signals <span class="token operator">=</span> <span class="token function">atomic_load_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码是针对并发问题的处理，这里可以自行研究。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token class-name">uint64_t</span> g1_start <span class="token operator">=</span> <span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seq <span class="token operator">&lt;</span> <span class="token punctuation">(</span>g1_start <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g1_start <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> g<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">==</span> g1_start<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token function">atomic_compare_exchange_weak_relaxed</span>
                    <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">futex_wake</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pthread-cond-signal和pthread-cond-wait梳理" tabindex="-1"><a class="header-anchor" href="#pthread-cond-signal和pthread-cond-wait梳理" aria-hidden="true">#</a> pthread_cond_signal和pthread_cond_wait梳理</h2><p>上面对两个函数进行了详解的分析，这里提供一张流程图，用以对上述过程加以理解。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/cond-var.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><h2 id="条件变量的虚假唤醒是如何产生的" tabindex="-1"><a class="header-anchor" href="#条件变量的虚假唤醒是如何产生的" aria-hidden="true">#</a> 条件变量的虚假唤醒是如何产生的?</h2><p>在pthread_cond_signal中，首先会原子性地修改一个signal变量的值，如果此时一个waiter还没有进入内核wait，还在自旋检查该变量，那么这个waiter就会被直接唤醒，而不会调用futex_wait。</p><p>在修改完这个signal变量的值之后，将会调用futex_wait唤醒一个waiter。</p><p>如果此时有一个signal的A线程，一个已经调用futex_wait的B线程，和一个正在wait的C线程，signal线程调用pthead_cond_signal就可能同时将B线程和C线程全部唤醒。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/cond-var3.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><p>从源码的注释中，导致虚假唤醒的场景还不止于此，但是上述是一个最经典的场景。</p><p>由于虚假唤醒的存在，就要求我们在写条件变量时一定要记得写循环判等，类似于下面的形式。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gdb观察条件变量的内部值的变化" tabindex="-1"><a class="header-anchor" href="#gdb观察条件变量的内部值的变化" aria-hidden="true">#</a> gdb观察条件变量的内部值的变化</h2><h3 id="程序源码" tabindex="-1"><a class="header-anchor" href="#程序源码" aria-hidden="true">#</a> 程序源码</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//g++ test.cpp -g -lpthread</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
pthread_t t1<span class="token punctuation">;</span>
pthread_t t2<span class="token punctuation">;</span>
pthread_t t3<span class="token punctuation">;</span>
pthread_mutex_t mutex<span class="token punctuation">;</span>
pthread_cond_t cond<span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
         <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Process1 signal\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Waiter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Waiter start to wait\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Waiter awake\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>Signal<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>Waiter<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>Waiter<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用gdb调试上述程序，并在源码中的第17行设置一个断点。运行程序。</p><h3 id="_1-新的waiter加入了g2" tabindex="-1"><a class="header-anchor" href="#_1-新的waiter加入了g2" aria-hidden="true">#</a> 1.新的waiter加入了G2</h3><p>在程序中，创建了三个线程，两个waiter线程，一个signal线程。我们在signal线程的<code>pthread_cond_signal</code>方法中下了断点。</p><p>程序开始时G2的index = 0 ， G1的index = 1。</p><p>首先我们分析__wseq，在上文的解析中知道，<code>pthread_cond_wait</code>每次会首先获取一个序列号，并将该序列号加上1。 实际操作时，因为__wseq的LSB（最低位）代表了G2的下标，因此每个waiter会将序列号加2(1 &lt;&lt; 1)。由于有两个waiter，因此__wseq应该为4。从下面的gdb的打印中的内容，确实如此。</p><p>接着分析__g_refs， 由于其中两个waiter线程已经调用futex_wait进行sleep，而新的waiter总是加入到G2中，且目前G2的index是0，因此__g_refs = {4, 0}。 __g_refs中元素是4而不是2的原因和__wseq是类似的。</p><p>接着分析__wrefs，其代表了waiter的总数量，目前有2个waiter，每个waiter会使得__wrefs增加8，因此__wrefs = 16。之所以增加8，是因为其低3位有了其它用途，这个点上面也提到过，这里再提及一次，下面的分析中将不再重复。</p><p>接着分析__g_size，它表示G1和G2交换后，G1中剩余的waiter数量。由于目前还没有G1和G2的切换，因此__g_size = {0,0}。</p><p>最后分析__g1_start和__g1_orig_size，这里没有出现G1和G2的切换，因此__g1_start和__g1_orig_size都还是初始值0。</p><p>此时，G1和G2的构成如下图所示：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/demo1.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test2<span class="token punctuation">]</span><span class="token comment"># gdb a.out  -q</span>
Reading symbols from a.out<span class="token punctuation">..</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">17</span>
Breakpoint <span class="token number">1</span> at 0x4011d6: <span class="token function">file</span> test.cpp, line <span class="token number">17</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> r
Starting program: /home/work/cpp_proj/test2/a.out
<span class="token punctuation">[</span>Thread debugging using libthread_db enabled<span class="token punctuation">]</span>
Using <span class="token function">host</span> libthread_db library <span class="token string">&quot;/lib64/libthread_db.so.1&quot;</span><span class="token builtin class-name">.</span>
<span class="token punctuation">[</span>New Thread 0x7ffff7a8e640 <span class="token punctuation">(</span>LWP <span class="token number">22121</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>New Thread 0x7ffff728d640 <span class="token punctuation">(</span>LWP <span class="token number">22122</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
Waiter start to <span class="token function">wait</span>
<span class="token punctuation">[</span>New Thread 0x7ffff6a8c640 <span class="token punctuation">(</span>LWP <span class="token number">22123</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
Waiter start to <span class="token function">wait</span>
<span class="token punctuation">[</span>Switching to Thread 0x7ffff7a8e640 <span class="token punctuation">(</span>LWP <span class="token number">22121</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

Thread <span class="token number">2</span> <span class="token string">&quot;a.out&quot;</span> hit Breakpoint <span class="token number">1</span>, Signal <span class="token punctuation">(</span>arg<span class="token operator">=</span>0x0<span class="token punctuation">)</span> at test.cpp:17
<span class="token number">17</span>                  pthread_cond_signal<span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
Missing separate debuginfos, use: dnf debuginfo-install glibc-2.34-28.el9_0.2.x86_64 libgcc-11.2.1-9.4.el9.x86_64 libstdc++-11.2.1-9.4.el9.x86_64
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">4</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">4</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">0</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">0</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">4</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">0</span>, __wrefs <span class="token operator">=</span> <span class="token number">16</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\004">\\004</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">15</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\004">\\004</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">19</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\020">\\020</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>,
  __align <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-g1和g2第一次发生切换" tabindex="-1"><a class="header-anchor" href="#_2-g1和g2第一次发生切换" aria-hidden="true">#</a> 2.G1和G2第一次发生切换</h3><p>接下来我们使用next，使得其中一个线程进行signal操作。 下面我们再一一分析条件变量的数据变化。</p><p>在Signal线程执行signal操作时，此时G1的长度为0(初始状态下，waiter都是加入G2的，G1为空），因此下面将会遇到G1和G2的切换。</p><p>首先分析__wseq。__wseq在G1和G2切换时，奇偶性会发生变化。计算方法为<code>4^1 = 5</code>。因此__wseq = 5。</p><p>接着分析__g_refs。 由于signal线程调用<code>pthread_cond_signal</code>对waiter进行了唤醒。因此__g_refs需要减去2，因此其等于{2，0}。</p><p>接着分析__g_size。因为此前G2的waiter有2个，已经唤醒了一个，还剩下一个没有唤醒，因此这里g_size = {1，0}。</p><p>接着分析__g1_start。__g1_start指的是当前的G1数组在历史waiter中的序号。毫无疑问，初始状态下，__g1_start = 1。</p><p>接着分析__g1_orig_size, __g1_orig_size指的是当前的G1在历史waiter图中的长度。之前G2的waiter数量为2，切换后G1的原始长度也为2，因此__g1_orig_size = (2 &lt;&lt; 2) = 8。</p><p>注意此时G1的index = 0， G2的index = 1，已经发生改变。</p><p>这个过程如下图所示：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/demo2.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">18</span>                  printf<span class="token punctuation">(</span><span class="token string">&quot;Process1 signal<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">5</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">5</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">1</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">1</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">2</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">8</span>, __wrefs <span class="token operator">=</span> <span class="token number">8</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\005">\\005</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\002">\\002</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-g2加入新的waiter" tabindex="-1"><a class="header-anchor" href="#_3-g2加入新的waiter" aria-hidden="true">#</a> 3.G2加入新的waiter</h3><p>接着我们使用continue，继续程序的运行。由于此前Signal线程唤醒了一个waiter，于是该waiter继续执行，sleep 1s后又将调用<code>pthread_cond_wait</code>陷入等待。</p><p>注意此时G1的index = 0， G2的index = 1。</p><p>首先分析__wseq。此前__wseq值为5。此时由于又加入了一个waiter，因此__wseq增加2,__wseq = 7。</p><p>接着分析__g1_start。由于没有发生G1和G2的切换，因此其值保持不变，仍为1。</p><p>接着分析__g_refs。此时G1仍然有一个waiter没有唤醒，而新的waiter会加入G2，因此其值为{2，2}。</p><p>接着分析__g_size，G1中还剩下一个waiter没有唤醒，因此其值等于{1，0}。</p><p>接着分析__g1_orig_size。由于没有发生G1和G2的切换，因此其值保持不变，仍为8。</p><p>接着分析 __wrefs，因为G1和G2总共有2个waiter，因此其值等于16。</p><p>__g_signals的值很难被捕获到，其值在pthread_cond_signal的内部发生改变。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/demo3.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
Continuing<span class="token punctuation">.</span>
Process1 signal
Waiter awake
Waiter start to wait

Thread <span class="token number">2</span> <span class="token string">&quot;a.out&quot;</span> hit Breakpoint <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Signal</span> <span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token number">0x0</span><span class="token punctuation">)</span> at test<span class="token punctuation">.</span>cpp<span class="token operator">:</span><span class="token number">17</span>
<span class="token number">17</span>                  <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
$<span class="token number">3</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> __g1_orig_size <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> __wrefs <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  __size <span class="token operator">=</span> <span class="token string">&quot;\\a\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\002\\000\\000\\000\\002\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\b\\000\\000\\000\\020\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000&quot;</span><span class="token punctuation">,</span> __align <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-g1的剩下的waiter被唤醒" tabindex="-1"><a class="header-anchor" href="#_4-g1的剩下的waiter被唤醒" aria-hidden="true">#</a> 4.G1的剩下的waiter被唤醒</h3><p>接着我们使用next，这会使得Signal线程调用pthread_cond_signal唤醒一个waiter。</p><p>首先分析__wseq。由于没有新的waiter，因此__wseq值不变，仍为7。</p><p>接着分析__g1_start。由于没有发生G1和G2的切换，因此其值保持不变，仍为1。</p><p>接着分析__g_refs。Signal线程调用了pthread_conf_signal方法唤醒了一个waiter，因此其值为{0，2}。</p><p>接着分析__g_size，Signal线程调用了pthread_conf_signal方法唤醒了一个waiter，因此其值等于{0，0}。</p><p>接着分析__g1_orig_size。由于没有发生G1和G2的切换，因此其值保持不变，仍为8。</p><p>接着分析 __wrefs，因为G1和G2总共有1个waiter，因此其值等于8。</p><p>__g_signals的值很难被捕获到，其值在pthread_cond_signal的内部发生改变。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/demo4.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">18</span>                  printf<span class="token punctuation">(</span><span class="token string">&quot;Process1 signal<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$4</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">7</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">7</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">1</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">1</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">0</span>, <span class="token number">2</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">8</span>, __wrefs <span class="token operator">=</span> <span class="token number">8</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\a">\\a</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-g2加入新的waiter" tabindex="-1"><a class="header-anchor" href="#_5-g2加入新的waiter" aria-hidden="true">#</a> 5.G2加入新的waiter</h3><p>接着我们使用continue，继续程序的运行。由于此前Signal线程唤醒了一个waiter，于是该waiter继续执行，sleep 1s后又将调用pthread_cond_wait陷入等待。</p><p>注意此时G1的index = 0， G2的index = 1</p><p>首先分析__wseq。此时又加入了一个waiter，因此__wseq值为9。</p><p>接着分析__g1_start。由于没有发生G1和G2的切换，因此其值保持不变，仍为1。</p><p>接着分析__g_refs。此时G2又加入了一个waiter，因此其值为{0，4}(G2的index=1，因此4在第二个位置上)。</p><p>接着分析__g_size。目前G1中没有waiter了，因此值等于{0，0}。</p><p>接着分析__g1_orig_size。由于没有发生G1和G2的切换，因此其值保持不变，仍为8。</p><p>接着分析 __wrefs，因为G1和G2总共有2个waiter，因此其值等于16。</p><p>__g_signals的值很难被捕获到，其值在pthread_cond_signal的内部发生改变。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/demo5.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
Continuing.
Process1 signal
Waiter awake
Waiter start to <span class="token function">wait</span>

Thread <span class="token number">2</span> <span class="token string">&quot;a.out&quot;</span> hit Breakpoint <span class="token number">1</span>, Signal <span class="token punctuation">(</span>arg<span class="token operator">=</span>0x0<span class="token punctuation">)</span> at test.cpp:17
<span class="token number">17</span>                  pthread_cond_signal<span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$5</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">9</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">9</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">1</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">1</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">0</span>, <span class="token number">4</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">8</span>, __wrefs <span class="token operator">=</span> <span class="token number">16</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\t">\\t</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\004">\\004</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\020">\\020</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-g1和g2再一次发生切换" tabindex="-1"><a class="header-anchor" href="#_6-g1和g2再一次发生切换" aria-hidden="true">#</a> 6.G1和G2再一次发生切换</h3><p>接着我们使用next，使得Signal线程调用pthread_conf_signal方法。这个时候由于G1为0，因此会发生G1和G2的切换。</p><p>首先分析__wseq。此时G1和G2发生了切换，__wseq的奇偶性会发生变化，计算方法为<code>9 ^ 1 = 8</code>，因此__wseq = 8。</p><p>接着分析__g1_start。由于G1和G2发生了切换，当前G2中的第一个waiter属于历史上的第三个waiter，历史值是从0开始的，因此此时G1的起始waiter的序号为2，再进行偏移，就得到了4。</p><p>接着分析__g_refs。目前G1还有一个waiter还没有被唤醒，且目前G1的index = 1，因此__g_refs = {0, 2}。</p><p>接着分析__g_size，在G1和G2切换之前，G2有两个waiter，目前唤醒了一个，还剩下一个，因此其值等于{0, 1}。</p><p>接着分析__g1_orig_size。发生G1和G2切换前，G2有两个任务，因此__g1_orig_size=8。</p><p>接着分析 __wrefs，因为G1和G2总共有2个waiter，因此其值等于16。</p><p>__g_signals的值很难被捕获到，其值在pthread_cond_signal的内部发生改变。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/demo6.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">18</span>                  printf<span class="token punctuation">(</span><span class="token string">&quot;Process1 signal<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$6</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">8</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">8</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">4</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">4</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">0</span>, <span class="token number">2</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">8</span>, __wrefs <span class="token operator">=</span> <span class="token number">8</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\004">\\004</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面继续执行，分析的情况是类似的，不再展开。</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2><h3 id="pthread-cond-s各字段含义" tabindex="-1"><a class="header-anchor" href="#pthread-cond-s各字段含义" aria-hidden="true">#</a> pthread_cond_s各字段含义</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   __wseq: Waiter sequence counter
     * LSB is index of current G2.
     * Waiters fetch-add <span class="token keyword">while</span> having acquire the mutex associated with the
       condvar.  Signalers load it and fetch-xor it concurrently.
   __g1_start: Starting position of G1 <span class="token punctuation">(</span>inclusive<span class="token punctuation">)</span>
     * LSB is index of current G2.
     * Modified by signalers <span class="token keyword">while</span> having acquired the condvar-internal lock
       and observed concurrently by waiters.
   __g1_orig_size: Initial size of G1
     * The two least-significant bits represent the condvar-internal lock.
     * Only accessed <span class="token keyword">while</span> having acquired the condvar-internal lock.
   __wrefs: Waiter reference counter.
     * Bit <span class="token number">2</span> is <span class="token boolean">true</span> <span class="token keyword">if</span> waiters should run futex_wake when they remove the
       last reference.  pthread_cond_destroy uses this as futex word.
     * Bit <span class="token number">1</span> is the clock ID <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> CLOCK_REALTIME, <span class="token number">1</span> <span class="token operator">==</span> CLOCK_MONOTONIC<span class="token punctuation">)</span>.
     * Bit <span class="token number">0</span> is <span class="token boolean">true</span> iff this is a process-shared condvar.
     * Simple reference count used by both waiters and pthread_cond_destroy.
     <span class="token punctuation">(</span>If the <span class="token function">format</span> of __wrefs is changed, update nptl_lock_constants.pysym
      and the pretty printers.<span class="token punctuation">)</span>
   For each of the two groups, we have:
   __g_refs: Futex waiter reference count.
     * LSB is <span class="token boolean">true</span> <span class="token keyword">if</span> waiters should run futex_wake when they remove the
       last reference.
     * Reference count used by waiters concurrently with signalers that have
       acquired the condvar-internal lock.
   __g_signals: The number of signals that can still be consumed.
     * Used as a futex word by waiters.  Used concurrently by waiters and
       signalers.
     * LSB is <span class="token boolean">true</span> iff this group has been completely signaled <span class="token punctuation">(</span>i.e., it is
       closed<span class="token punctuation">)</span>.
   __g_size: Waiters remaining <span class="token keyword">in</span> this group <span class="token punctuation">(</span>i.e., <span class="token function">which</span> have not been
     signaled yet.
     * Accessed by signalers and waiters that cancel waiting <span class="token punctuation">(</span>both <span class="token keyword">do</span> so only
       when having acquired the condvar-internal lock.
     * The size of G2 is always zero because it cannot be determined <span class="token keyword">until</span>
       the group becomes G1.
     * Although this is of unsigned type, we rely on using unsigned overflow
       rules to <span class="token function">make</span> this hold effectively negative values too <span class="token punctuation">(</span>in
       particular, when waiters <span class="token keyword">in</span> G2 cancel waiting<span class="token punctuation">)</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>glibc中的条件变量的底层实现是相对复杂的，其将信号分成了两个组G1和G2，pthread_cond_wait会将waiter加入到G2组，而pthread_cond_wait将会从G1中进行唤醒，如果G1全部唤醒，将会检查G2，如果G2存在waiter，将切换G1和G2，如此循环往复。 由于需要考虑并发性的问题，程序中加入了很多的检查逻辑，因此程序理解起来是相对复杂的。除此之外，从其源码中，我们也可以更好的理解为什么条件变量会存在虚假唤醒。</p>`,158),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","linux-glibc-condition-var.html.vue"]]);export{r as default};
