const n=JSON.parse('{"key":"v-52652ba3","path":"/posts/design-pattern/adapter.html","title":"设计模式 - 适配器模式","lang":"zh-CN","frontmatter":{"category":["设计模式"],"tag":["设计模式"],"description":"设计模式 - 适配器模式 组合方式 #include &lt;iostream&gt; using namespace std; class Target{ public: virtual int output220v() = 0; }; class Adaptee { public: int output110v(){ return 110; } }; class Adapter : public Target { public: Adapter(Adaptee* adaptee) { cout &lt;&lt; \\"create the 110v to 220v adater\\" &lt;&lt; endl; m_adaptee = adaptee; } int output220v() { int origin_voltage = m_adaptee-&gt;output110v(); return convertVoltage(origin_voltage); } int convertVoltage(int i) { cout &lt;&lt; \\"convert the 110v to 220v \\" &lt;&lt; endl; return 220; } private: Adaptee *m_adaptee; }; int main() { Adaptee *adaptee = new Adaptee(); Target *target = new Adapter(adaptee); target-&gt;output220v(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/design-pattern/adapter.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"设计模式 - 适配器模式"}],["meta",{"property":"og:description","content":"设计模式 - 适配器模式 组合方式 #include &lt;iostream&gt; using namespace std; class Target{ public: virtual int output220v() = 0; }; class Adaptee { public: int output110v(){ return 110; } }; class Adapter : public Target { public: Adapter(Adaptee* adaptee) { cout &lt;&lt; \\"create the 110v to 220v adater\\" &lt;&lt; endl; m_adaptee = adaptee; } int output220v() { int origin_voltage = m_adaptee-&gt;output110v(); return convertVoltage(origin_voltage); } int convertVoltage(int i) { cout &lt;&lt; \\"convert the 110v to 220v \\" &lt;&lt; endl; return 220; } private: Adaptee *m_adaptee; }; int main() { Adaptee *adaptee = new Adaptee(); Target *target = new Adapter(adaptee); target-&gt;output220v(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T14:02:59.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2023-03-25T14:02:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式 - 适配器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-25T14:02:59.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"组合方式","slug":"组合方式","link":"#组合方式","children":[]},{"level":2,"title":"继承方式","slug":"继承方式","link":"#继承方式","children":[]}],"git":{"createdTime":1679748138000,"updatedTime":1679752979000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.56,"words":167},"filePathRelative":"posts/design-pattern/adapter.md","localizedDate":"2023年3月25日","excerpt":"<h1> 设计模式 - 适配器模式</h1>\\n<h2> 组合方式</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Target</span><span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">output220v</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Adaptee</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">output110v</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">110</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Adapter</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Target</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">Adapter</span><span class=\\"token punctuation\\">(</span>Adaptee<span class=\\"token operator\\">*</span> adaptee<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"create the 110v to 220v adater\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        m_adaptee <span class=\\"token operator\\">=</span> adaptee<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">output220v</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> origin_voltage <span class=\\"token operator\\">=</span> m_adaptee<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">output110v</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">convertVoltage</span><span class=\\"token punctuation\\">(</span>origin_voltage<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">convertVoltage</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"convert the 110v to 220v \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">220</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    Adaptee <span class=\\"token operator\\">*</span>m_adaptee<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Adaptee <span class=\\"token operator\\">*</span>adaptee <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Adaptee</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Target <span class=\\"token operator\\">*</span>target <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Adapter</span><span class=\\"token punctuation\\">(</span>adaptee<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    target<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">output220v</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
