import{_ as t,V as p,W as e,X as n,Y as s,$ as o,a0 as c,F as i}from"./framework-9a29aaa0.js";const l={},u=c(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95hdc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录hd.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#sys_setup">sys_setup</a></li><li><a href="#controller_ready">controller_ready</a></li><li><a href="#win_result">win_result</a></li><li><a href="#hd_out">hd_out</a></li><li><a href="#drive_busy">drive_busy</a></li><li><a href="#reset_controller">reset_controller</a></li><li><a href="#reset_hd">reset_hd</a></li><li><a href="#unexpected_hd_interrupt">unexpected_hd_interrupt</a></li><li><a href="#bad_rw_intr">bad_rw_intr</a></li><li><a href="#read_intr">read_intr</a></li><li><a href="#write_intr">write_intr</a></li><li><a href="#recal_intr">recal_intr</a></li><li><a href="#do_hd_request">do_hd_request</a></li><li><a href="#hd_init">hd_init</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录hd-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录hd-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录hd.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>hd.c程序是硬盘控制器驱动程序，提供对硬盘控制器块设备的读写驱动和硬盘初始化处理。程序中所有函数按照功能的不同可分为5类：</p><ul><li>初始化硬盘和设置硬盘所用数据结构信息的函数，如sys_setup和hd_init；</li><li>向硬盘控制器发送命令的函数hd_out；</li><li>处理硬盘当前请求项的函数do_hd_request();</li><li>硬盘终端处理过程中调用的c函数，如read_intr()、write_intr()、bad_rw_intr()和recal_intr()。</li><li>硬盘控制器操作辅助函数，如controler_ready()、drive_busy()、win_result()、hd_out和reset_controller等等。</li></ul><p>在讲解hd.c的函数之前，需要先介绍一些宏定义，<code>inb</code>, <code>inb_p</code>, <code>outb</code>, <code>outb_p</code>。这些宏定义来源于<code>io.h</code>。</p><p><strong>inb</strong>宏的作用是去IO端口读取一个byte的数据。</p><p>在内嵌汇编中， <code>:&quot;d&quot; (port))</code>是输入，将port值写入了edx。 <code>:&quot;=a&quot; (_v)</code>是输出，即将AL的值写入_v中。</p><p>而汇编指令<code>inb %%dx,%%al</code>的作用是从端口<code>dx</code>中读取一个字节放入<code>al</code>中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">inb</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _v<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
<span class="token expression">__asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span></span><span class="token string">&quot;inb %%dx,%%al&quot;</span></span>
		<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>_v<span class="token punctuation">)</span>
		<span class="token operator">:</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \\
_v<span class="token punctuation">;</span> \\
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>inb_p</strong>宏的作用也是去IO端口读取一个字节的数据，但是其使用两个<code>jmp 1f</code>进行延迟。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">inb_p</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _v<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
<span class="token expression">__asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span></span><span class="token string">&quot;inb %%dx,%%al\\n&quot;</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;1:\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;1:&quot;</span></span>
	<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>_v<span class="token punctuation">)</span>
	<span class="token operator">:</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \\
_v<span class="token punctuation">;</span> \\
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>outb</strong>宏的作用是向IO端口写入一个字节的数据。</p><p>将<code>value</code>写入<code>al</code>中，将<code>port</code>写入<code>edx</code>中，最后使用汇编指令<code>outb</code>向<code>port</code>写入数据内容。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">outb</span><span class="token expression"><span class="token punctuation">(</span>value<span class="token punctuation">,</span>port<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token function">__asm__</span> <span class="token punctuation">(</span></span><span class="token string">&quot;outb %%al,%%dx&quot;</span></span>
			<span class="token operator">:</span>
			<span class="token operator">:</span><span class="token string">&quot;a&quot;</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>outb_p</strong>宏的作用与<code>outb</code>作用类似，只不过使用了<code>jmp</code>进行延时。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">outb_p</span><span class="token expression"><span class="token punctuation">(</span>value<span class="token punctuation">,</span>port<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token function">__asm__</span> <span class="token punctuation">(</span></span><span class="token string">&quot;outb %%al,%%dx\\n&quot;</span> <span class="token punctuation">\\</span>
		<span class="token string">&quot;\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
		<span class="token string">&quot;1:\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
		<span class="token string">&quot;1:&quot;</span></span>
		<span class="token operator">:</span>
		<span class="token operator">:</span><span class="token string">&quot;a&quot;</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="sys-setup" tabindex="-1"><a class="header-anchor" href="#sys-setup" aria-hidden="true">#</a> sys_setup</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_setup</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> BIOS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数在<code>main.c</code>文件中的<code>init</code>方法中被调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> pid<span class="token punctuation">,</span>i<span class="token punctuation">;</span>
	<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>drive_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从调用关系可以得出， 入参BIOS指针指向<code>drive_info</code>。<code>drive_info</code>的定义如下所示:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DRIVE_INFO</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">drive_info</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x90080</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里可以回顾一下setup.s的中加载的一些数据的分布：</p><table><thead><tr><th>内存地址</th><th>长度(字节)</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>0x90080</td><td>16</td><td>硬盘参数表</td><td>第1个硬盘的参数表</td></tr><tr><td>0x90090</td><td>16</td><td>硬盘参数表</td><td>第2个硬盘的参数表</td></tr></tbody></table><p><code>0x90080</code>正好是第1个硬盘的参数表的地址。</p><p>接下来看<code>sys_setup</code>的主体，该方法的最先定义了一些变量，其中利用<code>static</code>变量<code>callable</code>控制该方法只会被调用一次。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> callable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span>drive<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmos_disks<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">partition</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callable<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
callable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hd_info</code>的类型是<code>hd_i_struct</code>，其中各个字段分别是磁头数，每磁道扇区数据，柱面数，写前预补偿柱面号、磁头着陆区柱面号、控制字节。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">hd_i_struct</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> head<span class="token punctuation">,</span>sect<span class="token punctuation">,</span>cyl<span class="token punctuation">,</span>wpcom<span class="token punctuation">,</span>lzone<span class="token punctuation">,</span>ctl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来如果定义了<code>HD_TYPE</code>，则一次去BIOS内存地址出去读取数据拷贝到<code>hd_info</code>变量中。如果<code>hd_info[1].cyl</code>有数据，则代表有两块硬盘，否则代表只有一块硬盘。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HD_TYPE</span></span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>drive<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> drive<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token punctuation">;</span> drive<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> BIOS<span class="token punctuation">;</span><span class="token comment">//柱面数</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//磁头数</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>wpcom <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写前预补偿柱面号</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>ctl <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制字节</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>lzone <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//磁头着陆区柱面号</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>sect <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每磁道扇区数</span>
		BIOS <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">)</span>
		NR_HD<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//磁盘数</span>
	<span class="token keyword">else</span>
		NR_HD<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来设置硬盘分区数据:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_HD <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//起始扇区</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token operator">*</span>
				hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token operator">*</span>hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">;</span><span class="token comment">//硬盘总扇区数</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的操作涉及对<code>CMOS</code>的操作，这里简单减少一下CMOS。</p><p><strong>CMOS（互补金属氧化物半导体）内存</strong>是计算机系统中的一种特殊内存，通常用于存储系统配置信息和实时时钟数据。它通常位于主板上，并且保持在通电和断电状态下数据的持久性。在通电状态下，CMOS电池提供电源以保持存储的数据不受影响。</p><p>CMOS内存中存储了诸如以下信息：</p><ul><li>实时时钟数据：包括年、月、日、小时、分钟和秒等时间信息。</li><li>BIOS设置：存储了系统的基本输入/输出系统（BIOS）配置，例如启动设备顺序、硬盘参数等。</li><li>硬件配置：可能包括与硬件相关的配置信息，例如中断分配、硬盘类型等。</li><li>密码：某些系统可能会将密码或安全密钥存储在CMOS中，以进行访问控制。</li></ul><p>CMOS内存可以通过特定的端口访问，例如在x86架构的计算机中，使用端口<code>0x70</code>来选择CMOS内存的地址，使用端口<code>0x71</code>来读取或写入数据。在这段代码中，通过使用端口<code>0x70</code>选择地址，并使用端口<code>0x71</code>读取数据，实现了从CMOS内存中读取数据的操作。</p><p>有了CMOS的概念，再来理解下面的代码。下面的代码Linus做了如下解释：</p><blockquote><p>我们对CMOS有关硬盘的信息有些怀疑： 可能会出现这样的情况，我们有一块SCSI/ESDI等的控制器，它是以ST-506方式与BIOS相兼容的，因而会出现在我们的BIOS参数表中，但却又不是寄存器兼容的，因此这些参数在CMOS中又不存在。第一个驱动器的参数存放在CMOS字节0x12的高半字节中，第2个存放在低半字节中。该4位字节信息可以是驱动器类型。也可能是0xf。0xf表示使用CMOS中0x19字节作为驱动器1的8位类型字节，使用CMOS中的0x1A字节作为驱动器2的类型字节。</p></blockquote><p>总之，这里的代码就是用来检测两个硬盘都是不是AT控制器兼容的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cmos_disks <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>cmos_disks <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span>
		NR_HD <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		NR_HD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	NR_HD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>NR_HD=0</code>，则两个硬盘都不是AT控制器兼容的，则将两个硬盘的结构全部清零。如果<code>NR_HD=1</code>，则将第二块硬盘结构清零。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> NR_HD <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是获取硬盘的分区表信息。硬盘上的第一个扇区存放的是引导块。这里需要了解一下MBR分区的，引导扇区的分布情况。</p><p>**MBR（Master Boot Record）**引导扇区的布局如下：</p><ul><li><p>1.引导代码区域（446字节）：MBR的前446字节用于存储引导代码，这是一段特定的机器码程序，用于引导操作系统。这段代码会被计算机启动时加载到内存中执行，以启动操作系统。</p></li><li><p>2.分区表（64字节）：接下来的64字节用于存储分区表，其中包含4个16字节的分区表项，每个分区表项用于描述硬盘上的一个分区。每个分区表项包含以下信息：</p><ul><li>起始扇区地址（4字节）：描述分区在硬盘上的起始位置。</li><li>分区大小（4字节）：描述分区的大小。</li><li>分区类型（1字节）：描述分区的类型，指示分区的用途或内容。</li><li>标志（1字节）：用于标识分区的活动状态（启动分区）。</li></ul></li><li><p>3.结束标志（2字节）：MBR的最后两个字节通常是0x55AA，用于指示这是一个有效的MBR扇区。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>drive<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> drive<span class="token operator">&lt;</span>NR_HD <span class="token punctuation">;</span> drive<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token number">0x300</span> <span class="token operator">+</span> drive<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//300 305是设备号</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read partition table of drive %d\\n\\r&quot;</span><span class="token punctuation">,</span>
			drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0x55</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>
		bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">511</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0xAA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//硬盘标志位0xAA55</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Bad partition table on drive %d\\n\\r&quot;</span><span class="token punctuation">,</span>drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	p <span class="token operator">=</span> <span class="token number">0x1BE</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span> <span class="token comment">// 0x1BE=446</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> p<span class="token operator">-&gt;</span>start_sect<span class="token punctuation">;</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> p<span class="token operator">-&gt;</span>nr_sects<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的最后将加载虚拟盘和挂载根文件系统。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>NR_HD<span class="token punctuation">)</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Partition table%s ok.\\n\\r&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>NR_HD<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">&quot;s&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">rd_load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载虚拟盘</span>
	<span class="token function">mount_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//挂载根文件系统。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="controller-ready" tabindex="-1"><a class="header-anchor" href="#controller-ready" aria-hidden="true">#</a> controller_ready</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">controller_ready</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是循环等待硬盘控制器就绪。如果返回值retires为0，代表等待控制器空闲的时间已经超时发生错误。若返回值不为0，则说明等待时间内控制器已经回到了空闲状态。</p><p>硬盘控制器状态寄存器端口是<code>0x1f7</code>, 循环检测其中的驱动器就绪比特位(位6)是否被置位并且控制器忙位(位7)是否被复位。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> retries<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>retries <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>retries<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，我们仅需要检测状态寄存器忙位(位7)是否位1来判断控制器是否处于忙状态。如果为0，就代表已经就绪，如果为1， 则代表尚未就绪。改写后的代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> retries<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>retries <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>retries<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="win-result" tabindex="-1"><a class="header-anchor" href="#win-result" aria-hidden="true">#</a> win_result</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">win_result</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是检查硬盘执行命令后的结果。0为正常， 1为错误。</p><p>首先使用<code>inb_p</code>去读取<code>HD_STATUS</code>的值，如果控制器忙， 读写错误或命令执行错误， 则返回1。如果没有错误，则返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出硬盘控制器的状态信息。</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BUSY_STAT <span class="token operator">|</span> READY_STAT <span class="token operator">|</span> WRERR_STAT <span class="token operator">|</span> SEEK_STAT <span class="token operator">|</span> ERR_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">==</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* ok */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> i<span class="token operator">=</span><span class="token function">inb</span><span class="token punctuation">(</span>HD_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果ERR_STAT置位</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hd-out" tabindex="-1"><a class="header-anchor" href="#hd-out" aria-hidden="true">#</a> hd_out</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hd_out</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> drive<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nsect<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> sect<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cyl<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>
		<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>intr_addr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是向硬盘控制器发送命令。</p><p>函数的参数的含义如下：</p><ul><li>drive 硬盘号(0-1)</li><li>nsect 读写扇区数</li><li>sect 起始扇区</li><li>head 磁头号</li><li>cyl 柱面号</li><li>cmd 命令码</li><li>intr 硬盘中断处理程序中将调用的c处理函数指针</li></ul><p>该函数的开头对参数进行校验，如果不合法则抛出内核错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">register</span> <span class="token keyword">int</span> port <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;dx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义局部变量，并放入寄存器dx中。</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>drive<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">||</span> head<span class="token operator">&gt;</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment">//驱动器号大于1(驱动器号只能是0或者1)， 磁头号大于15.</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to write bad sector&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">controller_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//控制器没有准备好</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;HD controller not ready&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就要对一些IO端口进行写数据，首先我们先了解一下这些端口。</p><table><thead><tr><th>端口</th><th>名称</th><th>读操作</th><th>写操作</th></tr></thead><tbody><tr><td>0x1f0</td><td>HD_DATA</td><td>数据寄存器</td><td>数据寄存器</td></tr><tr><td>0x1f1</td><td>HD_ERROR</td><td>错误寄存器(HD_ERROR)</td><td>写前预补偿寄存器(HD_PRECOMP)</td></tr><tr><td>0x1f2</td><td>HD_NSECTOR</td><td>扇区数寄存器 总扇区数</td><td>扇区数寄存器 总扇区数</td></tr><tr><td>0x1f3</td><td>HD_SECTOR</td><td>扇区号寄存器 起始扇区</td><td>扇区号寄存器 起始扇区</td></tr><tr><td>0x1f4</td><td>HD_LCYL</td><td>柱面号寄存器 柱面号低字节</td><td>柱面号寄存器 柱面号低字节</td></tr><tr><td>0x1f5</td><td>HD_HCYL</td><td>柱面号寄存器 柱面号高字节</td><td>柱面号寄存器 柱面号高字节</td></tr><tr><td>0x1f6</td><td>HD_CURRENT</td><td>磁头寄存器 磁头号</td><td>磁头寄存器 磁头号</td></tr><tr><td>0x1f7</td><td>HD_STATUS</td><td>主状态寄存器</td><td>命令寄存器</td></tr><tr><td>0x3f6</td><td>HD_CMD</td><td>...</td><td>硬盘控制寄存器</td></tr><tr><td>0x3f7</td><td></td><td>数字输入寄存器</td><td></td></tr></tbody></table><p><code>hd_out</code>接下来的过程就是向这些端口依次写入数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>do_hd <span class="token operator">=</span> intr_addr<span class="token punctuation">;</span> <span class="token comment">// do_hd 函数指针将在硬盘中断程序中被调用</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>ctl<span class="token punctuation">,</span>HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向控制寄存器(0x3f6)输出控制字节</span>
port<span class="token operator">=</span>HD_DATA<span class="token punctuation">;</span>  <span class="token comment">//置dx 为数据寄存器端口(0x1f0)</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>wpcom<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0x1f1</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>nsect<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//参数：读/写扇区总数 0x1f2</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>sect<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//参数：起始扇区 0x1f3</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>cyl<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//参数：柱面号低8 位  0x1f4</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>cyl<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数：柱面号高8 位  0x1f5</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token operator">|</span><span class="token punctuation">(</span>drive<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>head<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//参数：驱动器号+磁头号 0x1f6</span>
<span class="token function">outb</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//命令：硬盘控制命令 0x1f7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cmd的取值与主状态寄存器(读)/命令寄存器(写) <code>0x1f7</code>的设计相关。</p><p><code>hd_out</code>涉及对<code>0x1f7</code>的写操作，其含义如下：</p><table><thead><tr><th>命令</th><th>含义</th><th>高4位</th><th>D3</th><th>D2</th><th>D1</th><th>D0</th><th>默认值</th><th>命令执行结束形式</th></tr></thead><tbody><tr><td>WIN_RESTORE</td><td>驱动器重新校正(复位)</td><td>0x1</td><td>R</td><td>R</td><td>R</td><td>R</td><td>0x10</td><td>中断</td></tr><tr><td>WIN_READ</td><td>读扇区</td><td>0x2</td><td>0</td><td>0</td><td>L</td><td>T</td><td>0x20</td><td>中断</td></tr><tr><td>WIN_WRITE</td><td>写扇区</td><td>0x3</td><td>0</td><td>0</td><td>L</td><td>T</td><td>0x30</td><td>中断</td></tr><tr><td>WIN_VERIFY</td><td>扇区检验</td><td>0x4</td><td>0</td><td>0</td><td>0</td><td>T</td><td>0x40</td><td>中断</td></tr><tr><td>WIN_FORMAT</td><td>格式化磁道</td><td>0x5</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0x50</td><td>中断</td></tr><tr><td>WIN_INIT</td><td>控制器初始化</td><td>0x6</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0x60</td><td>中断</td></tr><tr><td>WIN_SEEK</td><td>寻道</td><td>0x7</td><td>R</td><td>R</td><td>R</td><td>R</td><td>0x70</td><td>中断</td></tr><tr><td>WIN_DIAGNOSE</td><td>控制器诊断</td><td>0x9</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0x90</td><td>中断或空闲</td></tr><tr><td>WIN_SPECIFY</td><td>建立驱动器参数</td><td>0x9</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0x91</td><td>中断</td></tr></tbody></table><p>表中命令码字节的低4位是附加参数，其含义为：</p><ul><li>R是步进速率。R=0，则步进速率为35us；R=1为0.5ms，以此量递增。程序中默认R=0。</li><li>L是数据模式。L=0表示读/写扇区为512字节，L=1表示读/写扇区为512加4字节的ECC码。程序中默认值是L=0。</li><li>T是重试模式。T=0表示允许充实；T=1则禁止充实。程序中取T=0。</li></ul><p>命令码的高四位和低四位组合形成了最终的含义，这里给出常用的cmd的详细解释：</p><ul><li><p>0x1X WIN_RESTORE 驱动器重新校正(Recalibrate)</p><p>该命令把读/写磁头从磁盘上的任何位置移动到0柱面。当收到命令时，驱动器会设置BUSY_STAT标志并且发出一个0柱面寻道指令。然后驱动器等待寻道操作结束，更新状态，复位BUSY_STAT标志并且产生一个中断。</p></li><li><p>0x20 WIN_READ:</p><p>读扇区命令可以从指定扇区开始读取1-256个扇区。若所指定的命令块中的扇区计数为0，则表示读256个扇区。当驱动器接受了该命令时，将会设置BUSY_STAT标志并且发出并开始执行该指令。对于单个扇区的读取操作，若磁头的磁道位置不对，则驱动器会隐含地执行一次寻道操作。</p></li><li><p>0x30 WIN_WRITE:</p><p>写扇区命令可以从指定扇区开始写入1-256个扇区。若所指定的命令块中的扇区计数为0，则表示写256个扇区。当驱动器接受了该命令时，将会设置DRQ_STAT标志并且等待扇区缓冲区被填满数据。</p></li><li><p>0x91 WIN_SPECIFY:</p><p>该命令用于让主机设置多扇区操作时磁头交换和扇区计数循环值。在收到该命令驱动器会设置BUSY_STAT比特位并产生一个中断。该命令仅使用两个寄存器的值。一个是扇区计数寄存器，用于指定扇区数，另一个是驱动器/磁头寄存器，用于指定磁头数-1。</p></li></ul><h3 id="drive-busy" tabindex="-1"><a class="header-anchor" href="#drive-busy" aria-hidden="true">#</a> drive_busy</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">drive_busy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是<strong>等待硬盘就绪</strong>。</p><p>该函数循环检查硬盘的状态寄存器的忙标志位。如果busy位复位，则返回0。如果没有复位，则返回1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环读取硬盘的主状态寄存器HD_STATUS，等待就绪位</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BUSY_STAT<span class="token operator">|</span>READY_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span>
i <span class="token operator">&amp;=</span> BUSY_STAT <span class="token operator">|</span> READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD controller times out\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印等待超时</span>
<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reset-controller" tabindex="-1"><a class="header-anchor" href="#reset-controller" aria-hidden="true">#</a> reset_controller</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reset_controller</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于重新校正硬盘控制器。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>	i<span class="token punctuation">;</span>

<span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向硬盘控制寄存器端口发送复位控制</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">nop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环等待一段时间</span>
<span class="token function">outb</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ctl <span class="token operator">&amp;</span> <span class="token number">0x0f</span> <span class="token punctuation">,</span>HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送正常的控制字节</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">drive_busy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//检查控制器是否还是处于忙的状态</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD-controller still busy\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>HD_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD-controller reset failed: %02x\\n\\r&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reset-hd" tabindex="-1"><a class="header-anchor" href="#reset-hd" aria-hidden="true">#</a> reset_hd</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reset_hd</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是复位硬盘。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">reset_controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//复位硬盘控制器</span>
<span class="token function">hd_out</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
	hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">,</span>WIN_SPECIFY<span class="token punctuation">,</span><span class="token operator">&amp;</span>recal_intr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送硬盘控制命令， recal_intr是硬盘中断处理函数中调用的函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unexpected-hd-interrupt" tabindex="-1"><a class="header-anchor" href="#unexpected-hd-interrupt" aria-hidden="true">#</a> unexpected_hd_interrupt</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">unexpected_hd_interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数仅仅用于在出现意外硬盘中断的时候打印一行日志。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected HD interrupt\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="bad-rw-intr" tabindex="-1"><a class="header-anchor" href="#bad-rw-intr" aria-hidden="true">#</a> bad_rw_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是读写硬盘失败的处理函数。如果读写扇区出错次数大于等于7次时，结束当前请求项，并唤醒等待该请求的进程。</p><p>如果读写扇区的时候，出错次数超过了3次，则对硬盘控制器进行复位。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;=</span> MAX_ERRORS<span class="token punctuation">)</span>
	<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;</span> MAX_ERRORS<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
	reset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-intr" tabindex="-1"><a class="header-anchor" href="#read-intr" aria-hidden="true">#</a> read_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是磁盘的<strong>读中断调用函数</strong>。</p><p>硬盘的中断处理函数是hd_interrupt，这个是在hd_init函数中设置的。当硬盘中断发生的时候，将调用do_hd指向的函数， 而do_hd则是在do_hd_request函数中通过hd_out进行设置的。</p><p>因此当do_hd_request要去读扇区时，就会设置do_hd为read_intr，这样当硬盘中断到来时，就会调用read_intr进行处理。器处理流程如下图所示：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/block/read_intr_flow.png" alt="read_intr" tabindex="0" loading="lazy"><figcaption>read_intr</figcaption></figure><p>首先检查硬盘控制器是否返回错误信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将HD_DATA端口依次读取256个字（512字节）到buffer中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">port_read</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着对请求中的一些标记进行修改。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清除出错次数</span>
CURRENT<span class="token operator">-&gt;</span>buffer <span class="token operator">+=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment">//调整buffer指针</span>
CURRENT<span class="token operator">-&gt;</span>sector<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//起始扇区+1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>CURRENT<span class="token operator">-&gt;</span>nr_sectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  do_hd <span class="token operator">=</span> <span class="token operator">&amp;</span>read_intr<span class="token punctuation">;</span><span class="token comment">//尚有数据还未读完，因此设置下一次的中断处理函数还是read_intr</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再次调用do_hd_request去处理其他硬盘请求项</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write-intr" tabindex="-1"><a class="header-anchor" href="#write-intr" aria-hidden="true">#</a> write_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是磁盘的写中断调用函数。</p><p>首先检查硬盘控制器是否返回错误信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>CURRENT<span class="token operator">-&gt;</span>nr_sectors<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果还有扇区要写</span>
    CURRENT<span class="token operator">-&gt;</span>sector<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//当前请求扇区号+1</span>
    CURRENT<span class="token operator">-&gt;</span>buffer <span class="token operator">+=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment">//当前请求缓冲区指针增加512</span>
    do_hd <span class="token operator">=</span> <span class="token operator">&amp;</span>write_intr<span class="token punctuation">;</span> <span class="token comment">//设置函数指针位write_intr</span>
    <span class="token function">port_write</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向数据端口写256字（512字节）</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recal-intr" tabindex="-1"><a class="header-anchor" href="#recal-intr" aria-hidden="true">#</a> recal_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recal_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是重新复位中断调用函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-hd-request" tabindex="-1"><a class="header-anchor" href="#do-hd-request" aria-hidden="true">#</a> do_hd_request</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是硬盘设备的读写函数。</p><p>首先对读写请求进行校验。如果请求队列中没有硬盘的读写任务，则退出。</p><p>请求的起始扇区+至少读写2扇区(1K)不能大于磁盘分区的最后一个扇区。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>block<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&gt;</span> hd<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> block<span class="token punctuation">,</span>dev<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> sec<span class="token punctuation">,</span>head<span class="token punctuation">,</span>cyl<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> nsect<span class="token punctuation">;</span>

INIT_REQUEST<span class="token punctuation">;</span>
dev <span class="token operator">=</span> <span class="token function">MINOR</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
block <span class="token operator">=</span> CURRENT<span class="token operator">-&gt;</span>sector<span class="token punctuation">;</span><span class="token comment">//请求的起始扇区</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token operator">*</span>NR_HD <span class="token operator">||</span> block<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&gt;</span> hd<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是本函数的一个难点，将绝对的块号转换为磁盘的(柱面C， 磁头H ，扇区S)。</p><p>其中， block与(C，H，S)的换算公式如下所示:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>block=C*总磁头数*每磁道扇区数+H*每磁道扇区数+S
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看出前两项都是每磁道扇区数的倍数， 因此使用block除以每磁道扇区数，其余数就是扇区号S， 其商如下所示:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>block <span class="token operator">=</span> block<span class="token operator">/</span>每磁道扇区数 <span class="token operator">=</span> C<span class="token operator">*</span>总磁头数 <span class="token operator">+</span> H
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用除数除以总磁头数， 那么其余数就是H， 商就是C。</p><p>下面看代码， 输入eax = block， edx = 0， <code>divl %4</code>中的%4就是<code>hd_info[dev].sect</code>， 代表每磁道扇区数，结果将余数赋值给变量sec， 商赋值给block。 这与我们上面的步骤是一致的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;divl %4&quot;</span>
		<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;=d&quot;</span> <span class="token punctuation">(</span>sec<span class="token punctuation">)</span>
		<span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来输入edx = block， eax = 0， <code>divl %4</code>中的%4就是hd_info[dev].head， 代表系统中的总磁头数，结果将余数赋值给head， 商赋值给cyl，这与我们的分析也一致。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;divl %4&quot;</span>
	<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>cyl<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;=d&quot;</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span>
	<span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果此时的复位标志是1， 那么就调用reset_hd进行硬盘的复位。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	reset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	recalibrate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">reset_hd</span><span class="token punctuation">(</span>CURRENT_DEV<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果此时重新校正标志是置位的， 则首先复位该标志， 然后向硬盘控制器发送重新校正的命令。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>recalibrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	recalibrate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>CURRENT_DEV<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>
		WIN_RESTORE<span class="token punctuation">,</span><span class="token operator">&amp;</span>recal_intr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是写请求</span>
	<span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>nsect<span class="token punctuation">,</span>sec<span class="token punctuation">,</span>head<span class="token punctuation">,</span>cyl<span class="token punctuation">,</span>WIN_WRITE<span class="token punctuation">,</span><span class="token operator">&amp;</span>write_intr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向控制器发送写请求</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token operator">&amp;</span>DRQ_STAT<span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环等待</span>
		<span class="token comment">/* nothing */</span> <span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">port_write</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> READ<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果是读请求</span>
	<span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>nsect<span class="token punctuation">,</span>sec<span class="token punctuation">,</span>head<span class="token punctuation">,</span>cyl<span class="token punctuation">,</span>WIN_READ<span class="token punctuation">,</span><span class="token operator">&amp;</span>read_intr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unknown hd-command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hd-init" tabindex="-1"><a class="header-anchor" href="#hd-init" aria-hidden="true">#</a> hd_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hd_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于硬盘系统的初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn <span class="token operator">=</span> DEVICE_REQUEST<span class="token punctuation">;</span><span class="token comment">//设置硬盘的请求处理方法</span>
<span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>hd_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置硬盘的中断，中断号是0x2E（46）</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xfb</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许从片发出中断</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xbf</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许硬盘的中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>outb_p(inb_p(0x21)&amp;0xfb,0x21)</code>:</p><p>0x21是主片命令字OCW1的端口地址， 0xfb = 11111011， 即将主片IR2的位置复位， 主片的IR2用于级联从片, 因此该语句的作用是<strong>允许从片发出中断</strong>。</p><p><code>outb(inb_p(0xA1)&amp;0xbf,0xA1)</code>:</p><p>0xA1是从片命令字OCW1的端口地址，0xbf = 10111111, 即将从片IR6的位置复位，从片的IR6用于接受硬盘的中断，因此该语句的作用是<strong>允许硬盘的中断</strong>。</p><p>因此以上两句的作用就是<strong>允许了来自硬盘的中断</strong>。</p>`,157),d={href:"https://blog.csdn.net/longintchar/article/details/79439466",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const a=i("ExternalLinkIcon");return p(),e("div",null,[u,n("p",null,[s("有关更多8259A中断控制器， 可以阅读 "),n("a",d,[s("详解8259A"),o(a)])])])}const b=t(l,[["render",r],["__file","Linux-0.11-kernel-hd.html.vue"]]);export{b as default};
