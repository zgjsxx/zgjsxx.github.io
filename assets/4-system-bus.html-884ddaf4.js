import{_ as a,V as e,W as r,a0 as t}from"./framework-9a29aaa0.js";const i={},s=t('<ul><li><a href="#%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84-%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF">计算机基本架构-系统总线</a><ul><li><a href="#%E5%B9%B6%E8%A1%8C%E6%80%BB%E7%BA%BF%E6%9E%B6%E6%9E%84">并行总线架构</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E5%86%99%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B">基本写传输过程</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%BB%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B">基本读传输过程</a></li><li><a href="#%E6%80%BB%E7%BA%BF%E4%B8%BB%E7%8A%B6%E6%80%81%E6%94%B9%E5%8F%98">总线主状态改变</a></li><li><a href="#%E6%80%BB%E7%BA%BF%E6%8F%A1%E6%89%8B">总线握手</a></li><li><a href="#%E6%80%BB%E7%BA%BF%E4%BB%B2%E8%A3%81">总线仲裁</a></li></ul></li></ul><h1 id="计算机基本架构-系统总线" tabindex="-1"><a class="header-anchor" href="#计算机基本架构-系统总线" aria-hidden="true">#</a> 计算机基本架构-系统总线</h1><p>系统总线负责维护中央处理器(CPU)、系统外设和内存之间的所有通信。系统总线按照一定的总线协议运行，以在总线主控设备和总线从属设备之间交换数据。总线协议确保在总线主控设备与总线从属设备交换数据时，将所有其他系统设备隔离开，以免干扰总线。总线主控设备发起数据传输，发送或接收来自从属设备或系统内存的数据。另一方面，总线从属设备没有启动数据传输的能力，只能响应总线主控设备以交换数据。</p><p>总线架构有两种类型，<strong>串行总线</strong>和<strong>并行总线</strong>。<strong>串行总线</strong>架构基本上由主控设备和从属设备之间的一根数据线组成，数据位一次一位地交换。相反， <strong>并行总线</strong>由多根数据线组成，可以同时发送或接收多个数据位。</p><p>在本章中，我们将描述几种串行和并行总线协议以及优先级方案。</p><h2 id="并行总线架构" tabindex="-1"><a class="header-anchor" href="#并行总线架构" aria-hidden="true">#</a> 并行总线架构</h2><p>典型系统中有两种并行总线架构：单向总线和双向总线。单向总线包含两条独立的数据路径：一条从总线主控设备开始到总线从属设备结束，另一条从总线从属设备开始到总线主控设备结束。而双向总线共享一条物理数据路径，允许数据在两个方向上流动。然而，这种类型的总线需要额外的逻辑开销和更复杂的控制。</p><p>下图描述了一种32位单向总线架构，包括两个总线主控设备和三个从属设备。在该图中，两条单向数据路径用较粗的线条突出显示。第一条路径是<strong>写路径</strong>，总线主控设备使用该路径将数据写入从属设备。此路径需要每个主控设备和从属设备都有一个写数据端口（<code>WData</code>）。第二条路径是<strong>读路径</strong>，用于从从属设备读取数据。这也需要每个主控设备和从属设备都有一个读数据端口（<code>RData</code>）。总线主控设备和从属设备都具有地址和控制端口，用于定义目标地址、数据传输方向、数据宽度和数据传输长度。</p><p>所有总线主控设备在开始数据传输之前必须与总线仲裁器协商以获得总线的所有权。当有多个总线主控设备的请求待处理时，仲裁器会根据某种优先级方案决定哪个总线主控设备应该优先开始数据传输，并向优先级最高的主控设备发出确认信号。因此，每个总线主控设备都有请求（Req）和确认（Ack）端口与仲裁器进行通信。一旦获得许可，主控设备会在第一个总线周期内向选定的从属设备发送地址和控制信号，并在下一个周期内写入或读取数据。连接到地址总线的解码器（DEC）会生成“使能”（EN）信号来激活选定的从属设备。每个主控设备和从属设备都有一个“准备好”端口，指示选定的从属设备是否准备好传输或接收数据。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/computer-base/Fundamentals-of-Computer-Architecture-and-Design/4/bus-structure-two-masters-three-slaves.png" alt="两主三从的总线结构的示例" tabindex="0" loading="lazy"><figcaption>两主三从的总线结构的示例</figcaption></figure><h2 id="基本写传输过程" tabindex="-1"><a class="header-anchor" href="#基本写传输过程" aria-hidden="true">#</a> 基本写传输过程</h2><h2 id="基本读传输过程" tabindex="-1"><a class="header-anchor" href="#基本读传输过程" aria-hidden="true">#</a> 基本读传输过程</h2><h2 id="总线主状态改变" tabindex="-1"><a class="header-anchor" href="#总线主状态改变" aria-hidden="true">#</a> 总线主状态改变</h2><h2 id="总线握手" tabindex="-1"><a class="header-anchor" href="#总线握手" aria-hidden="true">#</a> 总线握手</h2><h2 id="总线仲裁" tabindex="-1"><a class="header-anchor" href="#总线仲裁" aria-hidden="true">#</a> 总线仲裁</h2>',15),h=[s];function n(E,B){return e(),r("div",null,h)}const o=a(i,[["render",n],["__file","4-system-bus.html.vue"]]);export{o as default};
