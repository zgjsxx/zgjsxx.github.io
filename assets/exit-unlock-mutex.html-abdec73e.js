const n=JSON.parse('{"key":"v-2ef00304","path":"/posts/Linux/exit-unlock-mutex.html","title":"","lang":"zh-CN","frontmatter":{"description":"#include&lt;unistd.h&gt; #include&lt;sys/mman.h&gt; #include&lt;pthread.h&gt; #include&lt;sys/types.h&gt; #include&lt;sys/wait.h&gt; #include&lt;fcntl.h&gt; #include&lt;string.h&gt; #include&lt;stdlib.h&gt; #include&lt;stdio.h&gt; #include &lt;string&gt; #include &lt;iostream&gt; using namespace std; pthread_mutex_t mutex; void* func1(void* param) { pthread_mutex_lock(&amp;mutex); cout &lt;&lt; \\"func1 get lock\\" &lt;&lt; endl; pthread_exit(NULL); } void* func2(void* param) { sleep(2); pthread_mutex_lock(&amp;mutex); cout &lt;&lt; \\"func2 get lock\\" &lt;&lt; endl; pthread_mutex_unlock(&amp;mutex); return NULL; } int main(void) { int i; pthread_mutex_init(&amp;mutex, NULL); pthread_t tid1, tid2; pthread_create(&amp;tid1, NULL, func1, NULL); pthread_create(&amp;tid2, NULL, func2, NULL); pthread_join(tid1,NULL); pthread_join(tid2,NULL); pthread_mutex_destroy(&amp;mutex); return 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/exit-unlock-mutex.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:description","content":"#include&lt;unistd.h&gt; #include&lt;sys/mman.h&gt; #include&lt;pthread.h&gt; #include&lt;sys/types.h&gt; #include&lt;sys/wait.h&gt; #include&lt;fcntl.h&gt; #include&lt;string.h&gt; #include&lt;stdlib.h&gt; #include&lt;stdio.h&gt; #include &lt;string&gt; #include &lt;iostream&gt; using namespace std; pthread_mutex_t mutex; void* func1(void* param) { pthread_mutex_lock(&amp;mutex); cout &lt;&lt; \\"func1 get lock\\" &lt;&lt; endl; pthread_exit(NULL); } void* func2(void* param) { sleep(2); pthread_mutex_lock(&amp;mutex); cout &lt;&lt; \\"func2 get lock\\" &lt;&lt; endl; pthread_mutex_unlock(&amp;mutex); return NULL; } int main(void) { int i; pthread_mutex_init(&amp;mutex, NULL); pthread_t tid1, tid2; pthread_create(&amp;tid1, NULL, func1, NULL); pthread_create(&amp;tid2, NULL, func2, NULL); pthread_join(tid1,NULL); pthread_join(tid2,NULL); pthread_mutex_destroy(&amp;mutex); return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-06T07:19:10.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-06T07:19:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-06T07:19:10.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1675667950000,"updatedTime":1675667950000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.69,"words":207},"filePathRelative":"posts/Linux/exit-unlock-mutex.md","localizedDate":"2023年2月6日","excerpt":"<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;unistd.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;sys/mman.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;pthread.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;sys/types.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;sys/wait.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;fcntl.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;stdlib.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\npthread_mutex_t mutex<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">func1</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> param<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">pthread_mutex_lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"func1 get lock\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_exit</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">func2</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> param<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_mutex_lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"func2 get lock\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_mutex_unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_mutex_init</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    pthread_t tid1<span class=\\"token punctuation\\">,</span> tid2<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_create</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>tid1<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> func1<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_create</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>tid2<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> func2<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token function\\">pthread_join</span><span class=\\"token punctuation\\">(</span>tid1<span class=\\"token punctuation\\">,</span><span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_join</span><span class=\\"token punctuation\\">(</span>tid2<span class=\\"token punctuation\\">,</span><span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_mutex_destroy</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
