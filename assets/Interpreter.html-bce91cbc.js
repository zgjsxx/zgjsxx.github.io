const n=JSON.parse(`{"key":"v-49e1ca10","path":"/posts/design-pattern/Interpreter.html","title":"解释器模式","lang":"zh-CN","frontmatter":{"description":"解释器模式 #include &lt;iostream&gt; #include &lt;string&gt; class Context { public: Context(const std::string&amp; val):val_(val) { } std::string getVal() const { return val_; } private: std::string val_; }; class IExpression { public: IExpression() = default; virtual ~IExpression() = default; public: virtual int interpret(const Context&amp; context) const = 0; }; class AExpression : public IExpression { public: virtual int interpret(const Context&amp; context) const override { int count = 0; for(auto&amp; c : context.getVal()) { if(c == 'A') { count++; } } return count; } }; class BExpression : public IExpression { public: virtual int interpret(const Context&amp; context) const override { int count = 0; for(auto&amp; c : context.getVal()) { if(c == 'B') { count++; } } return count; } }; int main() { Context context(\\"AAABBBB\\"); IExpression* expression1 = new AExpression(); IExpression* expression2 = new BExpression(); std::cout &lt;&lt; \\"Aexpression get val \\" &lt;&lt; expression1-&gt;interpret(context) &lt;&lt; std::endl; std::cout &lt;&lt; \\"Bexpression get val \\" &lt;&lt; expression2-&gt;interpret(context) &lt;&lt; std::endl; delete expression1; delete expression2; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/design-pattern/Interpreter.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"解释器模式"}],["meta",{"property":"og:description","content":"解释器模式 #include &lt;iostream&gt; #include &lt;string&gt; class Context { public: Context(const std::string&amp; val):val_(val) { } std::string getVal() const { return val_; } private: std::string val_; }; class IExpression { public: IExpression() = default; virtual ~IExpression() = default; public: virtual int interpret(const Context&amp; context) const = 0; }; class AExpression : public IExpression { public: virtual int interpret(const Context&amp; context) const override { int count = 0; for(auto&amp; c : context.getVal()) { if(c == 'A') { count++; } } return count; } }; class BExpression : public IExpression { public: virtual int interpret(const Context&amp; context) const override { int count = 0; for(auto&amp; c : context.getVal()) { if(c == 'B') { count++; } } return count; } }; int main() { Context context(\\"AAABBBB\\"); IExpression* expression1 = new AExpression(); IExpression* expression2 = new BExpression(); std::cout &lt;&lt; \\"Aexpression get val \\" &lt;&lt; expression1-&gt;interpret(context) &lt;&lt; std::endl; std::cout &lt;&lt; \\"Bexpression get val \\" &lt;&lt; expression2-&gt;interpret(context) &lt;&lt; std::endl; delete expression1; delete expression2; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-27T02:08:04.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-27T02:08:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解释器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-27T02:08:04.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1682561284000,"updatedTime":1682561284000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.45,"words":136},"filePathRelative":"posts/design-pattern/Interpreter.md","localizedDate":"2023年4月27日","excerpt":"<h1> 解释器模式</h1>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Context</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">Context</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&amp;</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">val_</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">getVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> val_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>string val_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">IExpression</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">IExpression</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token operator\\">~</span><span class=\\"token function\\">IExpression</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">interpret</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Context<span class=\\"token operator\\">&amp;</span> context<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">AExpression</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">IExpression</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">interpret</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Context<span class=\\"token operator\\">&amp;</span> context<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">override</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span><span class=\\"token operator\\">&amp;</span> c <span class=\\"token operator\\">:</span> context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">==</span> <span class=\\"token char\\">'A'</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> count<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">BExpression</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">IExpression</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">interpret</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Context<span class=\\"token operator\\">&amp;</span> context<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">override</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span><span class=\\"token operator\\">&amp;</span> c <span class=\\"token operator\\">:</span> context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">==</span> <span class=\\"token char\\">'B'</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> count<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Context <span class=\\"token function\\">context</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"AAABBBB\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    IExpression<span class=\\"token operator\\">*</span> expression1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">AExpression</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    IExpression<span class=\\"token operator\\">*</span> expression2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">BExpression</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>   \\n\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Aexpression get val \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> expression1<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">interpret</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Bexpression get val \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> expression2<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">interpret</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">delete</span> expression1<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">delete</span> expression2<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
