import{_ as n,V as s,W as a,a0 as e}from"./framework-c954d91f.js";const p={},t=e(`<h1 id="linux-0-11-文件系统exec-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统exec-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统exec.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="create-tables" tabindex="-1"><a class="header-anchor" href="#create-tables" aria-hidden="true">#</a> create_tables</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> <span class="token function">create_tables</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">int</span> envc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="copy-strings" tabindex="-1"><a class="header-anchor" href="#copy-strings" aria-hidden="true">#</a> copy_strings</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_strings</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>page<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> from_kmem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是从用户拷贝参数和环境字符串拷贝到内核空间。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> * from_kmem     argv *        argv **
 *    0          user space    user space
 *    1          kernel space  user space
 *    2          kernel space  kernel space
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="change-ldt" tabindex="-1"><a class="header-anchor" href="#change-ldt" aria-hidden="true">#</a> change_ldt</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">change_ldt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> text_size<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> page<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-execve" tabindex="-1"><a class="header-anchor" href="#do-execve" aria-hidden="true">#</a> do_execve</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_execve</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> eip<span class="token punctuation">,</span><span class="token keyword">long</span> tmp<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是用于加载并执行其他的程序。通常会跟着fork之后调用。</p><p>第一部分是变量的定义，没啥好说的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">exec</span> ex<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> page<span class="token punctuation">[</span>MAX_ARG_PAGES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span>argc<span class="token punctuation">,</span>envc<span class="token punctuation">;</span>
	<span class="token keyword">int</span> e_uid<span class="token punctuation">,</span> e_gid<span class="token punctuation">;</span>
	<span class="token keyword">int</span> retval<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sh_bang <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> p<span class="token operator">=</span>PAGE_SIZE<span class="token operator">*</span>MAX_ARG_PAGES<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这里是对变量的check。<code>eip[1]</code>实际上就是源程序的cs寄存器值。对于用户态的程序， TI字段为1，RPL=3，代码段的序号为1，因此cs寄存器的值为0x000f,因此如果<code>eip[1] &amp; 0xffff</code>的值不是0x000f,也就意味着execve是从内核进程调用的，但是内核进程是不能被替换掉的，因此这里进行检查。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>         |   段描述符索引           |TI | RPL |
0x0017 = |0 0 0 0 0 0 0 0 0 0 0 1 0| 1 | 1 1 |
0x000f = |0 0 0 0 0 0 0 0 0 0 0 0 1| 1 | 1 1 |
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0xffff</span> <span class="token operator">&amp;</span> eip<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x000f</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;execve called from supervisor mode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来根据文件的路径获取i节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">=</span><span class="token function">namei</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">/* get executables inode */</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后统计参数和环境变量的个数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>argc <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
envc <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果inode不是常规文件，则返回错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>restart_interp<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">/* must be regular file */</span>
		retval <span class="token operator">=</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span>
		<span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码用于判断进程是否有权限执行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	i <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">;</span>
	e_uid <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> S_ISUID<span class="token punctuation">)</span> <span class="token operator">?</span> inode<span class="token operator">-&gt;</span>i_uid <span class="token operator">:</span> current<span class="token operator">-&gt;</span>euid<span class="token punctuation">;</span>
	e_gid <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> S_ISGID<span class="token punctuation">)</span> <span class="token operator">?</span> inode<span class="token operator">-&gt;</span>i_gid <span class="token operator">:</span> current<span class="token operator">-&gt;</span>egid<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>euid <span class="token operator">==</span> inode<span class="token operator">-&gt;</span>i_uid<span class="token punctuation">)</span>
		i <span class="token operator">&gt;&gt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>egid <span class="token operator">==</span> inode<span class="token operator">-&gt;</span>i_gid<span class="token punctuation">)</span>
		i <span class="token operator">&gt;&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">&amp;</span> <span class="token number">0111</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		retval <span class="token operator">=</span> <span class="token operator">-</span>ENOEXEC<span class="token punctuation">;</span>
		<span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行到这里说明进程有权限运行程序，接着便是去磁盘中读取程序的第一个数据块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    retval <span class="token operator">=</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
ex <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">exec</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* read exec-header */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这里便是判断文件是否是一个脚本文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>sh_bang<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时bh块中的数据内容已经被拷贝到了ex结构体中，因此可以释放bh块。</p><p>接下来因为Linux-0.11只支持ZMAGIC格式可执行文件，因此如果格式不等于ZMAGIC将直接返回错误。</p><p>此外，如果可执行文件太大或者文件缺失不全，那么也不能运行。首先如果程序的代码段+数据段+bss段的长度超过了50M，则返回错误。 其次如果执行文件的长度小于（代码段+数据段+符号表长度+执行头)的长度，也会返回错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">N_MAGIC</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token operator">!=</span> ZMAGIC <span class="token operator">||</span> ex<span class="token punctuation">.</span>a_trsize <span class="token operator">||</span> ex<span class="token punctuation">.</span>a_drsize <span class="token operator">||</span>
    ex<span class="token punctuation">.</span>a_text<span class="token operator">+</span>ex<span class="token punctuation">.</span>a_data<span class="token operator">+</span>ex<span class="token punctuation">.</span>a_bss<span class="token operator">&gt;</span><span class="token number">0x3000000</span> <span class="token operator">||</span>
    inode<span class="token operator">-&gt;</span>i_size <span class="token operator">&lt;</span> ex<span class="token punctuation">.</span>a_text<span class="token operator">+</span>ex<span class="token punctuation">.</span>a_data<span class="token operator">+</span>ex<span class="token punctuation">.</span>a_syms<span class="token operator">+</span><span class="token function">N_TXTOFF</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    retval <span class="token operator">=</span> <span class="token operator">-</span>ENOEXEC<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果执行文件代码开始处没有位于1024字节边界处，则也不能执行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">N_TXTOFF</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token operator">!=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%s: N_TXTOFF != BLOCK_SIZE. See a.out.h.&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    retval <span class="token operator">=</span> <span class="token operator">-</span>ENOEXEC<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span>
    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>executable <span class="token operator">=</span> inode<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">32</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_OPEN <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>close_on_exec<span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">sys_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>close_on_exec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span>
    last_task_used_math <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>used_math <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>p <span class="token operator">+=</span> <span class="token function">change_ldt</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>a_text<span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token operator">-</span>MAX_ARG_PAGES<span class="token operator">*</span>PAGE_SIZE<span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">create_tables</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">,</span>argc<span class="token punctuation">,</span>envc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来重新设置进程个字段的值。例如brk=a_text+a_data+a_bss</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>current<span class="token operator">-&gt;</span>brk <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_bss <span class="token operator">+</span>
    <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>end_data <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_data <span class="token operator">+</span>
    <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>end_code <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>start_stack <span class="token operator">=</span> p <span class="token operator">&amp;</span> <span class="token number">0xfffff000</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>euid <span class="token operator">=</span> e_uid<span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>egid <span class="token operator">=</span> e_gid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果执行文件的代码段加上数据段长度不在页面的边界上，则将剩余部分置为0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>i <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_text<span class="token operator">+</span>ex<span class="token punctuation">.</span>a_data<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">0xfff</span><span class="token punctuation">)</span>
    <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
eip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_entry<span class="token punctuation">;</span>		<span class="token comment">/* eip, magic happens :-) */</span>
eip<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>			<span class="token comment">/* stack pointer */</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,47),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-fs-exec.html.vue"]]);export{r as default};
