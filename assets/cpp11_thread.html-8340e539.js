const t=JSON.parse('{"key":"v-a99439c0","path":"/posts/Program_language/C__/cpp11_thread.html","title":"c++11中的多线程std::thread","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"c++11中的多线程std::thread 在c++11中提供了新的多线程的创建方式std::thread, 丰富了对于多线程的使用。 std::thread类的构造函数的格式如下所示： thread() noexcept; //default constructor 其中noexcept表示函数不会抛出异常，如果抛出异常程序就会终止 template &lt;class Fn, class... Args&gt; explicit thread (Fn&amp;&amp; fn, Args&amp;&amp;... args); //initialization constructor explicit 表示不支持隐式转换 thread (const thread&amp;) = delete; //copy constructor delete表示不生成默认拷贝构造函数，并且可以禁止使用某个函数，也就表示不可以使用一个线程初始化另一个线程 thread (thread&amp;&amp; x) noexcept; //move constructor","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/C__/cpp11_thread.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++11中的多线程std::thread"}],["meta",{"property":"og:description","content":"c++11中的多线程std::thread 在c++11中提供了新的多线程的创建方式std::thread, 丰富了对于多线程的使用。 std::thread类的构造函数的格式如下所示： thread() noexcept; //default constructor 其中noexcept表示函数不会抛出异常，如果抛出异常程序就会终止 template &lt;class Fn, class... Args&gt; explicit thread (Fn&amp;&amp; fn, Args&amp;&amp;... args); //initialization constructor explicit 表示不支持隐式转换 thread (const thread&amp;) = delete; //copy constructor delete表示不生成默认拷贝构造函数，并且可以禁止使用某个函数，也就表示不可以使用一个线程初始化另一个线程 thread (thread&amp;&amp; x) noexcept; //move constructor"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-24T07:50:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-24T07:50:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++11中的多线程std::thread\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-24T07:50:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用普通函数创建线程","slug":"使用普通函数创建线程","link":"#使用普通函数创建线程","children":[]},{"level":2,"title":"使用仿函数创建线程","slug":"使用仿函数创建线程","link":"#使用仿函数创建线程","children":[]},{"level":2,"title":"使用lambda创建线程","slug":"使用lambda创建线程","link":"#使用lambda创建线程","children":[]},{"level":2,"title":"使用detach进行分离线程","slug":"使用detach进行分离线程","link":"#使用detach进行分离线程","children":[]},{"level":2,"title":"thread的传参","slug":"thread的传参","link":"#thread的传参","children":[]}],"git":{"createdTime":1682317668000,"updatedTime":1682322600000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":4.96,"words":1487},"filePathRelative":"posts/Program_language/C++/cpp11_thread.md","localizedDate":"2023年4月24日","excerpt":"<h1> c++11中的多线程std::thread</h1>\\n<p>在c++11中提供了新的多线程的创建方式std::thread, 丰富了对于多线程的使用。 std::thread类的构造函数的格式如下所示：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>       <span class=\\"token comment\\">//default constructor   其中noexcept表示函数不会抛出异常，如果抛出异常程序就会终止</span>\\n \\n<span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Fn</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> Args<span class=\\"token operator\\">&gt;</span> \\n<span class=\\"token keyword\\">explicit</span> <span class=\\"token function\\">thread</span> <span class=\\"token punctuation\\">(</span>Fn<span class=\\"token operator\\">&amp;&amp;</span> fn<span class=\\"token punctuation\\">,</span> Args<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//initialization constructor  explicit 表示不支持隐式转换</span>\\n \\n<span class=\\"token function\\">thread</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> thread<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">;</span>        <span class=\\"token comment\\">//copy constructor delete表示不生成默认拷贝构造函数，并且可以禁止使用某个函数，也就表示不可以使用一个线程初始化另一个线程</span>\\n \\n<span class=\\"token function\\">thread</span> <span class=\\"token punctuation\\">(</span>thread<span class=\\"token operator\\">&amp;&amp;</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">//move constructor</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
