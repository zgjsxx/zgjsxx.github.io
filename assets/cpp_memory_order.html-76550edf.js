import{_ as e,V as o,W as r,X as n,Y as s,$ as t,a0 as p,F as l}from"./framework-9a29aaa0.js";const d={},c=p(`<h1 id="c-11原子变量与内存序" tabindex="-1"><a class="header-anchor" href="#c-11原子变量与内存序" aria-hidden="true">#</a> c++11原子变量与内存序</h1><h2 id="多线程中共享变量进行操作的问题" tabindex="-1"><a class="header-anchor" href="#多线程中共享变量进行操作的问题" aria-hidden="true">#</a> 多线程中共享变量进行操作的问题</h2><p>在多线程中，共享一个变量用于计数或者流程控制是一个很常见的需求，在这个过程中就带来了两个常见的问题：</p><p>(1)i++问题</p><p>两个线程同时对一个变量执行i++操作，结果得到的值却不是期望的，这便是i++问题。</p><p>i++的问题的原因在于岂不是一个原子操作：</p><table><thead><tr><th>步骤</th><th>thread 1</th></tr></thead><tbody><tr><td>1</td><td>读取内存的值(i)到寄存器</td></tr><tr><td>2</td><td>寄存器的值+1</td></tr><tr><td>3</td><td>将寄存器的值写回内存(i)</td></tr></tbody></table><p>在多线程下，其执行顺序可能是下面这样的：</p><table><thead><tr><th>步骤</th><th>thread 1</th><th>thread 2</th></tr></thead><tbody><tr><td>1</td><td>读取内存的值(i)到寄存器</td><td></td></tr><tr><td>2</td><td>寄存器的值+1</td><td></td></tr><tr><td>3</td><td></td><td>读取内存的值(i)到寄存器</td></tr><tr><td>4</td><td></td><td>寄存器的值+1</td></tr><tr><td>5</td><td>将寄存器的值写回内存(i)</td><td></td></tr><tr><td>6</td><td></td><td>将寄存器的值写回内存(i)</td></tr></tbody></table><p>如果i的初始值为0，按照上面的执行顺序，则i最终值为2，而不是期望的3。</p><p>(2)指令重排问题</p><p>有时候，我们会用一个变量作为标志位，当这个变量等于某个特定值的时候就进行某些操作。但是这样依然可能会有一些意想不到的坑，例如两个线程以如下顺序执行：</p><table><thead><tr><th>步骤</th><th>thread 1</th><th>thread 2</th></tr></thead><tbody><tr><td>1</td><td>a=1</td><td></td></tr><tr><td>2</td><td>flag=true</td><td></td></tr><tr><td>3</td><td></td><td>if flag == true</td></tr><tr><td>4</td><td></td><td>assert(a == 1)</td></tr></tbody></table><p>当B判断flag为true后，断言a为1，看起来的确是这样。那么一定是这样吗？可能不是，因为编译器和CPU都可能将指令进行重排（编译器不同等级的优化和CPU的乱序执行）。实际上的执行顺序可能变成这样：</p><table><thead><tr><th>步骤</th><th>thread 1</th><th>thread 2</th></tr></thead><tbody><tr><td>1</td><td>flag=true</td><td></td></tr><tr><td>2</td><td></td><td>if flag == true</td></tr><tr><td>3</td><td></td><td>assert(a == 1)</td></tr><tr><td>4</td><td>a=1</td><td></td></tr></tbody></table><p>这种重排有可能会导致一个线程内相互之间不存在依赖关系的指令交换执行顺序，以获得更高的执行效率。比如上面：flag 与 a 在A线程看起来是没有任何依赖关系，似乎执行顺序无关紧要。但问题在于B使用了flag作为是否读取a的依据，A的指令重排可能会导致step3 的时候断言失败。</p><p><strong>解决方案</strong></p><p>一个比较稳妥的办法就是对于共享变量的访问进行加锁，加锁可以保证对临界区的互斥访问，例如第一种场景如果加锁后再执行i++ 然后解锁，则同一时刻只会有一个线程在执行i++ 操作。另外，加锁的内存语义能保证一个线程在释放锁前的写入操作一定能被之后加锁的线程所见（即有happens before 语义），可以避免第二种场景中读取到错误的值。</p><h2 id="c-11的原子量" tabindex="-1"><a class="header-anchor" href="#c-11的原子量" aria-hidden="true">#</a> C++11的原子量</h2><p>C++11标准在标准库atomic头文件提供了模版atomic&lt;&gt;来定义原子量：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">atomic</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它提供了一系列的成员函数用于实现对变量的原子操作，例如读操作load，写操作store，以及CAS操作compare_exchange_weak/compare_exchange_strong等。而对于大部分内建类型，C++11提供了一些特化：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic_bool    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_char    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_schar   std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">signed</span> <span class="token keyword">char</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_uchar   std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_short   std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_ushort  std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_int std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_uint    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>atomic_long    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span>
<span class="token comment">//更多类型见：http://en.cppreference.com/w/cpp/atomic/atomic</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上这些特化就是相当于取了一个别名，本质上是同样的定义。而对于整形的特化而言，会有一些特殊的成员函数，例如</p><ul><li>原子加fetch_add、原子减fetch_sub、原子与fetch_and、原子或fetch_or等</li><li>常见操作符++、--、+=、&amp;= 等也有对应的重载版本。</li></ul><p>接下来以int类型为例，解决我们的前面提到的i++ 场景中的问题。先定义一个int类型的原子量：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于int型的原子量重载了++ 操作符，所以i++ 是一个不可分割的原子操作，我们用多个线程执行i++ 操作来进行验证，测试代码如下:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
 
std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> i<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    i<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&gt;</span> workers<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;start &quot;</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; workers, &quot;</span>
              <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;every woker inc &quot;</span> <span class="token operator">&lt;&lt;</span> count  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; times&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
        workers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> w <span class="token operator">:</span> workers<span class="token punctuation">)</span>
        w<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;workers end &quot;</span>
              <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;finally i is &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n <span class="token operator">*</span> count<span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;i++ test passed!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;i++ test failed!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试中，我们定义了一个原子量i，在main函数开始的时候初始化为0，然后启动10个线程，每个线程执行i++操作十万次，最终检查i的值是否正确。执行的最后结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>start <span class="token number">10</span> workers, every woker inc <span class="token number">100000</span> <span class="token builtin class-name">times</span>
workers end finally i is <span class="token number">1000000</span>
i++ <span class="token builtin class-name">test</span> passed<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们可以看到，10个线程同时进行大量的自增操作，i的值依然正常。假如我们把i修改为一个普通的int变量，再次执行程序可以得到结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>start <span class="token number">10</span> workers, every woker inc <span class="token number">100000</span> <span class="token builtin class-name">times</span>
workers end finally i is <span class="token number">445227</span>
i++ <span class="token builtin class-name">test</span> failed<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，由于自增操作各个步骤的交叉执行，导致最后我们得到一个错误的结果。</p><p>原子量可以解决i++问题，那么可以解决指令重排的问题吗？也是可以的，和原子量选择的内存序有关，我们把这个问题放到下一节专门研究。</p><p>上面已经看到atomic是一个模版，那么也就意味着我们可以把自定义类型变成原子变量。但是是否任意类型都可以定义为原子类型呢？当然不是，cppreference中的描述是必须为TriviallyCopyable类型。</p><h2 id="c-11的六种内存序" tabindex="-1"><a class="header-anchor" href="#c-11的六种内存序" aria-hidden="true">#</a> C++11的六种内存序</h2><p>前面我们解决i++问题的时候已经使用过原子量的写操作load将原子量赋值，实际上成员函数还有另一个参数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span> T desired<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order order <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>memory_order_seq_cst <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个参数代表了该操作使用的内存序，用于控制变量在不同线程见的顺序可见性问题，不只load，其他成员函数也带有该参数。c++11提供了六种内存序供选择，分别为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">memory_order</span> <span class="token punctuation">{</span>
    memory_order_relaxed<span class="token punctuation">,</span>
    memory_order_consume<span class="token punctuation">,</span>
    memory_order_acquire<span class="token punctuation">,</span>
    memory_order_release<span class="token punctuation">,</span>
    memory_order_acq_rel<span class="token punctuation">,</span>
    memory_order_seq_cst
<span class="token punctuation">}</span> memory_order<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>memory order(MO)</th><th>作用</th></tr></thead><tbody><tr><td>memory_order_relaxed</td><td>无fencing作用，cpu和编译器可以重排指令</td></tr><tr><td>memory_order_consume</td><td>后面依赖此原子变量的访存指令勿重排至此条指令之前,注：性能比memory_order_acquire高</td></tr><tr><td>memory_order_acquire</td><td>后面访存指令勿重排至此条指令之前</td></tr><tr><td>memory_order_release</td><td>前面访存指令勿重排到此条指令之后</td></tr><tr><td>memory_order_acq_rel</td><td>acquare + release</td></tr><tr><td>memory_order_seq_cst</td><td>acq_rel + 所有使用seq_cst的指令有严格的全序关系</td></tr></tbody></table><p>之前在场景2中，因为指令的重排导致了意料之外的错误，通过使用原子变量并选择合适内存序，可以解决这个问题。下面先来看看这几种内存序</p><h3 id="memory-order-release-memory-order-acquire" tabindex="-1"><a class="header-anchor" href="#memory-order-release-memory-order-acquire" aria-hidden="true">#</a> memory_order_release/memory_order_acquire</h3><p>内存序选项用来作为原子量成员函数的参数，memory_order_release用于store操作，memory_order_acquire用于load操作，这里我们把使用了memory_order_release的调用称之为release操作。从逻辑上可以这样理解：release操作可以阻止这个调用之前的读写操作被重排到后面去，而acquire操作则可以保证调用之后的读写操作不会重排到前面来。听起来有种很绕的感觉，还是以一个例子来解释：假设flag为一个 atomic特化的bool 原子量，a为一个int变量，并且有如下时序的操作：</p><table><thead><tr><th>step</th><th>thread A</th><th>thread B</th></tr></thead><tbody><tr><td>1</td><td>a = 1</td><td></td></tr><tr><td>2</td><td>flag.store(true, memory_order_release)</td><td></td></tr><tr><td>3</td><td></td><td>if( true == flag.load(memory_order_acquire))</td></tr><tr><td>4</td><td></td><td>assert(a == 1)</td></tr></tbody></table><p>实际上这就是把我们上文场景2中的flag变量换成了原子量，并用其成员函数进行读写。在这种情况下的逻辑顺序上，step1不会跑到step2后面去，step4不会跑到step3前面去。这样一来，实际上我们就已经保证了当读取到flag为true的时候a一定已经被写入为1了，场景2得到了解决。换一种比较严谨的描述方式可以总结为：</p><p>对于同一个原子量，<strong>release操作前的写入，一定对随后acquire操作后的读取可见</strong>。</p><p>这两种内存序是需要配对使用的，这也是将他们放在一起介绍的原因。还有一点需要注意的是：只有对同一个原子量进行操作才会有上面的保证，比如step3如果是读取了另一个原子量flag2，是不能保证读取到a的值为1的。</p><h3 id="memory-order-release-memory-order-consume" tabindex="-1"><a class="header-anchor" href="#memory-order-release-memory-order-consume" aria-hidden="true">#</a> memory_order_release/memory_order_consume</h3><p>memory_order_release还可以和memory_order_consume搭配使用。memory_order_release操作的作用没有变化，而memory_order_consume用于load操作，我们简称为consume操作，comsume操作防止在其后对原子变量有依赖的操作被重排到前面去。这种情况下：</p><p>对于同一个原子变量，release操作所依赖的写入，一定对随后consume操作后依赖于该原子变量的操作可见。 这个组合比上一种更宽松，comsume只阻止对这个原子量有依赖的操作重排到前面去，而非像aquire一样全部阻止。将上面的例子稍加改造来展示这种内存序，假设flag为一个 atomic特化的bool 原子量，a为一个int变量，b、c各为一个bool变量，并且有如下时序的操作：</p><table><thead><tr><th>step</th><th>thread A</th><th>thread B</th></tr></thead><tbody><tr><td>1</td><td>b = true</td><td></td></tr><tr><td>2</td><td>a = 1</td><td></td></tr><tr><td>3</td><td>flag.store(b, memory_order_release)</td><td></td></tr><tr><td>4</td><td></td><td>while (!(c = flag.load(memory_order_consume)))</td></tr><tr><td>5</td><td></td><td>assert(a == 1)</td></tr><tr><td>6</td><td></td><td>assert(c == true)</td></tr><tr><td>7</td><td></td><td>assert(b == true)</td></tr></tbody></table><p>step4使得c依赖于flag，当step4线程B读取到flag的值为true的时候，由于flag依赖于b，b在之前的写入是可见的，此时b一定为true，所以step6、step7的断言一定会成功。而且这种依赖关系具有传递性，假如b又依赖与另一个变量d，则d在之前的写入同样对step4之后的操作可见。那么a呢？很遗憾在这种内存序下a并不能得到保证，step5的断言可能会失败。</p><h3 id="memory-order-acq-rel" tabindex="-1"><a class="header-anchor" href="#memory-order-acq-rel" aria-hidden="true">#</a> memory_order_acq_rel</h3><p>这个选项看名字就很像release和acquire的结合体，实际上它的确兼具两者的特性。这个操作用于“读取-修改-写回”这一类既有读取又有修改的操作，例如CAS操作。可以将这个操作在内存序中的作用想象为将release操作和acquire操作捆在一起，因此任何读写操作的重拍都不能跨越这个调用。依然以一个例子来说明，flag为一个 atomic特化的bool 原子量，a、c各为一个int变量，b为一个bool变量,并且刚好按如下顺序执行：</p>`,56),i=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"step"),n("th",null,"thread A"),n("th",null,"thread B")])]),n("tbody",null,[n("tr",null,[n("td",null,"1"),n("td",null,"a = 1"),n("td")]),n("tr",null,[n("td",null,"2"),n("td",null,"flag.store(true, memory_order_release)"),n("td")]),n("tr",null,[n("td",null,"3"),n("td"),n("td",null,"b = true")]),n("tr",null,[n("td",null,"4"),n("td"),n("td",null,"c = 2")]),n("tr",{b:""},[n("td",null,"5"),n("td"),n("td",null,"while (!flag.compare_exchange_weak(b, false, memory_order_acq_rel))")]),n("tr",null,[n("td",null,"6"),n("td"),n("td",null,"assert(a == 1)")]),n("tr",null,[n("td",null,"7"),n("td",null,"if (true == flag.load(memory_order_acquire)"),n("td")]),n("tr",null,[n("td",null,"8"),n("td",null,"assert(c == 2)"),n("td")])])],-1),u=n("h3",{id:"memory-order-seq-cst",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#memory-order-seq-cst","aria-hidden":"true"},"#"),s(" memory_order_seq_cst")],-1),k=n("p",null,"这个内存序是各个成员函数的内存序默认选项，如果不选择内存序则默认使用memory_order_seq_cst。这是一个“美好”的选项，如果对原子变量的操作都是使用的memory_order_seq_cst内存序，则多线程行为相当于是这些操作都以一种特定顺序被一个线程执行，在哪个线程观察到的对这些原子量的操作都一样。同时，任何使用该选项的写操作都相当于release操作，任何读操作都相当于acquire操作，任何“读取-修改-写回”这一类的操作都相当于使用memory_order_acq_rel的操作。",-1),m=n("h3",{id:"memory-order-relaxed",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#memory-order-relaxed","aria-hidden":"true"},"#"),s(" memory_order_relaxed")],-1),b=n("p",null,"这个选项如同其名字，比较松散，它仅仅只保证其成员函数操作本身是原子不可分割的，但是对于顺序性不做任何保证。",-1),h={href:"https://blog.csdn.net/chansoncc/article/details/88186350?share_token=4b2577c7-3323-4f4d-9e94-0240bf5b640c",target:"_blank",rel:"noopener noreferrer"},v={href:"https://wudaijun.com/2019/04/cache-coherence-and-memory-consistency/",target:"_blank",rel:"noopener noreferrer"};function _(y,g){const a=l("ExternalLinkIcon");return o(),r("div",null,[c,i,u,k,m,b,n("p",null,[s("参考文章： "),n("a",h,[s("https://blog.csdn.net/chansoncc/article/details/88186350?share_token=4b2577c7-3323-4f4d-9e94-0240bf5b640c"),t(a)])]),n("p",null,[n("a",v,[s("https://wudaijun.com/2019/04/cache-coherence-and-memory-consistency/"),t(a)])])])}const w=e(d,[["render",_],["__file","cpp_memory_order.html.vue"]]);export{w as default};
