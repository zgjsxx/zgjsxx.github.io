import{_ as s,V as n,W as a,a0 as e}from"./framework-c954d91f.js";const t={},p=e(`<h1 id="list的实现" tabindex="-1"><a class="header-anchor" href="#list的实现" aria-hidden="true">#</a> list的实现</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>mystl<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> l1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> list_iterator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>                         iterator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进行展开</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> list_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>                       iterator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">iterator</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> mystl<span class="token double-colon punctuation">::</span>bidirectional_iterator_tag    iterator_category<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span>                                  value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span>                                 pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>                                 reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                        difference_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">list_iterator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> mystl<span class="token double-colon punctuation">::</span><span class="token class-name">iterator</span><span class="token operator">&lt;</span>mystl<span class="token double-colon punctuation">::</span><span class="token class-name">bidirectional_iterator_tag</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span>                                 value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span>                                pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>                                reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>base_ptr base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>node_ptr node_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> list_iterator_int                  self<span class="token punctuation">;</span>

  base_ptr node_<span class="token punctuation">;</span>  <span class="token comment">// 指向当前节点</span>

  <span class="token comment">//methods</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">list_node_base</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>base_ptr base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>node_ptr node_ptr<span class="token punctuation">;</span>

  base_ptr prev<span class="token punctuation">;</span>  <span class="token comment">// 前一节点</span>
  base_ptr next<span class="token punctuation">;</span>  <span class="token comment">// 下一节点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">list_node_base</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>base_ptr base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">node_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>node_ptr node_ptr<span class="token punctuation">;</span>

  <span class="token keyword">int</span> value<span class="token punctuation">;</span>  <span class="token comment">// 数据域</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">node_traits</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> list_node_base<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">*</span> base_ptr<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> list_node<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">*</span>      node_ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/open_source_project/MyTinySTL/list.png" alt="list" tabindex="0" loading="lazy"><figcaption>list</figcaption></figure>`,12),o=[p];function l(c,i){return n(),a("div",null,o)}const d=s(t,[["render",l],["__file","list.html.vue"]]);export{d as default};
