const n=JSON.parse('{"key":"v-cbd9a754","path":"/posts/Program_language/cpp/cpp_std_function.html","title":"","lang":"zh-CN","frontmatter":{"description":"std::function是怎样实现的？ 首先必须实现一个默认的模板函数，然后根据参数个数特例化不同的实现，在没有变长参数模块语法支持时，只能根据参数个数特例化多个实现，非常繁琐。有了语法支持后，可以使用变长参数模板轻松实现任意个数参数的function。 大致实现如下： 不需要参数时： C++ namespace my { template &lt;typename TR&gt; class function{}; template &lt;typename TR&gt; class function&lt;TR()&gt; { using PFunc = TR(*)(); PFunc pfunc_; public: function(PFunc pfunc) : pfunc_(pfunc) { } TR operator()() { return pfunc_(); } }; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_std_function.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:description","content":"std::function是怎样实现的？ 首先必须实现一个默认的模板函数，然后根据参数个数特例化不同的实现，在没有变长参数模块语法支持时，只能根据参数个数特例化多个实现，非常繁琐。有了语法支持后，可以使用变长参数模板轻松实现任意个数参数的function。 大致实现如下： 不需要参数时： C++ namespace my { template &lt;typename TR&gt; class function{}; template &lt;typename TR&gt; class function&lt;TR()&gt; { using PFunc = TR(*)(); PFunc pfunc_; public: function(PFunc pfunc) : pfunc_(pfunc) { } TR operator()() { return pfunc_(); } }; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-26T14:28:59.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-26T14:28:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-26T14:28:59.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1695737933000,"updatedTime":1695738539000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":1.21,"words":362},"filePathRelative":"posts/Program_language/cpp/cpp_std_function.md","localizedDate":"2023年9月26日","excerpt":"<p><code>std::function</code>是怎样实现的？\\n首先必须实现一个默认的模板函数，然后根据参数个数特例化不同的实现，在没有变长参数模块语法支持时，只能根据参数个数特例化多个实现，非常繁琐。有了语法支持后，可以使用变长参数模板轻松实现任意个数参数的function。</p>\\n<p>大致实现如下：</p>\\n<p>不需要参数时：\\nC++</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">namespace</span> my <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">TR</span><span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">function</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">TR</span><span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">function</span><span class=\\"token operator\\">&lt;</span><span class=\\"token function\\">TR</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">using</span> PFunc <span class=\\"token operator\\">=</span> <span class=\\"token function\\">TR</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    PFunc pfunc_<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">function</span><span class=\\"token punctuation\\">(</span>PFunc pfunc<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token operator\\">:</span> <span class=\\"token function\\">pfunc_</span><span class=\\"token punctuation\\">(</span>pfunc<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    TR <span class=\\"token keyword\\">operator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">pfunc_</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
