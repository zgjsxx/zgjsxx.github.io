import{_ as t,V as l,W as c,X as e,Y as p}from"./framework-9a29aaa0.js";const d={},n=e("h1",{id:"decltype",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#decltype","aria-hidden":"true"},"#"),p(" decltype")],-1),s=e("p",null,"decltype 推导规则 上面的例子让我们初步感受了一下 decltype 的用法，但你不要认为 decltype 就这么简单，它的玩法实际上可以非常复杂。当程序员使用 decltype(exp) 获取类型时，编译器将根据以下三条规则得出结果：",-1),_=e("ul",null,[e("li",null,"如果 exp 是一个不被括号( )包围的表达式，或者是一个类成员访问表达式，或者是一个单独的变量，那么 decltype(exp) 的类型就和 exp 一致，这是最普遍最常见的情况。"),e("li",null,"如果 exp 是函数调用，那么 decltype(exp) 的类型就和函数返回值的类型一致。"),e("li",null,"如果 exp 是一个左值，或者被括号( )包围，那么 decltype(exp) 的类型就是 exp 的引用；假设 exp 的类型为 T，那么 decltype(exp) 的类型就是 T&。")],-1),o=[n,s,_];function a(r,i){return l(),c("div",null,o)}const y=t(d,[["render",a],["__file","cpp_decltype.html.vue"]]);export{y as default};
