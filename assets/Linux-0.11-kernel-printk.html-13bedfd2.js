const t=JSON.parse('{"key":"v-b7c3f19e","path":"/posts/Linux/Linux-0.11-kernel-printk.html","title":"Linux-0.11 kernel目录printk.c详解","lang":"zh-CN","frontmatter":{"category":["Linux"],"tag":["Linux-0.11代码解读系列"],"description":"Linux-0.11 kernel目录printk.c详解 printk printk与printf的差异， 是什么导致一个运行在用户态一个运行在用户态？ 其实这两个函数几乎是相同的， 出现这种差异是因为tty_write函数需要使用fs指向被显示的字符串， 而fs是专门用于存放用户态段选择符的，因此在内核态时，为了配合tty_write函数，printk会把fs修改为内核态数据段选择符ds中的值，这样才能正确指向内核的数据缓冲区，当然也需要对fs进行压栈保存，调用tty_write完毕后再出栈。总结来说，printk和printf的差异是由fs造成的，所以差异也是围绕对fs的处理。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/Linux-0.11-kernel-printk.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux-0.11 kernel目录printk.c详解"}],["meta",{"property":"og:description","content":"Linux-0.11 kernel目录printk.c详解 printk printk与printf的差异， 是什么导致一个运行在用户态一个运行在用户态？ 其实这两个函数几乎是相同的， 出现这种差异是因为tty_write函数需要使用fs指向被显示的字符串， 而fs是专门用于存放用户态段选择符的，因此在内核态时，为了配合tty_write函数，printk会把fs修改为内核态数据段选择符ds中的值，这样才能正确指向内核的数据缓冲区，当然也需要对fs进行压栈保存，调用tty_write完毕后再出栈。总结来说，printk和printf的差异是由fs造成的，所以差异也是围绕对fs的处理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-20T13:49:57.000Z"}],["meta",{"property":"article:tag","content":"Linux-0.11代码解读系列"}],["meta",{"property":"article:modified_time","content":"2023-02-20T13:49:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-0.11 kernel目录printk.c详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-20T13:49:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"printk","slug":"printk","link":"#printk","children":[]}],"git":{"createdTime":1676900997000,"updatedTime":1676900997000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.68,"words":204},"filePathRelative":"posts/Linux/Linux-0.11-kernel-printk.md","localizedDate":"2023年2月20日","excerpt":"<h1> Linux-0.11 kernel目录printk.c详解</h1>\\n<h2> printk</h2>\\n<p>printk与printf的差异， 是什么导致一个运行在用户态一个运行在用户态？</p>\\n<p>其实这两个函数几乎是相同的， 出现这种差异是因为tty_write函数需要使用fs指向被显示的字符串， 而fs是专门用于存放用户态段选择符的，因此在内核态时，为了配合tty_write函数，printk会把fs修改为内核态数据段选择符ds中的值，这样才能正确指向内核的数据缓冲区，当然也需要对fs进行压栈保存，调用tty_write完毕后再出栈。总结来说，printk和printf的差异是由fs造成的，所以差异也是围绕对fs的处理。</p>","autoDesc":true}');export{t as data};
