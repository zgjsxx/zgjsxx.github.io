const n=JSON.parse('{"key":"v-47c314d7","path":"/posts/open_source_project/MyTinySTL/exceptdef.html","title":"exceptdef","lang":"zh-CN","frontmatter":{"description":"category: C++ tag: C++ MyTinySTL exceptdef 分析 相关宏定义 #define MYSTL_DEBUG(expr) \\\\ assert(expr) #define THROW_LENGTH_ERROR_IF(expr, what) \\\\ if ((expr)) throw std::length_error(what) #define THROW_OUT_OF_RANGE_IF(expr, what) \\\\ if ((expr)) throw std::out_of_range(what) #define THROW_RUNTIME_ERROR_IF(expr, what) \\\\ if ((expr)) throw std::runtime_error(what)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/open_source_project/MyTinySTL/exceptdef.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"exceptdef"}],["meta",{"property":"og:description","content":"category: C++ tag: C++ MyTinySTL exceptdef 分析 相关宏定义 #define MYSTL_DEBUG(expr) \\\\ assert(expr) #define THROW_LENGTH_ERROR_IF(expr, what) \\\\ if ((expr)) throw std::length_error(what) #define THROW_OUT_OF_RANGE_IF(expr, what) \\\\ if ((expr)) throw std::out_of_range(what) #define THROW_RUNTIME_ERROR_IF(expr, what) \\\\ if ((expr)) throw std::runtime_error(what)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-25T06:02:03.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-25T06:02:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"exceptdef\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-25T06:02:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[{"level":3,"title":"相关宏定义","slug":"相关宏定义","link":"#相关宏定义","children":[]}]}],"git":{"createdTime":1684994523000,"updatedTime":1684994523000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.16,"words":49},"filePathRelative":"posts/open_source_project/MyTinySTL/exceptdef.md","localizedDate":"2023年5月25日","excerpt":"<p>category:</p>\\n<ul>\\n<li>C++\\ntag:</li>\\n<li>C++</li>\\n<li>MyTinySTL</li>\\n</ul>\\n<hr>\\n<h1> exceptdef</h1>\\n<h2> 分析</h2>\\n<h3> 相关宏定义</h3>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">MYSTL_DEBUG</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">)</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n  <span class=\\"token expression\\"><span class=\\"token function\\">assert</span><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">)</span>  </span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">THROW_LENGTH_ERROR_IF</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">,</span> what<span class=\\"token punctuation\\">)</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n  <span class=\\"token expression\\"><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throw</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">length_error</span><span class=\\"token punctuation\\">(</span>what<span class=\\"token punctuation\\">)</span></span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">THROW_OUT_OF_RANGE_IF</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">,</span> what<span class=\\"token punctuation\\">)</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n  <span class=\\"token expression\\"><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throw</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">out_of_range</span><span class=\\"token punctuation\\">(</span>what<span class=\\"token punctuation\\">)</span></span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">THROW_RUNTIME_ERROR_IF</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">,</span> what<span class=\\"token punctuation\\">)</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n  <span class=\\"token expression\\"><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>expr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throw</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">runtime_error</span><span class=\\"token punctuation\\">(</span>what<span class=\\"token punctuation\\">)</span></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
