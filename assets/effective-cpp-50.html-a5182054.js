const e=JSON.parse('{"key":"v-d11ccfee","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-50.html","title":"effective c++ 50 了解new和delete的合理替换时机","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 50 了解new和delete的合理替换时机 本文主要讲解什么场景下我们需要替换编译器提供的operator new或者operator delete。其实平常开发项目中很少会重载operator new和operator delete， 如果出现了这样的需求可以回过头来再来温习温习本节的内容。 分析 用来检测运用上的错误。 为了强化效能 为了收集使用上的统计数据 为了检测运用错误 为了收集动态分配内存之使用统计信息 为了增加分配和归还的速度。 为了降低缺省内存管理器带来的空间额外开销。 为了弥补缺省分配器中的非最佳齐位 为了将相关对象成簇集中 为了获得非传统的行为","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-50.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 50 了解new和delete的合理替换时机"}],["meta",{"property":"og:description","content":"effective c++ 50 了解new和delete的合理替换时机 本文主要讲解什么场景下我们需要替换编译器提供的operator new或者operator delete。其实平常开发项目中很少会重载operator new和operator delete， 如果出现了这样的需求可以回过头来再来温习温习本节的内容。 分析 用来检测运用上的错误。 为了强化效能 为了收集使用上的统计数据 为了检测运用错误 为了收集动态分配内存之使用统计信息 为了增加分配和归还的速度。 为了降低缺省内存管理器带来的空间额外开销。 为了弥补缺省分配器中的非最佳齐位 为了将相关对象成簇集中 为了获得非传统的行为"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-18T01:49:54.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-18T01:49:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 50 了解new和delete的合理替换时机\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-18T01:49:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684374594000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":4}]},"readingTime":{"minutes":0.88,"words":264},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-50.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 50 了解new和delete的合理替换时机</h1>\\n<p>本文主要讲解什么场景下我们需要替换编译器提供的operator new或者operator delete。其实平常开发项目中很少会重载operator new和operator delete， 如果出现了这样的需求可以回过头来再来温习温习本节的内容。</p>\\n<h2> 分析</h2>\\n<ul>\\n<li>用来检测运用上的错误。</li>\\n<li>为了强化效能</li>\\n<li>为了收集使用上的统计数据</li>\\n<li>为了检测运用错误</li>\\n<li>为了收集动态分配内存之使用统计信息</li>\\n<li>为了增加分配和归还的速度。</li>\\n<li>为了降低缺省内存管理器带来的空间额外开销。</li>\\n<li>为了弥补缺省分配器中的非最佳齐位</li>\\n<li>为了将相关对象成簇集中</li>\\n<li>为了获得非传统的行为</li>\\n</ul>","autoDesc":true}');export{e as data};
