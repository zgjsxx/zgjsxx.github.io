const e=JSON.parse('{"key":"v-61a8ebb8","path":"/posts/lesson/cs6.824-distributed-system/lesson2.html","title":"cs-6.824第2讲 RPC and Threads","lang":"zh-CN","frontmatter":{"category":["分布式系统"],"tag":["分布式系统"],"description":"cs-6.824第2讲 RPC and Threads cs-6.824第2讲 RPC and Threads 为何在本课程中使用Go语言？ 过去在本课程中一直使用的是C++，其实也可以很好的工作。 go与许多编程语言一样，提供了许多特别的功能。它对线程、锁以及线程间的同步有很好的支持。它是一个便捷的远程过程调用包，听起来可能并不起眼，但是实际上却构成了一个重要的限制条件。 对于许多语言，例如C++，想找到一个方便易用的工具是比较困难的。 在这门课程中，我们会一直使用它，以便程序和不同的机器之间可以相互通讯。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/lesson/cs6.824-distributed-system/lesson2.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"cs-6.824第2讲 RPC and Threads"}],["meta",{"property":"og:description","content":"cs-6.824第2讲 RPC and Threads cs-6.824第2讲 RPC and Threads 为何在本课程中使用Go语言？ 过去在本课程中一直使用的是C++，其实也可以很好的工作。 go与许多编程语言一样，提供了许多特别的功能。它对线程、锁以及线程间的同步有很好的支持。它是一个便捷的远程过程调用包，听起来可能并不起眼，但是实际上却构成了一个重要的限制条件。 对于许多语言，例如C++，想找到一个方便易用的工具是比较困难的。 在这门课程中，我们会一直使用它，以便程序和不同的机器之间可以相互通讯。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-12T09:21:37.000Z"}],["meta",{"property":"article:tag","content":"分布式系统"}],["meta",{"property":"article:modified_time","content":"2024-10-12T09:21:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cs-6.824第2讲 RPC and Threads\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-12T09:21:37.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1728633801000,"updatedTime":1728724897000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.71,"words":213},"filePathRelative":"posts/lesson/cs6.824-distributed-system/lesson2.md","localizedDate":"2024年10月11日","excerpt":"<ul>\\n<li><a href=\\"#cs-6824%E7%AC%AC2%E8%AE%B2-rpc-and-threads\\">cs-6.824第2讲 RPC and Threads</a></li>\\n</ul>\\n<h1> cs-6.824第2讲 RPC and Threads</h1>\\n<p>为何在本课程中使用Go语言？</p>\\n<p>过去在本课程中一直使用的是C++，其实也可以很好的工作。</p>\\n<p>go与许多编程语言一样，提供了许多特别的功能。它对线程、锁以及线程间的同步有很好的支持。它是一个便捷的远程过程调用包，听起来可能并不起眼，但是实际上却构成了一个重要的限制条件。 对于许多语言，例如C++，想找到一个方便易用的工具是比较困难的。 在这门课程中，我们会一直使用它，以便程序和不同的机器之间可以相互通讯。</p>","autoDesc":true}');export{e as data};
