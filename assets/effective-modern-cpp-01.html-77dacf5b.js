import{_ as n,V as s,W as a,a0 as p}from"./framework-c954d91f.js";const e={},t=p(`<h1 id="类型推导" tabindex="-1"><a class="header-anchor" href="#类型推导" aria-hidden="true">#</a> 类型推导</h1><p>模板的格式通常如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>ParamType param<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其调用格式：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">f</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>模板类型的推导是对T和ParamType同时进行的。</p><h2 id="paramtype是一个指针或引用-但不是通用引用" tabindex="-1"><a class="header-anchor" href="#paramtype是一个指针或引用-但不是通用引用" aria-hidden="true">#</a> ParamType是一个指针或引用，但不是通用引用</h2><p>在这种情况下，类型推导会这样进行：</p><ul><li>如果expr的类型是一个引用，忽略引用部分</li><li>然后expr的类型与ParamType进行模式匹配来决定T</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//param是一个引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们声明这些变量，</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">;</span>                       <span class="token comment">//x是int</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> cx<span class="token operator">=</span>x<span class="token punctuation">;</span>                 <span class="token comment">//cx是const int</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> rx<span class="token operator">=</span>x<span class="token punctuation">;</span>                <span class="token comment">//rx是指向作为const int的x的引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在不同的调用中，对param和T推导的类型会是这样：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//T是int，param的类型是int&amp;</span>
<span class="token function">f</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T是const int，param的类型是const int&amp;</span>
<span class="token function">f</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T是const int，param的类型是const int&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果ParamType中包含了const，推导如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//param现在是reference-to-const</span>

<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span>                     <span class="token comment">//如之前一样</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> cx <span class="token operator">=</span> x<span class="token punctuation">;</span>               <span class="token comment">//如之前一样</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> rx <span class="token operator">=</span> x<span class="token punctuation">;</span>              <span class="token comment">//如之前一样</span>

<span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//T是int，param的类型是const int&amp;</span>
<span class="token function">f</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T是int，param的类型是const int&amp;</span>
<span class="token function">f</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T是int，param的类型是const int&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当ParamType是指针时：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">*</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//param现在是指针</span>

<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span>                     <span class="token comment">//同之前一样</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>px <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>             <span class="token comment">//px是指向作为const int的x的指针</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T是int，param的类型是int*</span>
<span class="token function">f</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T是const int，param的类型是const int*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="paramtype是一个通用引用" tabindex="-1"><a class="header-anchor" href="#paramtype是一个通用引用" aria-hidden="true">#</a> ParamType是一个通用引用</h2><ul><li>如果expr是左值，T和ParamType都会被推导为左值引用。这非常不寻常，第一，这是模板类型推导中唯一一种T被推导为引用的情况。第二，虽然ParamType被声明为右值引用类型，但是最后推导的结果是左值引用。</li><li>如果expr是右值，就使用正常的（也就是情景一）推导规则</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//param现在是一个通用引用类型</span>
		
<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">;</span>                       <span class="token comment">//如之前一样</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> cx<span class="token operator">=</span>x<span class="token punctuation">;</span>                 <span class="token comment">//如之前一样</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> rx<span class="token operator">=</span>cx<span class="token punctuation">;</span>              <span class="token comment">//如之前一样</span>

<span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//x是左值，所以T是int&amp;，</span>
                                <span class="token comment">//param类型也是int&amp;</span>

<span class="token function">f</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//cx是左值，所以T是const int&amp;，</span>
                                <span class="token comment">//param类型也是const int&amp;</span>

<span class="token function">f</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//rx是左值，所以T是const int&amp;，</span>
                                <span class="token comment">//param类型也是const int&amp;</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//27是右值，所以T是int，</span>
                                <span class="token comment">//param类型就是int&amp;&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="paramtype既不是指针也不是引用" tabindex="-1"><a class="header-anchor" href="#paramtype既不是指针也不是引用" aria-hidden="true">#</a> ParamType既不是指针也不是引用</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>当ParamType既不是指针也不是引用时，我们通过传值（pass<span class="token operator">-</span>by<span class="token operator">-</span>value）的方式处理：

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//以传值的方式处理param</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>和之前一样，如果expr的类型是一个引用，忽略这个引用部分</li><li>如果忽略expr的引用性（reference-ness）之后，expr是一个const，那就再忽略const。如果它是volatile，也忽略volatile（volatile对象不常见，它通常用于驱动程序的开发中。关于volatile的细节请参见Item40）</li></ul><p>因此</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">;</span>                       <span class="token comment">//如之前一样</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> cx<span class="token operator">=</span>x<span class="token punctuation">;</span>                 <span class="token comment">//如之前一样</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> rx<span class="token operator">=</span>cx<span class="token punctuation">;</span>              <span class="token comment">//如之前一样</span>

<span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//T和param的类型都是int</span>
<span class="token function">f</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T和param的类型都是int</span>
<span class="token function">f</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//T和param的类型都是int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意即使cx和rx表示const值，param也不是const。这是有意义的。param是一个完全独立于cx和rx的对象——是cx或rx的一个拷贝。具有常量性的cx和rx不可修改并不代表param也是一样。这就是为什么expr的常量性constness（或易变性volatileness)在推导param类型时会被忽略：因为expr不可修改并不意味着它的拷贝也不能被修改。</p>`,27),c=[t];function o(l,i){return s(),a("div",null,c)}const u=n(e,[["render",o],["__file","effective-modern-cpp-01.html.vue"]]);export{u as default};
