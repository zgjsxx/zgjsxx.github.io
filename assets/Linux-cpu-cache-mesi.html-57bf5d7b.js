const e=JSON.parse('{"key":"v-bf0b1b8a","path":"/posts/Linux/application-dev/Linux-cpu-cache-mesi.html","title":"CPU缓存哪些事儿","lang":"zh-CN","frontmatter":{"description":"CPU缓存哪些事儿 cache line cache line 又分为多种类型，分别为直接映射缓存，多路组相连缓存，全相连缓存。 直接映射缓存 将一个内存地址划分为三块，分别是Tag, Index，Offset。 将cacheline理解为一个数组，那么通过Index则是数组的下标，通过Index就可以获取对应的cache-line。才获取cache-line的数据后，获取其中的Tag值，将其与地址中的Tag值进行对比，如果相同，则代表该内存地址位于该cache line中。最后根据Offset的值去data数组中获取对应的数据。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/application-dev/Linux-cpu-cache-mesi.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"CPU缓存哪些事儿"}],["meta",{"property":"og:description","content":"CPU缓存哪些事儿 cache line cache line 又分为多种类型，分别为直接映射缓存，多路组相连缓存，全相连缓存。 直接映射缓存 将一个内存地址划分为三块，分别是Tag, Index，Offset。 将cacheline理解为一个数组，那么通过Index则是数组的下标，通过Index就可以获取对应的cache-line。才获取cache-line的数据后，获取其中的Tag值，将其与地址中的Tag值进行对比，如果相同，则代表该内存地址位于该cache line中。最后根据Offset的值去data数组中获取对应的数据。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-30T15:14:55.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-30T15:14:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CPU缓存哪些事儿\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-30T15:14:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"cache line","slug":"cache-line","link":"#cache-line","children":[{"level":3,"title":"直接映射缓存","slug":"直接映射缓存","link":"#直接映射缓存","children":[]},{"level":3,"title":"多路组相连缓存","slug":"多路组相连缓存","link":"#多路组相连缓存","children":[]},{"level":3,"title":"全相连缓存","slug":"全相连缓存","link":"#全相连缓存","children":[]}]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1688367205000,"updatedTime":1690730095000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":6}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"posts/Linux/application-dev/Linux-cpu-cache-mesi.md","localizedDate":"2023年7月3日","excerpt":"<h1> CPU缓存哪些事儿</h1>\\n<h2> cache line</h2>\\n<p>cache line 又分为多种类型，分别为直接映射缓存，多路组相连缓存，全相连缓存。</p>\\n<h3> 直接映射缓存</h3>\\n<p>将一个内存地址划分为三块，分别是Tag, Index，Offset。</p>\\n<p>将cacheline理解为一个数组，那么通过Index则是数组的下标，通过Index就可以获取对应的cache-line。才获取cache-line的数据后，获取其中的Tag值，将其与地址中的Tag值进行对比，如果相同，则代表该内存地址位于该cache line中。最后根据Offset的值去data数组中获取对应的数据。</p>","autoDesc":true}');export{e as data};
