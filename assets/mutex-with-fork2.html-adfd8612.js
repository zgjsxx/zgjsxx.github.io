const n=JSON.parse('{"key":"v-69888332","path":"/posts/Linux/mutex-with-fork2.html","title":"Fork之前创建的互斥锁，Fork之后是否可以保护临界区？","lang":"zh-CN","frontmatter":{"title":"Fork之前创建的互斥锁，Fork之后是否可以保护临界区？","category":["Linux"],"tags":["interview"],"description":"#include &lt;stdio.h&gt; #include &lt;pthread.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt; #include &lt;string&gt; using std::string; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void* func(void* arg) { pthread_mutex_lock(&amp;mutex); for(int i = 0;i &lt; 100; ++i) { if(arg != NULL) { char* str = (char*)arg; printf(\\"%s sleep 1s\\\\n\\", str); sleep(1); } else { printf(\\"parent sleep 1s\\\\n\\"); sleep(1); } } pthread_mutex_unlock(&amp;mutex); } void prepare(void) { pthread_mutex_lock(&amp;mutex); } void parent(void) { pthread_mutex_unlock(&amp;mutex); } void child(void) { pthread_mutex_unlock(&amp;mutex); } int main(void) { //pthread_atfork(NULL, NULL, child); pthread_t tid; pthread_create(&amp;tid, NULL, func, NULL); sleep(5); if (fork() == 0) { string str = \\"child\\"; func((void*)str.c_str()); printf(\\"no deadlock\\\\n\\"); return 0; } else { pthread_join(tid, 0); wait(NULL); } return 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/mutex-with-fork2.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:title","content":"Fork之前创建的互斥锁，Fork之后是否可以保护临界区？"}],["meta",{"property":"og:description","content":"#include &lt;stdio.h&gt; #include &lt;pthread.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt; #include &lt;string&gt; using std::string; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void* func(void* arg) { pthread_mutex_lock(&amp;mutex); for(int i = 0;i &lt; 100; ++i) { if(arg != NULL) { char* str = (char*)arg; printf(\\"%s sleep 1s\\\\n\\", str); sleep(1); } else { printf(\\"parent sleep 1s\\\\n\\"); sleep(1); } } pthread_mutex_unlock(&amp;mutex); } void prepare(void) { pthread_mutex_lock(&amp;mutex); } void parent(void) { pthread_mutex_unlock(&amp;mutex); } void child(void) { pthread_mutex_unlock(&amp;mutex); } int main(void) { //pthread_atfork(NULL, NULL, child); pthread_t tid; pthread_create(&amp;tid, NULL, func, NULL); sleep(5); if (fork() == 0) { string str = \\"child\\"; func((void*)str.c_str()); printf(\\"no deadlock\\\\n\\"); return 0; } else { pthread_join(tid, 0); wait(NULL); } return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-17T06:25:09.000Z"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:modified_time","content":"2023-01-17T06:25:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Fork之前创建的互斥锁，Fork之后是否可以保护临界区？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-17T06:25:09.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1673936709000,"updatedTime":1673936709000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.56,"words":167},"filePathRelative":"posts/Linux/mutex-with-fork2.md","localizedDate":"2023年1月17日","excerpt":"<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;pthread.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;unistd.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;sys/wait.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token punctuation\\">;</span>\\npthread_mutex_t mutex <span class=\\"token operator\\">=</span> PTHREAD_MUTEX_INITIALIZER<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> arg<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">pthread_mutex_lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>arg <span class=\\"token operator\\">!=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> str <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>arg<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%s sleep 1s\\\\n\\"</span><span class=\\"token punctuation\\">,</span> str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"parent sleep 1s\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">pthread_mutex_unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">prepare</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">pthread_mutex_lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">parent</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">pthread_mutex_unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">child</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">pthread_mutex_unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>mutex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//pthread_atfork(NULL, NULL, child);</span>\\n\\n    pthread_t tid<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">pthread_create</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>tid<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> func<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">fork</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        string str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"child\\"</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">c_str</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"no deadlock\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">else</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">pthread_join</span><span class=\\"token punctuation\\">(</span>tid<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">wait</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
