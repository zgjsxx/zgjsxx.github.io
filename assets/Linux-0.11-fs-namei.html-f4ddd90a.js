import{_ as n,V as s,W as a,a0 as e}from"./framework-c954d91f.js";const t={},p=e(`<h1 id="linux-0-11-文件系统namei-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统namei-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统namei.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="permission" tabindex="-1"><a class="header-anchor" href="#permission" aria-hidden="true">#</a> permission</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">permission</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span><span class="token keyword">int</span> mask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于比较name的和de-&gt;name的前len个字符是否相等。</p><p>首先对参数进行校验。如果目录项指针de为空， 或者de中的inode节点指针为空，或者长度len大于文件名的最大长度，则直接返回0。</p><p>接下来是对目录项中文件名的长度进行校验，如果其长度大于len，则<code>de-&gt;name[len]</code>的值不为NULL。在这种情况下，直接返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">register</span> <span class="token keyword">int</span> same <span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>de <span class="token operator">||</span> <span class="token operator">!</span>de<span class="token operator">-&gt;</span>inode <span class="token operator">||</span> len <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> NAME_LEN <span class="token operator">&amp;&amp;</span> de<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过一段汇编实现字符串指定长度的比较。</p><p>其中，esi指向name，edi指向de-&gt;name, ecx的值为len， 将eax的值赋值给same。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;cld\\n\\t&quot;</span><span class="token comment">//清方向位</span>
	<span class="token string">&quot;fs ; repe ; cmpsb\\n\\t&quot;</span><span class="token comment">//用户空间 执行循环比较 while(ecx--) esi++ == edi++</span>
	<span class="token string">&quot;setz %%al&quot;</span><span class="token comment">//如果结果一样，则设置al = 1</span>
	<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span>
	<span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;D&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> de<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span> <span class="token punctuation">(</span>len<span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> same<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find-entry" tabindex="-1"><a class="header-anchor" href="#find-entry" aria-hidden="true">#</a> find_entry</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span><span class="token operator">*</span> dir<span class="token punctuation">,</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> namelen<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token operator">*</span> res_dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-entry" tabindex="-1"><a class="header-anchor" href="#add-entry" aria-hidden="true">#</a> add_entry</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">add_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> namelen<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token operator">*</span> res_dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-dir" tabindex="-1"><a class="header-anchor" href="#get-dir" aria-hidden="true">#</a> get_dir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_dir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dir-namei" tabindex="-1"><a class="header-anchor" href="#dir-namei" aria-hidden="true">#</a> dir_namei</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span>
	<span class="token keyword">int</span> <span class="token operator">*</span> namelen<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="namei" tabindex="-1"><a class="header-anchor" href="#namei" aria-hidden="true">#</a> namei</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="open-namei" tabindex="-1"><a class="header-anchor" href="#open-namei" aria-hidden="true">#</a> open_namei</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">open_namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span><span class="token operator">*</span> res_inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数作用是根据文件路径pathname打开一个文件，找到其inode。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span>
<span class="token keyword">int</span> inr<span class="token punctuation">,</span>dev<span class="token punctuation">,</span>namelen<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_TRUNC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_ACCMODE<span class="token punctuation">)</span><span class="token punctuation">)</span>
	flag <span class="token operator">|=</span> O_WRONLY<span class="token punctuation">;</span>
mode <span class="token operator">&amp;=</span> <span class="token number">0777</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>umask<span class="token punctuation">;</span>
mode <span class="token operator">|=</span> I_REGULAR<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span><span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-mknod" tabindex="-1"><a class="header-anchor" href="#sys-mknod" aria-hidden="true">#</a> sys_mknod</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_mknod</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-mkdir" tabindex="-1"><a class="header-anchor" href="#sys-mkdir" aria-hidden="true">#</a> sys_mkdir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="empty-dir" tabindex="-1"><a class="header-anchor" href="#empty-dir" aria-hidden="true">#</a> empty_dir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">empty_dir</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-rmdir" tabindex="-1"><a class="header-anchor" href="#sys-rmdir" aria-hidden="true">#</a> sys_rmdir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-unlink" tabindex="-1"><a class="header-anchor" href="#sys-unlink" aria-hidden="true">#</a> sys_unlink</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-link" tabindex="-1"><a class="header-anchor" href="#sys-link" aria-hidden="true">#</a> sys_link</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> oldname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> newname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,42),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Linux-0.11-fs-namei.html.vue"]]);export{d as default};
