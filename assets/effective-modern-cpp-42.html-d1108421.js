const t=JSON.parse('{"key":"v-a7e1c508","path":"/posts/Program_language/cpp/effective-modern-cpp-42.html","title":"Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back)","lang":"zh-CN","frontmatter":{"category":["C++","Modern effective C++"],"description":"Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back) 考虑我们有一个std::vector容器， 里面存放的内容是std::string。添加新元素时，我们需要使用如下的表达式： std::vector&lt;std::string&gt; vs; //std::string的容器 vs.push_back(std::string(\\"xyzzy\\")); //创建临时std::string，把它传给push_back","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-modern-cpp-42.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back)"}],["meta",{"property":"og:description","content":"Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back) 考虑我们有一个std::vector容器， 里面存放的内容是std::string。添加新元素时，我们需要使用如下的表达式： std::vector&lt;std::string&gt; vs; //std::string的容器 vs.push_back(std::string(\\"xyzzy\\")); //创建临时std::string，把它传给push_back"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-08T03:01:28.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-08T03:01:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-08T03:01:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683514888000,"updatedTime":1683514888000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":6.16,"words":1847},"filePathRelative":"posts/Program_language/cpp/effective-modern-cpp-42.md","localizedDate":"2023年5月8日","excerpt":"<h1> Item42：考虑使用置入(emplace, emplace_back)代替插入(push, push_back)</h1>\\n<p>考虑我们有一个std::vector容器， 里面存放的内容是std::string。添加新元素时，我们需要使用如下的表达式：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span>std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&gt;</span> vs<span class=\\"token punctuation\\">;</span>        <span class=\\"token comment\\">//std::string的容器</span>\\nvs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push_back</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"xyzzy\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//创建临时std::string，把它传给push_back</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
