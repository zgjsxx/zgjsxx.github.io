import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},e=t(`<h1 id="linux-0-11-kernel目录tty-io-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录tty-io-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录tty_io.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>该章节是围绕终端读写展开的。在tty.h定义了tty_struct结构体，其中包含了三个非常重要的队列，即read_q，write_q和seconddary(辅助队列)。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">termios</span> termios<span class="token punctuation">;</span>
	<span class="token keyword">int</span> pgrp<span class="token punctuation">;</span>
	<span class="token keyword">int</span> stopped<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> read_q<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> write_q<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> secondary<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这张图展示了关于这三个队列的数据流。当用户在键盘上敲入字符时，会先进入read_q中，这个时候时原始字符。后面会使用## copy_to_cooked进行处理之后放入secondary队列中。此时对于进程而言，如果调用了read函数从终端读数据，那么则会通过系统调用调用到tty_read函数，tty_read将会从secondary中读取数据。</p><p>如果进程需要向终端打印一些信息，那么会使用通过系统调用从而调用到tty_write函数，向write_q中写入数据，最后再根据终端类型调用con_write或者rs_write向显示器打印出数据。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/tty/tty_flow.png" alt="tty_flow" tabindex="0" loading="lazy"><figcaption>tty_flow</figcaption></figure><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="tty-init" tabindex="-1"><a class="header-anchor" href="#tty-init" aria-hidden="true">#</a> tty_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tty_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于初始化tty终端。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">rs_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化串口终端</span>
<span class="token function">con_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化控制台终端</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tty-intr" tabindex="-1"><a class="header-anchor" href="#tty-intr" aria-hidden="true">#</a> tty_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tty_intr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>键盘中断^C(Ctrl + C)的处理函数，实际就是向前台进程组发送SIGINT信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>pgrp<span class="token operator">==</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span>
        task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> mask<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sleep-if-empty" tabindex="-1"><a class="header-anchor" href="#sleep-if-empty" aria-hidden="true">#</a> sleep_if_empty</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_if_empty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果队列缓冲区为空，则让进程进入可中断睡眠状态。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;&amp;</span> <span class="token function">EMPTY</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-&gt;</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sleep-if-full" tabindex="-1"><a class="header-anchor" href="#sleep-if-full" aria-hidden="true">#</a> sleep_if_full</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_if_full</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FULL</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;&amp;</span> <span class="token function">LEFT</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">)</span>
    <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-&gt;</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wait-for-keypress" tabindex="-1"><a class="header-anchor" href="#wait-for-keypress" aria-hidden="true">#</a> wait_for_keypress</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wait_for_keypress</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">sleep_if_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="copy-to-cooked" tabindex="-1"><a class="header-anchor" href="#copy-to-cooked" aria-hidden="true">#</a> copy_to_cooked</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">copy_to_cooked</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数作用复制成规范模式字符序列。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">signed</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">FULL</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果读队列不为空， 且辅助队列不满，就循环读取一个字节</span>
    <span class="token function">GETCH</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取一个字符到c</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span>       <span class="token comment">//如果是回车字符</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_CRNL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//回车转换行置位</span>
            c<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">//处理成换行符LF</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_NOCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//NOCR置位</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//忽略回车</span>
        <span class="token keyword">else</span> <span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token function">I_NLCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是换行符， 并且换行转回车NLCR置为，则将其转换为回车符CR。</span>
        c<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token comment">//转换为回车</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_UCLC</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果大写转小写置位， 则换成小写</span>
        c<span class="token operator">=</span><span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//CANON置位</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">KILL_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是KILL(^U)</span>
            <span class="token comment">/* deal with killing the input line */</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">LAST</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">10</span> <span class="token operator">||</span>
                    c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//本地回显标志置位</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment">//控制字符要删2字节</span>
                        <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">DEC</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//继续读取读队列中字符进行处理</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">ERASE_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果该字符是删除控制字符ERASE(^H)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">LAST</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">10</span> <span class="token operator">||</span>
                c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//本地回写标志置位</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">)</span>
                    <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">DEC</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">STOP_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果字符是停止控制字符（^S）, 则置tty停止标志，停止tty输出</span>
            tty<span class="token operator">-&gt;</span>stopped<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">START_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是开始字符(^Q)</span>
            tty<span class="token operator">-&gt;</span>stopped<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ISIG</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">INTR_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tty_intr</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span>INTMASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">QUIT_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tty_intr</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span>QUITMASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">10</span> <span class="token operator">||</span> c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span>
        tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>data<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果开启了回显</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHOCTL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token char">&#39;^&#39;</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
            <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tty-read" tabindex="-1"><a class="header-anchor" href="#tty-read" aria-hidden="true">#</a> tty_read</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tty_read</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> channel<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是终端读函数。</p><p>该函数首先是定义了一些参数，并对chanel和nr参数进行校验。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">;</span>
<span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token operator">*</span> b<span class="token operator">=</span>buf<span class="token punctuation">;</span>
<span class="token keyword">int</span> minimum<span class="token punctuation">,</span>time<span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> oldalarm<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token operator">&gt;</span><span class="token number">2</span> <span class="token operator">||</span> nr<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来获取channel对应的tty对象,并从tty对象的VMIN和VTIME计算出读字符的超时时间time和最少需要读取的字符个数minimum。由于VTIME是一个1/10秒的计数值，因此这里需要乘以10。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tty <span class="token operator">=</span> <span class="token operator">&amp;</span>tty_table<span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token punctuation">;</span>
oldalarm <span class="token operator">=</span> current<span class="token operator">-&gt;</span>alarm<span class="token punctuation">;</span><span class="token comment">//进程原本的alarm</span>
time <span class="token operator">=</span> <span class="token number">10L</span><span class="token operator">*</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读操作等待时间</span>
minimum <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//满足读操作，最少需要读取的字符数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，如果time已经设置了值，但是minimum没有设置值，就给minimum设置为1，即每读取一个字符就返回。 接下来我们复用进程PCB中的alarm字段作为字符读取的超时值，在上面的代码中，我们已经保存了进程原本的alarm值到oldalarm中。 如果alarm值为0，或者当前滴答数加上超时值time小于原本的alarm值， 那么就设置flag为1，并且将进程当前的alarm值修改为time+jiffies。 这里这么操作主要就是因为复用了PCB中的字段。 接着如果minimum的值大于nr值，则将minumum设置为nr。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>minimum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    minimum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">!</span>oldalarm <span class="token operator">||</span> time<span class="token operator">+</span>jiffies<span class="token operator">&lt;</span>oldalarm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        current<span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> time<span class="token operator">+</span>jiffies<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>minimum<span class="token operator">&gt;</span>nr<span class="token punctuation">)</span>
    minimum<span class="token operator">=</span>nr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面开始从终端的辅助队列中读取字符。 首先判断是否是内核在上面设置的字符读取的超时到期了，如果是就跳出循环。如果有其他信号，也是跳出循环。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>nr<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> ALRMMASK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;=</span> <span class="token operator">~</span>ALRMMASK<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来如果终端的辅助队列为空，或者设置了终端的规范模式并且辅助队列中的字符行数为0以及辅助队列空闲空间大于20, 则代表当前读不到字符，于是让进程进入可中断睡眠状态。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
<span class="token operator">!</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> <span class="token function">LEFT</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//暂时没有足够的数据</span>
    <span class="token function">sleep_if_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面开始正式进行字符的读取。一直读到nr = 0或者缓冲队列为空。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token function">GETCH</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取一个字符</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">||</span> c<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//文件结束符^D或者换行符10</span>
            tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>data<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//字符行数减去1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//文件结束符^D或者规范模式置位</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">put_fs_byte</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>nr<span class="token punctuation">)</span><span class="token comment">//已经读到了指定的字节数</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nr<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//辅助队列不为空</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行到这里，说明我们已经读取了nr个字符或者辅助队列已经空了。下面先重新设置获取字符的超时值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//读到了nr个字符或者辅助队列为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">!</span>oldalarm <span class="token operator">||</span> time<span class="token operator">+</span>jiffies<span class="token operator">&lt;</span>oldalarm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            current<span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> time<span class="token operator">+</span>jiffies<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            current<span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> oldalarm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>buf <span class="token operator">&gt;=</span> minimum<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的最后，还原进程的alarm值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>current<span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> oldalarm<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回已经读取的字节数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tty-write" tabindex="-1"><a class="header-anchor" href="#tty-write" aria-hidden="true">#</a> tty_write</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tty_write</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> channel<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是中断写的函数。</p><p>该函数的开始定义了一些参数，并对channel和nr进行参数校验。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> cr_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">;</span>
<span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token operator">=</span>buf<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token operator">&gt;</span><span class="token number">2</span> <span class="token operator">||</span> nr<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来取出对应的终端tty，首先判断tty的write_q队列有没有满， 如果满了就进入可中断睡眠的状态。如果进程收到了信号，直接跳出循环。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tty <span class="token operator">=</span> channel <span class="token operator">+</span> tty_table<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>nr<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sleep_if_full</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当要写的字符数量还大于0，并且write_q还没有满，就从用户传入的buffer中获取一个字符c。如果O_POST置位，则需要对字符进行后续处理。如果字符是&#39;\\r&#39;，并且回车转换行置位，则将字符转换为&#39;\\n&#39;。如果字符是&#39;\\n&#39;，并且换行转回车置位，则将字符转换为&#39;\\r&#39;。如果字符是&#39;\\n&#39;,cr_flag没有置位，但是换行转回车置位，则将cr_flag置1，并将该回车放入write_q中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">while</span> <span class="token punctuation">(</span>nr<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">FULL</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">O_POST</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;\\r&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">O_CRNL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span>
                c<span class="token operator">=</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;\\n&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">O_NLRET</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span>
                c<span class="token operator">=</span><span class="token char">&#39;\\r&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;\\n&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cr_flag <span class="token operator">&amp;&amp;</span> <span class="token function">O_NLCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cr_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">O_LCUC</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果小写转大写开启</span>
                c<span class="token operator">=</span><span class="token function">toupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符转化为大写</span>
        <span class="token punctuation">}</span>
        b<span class="token operator">++</span><span class="token punctuation">;</span> nr<span class="token operator">--</span><span class="token punctuation">;</span>
        cr_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来如果是中断，则调用con_write进行中断写，如果是串口，则调用rs_write进行写。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nr<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-tty-interrupt" tabindex="-1"><a class="header-anchor" href="#do-tty-interrupt" aria-hidden="true">#</a> do_tty_interrupt</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_tty_interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是终端中断处理函数。</p><p>该函数的内部实现就是调用copy_to_cooked函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">copy_to_cooked</span><span class="token punctuation">(</span>tty_table<span class="token operator">+</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="chr-dev-init" tabindex="-1"><a class="header-anchor" href="#chr-dev-init" aria-hidden="true">#</a> chr_dev_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">chr_dev_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数时字符设备初始化函数。该函数实现为空，为以后做准备。</p>`,68),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-kernel-tty-io.html.vue"]]);export{r as default};
