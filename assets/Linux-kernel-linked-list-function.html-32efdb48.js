import{_ as n,V as s,W as a,a1 as p}from"./framework-8842c3e4.js";const t={},e=p(`<h1 id="kernel中关于链表的宏定义" tabindex="-1"><a class="header-anchor" href="#kernel中关于链表的宏定义" aria-hidden="true">#</a> kernel中关于链表的宏定义</h1><ul><li>list_for_each_entry</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token comment">/* 找到指定的成员在定义的结构中的偏移的位置 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">offsetof</span><span class="token expression"><span class="token punctuation">(</span>TYPE<span class="token punctuation">,</span> MEMBER<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TYPE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>MEMBER<span class="token punctuation">)</span></span></span>
<span class="token comment">/*    根据结构体成员的地址，以及结构体成员在结构体中的偏移值计算出结构体变量的地址 
 *        ptr    :    结构体成员变量的地址
 *        type    :    结构体的类型定义
 *        member    :    结构体中该成员的定义名称
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">container_of</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>            </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">const</span> <span class="token function">typeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>member<span class="token punctuation">)</span> <span class="token operator">*</span> __mptr <span class="token operator">=</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span>type <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>__mptr <span class="token operator">-</span> <span class="token function">offsetof</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
<span class="token comment">/* 对container_of进行宏的再次定义，作用和container_of一样 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_entry</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">container_of</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span></span></span>
<span class="token comment">/*    对一个链表中的所有元素进行遍历:
 *        pos      : 表示为定义的结构体变量的地址，用来存放每次遍历的结点元素的首地址
 *        head    : 表示要遍历的链表头部
 *        member  : 为该链表成员在结构体中的名称
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>                </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-&gt;</span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>     </span><span class="token punctuation">\\</span>
         <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-&gt;</span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">/*    功能和list_for_each_entry相同
 *    但是遍历的结点是从head结点开始，而不是从head-&gt;next开始
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">yl_list_for_each_entry</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>                </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token punctuation">\\</span>
             <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-&gt;</span>member <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    </span><span class="token punctuation">\\</span>
             <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-&gt;</span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">/* 链表连接件的结构体定义 */</span>
<span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>    
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* 定义一个student结构体，然后用list_head将这些结构体串起来 */</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//名字字段</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span>    <span class="token comment">// 连接件字段</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* 程序的入口函数 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token operator">*</span>stu<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>g_list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">/* 表示链表头部 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>t_list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">/* 表示临时链表元素指针 */</span>
    <span class="token comment">/* 动态分配一块内存区域 */</span>
    stu <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stu<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 对内存区域进行赋值，并将其加入到定义的链表当中 */</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;stu-%d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 判断链表是否为空 */</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g_list<span class="token punctuation">)</span>        <span class="token comment">/* 为空 */</span>
        <span class="token punctuation">{</span>
            g_list <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>list<span class="token punctuation">;</span>
            g_list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>            <span class="token comment">/* 不为空 */</span>
        <span class="token punctuation">{</span>
            t_list <span class="token operator">=</span> g_list<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>t_list<span class="token punctuation">)</span>    <span class="token comment">/* 对链表进行遍历 */</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>t_list<span class="token operator">-&gt;</span>next<span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    t_list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>list<span class="token punctuation">;</span>
                    stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                t_list <span class="token operator">=</span> t_list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* 对链表进行遍历 */</span>
    <span class="token function">yl_list_for_each_entry</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> g_list<span class="token punctuation">,</span> list<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d : %s\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","Linux-kernel-linked-list-function.html.vue"]]);export{k as default};
