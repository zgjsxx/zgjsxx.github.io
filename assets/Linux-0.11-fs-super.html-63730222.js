import{_ as n,V as s,W as a,a0 as t}from"./framework-c954d91f.js";const p={},e=t(`<h1 id="linux-0-11-文件系统super-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统super-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统super.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="lock-super" tabindex="-1"><a class="header-anchor" href="#lock-super" aria-hidden="true">#</a> lock_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lock_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是锁定bh块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_lock<span class="token punctuation">)</span><span class="token comment">//如果已经被锁定</span>
        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将当前任务置为不可中断的等待状态，并添加到该超级快等待队列。</span>
    sb<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//锁定该超级快</span>
    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="free-super" tabindex="-1"><a class="header-anchor" href="#free-super" aria-hidden="true">#</a> free_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">free_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对指定超级块进行解锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
	sb<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//对超级块进行解锁</span>
	<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒等待该超级块的进程</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wait-on-super" tabindex="-1"><a class="header-anchor" href="#wait-on-super" aria-hidden="true">#</a> wait_on_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">wait_on_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是等待超级块解锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_lock<span class="token punctuation">)</span><span class="token comment">//如果已经被锁定</span>
		<span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将当前任务置为不可中断的等待状态，并添加到该超级快等待队列。</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-super" tabindex="-1"><a class="header-anchor" href="#get-super" aria-hidden="true">#</a> get_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> <span class="token function">get_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取指定设备的超级块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> s<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	s <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>super_block<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> NR_SUPER<span class="token operator">+</span>super_block<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">wait_on_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span>
				<span class="token keyword">return</span> s<span class="token punctuation">;</span>
			s <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>super_block<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span>
			s<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="put-super" tabindex="-1"><a class="header-anchor" href="#put-super" aria-hidden="true">#</a> put_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">put_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于放回指定设备的超级块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span>
	<span class="token comment">/* struct m_inode * inode;*/</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先判断该设备是否是根文件系统设备，如果是，则直接返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">==</span> ROOT_DEV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;root diskette changed: prepare for armageddon\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着开始读取该设备的超级块。如果该超级块的挂载位置i节点s_imount还没有处理，则打印告警并返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Mounted disk changed - tssk, tssk\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到该设备的超级块这时候，首先需要锁定该超级块。接着释放i节点位图和逻辑块位图。结束之后，对该超级块进行解锁，并返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">lock_super</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	sb<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>I_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Z_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">free_super</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-super" tabindex="-1"><a class="header-anchor" href="#read-super" aria-hidden="true">#</a> read_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> <span class="token function">read_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是用于读取指定设备的超级块。</p><p>程序的开始定义了一些变量，对进行一些校验。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> s<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span>block<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">check_disk_change</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着从超级块数组中获取一个超级块。如果已经存在，则直接返回该超级块的指针。如果不存在，则找出一个空闲的位置（s_dev=0）。找到之后边进行初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> s<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>super_block <span class="token punctuation">;</span><span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;=</span> NR_SUPER<span class="token operator">+</span>super_block<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token operator">-&gt;</span>s_dev<span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	s<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
	s<span class="token operator">-&gt;</span>s_isup <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	s<span class="token operator">-&gt;</span>s_imount <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	s<span class="token operator">-&gt;</span>s_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	s<span class="token operator">-&gt;</span>s_rd_only <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	s<span class="token operator">-&gt;</span>s_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是读取该设备的第一个磁盘块到内存中。（第0个磁盘块是引导，第一个磁盘块是超级块。）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		s<span class="token operator">-&gt;</span>s_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> s<span class="token punctuation">)</span> <span class="token operator">=</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下俩检查其魔数，如果不是0x137F，则不能处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_magic <span class="token operator">!=</span> SUPER_MAGIC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		s<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来开始读取i节点位图和逻辑块位图数据。i节点位图在设备的第2号块开始，共占用s_imap_blocks块。逻辑块位图在i节点位图之后，共占用s_zmap_blocks块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>I_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Z_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	block<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token operator">-&gt;</span>s_imap_blocks <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			block<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token operator">-&gt;</span>s_zmap_blocks <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			block<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来如果文件系统信息有问题，则意味着初始化失败，则进行失败的处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">!=</span> <span class="token number">2</span><span class="token operator">+</span>s<span class="token operator">-&gt;</span>s_imap_blocks<span class="token operator">+</span>s<span class="token operator">-&gt;</span>s_zmap_blocks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>I_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token function">brelse</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Z_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token function">brelse</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		s<span class="token operator">-&gt;</span>s_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行到这里，说明一切正常。因为0号i节点和0号数据块是不能使用的，因此将i节点位图和逻辑块位图的0号位置设置为1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-umount" tabindex="-1"><a class="header-anchor" href="#sys-umount" aria-hidden="true">#</a> sys_umount</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_umount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> dev_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于卸载一个文件系统。</p><p>程序的开始定义了一些变量，接着通过设备名称获取其i节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span>
	<span class="token keyword">int</span> dev<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">=</span><span class="token function">namei</span><span class="token punctuation">(</span>dev_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于设备节点而言，其设备号存放在i节点的<code>i_zone[0]</code>中。如果该i节点不是一个块设备文件，则不能进行卸载，于是返回错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	dev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOTBLK<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果该设备号存放的是根文件系统，则不能进行卸载。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>dev<span class="token operator">==</span>ROOT_DEV<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来根据设备号取出其超级块，如果该超级块中的s_imount为NULL，也就是该设备没有被挂载，则不能进行卸载。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb<span class="token operator">=</span><span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果挂载的目录节点的i_mount字段为0，则需要打印日志提示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token operator">-&gt;</span>i_mount<span class="token punctuation">)</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Mounted inode has i_mount=0\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来遍历inode表，查看该设备节点是否被占用，如果被占用则返回错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span> <span class="token punctuation">(</span>inode<span class="token operator">=</span>inode_table<span class="token operator">+</span><span class="token number">0</span> <span class="token punctuation">;</span> inode<span class="token operator">&lt;</span>inode_table<span class="token operator">+</span>NR_INODE <span class="token punctuation">;</span> inode<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token operator">==</span>dev <span class="token operator">&amp;&amp;</span> inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行到这里，就开始正式的卸载。首先将挂载的目录节点的i_mount标记为0，随后放回该挂载目录节点。随后将超级块的s_imount字段标记为NULL，并将该文件系统的根i节点进行放回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	sb<span class="token operator">-&gt;</span>s_imount<span class="token operator">-&gt;</span>i_mount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span><span class="token punctuation">;</span>
	sb<span class="token operator">-&gt;</span>s_imount <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_isup<span class="token punctuation">)</span><span class="token punctuation">;</span>
	sb<span class="token operator">-&gt;</span>s_isup <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后释放该设备上的超级块以及位图中占用的高速缓冲块，并对该设备进行数据同步。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">put_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sync_dev</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-mount" tabindex="-1"><a class="header-anchor" href="#sys-mount" aria-hidden="true">#</a> sys_mount</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_mount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> dev_name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> dir_name<span class="token punctuation">,</span> <span class="token keyword">int</span> rw_flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是用于安装文件系统。</p><p>函数的开始定义了一些变量，接着通过设备名称获取其i节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dev_i<span class="token punctuation">,</span> <span class="token operator">*</span> dir_i<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span>
	<span class="token keyword">int</span> dev<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dev_i<span class="token operator">=</span><span class="token function">namei</span><span class="token punctuation">(</span>dev_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于设备类型的i节点，其<code>i_zone[0]</code>存放的是设备号dev。接着判断该设备是否是一个块设备文件，如果不是块设备文件，是不能挂在文件系统的，就会返回权限错误。如果权限校验没有问题，就把dev_i节点放回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	dev <span class="token operator">=</span> dev_i<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>dev_i<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dev_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>dev_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来获取dir_name对应的i节点dir_i。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir_i<span class="token operator">=</span><span class="token function">namei</span><span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果dir_i这个i节点的引用计数不为1，也就是说这个i节点还被其他进程使用，或者dir_i节点是根文件系统的1号i节点，则不能进行挂载。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>dir_i<span class="token operator">-&gt;</span>i_count <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> dir_i<span class="token operator">-&gt;</span>i_num <span class="token operator">==</span> ROOT_INO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，如果该i节点不是一个目录节点，则也不能进行挂载。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>dir_i<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当运行到这里时，就意味着对挂载设备和挂载目录的校验就通过了。接下来，读取设备dev的超级块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb<span class="token operator">=</span><span class="token function">read_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果该超级块已经挂载到某个目录下，那么将返回错误。如果该目录已经挂载了其他的块设备，也返回错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>dir_i<span class="token operator">-&gt;</span>i_mount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后便开始进行真正的挂载步骤，其实就是将超级块sb的s_imount指向挂载的目录i节点dir_i。接着将目录i节点dir_i的i_mount字段标记为1，也将i_dirt标记为1。这些执行完毕之后，将返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	sb<span class="token operator">-&gt;</span>s_imount<span class="token operator">=</span>dir_i<span class="token punctuation">;</span>
	dir_i<span class="token operator">-&gt;</span>i_mount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	dir_i<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mount-root" tabindex="-1"><a class="header-anchor" href="#mount-root" aria-hidden="true">#</a> mount_root</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mount_root</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是安装根文件系统。</p><p>该函数的最初定义了一些变量，对d_inode的结构的长度进行校验。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>free<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> mi<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bad i-node size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果根文件系统在软盘中，就提示插入跟文件系统盘。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_FILE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		file_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Insert root floppy and press ENTER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">wait_for_keypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化超级块数组。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>super_block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>super_block<span class="token punctuation">[</span>NR_SUPER<span class="token punctuation">]</span> <span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		p<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		p<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		p<span class="token operator">-&gt;</span>s_wait <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取根文件系统的超级块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token function">read_super</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to mount root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>读取根目录的i节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mi<span class="token operator">=</span><span class="token function">iget</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span>ROOT_INO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read root i-node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数在init进程中调用，下面设置init进程PCB的pwd和root。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	mi<span class="token operator">-&gt;</span>i_count <span class="token operator">+=</span> <span class="token number">3</span> <span class="token punctuation">;</span>	<span class="token comment">/* NOTE! it is logically used 4 times, not 1 */</span>
	p<span class="token operator">-&gt;</span>s_isup <span class="token operator">=</span> p<span class="token operator">-&gt;</span>s_imount <span class="token operator">=</span> mi<span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>pwd <span class="token operator">=</span> mi<span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>root <span class="token operator">=</span> mi<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计空闲的i节点数量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	free<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	i<span class="token operator">=</span>p<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">set_bit</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">8191</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token operator">&gt;&gt;</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span>
			free<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d free blocks\\n\\r&quot;</span><span class="token punctuation">,</span>free<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计空闲的逻辑块节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	free<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	i<span class="token operator">=</span>p<span class="token operator">-&gt;</span>s_ninodes<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">set_bit</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">8191</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token operator">&gt;&gt;</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span>
			free<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d free inodes\\n\\r&quot;</span><span class="token punctuation">,</span>free<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_ninodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,104),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-fs-super.html.vue"]]);export{r as default};
