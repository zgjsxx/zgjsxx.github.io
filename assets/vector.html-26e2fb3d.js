import{_ as n,V as s,W as a,a0 as p}from"./framework-9a29aaa0.js";const e={},t=p(`<h1 id="vector容器" tabindex="-1"><a class="header-anchor" href="#vector容器" aria-hidden="true">#</a> vector容器</h1><p>vector是STL中使用最为广泛的容器之一，vector的动态内存的管理功能给我们写程序带来了很大的便利性。本节就通过分析MyTinySTL中关于vector的源码了解其实现原理。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="vector数据部分的定义" tabindex="-1"><a class="header-anchor" href="#vector数据部分的定义" aria-hidden="true">#</a> vector数据部分的定义</h3><p>下面是vector这个模板类数据部分的定义。可以看到public部分都是一些类型定义， 例如迭代器类型，const迭代器类型，reverse迭代器类型， const reverse迭代器类型等等。</p><p>private部分比较简单，就是三个<strong>原始指针</strong>类型的迭代器。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">vector</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token operator">!</span>std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">&quot;vector&lt;bool&gt; is abandoned in mystl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// vector 的嵌套型别定义</span>
    <span class="token keyword">typedef</span> mystl<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>                      allocator_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> mystl<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>                      data_allocator<span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>value_type      value_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>pointer         pointer<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>const_pointer   const_pointer<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>reference       reference<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>size_type       size_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>difference_type difference_type<span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> value_type<span class="token operator">*</span>                              iterator<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span>                        const_iterator<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> mystl<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>iterator<span class="token operator">&gt;</span>        reverse_iterator<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> mystl<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>const_iterator<span class="token operator">&gt;</span>  const_reverse_iterator<span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    iterator begin_<span class="token punctuation">;</span>  <span class="token comment">// 表示目前使用空间的头部</span>
    iterator end_<span class="token punctuation">;</span>    <span class="token comment">// 表示目前使用空间的尾部</span>
    iterator cap_<span class="token punctuation">;</span>    <span class="token comment">// 表示目前储存空间的尾部</span>
<span class="token punctuation">}</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的模板参数T为int，vector数据部分就如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">vector</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span>：
    <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span>  iterator<span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span><span class="token operator">*</span> begin_<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> end_<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> cap_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的模板参数为一个类，比如Widget，vector数据部分就如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">vector</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span>：
    <span class="token keyword">typedef</span> Widget<span class="token operator">*</span>  iterator<span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Widget<span class="token operator">*</span> begin_<span class="token punctuation">;</span>
    Widget<span class="token operator">*</span> end_<span class="token punctuation">;</span>
    Widget<span class="token operator">*</span> cap_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector-noexcept" tabindex="-1"><a class="header-anchor" href="#vector-noexcept" aria-hidden="true">#</a> vector() noexcept</h3><p><code>vector() noexcept</code>是一个默认的构造函数，并承若不抛出异常。 其内部调用了try_init方法进行初始化。</p><h3 id="try-init" tabindex="-1"><a class="header-anchor" href="#try-init" aria-hidden="true">#</a> try_init</h3><p>try_init是对内存进行初始化的方法，如果初始化失败，就将rollback，将所有指针置0。下面是try_init的源码。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">try_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        begin_ <span class="token operator">=</span> data_allocator<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        end_ <span class="token operator">=</span> begin_<span class="token punctuation">;</span>
        cap_ <span class="token operator">=</span> begin_ <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        begin_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        end_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        cap_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中调用了<code>data_allocator::allocate</code>去分配内存，默认大小是16一个T类型的大小。</p><p><code>data_allocator::allocate</code>的实现也很简单，直接调用<code>::operator new</code>去申请16个T类型的内存大小。注意这里并不会调用构造函数，它仅仅是分配了内存空间。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T<span class="token operator">*</span> <span class="token class-name">allocator</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="push-back" tabindex="-1"><a class="header-anchor" href="#push-back" aria-hidden="true">#</a> push_back</h3><p>push_back是vector中一个非常重要的方法。应重点了解。包括其与emplace_back的区别也是十分重要，在很多大厂的面试题中非常高频的出现。</p><p>push_back有两个版本，第一种入参是左值引用，第二种入参是右值引用。可以看到右值引用的版本仅仅是调用了emplace_back，因此这里不再讲解，可以参考emplace_back章节。这里详细介绍第一个版本。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span>value_type<span class="token operator">&amp;&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token function">emplace_back</span><span class="token punctuation">(</span>mystl<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是第一个版本的push_back的源码。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>end_ <span class="token operator">!=</span> cap_<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        data_allocator<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span>mystl<span class="token double-colon punctuation">::</span><span class="token function">address_of</span><span class="token punctuation">(</span><span class="token operator">*</span>end_<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>end_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">reallocate_insert</span><span class="token punctuation">(</span>end_<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码主要分为两个分支，第一个分支代表不需要扩容， 第二个分支代表需要扩容。</p><p>在第一个分支中，首先判断end_是否抵达了cap_的边界处，如果没有抵达边界，可以继续在尾部构建。这里调用了<code>data_allocator::construct</code>方法进行构建。</p><p>这里的construct实际上内部使用了placement new方法将对象构建在指定的内存上，并且是调用了复制构造函数进行的构建。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Ty1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Ty2</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span>Ty1<span class="token operator">*</span> ptr<span class="token punctuation">,</span> <span class="token keyword">const</span> Ty2<span class="token operator">&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token double-colon punctuation">::</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span> <span class="token function">Ty1</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要说的是作者使用了<code>mystl::address_of</code>用于获取对象地址，然而该实现可能是不正确的。因为如果重载了<code>operator&amp;</code>方法后，上述输出就可能有问题。 如果使用<code>std::addressof</code>可以解决。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> Tp<span class="token operator">*</span> <span class="token function">address_of</span><span class="token punctuation">(</span>Tp<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前容器已满，那么这个时候就需要进行扩容，才能进行插入，这里调用了<code>reallocate_insert</code>实现扩容后的插入。关于扩容机制，参考<code>reallocate_insert</code>章节。</p><h3 id="capacity" tabindex="-1"><a class="header-anchor" href="#capacity" aria-hidden="true">#</a> capacity</h3><p>这里使用了两个指针相减的方式，指针相减的含义是（地址差）/类型大小，因此指针相减正好就是元素的个数。</p><p>注意指针相减得到的是一个ptrdiff_t类型的结果，ptrdiff_t是一个有符号的数据类型，因为指针相减可以是复数。</p><p>而在capacity计算这里，不会出现begin_比cap_大的场景，因此这里可以将其强转为size_type，实际就是size_t。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>size_type <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>cap_ <span class="token operator">-</span> begin_<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> empty</h3><p>该函数判断vector内是否存在数据，直接通过begin_和end_的值进行比较得到。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">return</span> begin_ <span class="token operator">==</span> end_<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reallocate-insert" tabindex="-1"><a class="header-anchor" href="#reallocate-insert" aria-hidden="true">#</a> reallocate_insert</h3><p>reallocate_insert的作用是重新分配空间并将元素追加到指定位置pos的后面。push_back中重新分配空间进行尾部插入就是它的一个特例。</p><p>其源码实现如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token keyword">const</span> <span class="token keyword">auto</span> new_size <span class="token operator">=</span> <span class="token function">get_new_cap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> new_begin <span class="token operator">=</span> data_allocator<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> new_end <span class="token operator">=</span> new_begin<span class="token punctuation">;</span>
    <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value_copy <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        new_end <span class="token operator">=</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_move</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> new_begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data_allocator<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span>mystl<span class="token double-colon punctuation">::</span><span class="token function">address_of</span><span class="token punctuation">(</span><span class="token operator">*</span>new_end<span class="token punctuation">)</span><span class="token punctuation">,</span> value_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>new_end<span class="token punctuation">;</span>
        new_end <span class="token operator">=</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_move</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> end_<span class="token punctuation">,</span> new_end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        data_allocator<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>new_begin<span class="token punctuation">,</span> new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">destroy_and_recover</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> end_<span class="token punctuation">,</span> cap_ <span class="token operator">-</span> begin_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    begin_ <span class="token operator">=</span> new_begin<span class="token punctuation">;</span>
    end_ <span class="token operator">=</span> new_end<span class="token punctuation">;</span>
    cap_ <span class="token operator">=</span> new_begin <span class="token operator">+</span> new_size<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先调用get_new_cap根据一定的算法获取扩容后的容器大小，进而调用<code>data_allocator::allocate</code>分配new_size大小的内存空间。接下来将begin_到pos区间内的元素拷贝到新的空间中， 接着在pos的后方按照value进行构造， 最后将pos到end_部分的元素移动过去。如果这中间发生了异常，则将新申请的内存空间进行释放。</p><p>接着调用destroy_and_recover将原来的空间的对象释放。这包括了两个步骤，一个步骤是调用对象的析构函数， 第二个步骤是释放内存。</p><p>最后，一切步骤确保无误，将begin_，end_和cap_替换为新的空间对应的位置。</p><p>函数的内部使用了copy-and-swap的思想来确保了异常安全性(Effective c++ Item29)。</p><h3 id="reserve" tabindex="-1"><a class="header-anchor" href="#reserve" aria-hidden="true">#</a> reserve</h3><p>reserve的作用是用于预留一部分的内存空间。下面是其实现的内容。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">reserve</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">THROW_LENGTH_ERROR_IF</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token string">&quot;n can not larger than max_size() in vector&lt;T&gt;::reserve(n)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">auto</span> old_size <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> tmp <span class="token operator">=</span> data_allocator<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mystl<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_move</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> end_<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data_allocator<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> cap_ <span class="token operator">-</span> begin_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        begin_ <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        end_ <span class="token operator">=</span> tmp <span class="token operator">+</span> old_size<span class="token punctuation">;</span>
        cap_ <span class="token operator">=</span> begin_ <span class="token operator">+</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果reserve的大小比之前的capacity相比还要小，那么我们什么都不做处理。</p><p>当reserve的大小比之前的capacity还要大时，进入我们的逻辑。</p><p>首先如果传入的n比max_size()还要大的话，将抛出<code>std::length_error</code>异常。后续我们将使用<code>data_allocator::allocate</code>重新申请<code>n*sizeof(T)</code>大小的内存空间。然后将调用<code>uninitialized_move</code>将旧的数据移动到新申请的内存上。最后调用<code>data_allocator::deallocate</code>释放掉旧的内存，并将begin_， end_， cap_重新指向新的内存地址的相应位置。</p><p>作者这里的deallocate的第二个参数没有太多意义。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>data_allocator<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> cap_ <span class="token operator">-</span> begin_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>作者在allocator.h中的实现，两个重载的版本内部内容是相同的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">allocator</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>T<span class="token operator">*</span> ptr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">allocator</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>T<span class="token operator">*</span> ptr<span class="token punctuation">,</span> size_type <span class="token comment">/*size*/</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resize" tabindex="-1"><a class="header-anchor" href="#resize" aria-hidden="true">#</a> resize</h3><p>resize和reserve是比较容器混淆的两个方法。</p><p>reserve只是分配空间，并不创建对象，更改capacity但不改变size，并且只能扩大不能减小。</p><p>而resize既可能修改size，也可能修改capacity。</p><p>下面是源码部分。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>size_type new_size<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_size <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> new_size<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_size <span class="token operator">-</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分两种情况，第一种是入参n比目前的vector的尺寸小（end_-begin_），第二种是入参n比目前的vector的尺寸大。</p><p><strong>入参n比目前的vector的尺寸小</strong></p><p>这种情况实际上就是缩小vector的尺寸，将vector的size修改为n， 实际就是释放多余的对象然后前移end_指针。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/open_source_project/MyTinySTL/vector/resize1.png" alt="resize1" tabindex="0" loading="lazy"><figcaption>resize1</figcaption></figure><p>这个过程使用了erase方法，传入了起始位置begin() + new_size， 和结束的位置end()，将这个区间的对象分别调用了析构函数进行析构，最后将end_位置前移。</p><p><strong>入参n比目前的vector的尺寸大</strong></p><p>这里也需要分两种情况，第一种情况是n比capacity小。第二种情况是n比capacity还要大。</p><p>当n比capacity小时，将size扩充为n，capacity不变。</p><p>当n比capacity大时，就会进行扩容，capacity增加。</p><h3 id="shrink-to-fit" tabindex="-1"><a class="header-anchor" href="#shrink-to-fit" aria-hidden="true">#</a> shrink_to_fit</h3><p>该函数的作用是缩小vector的尺寸。我们知道vector的容器内部有三个指针，begin_， end_ 和 cap_。 end_到cap_这段区间内的空间其实是没有构建对象的。因此当我们的容器的这部分的内存有些多余的时候就可以考虑将其释放。</p><p>在c++11之前， STL中释放容器多余的空间通常使用swap的技巧。（effective STL item17）。在c++11之后开始支持shrink_to_fit方法。下面是shrink_to_fit的源码部分。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">shrink_to_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>end_ <span class="token operator">&lt;</span> cap_<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">reinsert</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先对容器的现状做一个分析，如果end_小于cap_，意味着容器可以缩小尺寸。其中调用了reinsert方法，将begin_到end_的对象，移动到新的空间中，并将旧的空间和对象释放掉。</p><h3 id="erase" tabindex="-1"><a class="header-anchor" href="#erase" aria-hidden="true">#</a> erase</h3><p>erase方法的作用是将vector容器<code>[first，Last)</code>区间的数据进行删除。下面是其源码部分：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">typename</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">erase</span><span class="token punctuation">(</span>const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">MYSTL_DEBUG</span><span class="token punctuation">(</span>first <span class="token operator">&gt;=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">&lt;=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>last <span class="token operator">&lt;</span> first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span> n <span class="token operator">=</span> first <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator r <span class="token operator">=</span> begin_ <span class="token operator">+</span> <span class="token punctuation">(</span>first <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data_allocator<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span>mystl<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token punctuation">(</span>last <span class="token operator">-</span> first<span class="token punctuation">)</span><span class="token punctuation">,</span> end_<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> end_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    end_ <span class="token operator">=</span> end_ <span class="token operator">-</span> <span class="token punctuation">(</span>last <span class="token operator">-</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> begin_ <span class="token operator">+</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实现过程分为三步：</p><ul><li>将[last， end]区间的数据移到first处</li><li>将剩余空间的对象释放</li><li>重新设置end_指针</li></ul><p>过程如下图所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/open_source_project/MyTinySTL/vector/erase1.png" alt="erase" tabindex="0" loading="lazy"><figcaption>erase</figcaption></figure><h3 id="swap" tabindex="-1"><a class="header-anchor" href="#swap" aria-hidden="true">#</a> swap</h3><p>swap函数的作用就是与另一个vector交换内容，实际就是交换了一些指针。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    mystl<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>begin_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mystl<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>end_<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>end_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mystl<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>cap_<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>cap_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fill-init" tabindex="-1"><a class="header-anchor" href="#fill-init" aria-hidden="true">#</a> fill_init</h3><p>fill_init的作用是vecotr初始化时候调用的方法。</p><p>首先是确定容器的大小，首先将入参n和16比较，取二者中的较大者。接着调用init_space方法申请内存空间，最后调用uninitialized_fill_n进行构造对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>
<span class="token function">fill_init</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> size_type init_size <span class="token operator">=</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_space</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> init_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mystl<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> n<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fill-assign" tabindex="-1"><a class="header-anchor" href="#fill-assign" aria-hidden="true">#</a> fill_assign</h3><p>fill_assign方法是vector::assign方法调用的，assign 方法是用来重新设置vector 容器中元素的数量和值。</p><p>根据n的值为三种情况:</p><ul><li>如果n大于现在的vector的capacity，那么需要重新构造一个新的vector，进行置换。</li><li>如果n比size大，但是小于capacity，那么首先调用fill方法将begin_到end_之间的内存用value填充，将end_开始之后的(n - size())元素初始化为n。</li><li>如果n小于size，将begin_开始的n个元素赋值为value， 并且将多余的元素erase，并调整相应的指针。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>
<span class="token function">fill_assign</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        vector <span class="token function">tmp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mystl<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        end_ <span class="token operator">=</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>end_<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">erase</span><span class="token punctuation">(</span>mystl<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> n<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> end_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reinsert" tabindex="-1"><a class="header-anchor" href="#reinsert" aria-hidden="true">#</a> reinsert</h3><p>该方法在shrink_to_fit函数中被调用，作用是收缩vector的空间。其源码实现如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">reinsert</span><span class="token punctuation">(</span>size_type size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">auto</span> new_begin <span class="token operator">=</span> data_allocator<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    mystl<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_move</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> end_<span class="token punctuation">,</span> new_begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    data_allocator<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>new_begin<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
data_allocator<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>begin_<span class="token punctuation">,</span> cap_ <span class="token operator">-</span> begin_<span class="token punctuation">)</span><span class="token punctuation">;</span>
begin_ <span class="token operator">=</span> new_begin<span class="token punctuation">;</span>
end_ <span class="token operator">=</span> begin_ <span class="token operator">+</span> size<span class="token punctuation">;</span>
cap_ <span class="token operator">=</span> begin_ <span class="token operator">+</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先调用<code>data_allocator::allocate</code>申请大小为size的内存空间，将原来的begin_到end_区域的元素移动，移动成功后将原来vector申请的内存空间释放，重新设置相应的begin_， end_， cap_指针。</p><h3 id="operator" tabindex="-1"><a class="header-anchor" href="#operator" aria-hidden="true">#</a> operator==</h3><p>比较两个vector是否相等，首先判断两个vector的尺寸是否相等，其次调用<code>mystl::equal</code>比较两个vector中的内容是否相等。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    mystl<span class="token double-colon punctuation">::</span><span class="token function">equal</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operator-1" tabindex="-1"><a class="header-anchor" href="#operator-1" aria-hidden="true">#</a> operator&lt;</h3><p>两个vector比较大小，这里使用了<code>mystl::lexicographical_compare</code>字典序列比较算法，详见algobase章节。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">lexicographical_compare</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,107),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","vector.html.vue"]]);export{r as default};
