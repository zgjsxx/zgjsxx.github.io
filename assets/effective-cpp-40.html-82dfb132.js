const e=JSON.parse('{"key":"v-628b5cc8","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-40.html","title":"effective c++ 40 明智而审慎地使用多重继承","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 40 明智而审慎地使用多重继承 总结 多重继承比单一继承复杂。它可能导致新的歧义性，以及对virtual继承的需要 virtual继承会增加大小、速度、初始化（及赋值）复杂度等等成本。如果virtual base classes不带任何数据，将是最具使用价值的情况。 多重继承的确有正当用途。其中一个情节设计\\"public继承某个Interface class\\"和\\"private继承某个协助实现的class\\"的两相组合。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-40.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 40 明智而审慎地使用多重继承"}],["meta",{"property":"og:description","content":"effective c++ 40 明智而审慎地使用多重继承 总结 多重继承比单一继承复杂。它可能导致新的歧义性，以及对virtual继承的需要 virtual继承会增加大小、速度、初始化（及赋值）复杂度等等成本。如果virtual base classes不带任何数据，将是最具使用价值的情况。 多重继承的确有正当用途。其中一个情节设计\\"public继承某个Interface class\\"和\\"private继承某个协助实现的class\\"的两相组合。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T09:30:25.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-15T09:30:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 40 明智而审慎地使用多重继承\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-15T09:30:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684143025000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-40.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 40 明智而审慎地使用多重继承</h1>\\n<h2> 总结</h2>\\n<ul>\\n<li>多重继承比单一继承复杂。它可能导致新的歧义性，以及对virtual继承的需要</li>\\n<li>virtual继承会增加大小、速度、初始化（及赋值）复杂度等等成本。如果virtual base classes不带任何数据，将是最具使用价值的情况。</li>\\n<li>多重继承的确有正当用途。其中一个情节设计\\"public继承某个Interface class\\"和\\"private继承某个协助实现的class\\"的两相组合。</li>\\n</ul>\\n","autoDesc":true}');export{e as data};
