import{_ as s,V as n,W as a,a0 as e}from"./framework-9a29aaa0.js";const t={},p=e(`<h1 id="effective-stl-42-确保less-t-和operator-具有相同的语义" tabindex="-1"><a class="header-anchor" href="#effective-stl-42-确保less-t-和operator-具有相同的语义" aria-hidden="true">#</a> effective STL-42 确保<code>less&lt;T&gt;</code>和operator&lt;具有相同的语义</h1><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>下面有一个类，其有重量和速度两个属性，在<code>operator&lt;</code>中是对weight大小进行比较的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Widget</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    size_t <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    size_t <span class="token function">maxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> w<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> w<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是按照重量从小到大排序</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们想建立一个按照最高速度排序Widget的<code>multiset&lt;Widget&gt;</code>，由于<code>multiset&lt;Widget&gt;</code>的默认比较函数是<code>less&lt;Widget&gt;</code>，这样就会调用<code>operator&lt;</code>，因此直接使用<code>multiset&lt;Widget&gt;</code>将不能满足这样的需求。</p><p>于是我们想到了特化<code>std::less</code>版本。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">std</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">less</span><span class="token operator">&lt;</span><span class="token class-name">Widget</span><span class="token operator">&gt;</span><span class="token operator">:</span>
<span class="token keyword">public</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">,</span><span class="token class-name">Widget</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Widget<span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">maxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">maxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特化后，可以达到了按照速度排序的要求。</p><p>但是特化后，<code>std::less&lt;Widget&gt;</code> 和<code>Widget::operator&lt;</code>的行为就会不一致，这是不好的，会给人造成误导。</p><p>可以使用另一种方法解决该问题：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//可以使用另一种方法来完成上边的问题</span>
<span class="token keyword">struct</span> <span class="token class-name">MaxSpeedCompare</span> <span class="token operator">:</span>
    <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">,</span> <span class="token class-name">Widget</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">maxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">maxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    multiset<span class="token operator">&lt;</span>Widget<span class="token punctuation">,</span> MaxSpeedCompare<span class="token operator">&gt;</span> wisgets<span class="token punctuation">;</span><span class="token comment">//使得该容器按照规定的排序方法进行排序</span>

    multiset<span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span> wisgets2<span class="token punctuation">;</span><span class="token comment">//该容器是使用less&lt;Widget&gt;进行排序的</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>应该尽量避免修改less的行为，因为这样做很有可能误导其他的程序员。如果使用了less，无论是显式还是隐式，你都需要确保她与operator&lt;有相同的意义。若希望以一种特殊的方式来排序对象，那么最好创建一个特殊的函数子类，它的名字不能是less，这样做其实是很简单的。</li></ul>`,13),o=[p];function c(l,i){return n(),a("div",null,o)}const r=s(t,[["render",c],["__file","effective-STL-42.html.vue"]]);export{r as default};
