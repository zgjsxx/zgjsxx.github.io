import{_ as t,V as o,W as c,X as n,Y as s,$ as e,a0 as p,F as l}from"./framework-9a29aaa0.js";const i={},u=p(`<h1 id="c-20-ranges" tabindex="-1"><a class="header-anchor" href="#c-20-ranges" aria-hidden="true">#</a> c++20 ranges</h1><p>c++20四大特性为coroutine， module，concept和range。本文将对range进行探索。</p><h2 id="什么是range" tabindex="-1"><a class="header-anchor" href="#什么是range" aria-hidden="true">#</a> 什么是range</h2><p>首先看看range的定义， range其实是一个concept，concept用于对模板的参数进行一定的约束，而range的约束就是要求<code>ranges::begin(t)</code>和<code>ranges::end(t)</code>可以被正常的解析。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">&gt;</span>
<span class="token keyword">concept</span> <span class="token class-name">range</span> <span class="token operator">=</span> <span class="token keyword">requires</span><span class="token punctuation">(</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ranges<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// equality-preserving for forward iterators</span>
    ranges<span class="token double-colon punctuation">::</span><span class="token function">end</span>  <span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ranges::begin(t)</code>和<code>ranges::end(t)</code>可以正常被解析的话，T需要具备哪些条件呢？</p>`,6),r={href:"https://eel.is/c++draft/range.access.begin%EF%BC%8C",target:"_blank",rel:"noopener noreferrer"},d=p(`<ul><li>T是一个数组类型</li><li>T拥有begin和end方法，即t.begin()和t.end()是有效的， 并且返回值是input_or_output_iterator。</li><li>T是一个class类型，然后begin(t)和end(t)是有效的， 并且返回值是input_or_output_iterator。</li></ul><p>这里又引出了一个概念input_or_output_iterator，其定义如下，阅读了一下，大概意思就是其可以被解引用*，并且支持++操作。（解释并不严谨，但是便于理解）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">I</span><span class="token operator">&gt;</span>
<span class="token keyword">concept</span> <span class="token class-name">input_or_output_iterator</span> <span class="token operator">=</span>
  <span class="token keyword">requires</span><span class="token punctuation">(</span>I i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token operator">*</span>i <span class="token punctuation">}</span> <span class="token operator">-&gt;</span> <span class="token comment">/*can-reference*/</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">&amp;&amp;</span>
  std<span class="token double-colon punctuation">::</span>weakly_incrementable<span class="token operator">&lt;</span>I<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，我们基本了解了什么样的内容可以称之为一个range，把上面的语句重新解释一下，</p><p>对于模板类型T，当T满足下面的条件时，是一个range：</p><ul><li>T是一个数组类型</li><li>T拥有begin和end方法，即t.begin()和t.end()是有效的， 其返回值需要支持使用解引用运算符(*)，也需要支持++运算符。</li><li>T是一个class类型，然后begin(t)和end(t)是有效的， 其返回值需要支持使用解引用运算符(*)，也需要支持++运算符。</li></ul><p>本文并不是一个学术论文，上面的总结可能不能很严谨地囊括所有方面，但是足以让你对range的概念有了相对全面的认识。</p><p>例如STL中的vector，对于表达式<code>vector&lt;int&gt; v</code>， v.begin()和v.end()是合法的，并且v.begin()和v.end()返回的值支持使用解引用和++操作符。</p><h2 id="range可以用来干什么" tabindex="-1"><a class="header-anchor" href="#range可以用来干什么" aria-hidden="true">#</a> range可以用来干什么？</h2><p>ranges可以帮我们简化代码的书写，</p><h3 id="使用ranges-sort简化排序的写法" tabindex="-1"><a class="header-anchor" href="#使用ranges-sort简化排序的写法" aria-hidden="true">#</a> 使用<code>ranges::sort</code>简化排序的写法</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ranges&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//std::sort(vec.begin(), vec.end());</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结合ranges-view简化反向-过滤-取值等操作" tabindex="-1"><a class="header-anchor" href="#结合ranges-view简化反向-过滤-取值等操作" aria-hidden="true">#</a> 结合ranges::view简化反向，过滤，取值等操作</h2><p>下面的例子使用了ranges::view::reverse帮助我们对vector进行反向。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ranges&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>ranges<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> views<span class="token double-colon punctuation">::</span>reverse<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里出现了管道类似于shell指令中的管道运算符|，其作用也是类似的，将前一个表达式的输出作为下一个表达式的输入。</p><p>例如下面的例子，对range首先进行adapter1操作，再进行adapter2操作。语法1和语法2是等同的，但是语法2更好理解。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">adapter2</span><span class="token punctuation">(</span><span class="token function">adaptor1</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//（1）</span>

range <span class="token operator">|</span> <span class="token function">adaptor1</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">adaptor2</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">//（2）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以上述代码中的<code>a | views::reverse</code>的含义就更好理解了，就是将a作为<code>views::reverse</code>的输入，将就可以得到一个a反向版本的range。再对这个反向版本的range进行遍历。</p><p>看懂了上面的简单的例子，我们再看下面的复杂一点的例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ranges&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>ranges<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> res <span class="token operator">=</span> v <span class="token operator">|</span> views<span class="token double-colon punctuation">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">|</span> views<span class="token double-colon punctuation">::</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，首先将v传递给filter函数，filter函数的作用是过滤出v中奇数的元素，再将这个中间结果传递给下一层的take方法，取出前三个元素。</p><h2 id="如何定义自己的range" tabindex="-1"><a class="header-anchor" href="#如何定义自己的range" aria-hidden="true">#</a> 如何定义自己的range？</h2><p>从上面的例子中我们大概对range有了认识，range实际上是一种泛化，是对具有相同接口的数据结构的一种抽象。有人也形象的称之为STL2.0。</p><p>下面我们就看看如何自定义一个range类型。</p><p>在下面的例子中，我们定义了MyRange的类型，提供了相应的begin和end方法。由于我们私有数据类型是vector，因此begin和end返回的是迭代器类型，也是满足要求的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//g++ main.cpp -std=c++20</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ranges&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
 

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>ranges<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MyRange</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">MyRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator Iterator<span class="token punctuation">;</span>
    Iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v_<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>
        v_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> v_<span class="token punctuation">;</span>    
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MyRange<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myRange<span class="token punctuation">;</span>
    myRange<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myRange<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myRange<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myRange<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myRange<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> <span class="token punctuation">(</span>myRange <span class="token operator">|</span> views<span class="token double-colon punctuation">::</span>reverse<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,28),k={href:"https://en.cppreference.com/w/cpp/ranges%E3%80%82",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"对于range，总结如下：",-1),m=n("ul",null,[n("li",null,"range是一种泛化，是具有begin和end属性的物体的抽象"),n("li",null,"使用range和view可以实现各种需求，可以简化代码的编写。")],-1);function b(g,h){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("这里阅读了下面网站的解析，"),n("a",r,[s("https://eel.is/c++draft/range.access.begin，"),e(a)]),s(" 得到的结论是，T可能在下面几种条件下是合法的：")]),d,n("p",null,[s("通过上面的例子，我们对range有了一个认识，ranges库提供的功能不仅仅局限于此，有关ranges的更多作用，可以去下面的地址进行了解。"),n("a",k,[s("https://en.cppreference.com/w/cpp/ranges。"),e(a)])]),v,m])}const w=t(i,[["render",b],["__file","cpp_cpp20_range.html.vue"]]);export{w as default};
