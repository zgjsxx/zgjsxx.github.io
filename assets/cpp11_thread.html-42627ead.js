const t=JSON.parse('{"key":"v-48644d60","path":"/posts/Program_language/cpp/cpp11_thread.html","title":"c++11中的多线程std::thread","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"c++11中的多线程std::thread 简介 在c++11中提供了新的多线程的创建方式std::thread, 丰富了对于多线程的使用。本文将从下面几个角度对std::thread进行讲解。 std::thread的原型 std::thread创建线程的方式 std::thread的销毁 std::thread的传参 如何获取线程的返回值 std::thread的原型","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp11_thread.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++11中的多线程std::thread"}],["meta",{"property":"og:description","content":"c++11中的多线程std::thread 简介 在c++11中提供了新的多线程的创建方式std::thread, 丰富了对于多线程的使用。本文将从下面几个角度对std::thread进行讲解。 std::thread的原型 std::thread创建线程的方式 std::thread的销毁 std::thread的传参 如何获取线程的返回值 std::thread的原型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-09T15:02:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-09T15:02:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++11中的多线程std::thread\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-09T15:02:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"std::thread的原型","slug":"std-thread的原型","link":"#std-thread的原型","children":[]},{"level":2,"title":"std::thread创建线程的方式","slug":"std-thread创建线程的方式","link":"#std-thread创建线程的方式","children":[{"level":3,"title":"使用普通函数创建线程","slug":"使用普通函数创建线程","link":"#使用普通函数创建线程","children":[]},{"level":3,"title":"使用仿函数创建线程","slug":"使用仿函数创建线程","link":"#使用仿函数创建线程","children":[]},{"level":3,"title":"使用lambda表达式创建线程","slug":"使用lambda表达式创建线程","link":"#使用lambda表达式创建线程","children":[]},{"level":3,"title":"使用成员函数创建线程","slug":"使用成员函数创建线程","link":"#使用成员函数创建线程","children":[]}]},{"level":2,"title":"std::thread的销毁","slug":"std-thread的销毁","link":"#std-thread的销毁","children":[]},{"level":2,"title":"std::thread的传参","slug":"std-thread的传参","link":"#std-thread的传参","children":[]},{"level":2,"title":"如何获取线程的返回值","slug":"如何获取线程的返回值","link":"#如何获取线程的返回值","children":[]},{"level":2,"title":"std::thread的native handle","slug":"std-thread的native-handle","link":"#std-thread的native-handle","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1682351150000,"updatedTime":1694271746000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":7}]},"readingTime":{"minutes":9.36,"words":2809},"filePathRelative":"posts/Program_language/cpp/cpp11_thread.md","localizedDate":"2023年4月24日","excerpt":"<h1> c++11中的多线程std::thread</h1>\\n<h2> 简介</h2>\\n<p>在c++11中提供了新的多线程的创建方式<code>std::thread</code>, 丰富了对于多线程的使用。本文将从下面几个角度对<code>std::thread</code>进行讲解。</p>\\n<ul>\\n<li>std::thread的原型</li>\\n<li>std::thread创建线程的方式</li>\\n<li>std::thread的销毁</li>\\n<li>std::thread的传参</li>\\n<li>如何获取线程的返回值</li>\\n</ul>\\n<h2> std::thread的原型</h2>","autoDesc":true}');export{t as data};
