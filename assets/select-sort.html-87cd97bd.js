import{_ as p,V as e,W as o,X as n,Y as s,$ as c,a0 as a,F as l}from"./framework-9a29aaa0.js";const i={},u=a('<h1 id="直接选择排序" tabindex="-1"><a class="header-anchor" href="#直接选择排序" aria-hidden="true">#</a> 直接选择排序</h1><p>直接选择排序是一种很直观的排序方法。其操作是这样：先在未排序的序列中选择最小的元素（或最大的元素），把它与第一个元素交换，放在第一个位置，再在剩余未排序序列中选择第二小的，与第二个元素交换，放在第二个位置，以此类推，直到所有序列排序完毕。</p><p>这种排序方法应该是大部分人最直观的一种排序方法，下面就根据一个实际例子来看看其过程。</p><h2 id="排序过程" tabindex="-1"><a class="header-anchor" href="#排序过程" aria-hidden="true">#</a> 排序过程</h2><p>下面以一个未排序的数组[5,1,2,3,4]为例，展示其排序过程：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/datastructure_algorithm/select_sort/select_sort.png" alt="select_sort" tabindex="0" loading="lazy"><figcaption>select_sort</figcaption></figure><p><strong>算法效率</strong></p>',7),r=n("p",null,[n("strong",null,"时间复杂度"),s(": "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O({n}^{2})")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n")]),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mclose"},")")])])]),s("，因为无论数组是哪种情况，都需要进行两次for循环，都是确定数组前n-1个最小值，即使数组是本身有序的。")],-1),k=n("p",null,[n("strong",null,"空间复杂度"),s("为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O({1})")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord"},"1")]),n("span",{class:"mclose"},")")])])]),s("，因为只使用有限个数的变量。")],-1),d=a(`<h2 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码" aria-hidden="true">#</a> 实现代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>

<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>xp<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>yp<span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
	<span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>xp<span class="token punctuation">;</span> 
	<span class="token operator">*</span>xp <span class="token operator">=</span> <span class="token operator">*</span>yp<span class="token punctuation">;</span> 
	<span class="token operator">*</span>yp <span class="token operator">=</span> temp<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> min_idx<span class="token punctuation">;</span> 

	<span class="token comment">// One by one move boundary of unsorted subarray </span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span> 
		<span class="token comment">// Find the minimum element in unsorted array </span>
		min_idx <span class="token operator">=</span> i<span class="token punctuation">;</span> 
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> 
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min_idx<span class="token punctuation">]</span><span class="token punctuation">)</span> 
			min_idx <span class="token operator">=</span> j<span class="token punctuation">;</span> 

		<span class="token comment">// Swap the found minimum element with the first element </span>
		<span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>min_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token comment">/* Function to print an array */</span>
<span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
	<span class="token keyword">int</span> i<span class="token punctuation">;</span> 
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token comment">// Driver program to test above functions </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Sorted array: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m={href:"https://godbolt.org/z/43exqjsrz",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"稳定性分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#稳定性分析","aria-hidden":"true"},"#"),s(" 稳定性分析")],-1),h=n("p",null,[n("strong",null,"稳定性"),s("就是指对于两个关键字相等的记录，它们在序列中的相对位置，在排序之前和排序之后没有发生改变。通俗地讲就是有两个关键字相等的数据A、B，排序前，A的位置是 i ，B的位置是 j，此时 i < j，则如果在排序后A的位置还是在B之前，那么称它是稳定的。")],-1),b=n("p",null,"直接选择排序是一个不稳定的排序，其将最小值和队头元素的交换过程可能会导致相同元素的顺序发生交换。",-1),g=n("p",null,"例如下面的例子， [3A, 2, 3B, 5, 1]， 其最终将排序成[1, 2, 3B, 3A, 5]，如下图所示：",-1),_=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/datastructure_algorithm/select_sort/select_sort2.png",alt:"select_sort2",tabindex:"0",loading:"lazy"}),n("figcaption",null,"select_sort2")],-1),y=n("p",null,"可以看出在这个过程中，相同元素的相对位置发生了改变。",-1);function f(w,x){const t=l("ExternalLinkIcon");return e(),o("div",null,[u,r,k,d,n("p",null,[n("a",m,[s("have a try"),c(t)])]),v,h,b,g,_,y])}const j=p(i,[["render",f],["__file","select-sort.html.vue"]]);export{j as default};
