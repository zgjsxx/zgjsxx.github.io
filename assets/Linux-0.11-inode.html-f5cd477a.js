import{_ as n,V as a,W as s,a0 as e}from"./framework-c954d91f.js";const i={},o=e(`<h1 id="linux-0-11-文件系统inode-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统inode-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统inode.c详解</h1><h2 id="read-inode" tabindex="-1"><a class="header-anchor" href="#read-inode" aria-hidden="true">#</a> read_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是通过inode的编号，在磁盘上找到inode块的内容。</p><p>回顾一下minix文件系统的分布，如下图所示:</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/minixfs.drawio.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/inode_map.drawio.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><p>其中引导块为一个block，超级块为一个block，inode位图的大小在超级块中定义，逻辑块位图的大小在超级块中定义。跳过这些块，就可以来到inode节点块的起点。</p><p>那么inode节点会在哪个block中呢？</p><p>inode节点的序号从0开始， 但是0号是个保留号， 实际存储并不会存0号inode， 因此inode的实际起始位置是1。</p><p>因此序号为n的inode，在磁盘上的盘块号为:</p><p>block = 1 + 1 + s_imap_blocks + s_zmap_blocks + (n - 1)/每个磁盘块存储的inode数量。</p><p>找到了inode所在的磁盘块， 计算inode在该块中的下标， 则通过</p><p>index = (n - 1) % 每个磁盘块存储的inode数量</p><p>到此， 给定一个inode号，就可以从磁盘上找到对应的inode节点。</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>if (!(sb=get_super(inode-&gt;i_dev)))
    panic(&quot;trying to read inode without dev&quot;);
block = 2 + sb-&gt;s_imap_blocks + sb-&gt;s_zmap_blocks +
    (inode-&gt;i_num-1)/INODES_PER_BLOCK;
if (!(bh=bread(inode-&gt;i_dev,block)))
    panic(&quot;unable to read i-node block&quot;);
*(struct d_inode *)inode =
    ((struct d_inode *)bh-&gt;b_data)
        [(inode-&gt;i_num-1)%INODES_PER_BLOCK];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iget-int-dev-int-nr" tabindex="-1"><a class="header-anchor" href="#iget-int-dev-int-nr" aria-hidden="true">#</a> iget(int dev,int nr)</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">iget</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用主要是通过设备号和inode的序号获取对应的inode节点。</p><p>需要注意的是，如果一个硬盘上装有<strong>多个文件系统</strong>，需要处理<strong>一个inode节点是另一个文件系统挂载点</strong>的情况。</p><p>如果i节点是某个文件系统的安装点， 则在超级块的表中搜索即可搜索到。 若找到了相应的超级块， 则将该i节点写盘。再从安装此i节点的文件系统的超级快块上取设备号，并令i节点为1。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/inode_iget.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><h2 id="iput" tabindex="-1"><a class="header-anchor" href="#iput" aria-hidden="true">#</a> iput</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>放回一个i节点。 该函数主要用于将i节点的引用计数递减<span class="token number">1</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="write-inode" tabindex="-1"><a class="header-anchor" href="#write-inode" aria-hidden="true">#</a> write_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数在搜索inode节点的功能上和read_inode相同。</p><p>有所区别的是该函数是修改一个inode的值， 因此在找到inode节点后需要进行赋值， 并将buffer块标记为脏页，以回写到磁盘上。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>INODES_PER_BLOCK<span class="token punctuation">]</span> <span class="token operator">=</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span>inode<span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
inode<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-empty-inode" tabindex="-1"><a class="header-anchor" href="#get-empty-inode" aria-hidden="true">#</a> get_empty_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_empty_inode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是从空闲的inode表中获取一个空闲的i节点项。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/get_empty_inode.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><h2 id="bmap" tabindex="-1"><a class="header-anchor" href="#bmap" aria-hidden="true">#</a> _bmap</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_bmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">,</span><span class="token keyword">int</span> create<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是映射文件数据块到盘块的处理操作。</p><p>如果block号小于7， 则直接寻址。</p><p>如果block号大于7， 小于等于7 + 512， 则通过一次寻址。</p><p>如果block号大于7 + 512 ， 小于等于7 + 512 + 512 * 512， 则通过二次寻址。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/inode_search_address.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><h2 id="create-block" tabindex="-1"><a class="header-anchor" href="#create-block" aria-hidden="true">#</a> create_block</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">create_block</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>create block底层调用了_bmap函数，去磁盘上申请一个逻辑块， 并与inode关联， 通过返回该逻辑块的盘块号。</p><h2 id="bmap-1" tabindex="-1"><a class="header-anchor" href="#bmap-1" aria-hidden="true">#</a> bmap</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是通过文件数据块的块号返回其磁盘上的盘块号。</p><h2 id="sync-inodes" tabindex="-1"><a class="header-anchor" href="#sync-inodes" aria-hidden="true">#</a> sync_inodes</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sync_inodes</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将inode表中的脏的数据刷到磁盘上。</p><h2 id="invalidate-inodes" tabindex="-1"><a class="header-anchor" href="#invalidate-inodes" aria-hidden="true">#</a> invalidate_inodes</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">invalidate_inodes</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>释放设备dev在内存i节点表中的所有i节点。</p><h2 id="lock-inode" tabindex="-1"><a class="header-anchor" href="#lock-inode" aria-hidden="true">#</a> lock_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">lock_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>锁定某个inode。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_lock<span class="token punctuation">)</span>
    <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
inode<span class="token operator">-&gt;</span>i_lock<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//将该inode的锁定状态修改为1</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wait-on-inode" tabindex="-1"><a class="header-anchor" href="#wait-on-inode" aria-hidden="true">#</a> wait_on_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">wait_on_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待inode块解锁。</p><p>该代表较为简单， 直接通过注释进行解释。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关中断</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_lock<span class="token punctuation">)</span> 
    <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果该inode被加锁， 就将当前进程状态修改为TASK_UNINTERRUPTIBLE</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unlock-inode" tabindex="-1"><a class="header-anchor" href="#unlock-inode" aria-hidden="true">#</a> unlock_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对该inode 解锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>inode<span class="token operator">-&gt;</span>i_lock<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//将该inode的锁定状态修改为0.</span>
<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒等待该inode的进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,65),t=[o];function p(c,d){return a(),s("div",null,t)}const r=n(i,[["render",p],["__file","Linux-0.11-inode.html.vue"]]);export{r as default};
