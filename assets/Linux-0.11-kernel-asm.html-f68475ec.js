const e=JSON.parse('{"key":"v-51b12ace","path":"/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-asm.html","title":"Linux-0.11 kernel目录进程管理asm.s详解","lang":"zh-CN","frontmatter":{"category":["Linux"],"tag":["Linux-0.11代码解读系列"],"description":"Linux-0.11 kernel目录进程管理asm.s详解 模块简介 该模块和CPU异常处理相关，在代码结构上asm.s和traps.c强相关。 CPU探测到异常时，主要分为两种处理方式，一种是有错误码，另一种是没有错误码，对应的方法就是error_code和no_error_code。在下面的函数详解中，将主要以两个函数展开。 函数详解 no_error_code 对于一些异常而言，CPU在出现这些异常时不会将error code压入栈中。其和一般的中断类似，会将ss,esp,eflags,cs,eip这几个寄存器的值压入内核栈中。如下图所示：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-asm.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux-0.11 kernel目录进程管理asm.s详解"}],["meta",{"property":"og:description","content":"Linux-0.11 kernel目录进程管理asm.s详解 模块简介 该模块和CPU异常处理相关，在代码结构上asm.s和traps.c强相关。 CPU探测到异常时，主要分为两种处理方式，一种是有错误码，另一种是没有错误码，对应的方法就是error_code和no_error_code。在下面的函数详解中，将主要以两个函数展开。 函数详解 no_error_code 对于一些异常而言，CPU在出现这些异常时不会将error code压入栈中。其和一般的中断类似，会将ss,esp,eflags,cs,eip这几个寄存器的值压入内核栈中。如下图所示："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-05T15:58:23.000Z"}],["meta",{"property":"article:tag","content":"Linux-0.11代码解读系列"}],["meta",{"property":"article:modified_time","content":"2024-04-05T15:58:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-0.11 kernel目录进程管理asm.s详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-05T15:58:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块简介","slug":"模块简介","link":"#模块简介","children":[]},{"level":2,"title":"函数详解","slug":"函数详解","link":"#函数详解","children":[{"level":3,"title":"no_error_code","slug":"no-error-code","link":"#no-error-code","children":[]},{"level":3,"title":"error_code","slug":"error-code","link":"#error-code","children":[]},{"level":3,"title":"divide_error:","slug":"divide-error","link":"#divide-error","children":[]},{"level":3,"title":"debug","slug":"debug","link":"#debug","children":[]},{"level":3,"title":"nmi","slug":"nmi","link":"#nmi","children":[]},{"level":3,"title":"int3","slug":"int3","link":"#int3","children":[]},{"level":3,"title":"overflow","slug":"overflow","link":"#overflow","children":[]},{"level":3,"title":"bounds","slug":"bounds","link":"#bounds","children":[]},{"level":3,"title":"invalid_op","slug":"invalid-op","link":"#invalid-op","children":[]},{"level":3,"title":"coprocessor_segment_overrun","slug":"coprocessor-segment-overrun","link":"#coprocessor-segment-overrun","children":[]},{"level":3,"title":"reserved","slug":"reserved","link":"#reserved","children":[]},{"level":3,"title":"double_fault","slug":"double-fault","link":"#double-fault","children":[]},{"level":3,"title":"invalid_TSS","slug":"invalid-tss","link":"#invalid-tss","children":[]},{"level":3,"title":"segment_not_present","slug":"segment-not-present","link":"#segment-not-present","children":[]},{"level":3,"title":"stack_segment","slug":"stack-segment","link":"#stack-segment","children":[]},{"level":3,"title":"general_protection","slug":"general-protection","link":"#general-protection","children":[]}]},{"level":2,"title":"Q & A","slug":"q-a","link":"#q-a","children":[]}],"git":{"createdTime":1680579191000,"updatedTime":1712332703000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":6}]},"readingTime":{"minutes":5.07,"words":1521},"filePathRelative":"posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-asm.md","localizedDate":"2023年4月4日","excerpt":"<h1> Linux-0.11 kernel目录进程管理asm.s详解</h1>\\n<h2> 模块简介</h2>\\n<p>该模块和CPU异常处理相关，在代码结构上<code>asm.s</code>和<code>traps.c</code>强相关。 CPU探测到异常时，主要分为两种处理方式，一种是有错误码，另一种是没有错误码，对应的方法就是<strong>error_code</strong>和<strong>no_error_code</strong>。在下面的函数详解中，将主要以两个函数展开。</p>\\n<h2> 函数详解</h2>\\n<h3> no_error_code</h3>\\n<p>对于一些异常而言，CPU在出现这些异常时不会将error code压入栈中。其和一般的中断类似，会将<code>ss</code>,<code>esp</code>,<code>eflags</code>,<code>cs</code>,<code>eip</code>这几个寄存器的值压入内核栈中。如下图所示：</p>","autoDesc":true}');export{e as data};
