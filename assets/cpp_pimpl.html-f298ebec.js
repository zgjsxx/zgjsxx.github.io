const n=JSON.parse(`{"key":"v-4b1e4810","path":"/posts/Program_language/cpp/cpp_pimpl.html","title":"c++中的编程技巧pImpl","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"c++中的编程技巧pImpl // ---------------------- // interface (widget.hpp) #include &lt;iostream&gt; #include &lt;memory&gt; class widget { public: void draw() const; // public API that will be forwarded to the implementation bool shown() const { return true; } // public API that implementation has to call widget(); // even the default ctor needs to be defined in the implementation file // Note: calling draw() on default constructed object is UB explicit widget(int); ~widget(); // defined in the implementation file, where impl is a complete type widget(widget&amp;&amp;); // defined in the implementation file // Note: calling draw() on moved-from object is UB widget(const widget&amp;) = delete; widget&amp; operator=(widget&amp;&amp;); // defined in the implementation file widget&amp; operator=(const widget&amp;) = delete; private: class impl; std::unique_ptr&lt;impl&gt; pImpl; }; // --------------------------- // implementation (widget.cpp) // #include \\"widget.hpp\\" class widget::impl { int n; // private data public: void draw(const widget&amp; w) const { if(w.shown()) // this call to public member function requires the back-reference std::cout &lt;&lt; \\"drawing a const widget \\" &lt;&lt; n &lt;&lt; '\\\\n'; } impl(int n) : n(n) {} }; void widget::draw() const { pImpl-&gt;draw(*this); } widget::widget() = default; widget::widget(int n) : pImpl{std::make_unique&lt;impl&gt;(n)} {} widget::widget(widget&amp;&amp;) = default; widget::~widget() = default; widget&amp; widget::operator=(widget&amp;&amp;) = default; // --------------- // user (main.cpp) // #include \\"widget.hpp\\" int main() { widget w(7); w.draw(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_pimpl.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++中的编程技巧pImpl"}],["meta",{"property":"og:description","content":"c++中的编程技巧pImpl // ---------------------- // interface (widget.hpp) #include &lt;iostream&gt; #include &lt;memory&gt; class widget { public: void draw() const; // public API that will be forwarded to the implementation bool shown() const { return true; } // public API that implementation has to call widget(); // even the default ctor needs to be defined in the implementation file // Note: calling draw() on default constructed object is UB explicit widget(int); ~widget(); // defined in the implementation file, where impl is a complete type widget(widget&amp;&amp;); // defined in the implementation file // Note: calling draw() on moved-from object is UB widget(const widget&amp;) = delete; widget&amp; operator=(widget&amp;&amp;); // defined in the implementation file widget&amp; operator=(const widget&amp;) = delete; private: class impl; std::unique_ptr&lt;impl&gt; pImpl; }; // --------------------------- // implementation (widget.cpp) // #include \\"widget.hpp\\" class widget::impl { int n; // private data public: void draw(const widget&amp; w) const { if(w.shown()) // this call to public member function requires the back-reference std::cout &lt;&lt; \\"drawing a const widget \\" &lt;&lt; n &lt;&lt; '\\\\n'; } impl(int n) : n(n) {} }; void widget::draw() const { pImpl-&gt;draw(*this); } widget::widget() = default; widget::widget(int n) : pImpl{std::make_unique&lt;impl&gt;(n)} {} widget::widget(widget&amp;&amp;) = default; widget::~widget() = default; widget&amp; widget::operator=(widget&amp;&amp;) = default; // --------------- // user (main.cpp) // #include \\"widget.hpp\\" int main() { widget w(7); w.draw(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-04T14:21:15.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-04T14:21:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++中的编程技巧pImpl\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-04T14:21:15.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1683210075000,"updatedTime":1683210075000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.71,"words":213},"filePathRelative":"posts/Program_language/cpp/cpp_pimpl.md","localizedDate":"2023年5月4日","excerpt":"<h1> c++中的编程技巧pImpl</h1>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">// ----------------------</span>\\n<span class=\\"token comment\\">// interface (widget.hpp)</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;memory&gt;</span></span>\\n \\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">widget</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">draw</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// public API that will be forwarded to the implementation</span>\\n    <span class=\\"token keyword\\">bool</span> <span class=\\"token function\\">shown</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">// public API that implementation has to call</span>\\n \\n    <span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// even the default ctor needs to be defined in the implementation file</span>\\n              <span class=\\"token comment\\">// Note: calling draw() on default constructed object is UB</span>\\n    <span class=\\"token keyword\\">explicit</span> <span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// defined in the implementation file, where impl is a complete type</span>\\n    <span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span>widget<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// defined in the implementation file</span>\\n                      <span class=\\"token comment\\">// Note: calling draw() on moved-from object is UB</span>\\n    <span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> widget<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">;</span>\\n    widget<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>widget<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// defined in the implementation file</span>\\n    widget<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> widget<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">impl</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>unique_ptr<span class=\\"token operator\\">&lt;</span>impl<span class=\\"token operator\\">&gt;</span> pImpl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token comment\\">// ---------------------------</span>\\n<span class=\\"token comment\\">// implementation (widget.cpp)</span>\\n<span class=\\"token comment\\">// #include \\"widget.hpp\\"</span>\\n \\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">widget</span><span class=\\"token operator\\">:</span><span class=\\"token base-clause\\"><span class=\\"token operator\\">:</span><span class=\\"token class-name\\">impl</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// private data</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">draw</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> widget<span class=\\"token operator\\">&amp;</span> w<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>w<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shown</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// this call to public member function requires the back-reference </span>\\n            std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"drawing a const widget \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> n <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">impl</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">n</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token keyword\\">void</span> widget<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">draw</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> pImpl<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">draw</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\nwidget<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\nwidget<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> pImpl<span class=\\"token punctuation\\">{</span>std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token generic-function\\"><span class=\\"token function\\">make_unique</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span>impl<span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\nwidget<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span>widget<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">widget</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token operator\\">~</span><span class=\\"token function\\">widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\nwidget<span class=\\"token operator\\">&amp;</span> widget<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>widget<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token comment\\">// ---------------</span>\\n<span class=\\"token comment\\">// user (main.cpp)</span>\\n<span class=\\"token comment\\">// #include \\"widget.hpp\\"</span>\\n \\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    widget <span class=\\"token function\\">w</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    w<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">draw</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
