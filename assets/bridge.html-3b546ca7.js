import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},o=t(`<h1 id="桥接模式" tabindex="-1"><a class="header-anchor" href="#桥接模式" aria-hidden="true">#</a> 桥接模式</h1><h2 id="问答题-假设有一个gui库-gui库需要运行在windows-linux-mac上-现在需要设计一个button类-该button有click和draw两个方法-怎么使用桥接模式进行设计" tabindex="-1"><a class="header-anchor" href="#问答题-假设有一个gui库-gui库需要运行在windows-linux-mac上-现在需要设计一个button类-该button有click和draw两个方法-怎么使用桥接模式进行设计" aria-hidden="true">#</a> 问答题：假设有一个GUI库，GUI库需要运行在windows/linux/mac上，现在需要设计一个button类，该button有click和draw两个方法，怎么使用桥接模式进行设计？</h2><p>假设我们正在设计一个GUI库，并需要实现一个Button组件。我们希望Button可以在不同的平台（如Windows、MacOS、Linux）上运行，并且可以支持不同的外观和行为（如经典风格、现代风格）。这正是桥接模式的典型应用场景。</p><p><strong>1.设计思路</strong></p><p>我们可以将Button的抽象部分与其具体实现分离开来，使得Button的逻辑（例如，点击事件）和外观（例如，按钮的绘制方式）可以独立变化。为此，我们需要两个层次的类结构：</p><ul><li>抽象部分：定义Button的公共接口，包括用户可以与之交互的逻辑操作。</li><li>实现部分：定义如何在不同平台上绘制Button以及它的具体行为。</li></ul><p><strong>2.类结构设计</strong></p><ul><li>抽象部分（Abstraction）：Button类，表示按钮的公共接口。</li><li>实现部分（Implementor）：ButtonImplementor接口，定义了绘制和处理按钮的操作。</li><li>具体实现部分（ConcreteImplementor）：具体的实现类，比如WindowsButtonImplementor、MacButtonImplementor、LinuxButtonImplementor等，负责在不同平台上绘制按钮。</li><li>扩展抽象部分（RefinedAbstraction）：可以进一步扩展Button类，支持不同风格的按钮，如经典风格、现代风格等。</li></ul><p>代码实现：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// 实现部分接口（Implementor）</span>
<span class="token keyword">class</span> <span class="token class-name">ButtonImplementor</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 绘制按钮的抽象方法</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 按钮点击的抽象方法</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">ButtonImplementor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 具体实现部分（ConcreteImplementor） - Windows 平台</span>
<span class="token keyword">class</span> <span class="token class-name">WindowsButtonImplementor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ButtonImplementor</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">drawButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Drawing a button in Windows style.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Handling button click in Windows style.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 具体实现部分（ConcreteImplementor） - Mac 平台</span>
<span class="token keyword">class</span> <span class="token class-name">MacButtonImplementor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ButtonImplementor</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">drawButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Drawing a button in MacOS style.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Handling button click in MacOS style.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 抽象部分（Abstraction）</span>
<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    ButtonImplementor<span class="token operator">*</span> implementor<span class="token punctuation">;</span>  <span class="token comment">// 持有实现部分的引用</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Button</span><span class="token punctuation">(</span>ButtonImplementor<span class="token operator">*</span> imp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">implementor</span><span class="token punctuation">(</span>imp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        implementor<span class="token operator">-&gt;</span><span class="token function">drawButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用实现部分的方法</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        implementor<span class="token operator">-&gt;</span><span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用实现部分的方法</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 扩展抽象部分（RefinedAbstraction） - 带风格的按钮</span>
<span class="token keyword">class</span> <span class="token class-name">StyledButton</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Button</span></span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string style<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">StyledButton</span><span class="token punctuation">(</span>ButtonImplementor<span class="token operator">*</span> imp<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> style<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">Button</span><span class="token punctuation">(</span>imp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">style</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Applying style: &quot;</span> <span class="token operator">&lt;&lt;</span> style <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        implementor<span class="token operator">-&gt;</span><span class="token function">drawButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Button with style &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> style <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; clicked.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        implementor<span class="token operator">-&gt;</span><span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 客户端代码</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个Windows平台的按钮</span>
    ButtonImplementor<span class="token operator">*</span> windowsImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">WindowsButtonImplementor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Button<span class="token operator">*</span> windowsButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Button</span><span class="token punctuation">(</span>windowsImp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    windowsButton<span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    windowsButton<span class="token operator">-&gt;</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建一个Mac平台的带风格的按钮</span>
    ButtonImplementor<span class="token operator">*</span> macImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MacButtonImplementor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    StyledButton<span class="token operator">*</span> styledMacButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">StyledButton</span><span class="token punctuation">(</span>macImp<span class="token punctuation">,</span> <span class="token string">&quot;Modern&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    styledMacButton<span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    styledMacButton<span class="token operator">-&gt;</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">delete</span> windowsButton<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> styledMacButton<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> windowsImp<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> macImp<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码解释</strong></p><p>ButtonImplementor接口定义了按钮的核心操作（如绘制和点击）。这是实现部分的抽象接口，具体平台（Windows、MacOS、Linux）将提供该接口的实现。</p><p>具体实现类（WindowsButtonImplementor、MacButtonImplementor）实现了ButtonImplementor接口，分别在不同的平台上提供具体的绘制和点击操作的实现。</p><p>Button类作为抽象部分的基类，定义了按钮的基本行为，如绘制和点击操作。Button类持有ButtonImplementor对象的引用，并通过该对象将操作委托给实现部分。</p><p>StyledButton类是Button类的扩展，用于支持带有特定风格的按钮。在调用draw()方法时，它首先应用风格，然后调用具体实现部分的绘制方法。</p><p><strong>桥接模式的作用总结</strong></p><p>通过使用桥接模式，这个Button类型实现了抽象与实现的分离，从而具备了以下优势：</p><ul><li>独立扩展：可以独立地添加新的平台支持（通过创建新的ButtonImplementor实现），或添加新的按钮类型（通过扩展Button类），而不需要修改已有的代码。</li><li>可维护性强：将平台相关的代码与按钮的抽象行为分离，平台相关代码只需维护在具体实现类中，而抽象行为则集中在Button及其扩展类中。</li><li>灵活性高：可以根据需要自由组合不同的实现和抽象部分，例如，添加新的风格、在不同平台上使用不同的实现等。</li></ul><p><strong>使用场景</strong></p><p>桥接模式特别适用于以下场景：</p><ul><li>跨平台开发：当需要支持多个平台的实现，并且这些实现可能独立变化时，桥接模式是非常有效的。</li><li>需要在运行时动态切换实现：例如，可以在运行时决定使用哪种风格的按钮或在哪个平台上运行。</li><li>避免复杂的继承层次：通过桥接模式，可以避免将平台实现和按钮逻辑混合在一个继承层次中，从而减少类的复杂度。</li></ul>`,21),e=[o];function l(c,i){return s(),a("div",null,e)}const r=n(p,[["render",l],["__file","bridge.html.vue"]]);export{r as default};
