const e=JSON.parse('{"key":"v-541c5c44","path":"/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-head.html","title":"Linux-0.11 boot目录head.s详解","lang":"zh-CN","frontmatter":{"category":["Linux"],"tag":["Linux-0.11代码解读系列"],"description":"Linux-0.11 boot目录head.s详解 模块简介 过程详解 在setup_paging执行完毕之后，会通过ret返回，ret指令会将栈顶的内容弹出到PC指针中去执行。此时esp指向的位置存放的是main函数的地址。因此接下来会执行main函数。 注意到在将main入栈时，还一同入栈了一些其他参数 \\tpushl $0\\t\\t# These are the parameters to main :-) \\tpushl $0 \\tpushl $0 \\tpushl $L6","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-head.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux-0.11 boot目录head.s详解"}],["meta",{"property":"og:description","content":"Linux-0.11 boot目录head.s详解 模块简介 过程详解 在setup_paging执行完毕之后，会通过ret返回，ret指令会将栈顶的内容弹出到PC指针中去执行。此时esp指向的位置存放的是main函数的地址。因此接下来会执行main函数。 注意到在将main入栈时，还一同入栈了一些其他参数 \\tpushl $0\\t\\t# These are the parameters to main :-) \\tpushl $0 \\tpushl $0 \\tpushl $L6"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-08T13:34:11.000Z"}],["meta",{"property":"article:tag","content":"Linux-0.11代码解读系列"}],["meta",{"property":"article:modified_time","content":"2023-04-08T13:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-0.11 boot目录head.s详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-08T13:34:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块简介","slug":"模块简介","link":"#模块简介","children":[]},{"level":2,"title":"过程详解","slug":"过程详解","link":"#过程详解","children":[]},{"level":2,"title":"Q & A","slug":"q-a","link":"#q-a","children":[{"level":3,"title":"setup_paging在建立页表时会将head.s的部分代码覆盖，怎么保证不会把正在执行的代码覆盖？","slug":"setup-paging在建立页表时会将head-s的部分代码覆盖-怎么保证不会把正在执行的代码覆盖","link":"#setup-paging在建立页表时会将head-s的部分代码覆盖-怎么保证不会把正在执行的代码覆盖","children":[]}]}],"git":{"createdTime":1680686630000,"updatedTime":1680960851000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":4}]},"readingTime":{"minutes":2.22,"words":667},"filePathRelative":"posts/Linux/kernel/Linux-0.11/Linux-0.11-boot-head.md","localizedDate":"2023年4月5日","excerpt":"<h1> Linux-0.11 boot目录head.s详解</h1>\\n<h2> 模块简介</h2>\\n<h2> 过程详解</h2>\\n<p>在setup_paging执行完毕之后，会通过ret返回，ret指令会将栈顶的内容弹出到PC指针中去执行。此时esp指向的位置存放的是main函数的地址。因此接下来会执行main函数。</p>\\n<p>注意到在将main入栈时，还一同入栈了一些其他参数</p>\\n<div class=\\"language-x86asm line-numbers-mode\\" data-ext=\\"x86asm\\"><pre class=\\"language-x86asm\\"><code>\\tpushl $0\\t\\t# These are the parameters to main :-)\\n\\tpushl $0\\n\\tpushl $0\\n\\tpushl $L6\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
