import{_ as n,V as s,W as a,a0 as p}from"./framework-c954d91f.js";const t={},e=p(`<h1 id="linux-0-11-kernel目录进程管理signal-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理signal-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理signal.c详解</h1><p>signal.c主要涉及的是进程的信号处理。该章节中最难理解的是<strong>do_signal</strong>函数。</p><h2 id="sys-sgetmask" tabindex="-1"><a class="header-anchor" href="#sys-sgetmask" aria-hidden="true">#</a> sys_sgetmask</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_ssetmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> newmask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是设置信号的屏蔽图，即进程对哪些信号可以不做处理。</p><p>代码很简单，就是返回进程PCB中的<strong>blocked</strong>字段。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">return</span> current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sys-ssetmask" tabindex="-1"><a class="header-anchor" href="#sys-ssetmask" aria-hidden="true">#</a> sys_ssetmask</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_ssetmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> newmask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用于设置新的信号屏蔽位图。其中SIGKILL是不可以被屏蔽的。</p><p><code> ~(1&lt;&lt;(SIGKILL-1))</code> 保证了SIGKILL的屏蔽位为0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> old<span class="token operator">=</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">;</span>

current<span class="token operator">-&gt;</span>blocked <span class="token operator">=</span> newmask <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGKILL<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="save-old" tabindex="-1"><a class="header-anchor" href="#save-old" aria-hidden="true">#</a> save_old</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">save_old</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> from<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> to<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数在sys_sigaction中被调用， 其作用是将旧的sigaction对象拷贝到用户地址空间。</p><p>其中调用了put_fs_byte函数，其定义在segment.h文件中，其作用是把内核态一个字节的数据拷贝到由 fs:addr 指向的用户态内存地址空间。</p><p>下面分析该函数的代码。</p><p>首先对to所在的内存进行校验， 接着进行遍历，将from的内容拷贝到to的位置， 实际就是拷贝了from位置的sigaction对象到to位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">verify_area</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">,</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
	from<span class="token operator">++</span><span class="token punctuation">;</span>
	to<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-new" tabindex="-1"><a class="header-anchor" href="#get-new" aria-hidden="true">#</a> get_new</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get_new</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> from<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> to<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数在sys_sigaction中被调用，其作用是将用户设置的sigaction传递到内核中。</p><p>其中调用了get_fs_byte函数， 其定义在segment.h文件中， 其作用是把fs:from 指向的用户态内存的一个字节拷贝到内核态to的地址中。该函数借助了fs寄存器，在system_call函数中，将fs寄存器设置为了0x17，指向了用户的数据段。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token operator">*</span><span class="token punctuation">(</span>to<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>from<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sys-signal" tabindex="-1"><a class="header-anchor" href="#sys-signal" aria-hidden="true">#</a> sys_signal</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">long</span> handler<span class="token punctuation">,</span> <span class="token keyword">long</span> restorer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是sys_signal的信号处理函数。</p><p>程序首先对入参signum做校验，其大小必须在区间[1，32]中，并且其值不得为SIGKILL（9）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sigaction</span> tmp<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>signum<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> signum<span class="token operator">&gt;</span><span class="token number">32</span> <span class="token operator">||</span> signum<span class="token operator">==</span>SIGKILL<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来设置信号处理函数以及对应的一些标志。例如SA_ONESHOT代表将只执行一次就会将信号处理函数恢复为之前的处理函数。</p><p>sa_restorer保存的是恢复处理函数，会在do_signal函数中再次被提到， 其作用就是在信号处理函数结束之后，恢复现场。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tmp<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>
tmp<span class="token punctuation">.</span>sa_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
tmp<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_ONESHOT <span class="token operator">|</span> SA_NOMASK<span class="token punctuation">;</span>
tmp<span class="token punctuation">.</span>sa_restorer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> restorer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着取出改信号原来处理函数作为返回值返回。然后将上面构建好的sigaction类型的tmp对象放置于进程的sigaction数组的对应位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler<span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sys-sigaction" tabindex="-1"><a class="header-anchor" href="#sys-sigaction" aria-hidden="true">#</a> sys_sigaction</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span> action<span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span> oldaction<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数是sigaction的系统调用。</p><p>程序首先对入参signum做校验，其大小必须在区间[1，32]中，并且其值不得为SIGKILL（9）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>signum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> signum <span class="token operator">&gt;</span> <span class="token number">32</span> <span class="token operator">||</span> signum <span class="token operator">==</span> SIGKILL<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tmp <span class="token operator">=</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">get_new</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> action<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>signum <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>oldaction<span class="token punctuation">)</span>
	<span class="token function">save_old</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> oldaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="do-signal" tabindex="-1"><a class="header-anchor" href="#do-signal" aria-hidden="true">#</a> do_signal</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_signal</span><span class="token punctuation">(</span><span class="token keyword">long</span> signr<span class="token punctuation">,</span><span class="token keyword">long</span> eax<span class="token punctuation">,</span> <span class="token keyword">long</span> ebx<span class="token punctuation">,</span> <span class="token keyword">long</span> ecx<span class="token punctuation">,</span> <span class="token keyword">long</span> edx<span class="token punctuation">,</span>
	<span class="token keyword">long</span> fs<span class="token punctuation">,</span> <span class="token keyword">long</span> es<span class="token punctuation">,</span> <span class="token keyword">long</span> ds<span class="token punctuation">,</span>
	<span class="token keyword">long</span> eip<span class="token punctuation">,</span> <span class="token keyword">long</span> cs<span class="token punctuation">,</span> <span class="token keyword">long</span> eflags<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> ss<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数是进程接收到信号执行信号处理方法的主体。其在ret_from_sys_call中被调用，即从系统调用返回的过程中被调用。</p><p>在系统调用过程中，内核栈的情况如下图所示： <img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-kernel/signal/signal_raw.png" alt="do_signal1" loading="lazy"></p><p>在该函数中，首先根据信号的id，取出对应的sigaction结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> sa_handler<span class="token punctuation">;</span>
<span class="token keyword">long</span> old_eip<span class="token operator">=</span>eip<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span> sa <span class="token operator">=</span> current<span class="token operator">-&gt;</span>sigaction <span class="token operator">+</span> signr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> longs<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> tmp_esp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从sigaction结构体中取出sa_handler， 如果该handler的值为1， 代表是SIG_IGN，即忽略该信号， 则直接返回。</p><p>如果sa_handler的值是0，即SIG_DFL，即使用默认的信号处理方式，如果信号是SIGCHILD,则直接返回， 如果不是，则程序直接退出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sa_handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> sa<span class="token operator">-&gt;</span>sa_handler<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sa_handler<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sa_handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>signr<span class="token operator">==</span>SIGCHLD<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>signr<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来， 如果sa_flags含有SA_ONESHOT标记， 代表本次信号处理函数执行之后，就恢复默认处理方式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_ONESHOT<span class="token punctuation">)</span>
	sa<span class="token operator">-&gt;</span>sa_handler <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段就是将eip设置为信号处理函数的地址，当中断处理函数调用结束之后通过iret返回之后， 就会去执行中断处理函数。 同时也会将原来通过INT压栈的一些寄存器的值保存在用户栈中。</p><p><code>*(&amp;eip) = sa_handler</code>就设置了新的eip值，这种做法，如果是c语言中的函数调用是不起作用的，因为在函数调用结束后，会因为esp指针的上移而丢弃掉， 而do_signal是在汇编程序中被调用，因此调用完毕之后，不会丢弃掉这些参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eip<span class="token punctuation">)</span> <span class="token operator">=</span> sa_handler<span class="token punctuation">;</span>
longs <span class="token operator">=</span> <span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>esp<span class="token punctuation">)</span> <span class="token operator">-=</span> longs<span class="token punctuation">;</span>
<span class="token function">verify_area</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span>longs<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tmp_esp<span class="token operator">=</span>esp<span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> sa<span class="token operator">-&gt;</span>sa_restorer<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>signr<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">put_fs_long</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>eax<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>ecx<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>edx<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>eflags<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>old_eip<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>blocked <span class="token operator">|=</span> sa<span class="token operator">-&gt;</span>sa_mask<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其最终的结果如下图所示:</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-kernel/signal/signal_after.png" alt="do_after" tabindex="0" loading="lazy"><figcaption>do_after</figcaption></figure><p>当信号处理函数执行完毕，通过return返回时，就会去执行sa_restorer处的代码。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-kernel/signal/sa_restore.png" alt="sa_restore" tabindex="0" loading="lazy"><figcaption>sa_restore</figcaption></figure><p>sa_restorer实际就是恢复用户栈，并且让程序恢复到系统调用之前的上下文。</p><p>这里有一个问题， signal函数定义中并没有第三个参数， 而sys_signal函数却有该参数，那么这第三个参数是什么时候传入的呢？</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是在编译链接用户自定义的信号处理函数时，编译程序会调用libc库中信号系统调用函数把sa_restorer函数插入到用户程序中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> __sighandler_t func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> __fooebx <span class="token function">__asm__</span> <span class="token punctuation">(</span><span class="token string">&quot;bx&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> sig<span class="token punctuation">;</span>
	<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;int $0x80&quot;</span><span class="token operator">:</span><span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">:</span>
	<span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span>_NR_signal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>__fooebx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>__sig_restore<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>.globl __sig_restore
.globl __masksig_restore
# 若没有blocked，则使用这个restorer函数
__sig_restore:
    addl $4, %esp
	popl %eax
	popl %ecx
	popl %edx
	popf
	ret
__masksig_restore:
    addl $4, %esp
	call __ssetmask
	addl $4, %esp
	popl %eax
	popl %ecx
	popl %edx
	popf
	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,64),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-kernel-signal.html.vue"]]);export{r as default};
