import{_ as e,V as t,W as o,X as a,Y as s,$ as c,a0 as i,F as l}from"./framework-9a29aaa0.js";const p={},r=a("h1",{id:"cmake-set命令",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#cmake-set命令","aria-hidden":"true"},"#"),s(" cmake set命令")],-1),d={href:"https://blog.csdn.net/Jay_Xio/article/details/121033423",target:"_blank",rel:"noopener noreferrer"},u=i(`<h1 id="cmake-find-package" tabindex="-1"><a class="header-anchor" href="#cmake-find-package" aria-hidden="true">#</a> cmake find_package</h1><p>DemoExampleRepo\\cmake\\demo\\find_package_module_demo1</p><p>删除make install的文件</p><p>在build的目录下，cmake会生成名叫<strong>install_manifest.txt</strong>的文件，这个文件记录了所有install的文件。因此可以使用下面的命令删除所有install的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">xargs</span> <span class="token function">rm</span> <span class="token operator">&lt;</span> install_manifest.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在cmake中打印消息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> message<span class="token punctuation">(</span> <span class="token punctuation">[</span>STATUS<span class="token operator">|</span>WARNING<span class="token operator">|</span>AUTHOR_WARNING<span class="token operator">|</span>FATAL_ERROR<span class="token operator">|</span>SEND_ERROR<span class="token punctuation">]</span>
  <span class="token string">&quot;message to display&quot;</span> <span class="token punctuation">..</span>.<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>无<span class="token punctuation">)</span> <span class="token operator">=</span> 重要消息；
 STATUS <span class="token operator">=</span> 非重要消息；
 WARNING <span class="token operator">=</span> CMake 警告, 会继续执行；
 AUTHOR_WARNING <span class="token operator">=</span> CMake 警告 <span class="token punctuation">(</span>dev<span class="token punctuation">)</span>, 会继续执行；
 SEND_ERROR <span class="token operator">=</span> CMake 错误, 继续执行，但是会跳过生成的步骤；
 FATAL_ERROR <span class="token operator">=</span> CMake 错误, 终止所有处理过程；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>message<span class="token punctuation">(</span>STATUS <span class="token string">&quot;CMAKE_SOURCE_DIR = <span class="token variable">\${CMAKE_SOURCE_DIR}</span>&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function m(k,v){const n=l("ExternalLinkIcon");return t(),o("div",null,[r,a("p",null,[a("a",d,[s("https://blog.csdn.net/Jay_Xio/article/details/121033423"),c(n)])]),u])}const h=e(p,[["render",m],["__file","cmake.html.vue"]]);export{h as default};
