const e=JSON.parse('{"key":"v-3249e3d4","path":"/posts/Program_language/cpp/effective-cpp-44.html","title":"effective c++ 44 与参数无关的代码抽离templates","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 44 与参数无关的代码抽离templates 分析 如果模板中有类型无关的参数，那一定得小心，很容易就会出现模板膨胀的问题。 这里有一个矩阵类，并且有一个求逆的方法，这里我们假设这个invert方法有100行代码，为了便于下面进行计算。 template&lt;typename T, std::size_t n&gt; class SquareMatrix { public: \\tvoid invert() \\t{ \\t\\t//这里有100行代码 \\t} };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp-44.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 44 与参数无关的代码抽离templates"}],["meta",{"property":"og:description","content":"effective c++ 44 与参数无关的代码抽离templates 分析 如果模板中有类型无关的参数，那一定得小心，很容易就会出现模板膨胀的问题。 这里有一个矩阵类，并且有一个求逆的方法，这里我们假设这个invert方法有100行代码，为了便于下面进行计算。 template&lt;typename T, std::size_t n&gt; class SquareMatrix { public: \\tvoid invert() \\t{ \\t\\t//这里有100行代码 \\t} };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T10:03:30.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-06T10:03:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 44 与参数无关的代码抽离templates\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-06T10:03:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683367410000,"updatedTime":1683367410000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":2.29,"words":687},"filePathRelative":"posts/Program_language/cpp/effective-cpp-44.md","localizedDate":"2023年5月6日","excerpt":"<h1> effective c++ 44 与参数无关的代码抽离templates</h1>\\n<h2> 分析</h2>\\n<p>如果模板中有类型无关的参数，那一定得小心，很容易就会出现模板膨胀的问题。</p>\\n<p>这里有一个矩阵类，并且有一个求逆的方法，这里我们假设这个invert方法有100行代码，为了便于下面进行计算。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">,</span> std<span class=\\"token double-colon punctuation\\">::</span>size_t n<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">SquareMatrix</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">invert</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">//这里有100行代码</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
