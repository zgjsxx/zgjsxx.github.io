import{_ as n,V as s,W as a,a0 as p}from"./framework-9a29aaa0.js";const t={},e=p(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95consolec%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录console.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#gotoxy">gotoxy</a></li></ul></li><li><a href="#set_origin">set_origin</a><ul><li><a href="#con_write">con_write</a></li><li><a href="#con_init">con_init</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录console-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录console-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录console.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="gotoxy" tabindex="-1"><a class="header-anchor" href="#gotoxy" aria-hidden="true">#</a> gotoxy</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">gotoxy</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> new_x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> new_y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法的作用是更新光标位置(x,y)，并修正光标在显示内存中的对应位置pos。</p><p>首先检查参数的有效性。如果给定的光标列号超出了显示器列数，或者光标行号不低于显示的最大行数，则退出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>new_x <span class="token operator">&gt;</span> video_num_columns <span class="token operator">||</span> new_y <span class="token operator">&gt;=</span> video_num_lines<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果参数是有效的，则进行更新。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	x<span class="token operator">=</span>new_x<span class="token punctuation">;</span>
	y<span class="token operator">=</span>new_y<span class="token punctuation">;</span>
	pos<span class="token operator">=</span>origin <span class="token operator">+</span> y<span class="token operator">*</span>video_size_row <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1列用2个字节表示，x&lt;&lt;1.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-origin" tabindex="-1"><a class="header-anchor" href="#set-origin" aria-hidden="true">#</a> set_origin</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">set_origin</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置滚屏起始显示内存地址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> video_port_reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>origin<span class="token operator">-</span>video_mem_start<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> video_port_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> video_port_reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>origin<span class="token operator">-</span>video_mem_start<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> video_port_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="con-write" tabindex="-1"><a class="header-anchor" href="#con-write" aria-hidden="true">#</a> con_write</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">con_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制台写的程序。</p><p>首先获取写缓冲队列的现有字符数nr。然后对队列中的每个字符进行处理。在处理每个字符的循环过程中，首先在写队列中取一个字符c，根据前面处理字符所设置的状态state分步骤进行处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> nr<span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>

	nr <span class="token operator">=</span> <span class="token function">CHARS</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>nr<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">GETCH</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">switch</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>state的状态机如下图所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/console/console.png" alt="state状态变化" tabindex="0" loading="lazy"><figcaption>state状态变化</figcaption></figure><p>如果状态是0：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&gt;</span><span class="token number">31</span> <span class="token operator">&amp;&amp;</span> c<span class="token operator">&lt;</span><span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;=</span>video_num_columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                x <span class="token operator">-=</span> video_num_columns<span class="token punctuation">;</span>
                pos <span class="token operator">-=</span> video_size_row<span class="token punctuation">;</span>
                <span class="token function">lf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;movb attr,%%ah\\n\\t&quot;</span>
                <span class="token string">&quot;movw %%ax,%1\\n\\t&quot;</span>
                <span class="token operator">::</span><span class="token string">&quot;a&quot;</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;m&quot;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span>pos<span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            pos <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            x<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">27</span><span class="token punctuation">)</span>
            state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">10</span> <span class="token operator">||</span> c<span class="token operator">==</span><span class="token number">11</span> <span class="token operator">||</span> c<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span>
            <span class="token function">lf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span>
            <span class="token function">cr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">ERASE_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                x<span class="token operator">--</span><span class="token punctuation">;</span>
                pos <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            c<span class="token operator">=</span><span class="token number">8</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            x <span class="token operator">+=</span> c<span class="token punctuation">;</span>
            pos <span class="token operator">+=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;</span>video_num_columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                x <span class="token operator">-=</span> video_num_columns<span class="token punctuation">;</span>
                pos <span class="token operator">-=</span> video_size_row<span class="token punctuation">;</span>
                <span class="token function">lf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            c<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span>
            <span class="token function">sysbeep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果状态是1：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;[&#39;</span><span class="token punctuation">)</span>
            state<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">)</span>
            <span class="token function">gotoxy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;M&#39;</span><span class="token punctuation">)</span>
            <span class="token function">ri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;D&#39;</span><span class="token punctuation">)</span>
            <span class="token function">lf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span>
            <span class="token function">respond</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token char">&#39;7&#39;</span><span class="token punctuation">)</span>
            <span class="token function">save_cur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token char">&#39;8&#39;</span><span class="token punctuation">)</span>
            <span class="token function">restore_cur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果状态是3：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;;&#39;</span> <span class="token operator">&amp;&amp;</span> npar<span class="token operator">&lt;</span>NPAR<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            npar<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> c<span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            par<span class="token punctuation">[</span>npar<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>par<span class="token punctuation">[</span>npar<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> state<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果状态是4：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
        state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;G&#39;</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">&#39;\`&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;A&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;B&#39;</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">&#39;e&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;C&#39;</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">&#39;a&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span>x<span class="token operator">+</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;D&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span>x<span class="token operator">-</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;E&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">+</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;F&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">-</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;d&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;H&#39;</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">&#39;f&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token function">gotoxy</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;J&#39;</span><span class="token operator">:</span>
                <span class="token function">csi_J</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;K&#39;</span><span class="token operator">:</span>
                <span class="token function">csi_K</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;L&#39;</span><span class="token operator">:</span>
                <span class="token function">csi_L</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;M&#39;</span><span class="token operator">:</span>
                <span class="token function">csi_M</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;P&#39;</span><span class="token operator">:</span>
                <span class="token function">csi_P</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;@&#39;</span><span class="token operator">:</span>
                <span class="token function">csi_at</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;m&#39;</span><span class="token operator">:</span>
                <span class="token function">csi_m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;r&#39;</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> video_num_lines<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>
                    par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> video_num_lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    top<span class="token operator">=</span>par<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    bottom<span class="token operator">=</span>par<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token operator">:</span>
                <span class="token function">save_cur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;u&#39;</span><span class="token operator">:</span>
                <span class="token function">restore_cur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="con-init" tabindex="-1"><a class="header-anchor" href="#con-init" aria-hidden="true">#</a> con_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">con_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法用于初始化控制台程序。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// 寄存器变量a为了高效的访问和操作。</span>
    <span class="token comment">// 若想指定存放的寄存器(如eax),则可以写成：</span>
    <span class="token comment">// register unsigned char a asm(&quot;ax&quot;);。</span>
	<span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>display_desc <span class="token operator">=</span> <span class="token string">&quot;????&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>display_ptr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先根据setup.s程序取得系统硬件参数初始化几个本函数专用的静态全局变量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	video_num_columns <span class="token operator">=</span> ORIG_VIDEO_COLS<span class="token punctuation">;</span>    <span class="token comment">// 显示器显示字符列数</span>
	video_size_row <span class="token operator">=</span> video_num_columns <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 每行字符需要使用的字节数</span>
	video_num_lines <span class="token operator">=</span> ORIG_VIDEO_LINES<span class="token punctuation">;</span>     <span class="token comment">// 显示器显示字符行数</span>
	video_page <span class="token operator">=</span> ORIG_VIDEO_PAGE<span class="token punctuation">;</span>           <span class="token comment">// 当前显示页面</span>
	video_erase_char <span class="token operator">=</span> <span class="token number">0x0720</span><span class="token punctuation">;</span>              <span class="token comment">// 擦除字符(0x20是字符，0x07属性)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据显示模式是单色还是彩色分别设置所使用的显示内存起始位置以及显示寄存器索引端口号和显示寄存器数据端口号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>ORIG_VIDEO_MODE <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span>			<span class="token comment">// 是否是单色显示器</span>
	<span class="token punctuation">{</span>
		video_mem_start <span class="token operator">=</span> <span class="token number">0xb0000</span><span class="token punctuation">;</span>      <span class="token comment">// 设置单显映象内存起始地址</span>
		video_port_reg <span class="token operator">=</span> <span class="token number">0x3b4</span><span class="token punctuation">;</span>         <span class="token comment">// 设置单显索引寄存器端口</span>
		video_port_val <span class="token operator">=</span> <span class="token number">0x3b5</span><span class="token punctuation">;</span>         <span class="token comment">// 设置单显数据寄存器端口</span>
        <span class="token comment">// 接着我们根据BIOS中断int 0x10 功能0x12获得的显示模式信息，判断显示卡是</span>
        <span class="token comment">// 单色显示卡还是彩色显示卡。若使用上述中断功能所得到的BX寄存器返回值不等于</span>
        <span class="token comment">// 0x10，则说明是EGA卡。因此初始显示类型为EGA单色。虽然EGA卡上有较多显示内存，</span>
        <span class="token comment">// 但在单色方式下最多只能利用地址范围在 0xb0000-0xb8000 之间的显示内存。</span>
        <span class="token comment">// 然后置显示器描述字符串为 &#39;EGAm&#39;. 并会在系统初始化期间显示器描述字符串将</span>
        <span class="token comment">// 显示在屏幕的右上角。</span>
        <span class="token comment">// 注意，这里使用了 bx 在调用中断 int 0x10 前后是否被改变的方法来判断卡的类型。</span>
        <span class="token comment">// 若BL在中断调用后值被改变，表示显示卡支持 Ah=12h 功能调用，是EGA或后推出来的</span>
        <span class="token comment">// VGA等类型的显示卡。若中断调用返回值未变，表示显示卡不支持这个功能，则说明</span>
        <span class="token comment">// 是一般单色显示卡。</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ORIG_VIDEO_EGA_BX <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x10</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			video_type <span class="token operator">=</span> VIDEO_TYPE_EGAM<span class="token punctuation">;</span>       <span class="token comment">// 设置显示类型(EGA单色)</span>
			video_mem_end <span class="token operator">=</span> <span class="token number">0xb8000</span><span class="token punctuation">;</span>            <span class="token comment">// 设置显示内存末端地址</span>
			display_desc <span class="token operator">=</span> <span class="token string">&quot;EGAm&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// 设置显示描述字符串</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>    
		<span class="token punctuation">{</span>
            <span class="token comment">// 如果 BX 寄存器的值等于 0x10，则说明是单色显示卡MDA。 03h = 256k</span>
			video_type <span class="token operator">=</span> VIDEO_TYPE_MDA<span class="token punctuation">;</span>        <span class="token comment">// 设置显示类型(MDA单色)</span>
			video_mem_end	<span class="token operator">=</span> <span class="token number">0xb2000</span><span class="token punctuation">;</span>          <span class="token comment">// 设置显示内存末端地址</span>
			display_desc <span class="token operator">=</span> <span class="token string">&quot;*MDA&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// 设置显示描述字符串</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 如果显示模式不为7，说明是彩色显示卡。此时文本方式下所用的显示内存起始地址为0xb8000；</span>
    <span class="token comment">// 显示控制索引寄存器端口地址为 0x3d4；数据寄存器端口地址为 0x3d5。</span>
	<span class="token keyword">else</span>								<span class="token comment">/* If not, it is color. */</span>
	<span class="token punctuation">{</span>
		video_mem_start <span class="token operator">=</span> <span class="token number">0xb8000</span><span class="token punctuation">;</span>              <span class="token comment">// 显示内存起始地址</span>
		video_port_reg	<span class="token operator">=</span> <span class="token number">0x3d4</span><span class="token punctuation">;</span>                <span class="token comment">// 设置彩色显示索引寄存器端口</span>
		video_port_val	<span class="token operator">=</span> <span class="token number">0x3d5</span><span class="token punctuation">;</span>                <span class="token comment">// 设置彩色显示数据寄存器端口</span>
        <span class="token comment">// 再判断显示卡类别。如果 BX 不等于 0x10，则说明是EGA/VGA 显示卡。此时实际上我们</span>
        <span class="token comment">// 可以使用32KB显示内存(0xb8000 -- 0xc0000),但该程序只使用了其中16KB显示内存。</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ORIG_VIDEO_EGA_BX <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x10</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			video_type <span class="token operator">=</span> VIDEO_TYPE_EGAC<span class="token punctuation">;</span>       <span class="token comment">// 设置显示类型(EGA彩色)</span>
			video_mem_end <span class="token operator">=</span> <span class="token number">0xbc000</span><span class="token punctuation">;</span>            <span class="token comment">// 设置显示内存末端地址</span>
			display_desc <span class="token operator">=</span> <span class="token string">&quot;EGAc&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// 设置显示描述字符串</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>    <span class="token comment">// 如果 BX 寄存器的值等于 0x10,则说明是CGA显示卡，只使用8KB显示内存</span>
		<span class="token punctuation">{</span>
			video_type <span class="token operator">=</span> VIDEO_TYPE_CGA<span class="token punctuation">;</span>        <span class="token comment">// 设置显示类型(CGA彩色)</span>
			video_mem_end <span class="token operator">=</span> <span class="token number">0xba000</span><span class="token punctuation">;</span>            <span class="token comment">// 设置显示内存末端地址</span>
			display_desc <span class="token operator">=</span> <span class="token string">&quot;*CGA&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// 设置显示描述字符串</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后允许键盘中断。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// 然后我们在屏幕的右上角显示描述字符串。采用的方法是直接将字符串写到显示内存</span>
    <span class="token comment">// 相应位置处。首先将显示指针display_ptr 指到屏幕第1行右端差4个字符处(每个字符</span>
    <span class="token comment">// 需2个字节，因此减8)，然后循环复制字符串的字符，并且每复制1个字符都空开1个属性字节。</span>
	display_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>video_mem_start<span class="token punctuation">)</span> <span class="token operator">+</span> video_size_row <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>display_desc<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token operator">*</span>display_ptr<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>display_desc<span class="token operator">++</span><span class="token punctuation">;</span>
		display_ptr<span class="token operator">++</span><span class="token punctuation">;</span>                      <span class="token comment">// 空开属性字节</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">/* Initialize the variables used for scrolling (mostly EGA/VGA)	*/</span>
	
	origin	<span class="token operator">=</span> video_mem_start<span class="token punctuation">;</span>              <span class="token comment">// 滚屏起始显示内存地址</span>
	scr_end	<span class="token operator">=</span> video_mem_start <span class="token operator">+</span> video_num_lines <span class="token operator">*</span> video_size_row<span class="token punctuation">;</span>   <span class="token comment">// 结束地址</span>
	top	<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token comment">// 最顶行号</span>
	bottom	<span class="token operator">=</span> video_num_lines<span class="token punctuation">;</span>              <span class="token comment">// 最底行号</span>

    <span class="token comment">// 最后初始化当前光标所在位置和光标对应的内存位置pos，并设置键盘中断0x21陷阱门</span>
    <span class="token comment">// 描述符，&amp;keyboard_interrupt是键盘中断处理过程地址。取消8259A中对键盘中断的</span>
    <span class="token comment">// 屏蔽，允许响应键盘发出的IRQ1请求信号。最后复位键盘控制器以允许键盘开始正常工作。</span>
	<span class="token function">gotoxy</span><span class="token punctuation">(</span>ORIG_X<span class="token punctuation">,</span>ORIG_Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>keyboard_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xfd</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 取消对键盘中断的屏蔽，允许IRQ1。</span>
	a<span class="token operator">=</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// 读取键盘端口0x61(8255A端口PB)</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span>a<span class="token operator">|</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 设置禁止键盘工作（位7置位）</span>
	<span class="token function">outb</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// 再允许键盘工作，用以复位键盘</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","Linux-0.11-kernel-console.html.vue"]]);export{k as default};
