const t=JSON.parse('{"key":"v-16003f48","path":"/posts/Program_language/cpp/effective-STL/effective-STL-6.html","title":"effective STL-06 警惕C++最令人恼怒的解析","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective STL读书笔记"],"description":"effective STL-06 警惕C++最令人恼怒的解析 假设有一个int文件，将这些int拷贝到一个list中 ifstream dataFile(\\"ints.dat\\"); list&lt;int&gt; data(istream_iterator&lt;int&gt;(dataFile), istream_iterator&lt;int&gt;()); //list&lt;int&gt; 是类型，声明名为data的函数 //不要在参数内递临时构建对象再来传入，而是先构建，再传入","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-STL/effective-STL-6.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective STL-06 警惕C++最令人恼怒的解析"}],["meta",{"property":"og:description","content":"effective STL-06 警惕C++最令人恼怒的解析 假设有一个int文件，将这些int拷贝到一个list中 ifstream dataFile(\\"ints.dat\\"); list&lt;int&gt; data(istream_iterator&lt;int&gt;(dataFile), istream_iterator&lt;int&gt;()); //list&lt;int&gt; 是类型，声明名为data的函数 //不要在参数内递临时构建对象再来传入，而是先构建，再传入"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-06T02:04:02.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective STL读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-06-06T02:04:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective STL-06 警惕C++最令人恼怒的解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-06T02:04:02.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1686017042000,"updatedTime":1686017042000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.52,"words":155},"filePathRelative":"posts/Program_language/cpp/effective-STL/effective-STL-6.md","localizedDate":"2023年6月6日","excerpt":"<h1> effective STL-06 警惕C++最令人恼怒的解析</h1>\\n<p>假设有一个int文件，将这些int拷贝到一个list中</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>ifstream <span class=\\"token function\\">dataFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ints.dat\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nlist<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">data</span><span class=\\"token punctuation\\">(</span><span class=\\"token generic-function\\"><span class=\\"token function\\">istream_iterator</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>dataFile<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">istream_iterator</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//list&lt;int&gt; 是类型，声明名为data的函数</span>\\n<span class=\\"token comment\\">//不要在参数内递临时构建对象再来传入，而是先构建，再传入</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
