const n=JSON.parse('{"key":"v-3e8a84f0","path":"/posts/Program_language/cpp/cpp_noexcept.html","title":"noexcept","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"noexcept vector容器扩容时 如下面的代码 #include &lt;iostream&gt; #include &lt;memory&gt; #include &lt;vector&gt; class A{ public: A(){ std::cout &lt;&lt; \\"A()\\" &lt;&lt; std::endl; } ~A(){ std::cout &lt;&lt; \\"~A()\\" &lt;&lt; std::endl; } A(const A&amp; other){ std::cout &lt;&lt; \\"A(const A&amp; other)\\" &lt;&lt; std::endl; } A&amp; operator=(const A&amp; other){ std::cout &lt;&lt; \\"operator=(const A&amp; other\\" &lt;&lt; std::endl; return *this; } A(A&amp;&amp; other) { std::cout &lt;&lt; \\"A(A&amp;&amp; other)\\" &lt;&lt; std::endl; } A&amp; operator=(A&amp;&amp; other){ std::cout &lt;&lt; \\"A&amp; operator=(A&amp;&amp; other)\\" &lt;&lt; std::endl; return *this; } }; int main(int argc, const char* argv[]) { std::vector&lt;A&gt; vec; vec.resize(1); std::cout &lt;&lt; vec.size() &lt;&lt; std::endl; std::cout &lt;&lt; vec.capacity() &lt;&lt; std::endl; std::cout &lt;&lt; \\"===\\" &lt;&lt; std::endl; A a1; vec.emplace_back(a1); std::cout &lt;&lt; vec.size() &lt;&lt; std::endl; std::cout &lt;&lt; vec.capacity() &lt;&lt; std::endl; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_noexcept.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"noexcept"}],["meta",{"property":"og:description","content":"noexcept vector容器扩容时 如下面的代码 #include &lt;iostream&gt; #include &lt;memory&gt; #include &lt;vector&gt; class A{ public: A(){ std::cout &lt;&lt; \\"A()\\" &lt;&lt; std::endl; } ~A(){ std::cout &lt;&lt; \\"~A()\\" &lt;&lt; std::endl; } A(const A&amp; other){ std::cout &lt;&lt; \\"A(const A&amp; other)\\" &lt;&lt; std::endl; } A&amp; operator=(const A&amp; other){ std::cout &lt;&lt; \\"operator=(const A&amp; other\\" &lt;&lt; std::endl; return *this; } A(A&amp;&amp; other) { std::cout &lt;&lt; \\"A(A&amp;&amp; other)\\" &lt;&lt; std::endl; } A&amp; operator=(A&amp;&amp; other){ std::cout &lt;&lt; \\"A&amp; operator=(A&amp;&amp; other)\\" &lt;&lt; std::endl; return *this; } }; int main(int argc, const char* argv[]) { std::vector&lt;A&gt; vec; vec.resize(1); std::cout &lt;&lt; vec.size() &lt;&lt; std::endl; std::cout &lt;&lt; vec.capacity() &lt;&lt; std::endl; std::cout &lt;&lt; \\"===\\" &lt;&lt; std::endl; A a1; vec.emplace_back(a1); std::cout &lt;&lt; vec.size() &lt;&lt; std::endl; std::cout &lt;&lt; vec.capacity() &lt;&lt; std::endl; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-11T01:58:47.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-11T01:58:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"noexcept\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-11T01:58:47.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"vector容器扩容时","slug":"vector容器扩容时","link":"#vector容器扩容时","children":[]}],"git":{"createdTime":1694397527000,"updatedTime":1694397527000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.33,"words":399},"filePathRelative":"posts/Program_language/cpp/cpp_noexcept.md","localizedDate":"2023年9月11日","excerpt":"<h1> noexcept</h1>\\n<h2> vector容器扩容时</h2>\\n<p>如下面的代码</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;memory&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;vector&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">{</span>  \\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>  \\n    <span class=\\"token function\\">A</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>  \\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"A()\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span>  \\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">A</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>  \\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"~A()\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span>  \\n    <span class=\\"token function\\">A</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> A<span class=\\"token operator\\">&amp;</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>  \\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"A(const A&amp; other)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span>  \\n    \\n    A<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> A<span class=\\"token operator\\">&amp;</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>  \\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"operator=(const A&amp; other\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span>  \\n    \\n    <span class=\\"token function\\">A</span><span class=\\"token punctuation\\">(</span>A<span class=\\"token operator\\">&amp;&amp;</span> other<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"A(A&amp;&amp; other)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span>  \\n    \\n    A<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>A<span class=\\"token operator\\">&amp;&amp;</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>  \\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"A&amp; operator=(A&amp;&amp; other)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>  \\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span>  \\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>  \\n  \\n\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> argc<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> argv<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n    std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span>A<span class=\\"token operator\\">&gt;</span> vec<span class=\\"token punctuation\\">;</span>\\n    vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">capacity</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"===\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    A a1<span class=\\"token punctuation\\">;</span>\\n    vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emplace_back</span><span class=\\"token punctuation\\">(</span>a1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">capacity</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
