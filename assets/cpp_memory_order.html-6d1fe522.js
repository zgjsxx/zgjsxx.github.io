const e=JSON.parse('{"key":"v-dc094c8c","path":"/posts/Program_language/cpp/cpp_memory_order.html","title":"c++11原子变量与内存序","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++"],"description":"c++11原子变量与内存序 多线程中共享变量进行操作的问题 在多线程中，共享一个变量用于计数或者流程控制是一个很常见的需求，在这个过程中就带来了两个常见的问题： (1)i++问题 两个线程同时对一个变量执行i++操作，结果得到的值却不是期望的，这便是i++问题。 i++的问题的原因在于岂不是一个原子操作： 步骤 thread 1 1 读取内存的值(i)到寄存器 2 寄存器的值+1 3 将寄存器的值写回内存(i)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_memory_order.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++11原子变量与内存序"}],["meta",{"property":"og:description","content":"c++11原子变量与内存序 多线程中共享变量进行操作的问题 在多线程中，共享一个变量用于计数或者流程控制是一个很常见的需求，在这个过程中就带来了两个常见的问题： (1)i++问题 两个线程同时对一个变量执行i++操作，结果得到的值却不是期望的，这便是i++问题。 i++的问题的原因在于岂不是一个原子操作： 步骤 thread 1 1 读取内存的值(i)到寄存器 2 寄存器的值+1 3 将寄存器的值写回内存(i)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-07T02:55:09.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2023-07-07T02:55:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++11原子变量与内存序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-07T02:55:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"多线程中共享变量进行操作的问题","slug":"多线程中共享变量进行操作的问题","link":"#多线程中共享变量进行操作的问题","children":[]},{"level":2,"title":"C++11的原子量","slug":"c-11的原子量","link":"#c-11的原子量","children":[]},{"level":2,"title":"C++11的六种内存序","slug":"c-11的六种内存序","link":"#c-11的六种内存序","children":[{"level":3,"title":"memory_order_release/memory_order_acquire","slug":"memory-order-release-memory-order-acquire","link":"#memory-order-release-memory-order-acquire","children":[]},{"level":3,"title":"memory_order_release/memory_order_consume","slug":"memory-order-release-memory-order-consume","link":"#memory-order-release-memory-order-consume","children":[]},{"level":3,"title":"memory_order_acq_rel","slug":"memory-order-acq-rel","link":"#memory-order-acq-rel","children":[]},{"level":3,"title":"memory_order_seq_cst","slug":"memory-order-seq-cst","link":"#memory-order-seq-cst","children":[]},{"level":3,"title":"memory_order_relaxed","slug":"memory-order-relaxed","link":"#memory-order-relaxed","children":[]}]}],"git":{"createdTime":1684907446000,"updatedTime":1688698509000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":5}]},"readingTime":{"minutes":9.86,"words":2959},"filePathRelative":"posts/Program_language/cpp/cpp_memory_order.md","localizedDate":"2023年5月24日","excerpt":"<h1> c++11原子变量与内存序</h1>\\n<h2> 多线程中共享变量进行操作的问题</h2>\\n<p>在多线程中，共享一个变量用于计数或者流程控制是一个很常见的需求，在这个过程中就带来了两个常见的问题：</p>\\n<p>(1)i++问题</p>\\n<p>两个线程同时对一个变量执行i++操作，结果得到的值却不是期望的，这便是i++问题。</p>\\n<p>i++的问题的原因在于岂不是一个原子操作：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>步骤</th>\\n<th>thread 1</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td>读取内存的值(i)到寄存器</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>寄存器的值+1</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>将寄存器的值写回内存(i)</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{e as data};
