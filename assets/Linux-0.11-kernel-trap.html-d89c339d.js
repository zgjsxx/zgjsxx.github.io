import{_ as n,V as s,W as a,a0 as t}from"./framework-c954d91f.js";const e={},p=t(`<h1 id="linux-0-11-kernel目录进程管理trap-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理trap-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理trap.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="die" tabindex="-1"><a class="header-anchor" href="#die" aria-hidden="true">#</a> die</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">long</span> esp_ptr<span class="token punctuation">,</span><span class="token keyword">long</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于在出现异常时，打印一些出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token operator">*</span> esp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> esp_ptr<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %04x\\n\\r&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>nr<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;EIP:\\t%04x:%p\\nEFLAGS:\\t%p\\nESP:\\t%04x:%p\\n&quot;</span><span class="token punctuation">,</span>
	esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;fs: %04x\\n&quot;</span><span class="token punctuation">,</span><span class="token function">_fs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;base: %p, limit: %p\\n&quot;</span><span class="token punctuation">,</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Stack: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%p &quot;</span><span class="token punctuation">,</span><span class="token function">get_seg_long</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Pid: %d, process nr: %d\\n\\r&quot;</span><span class="token punctuation">,</span>current<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span><span class="token number">0xffff</span> <span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span><span class="token number">0xff</span> <span class="token operator">&amp;</span> <span class="token function">get_seg_byte</span><span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* play segment exception */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-double-fault" tabindex="-1"><a class="header-anchor" href="#do-double-fault" aria-hidden="true">#</a> do_double_fault</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_double_fault</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印double fault的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
	<span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;double fault&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-general-protection" tabindex="-1"><a class="header-anchor" href="#do-general-protection" aria-hidden="true">#</a> do_general_protection</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_general_protection</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印general protection的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
	<span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;general protection&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-divide-error" tabindex="-1"><a class="header-anchor" href="#do-divide-error" aria-hidden="true">#</a> do_divide_error</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_divide_error</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印divide error的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
	<span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;divide error&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-int3" tabindex="-1"><a class="header-anchor" href="#do-int3" aria-hidden="true">#</a> do_int3</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_int3</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">,</span>
		<span class="token keyword">long</span> fs<span class="token punctuation">,</span><span class="token keyword">long</span> es<span class="token punctuation">,</span><span class="token keyword">long</span> ds<span class="token punctuation">,</span>
		<span class="token keyword">long</span> ebp<span class="token punctuation">,</span><span class="token keyword">long</span> esi<span class="token punctuation">,</span><span class="token keyword">long</span> edi<span class="token punctuation">,</span>
		<span class="token keyword">long</span> edx<span class="token punctuation">,</span><span class="token keyword">long</span> ecx<span class="token punctuation">,</span><span class="token keyword">long</span> ebx<span class="token punctuation">,</span><span class="token keyword">long</span> eax<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印int3的信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> tr<span class="token punctuation">;</span>

	<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;str %%ax&quot;</span><span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;eax\\t\\tebx\\t\\tecx\\t\\tedx\\n\\r%8x\\t%8x\\t%8x\\t%8x\\n\\r&quot;</span><span class="token punctuation">,</span>
		eax<span class="token punctuation">,</span>ebx<span class="token punctuation">,</span>ecx<span class="token punctuation">,</span>edx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;esi\\t\\tedi\\t\\tebp\\t\\tesp\\n\\r%8x\\t%8x\\t%8x\\t%8x\\n\\r&quot;</span><span class="token punctuation">,</span>
		esi<span class="token punctuation">,</span>edi<span class="token punctuation">,</span>ebp<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> esp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\rds\\tes\\tfs\\ttr\\n\\r%4x\\t%4x\\t%4x\\t%4x\\n\\r&quot;</span><span class="token punctuation">,</span>
		ds<span class="token punctuation">,</span>es<span class="token punctuation">,</span>fs<span class="token punctuation">,</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;EIP: %8x   CS: %4x  EFLAGS: %8x\\n\\r&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-nmi" tabindex="-1"><a class="header-anchor" href="#do-nmi" aria-hidden="true">#</a> do_nmi</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_nmi</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印nmi的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;nmi&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-debug" tabindex="-1"><a class="header-anchor" href="#do-debug" aria-hidden="true">#</a> do_debug</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_debug</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印debug的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-overflow" tabindex="-1"><a class="header-anchor" href="#do-overflow" aria-hidden="true">#</a> do_overflow</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_overflow</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印overflow的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;overflow&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-bounds" tabindex="-1"><a class="header-anchor" href="#do-bounds" aria-hidden="true">#</a> do_bounds</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_bounds</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印bounds的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;bounds&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-invalid-op" tabindex="-1"><a class="header-anchor" href="#do-invalid-op" aria-hidden="true">#</a> do_invalid_op</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_invalid_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印invalid operand的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;invalid operand&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-device-not-available" tabindex="-1"><a class="header-anchor" href="#do-device-not-available" aria-hidden="true">#</a> do_device_not_available</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_device_not_available</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印device not available的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;device not available&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-coprocessor-segment-overrun" tabindex="-1"><a class="header-anchor" href="#do-coprocessor-segment-overrun" aria-hidden="true">#</a> do_coprocessor_segment_overrun</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_coprocessor_segment_overrun</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印coprocessor segment overrun的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;coprocessor segment overrun&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-invalid-tss" tabindex="-1"><a class="header-anchor" href="#do-invalid-tss" aria-hidden="true">#</a> do_invalid_TSS</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_invalid_TSS</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_invalid_TSS的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;invalid TSS&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-segment-not-present" tabindex="-1"><a class="header-anchor" href="#do-segment-not-present" aria-hidden="true">#</a> do_segment_not_present</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_segment_not_present</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_segment_not_present的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;segment not present&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-stack-segment" tabindex="-1"><a class="header-anchor" href="#do-stack-segment" aria-hidden="true">#</a> do_stack_segment</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_stack_segment</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_stack_segment的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;stack segment&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-coprocessor-error" tabindex="-1"><a class="header-anchor" href="#do-coprocessor-error" aria-hidden="true">#</a> do_coprocessor_error</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_coprocessor_error</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-reserved" tabindex="-1"><a class="header-anchor" href="#do-reserved" aria-hidden="true">#</a> do_reserved</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_reserved</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_reserved的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;reserved (15,17-47) error&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="trap-init" tabindex="-1"><a class="header-anchor" href="#trap-init" aria-hidden="true">#</a> trap_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">trap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化trap。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>divide_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nmi<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>int3<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* int3-5 can be called from all */</span>
	<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>bounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>invalid_op<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>device_not_available<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>double_fault<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>coprocessor_segment_overrun<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>invalid_TSS<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>segment_not_present<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stack_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>general_protection<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>page_fault<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>reserved<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>coprocessor_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">48</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">set_trap_gate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>reserved<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>irq13<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xfb</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xdf</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>parallel_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,74),o=[p];function c(i,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Linux-0.11-kernel-trap.html.vue"]]);export{r as default};
