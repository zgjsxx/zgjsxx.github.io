const t=JSON.parse('{"key":"v-c363e54a","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-09.html","title":"effective c++ 09 绝不要在构造和析构过程中调用virtual函数","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 09 绝不要在构造和析构过程中调用virtual函数 本文主要介绍的是一个误区，即在基类的构造函数中调用虚函数，该调用不会下降到派生类中的虚函数中执行。 分析 看下面的一个例子，我们在main函数中创建了BuyTransaction对象， 该对象会首先调用Transation的构造函数去初始化基类的成分。在Tranction的构造函数中，其调用了虚函数logTransaction，试想我们最终会调用那个版本的logTransaction？ Transation::logTransaction还是BuyTransaction::logTransaction?","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-09.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 09 绝不要在构造和析构过程中调用virtual函数"}],["meta",{"property":"og:description","content":"effective c++ 09 绝不要在构造和析构过程中调用virtual函数 本文主要介绍的是一个误区，即在基类的构造函数中调用虚函数，该调用不会下降到派生类中的虚函数中执行。 分析 看下面的一个例子，我们在main函数中创建了BuyTransaction对象， 该对象会首先调用Transation的构造函数去初始化基类的成分。在Tranction的构造函数中，其调用了虚函数logTransaction，试想我们最终会调用那个版本的logTransaction？ Transation::logTransaction还是BuyTransaction::logTransaction?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-21T03:50:12.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-21T03:50:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 09 绝不要在构造和析构过程中调用virtual函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-21T03:50:12.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684641012000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":1.48,"words":443},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-09.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 09 绝不要在构造和析构过程中调用virtual函数</h1>\\n<p>本文主要介绍的是一个误区，即在基类的构造函数中调用虚函数，该调用不会下降到派生类中的虚函数中执行。</p>\\n<h2> 分析</h2>\\n<p>看下面的一个例子，我们在main函数中创建了BuyTransaction对象， 该对象会首先调用Transation的构造函数去初始化基类的成分。在Tranction的构造函数中，其调用了虚函数logTransaction，试想我们最终会调用那个版本的logTransaction？ <code>Transation::logTransaction</code>还是<code>BuyTransaction::logTransaction</code>?</p>","autoDesc":true}');export{t as data};
