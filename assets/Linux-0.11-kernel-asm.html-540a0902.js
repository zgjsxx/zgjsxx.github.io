import{_ as e,V as r,W as a,a0 as n}from"./framework-c954d91f.js";const d={},o=n('<h1 id="linux-0-11-kernel目录进程管理asm-s详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理asm-s详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理asm.s详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>该模块和CPU异常处理相关，在代码结构上asm.s和traps.c强相关。 CPU探测到异常时，主要分为两种处理方式，一种是有错误码，另一种是没有错误码，对应的方法就是<strong>error_code</strong>和<strong>no_error_code</strong>。在下面的函数详解中，将主要以两个函数展开。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="no-error-code" tabindex="-1"><a class="header-anchor" href="#no-error-code" aria-hidden="true">#</a> no_error_code</h3><h3 id="error-code" tabindex="-1"><a class="header-anchor" href="#error-code" aria-hidden="true">#</a> error_code</h3><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>',7),h=[o];function s(c,i){return r(),a("div",null,h)}const _=e(d,[["render",s],["__file","Linux-0.11-kernel-asm.html.vue"]]);export{_ as default};
