const n=JSON.parse('{"key":"v-6e7d4921","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-47.html","title":"effective c++ 47 请使用trait class 表现类型信息","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 47 请使用trait class 表现类型信息 #pragma once //http://www.cplusplus.com/reference/iterator/iterator_traits/ #include &lt;iterator&gt; template&lt;typename IterT, typename DistT&gt; void doAdvance(IterT&amp; iter, DistT d, std::random_access_iterator_tag) { \\titer += d; } template&lt;typename IterT, typename DistT&gt; void doAdvance(IterT&amp; iter, DistT d, std::bidirectional_iterator_tag) { \\tif (d &gt;= 0) \\t{ \\t\\twhile (d--) \\t\\t{ \\t\\t\\t++iter; \\t\\t} \\t} \\telse \\t{ \\t\\twhile (d++) \\t\\t{ \\t\\t\\t--iter; \\t\\t} \\t} } template&lt;typename IterT, typename DistT&gt; void doAdvance(IterT&amp; iter, DistT d, std::input_iterator_tag) { \\tif (d &lt; 0) \\t{ \\t\\tthrow std::out_of_range(\\"Negative distance\\"); \\t} \\twhile (d--) \\t{ \\t\\t++iter; \\t} } template&lt;typename IterT, typename DistT&gt; void advance(IterT&amp; iter, DistT d) { \\t//doAdvance(iter, d, typename std::iterator_traits&lt;IterT&gt;::iterator_category()); \\tauto category = typename std::iterator_traits&lt;IterT&gt;::iterator_category(); \\tdoAdvance(iter, d, category); } int main() { \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-47.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 47 请使用trait class 表现类型信息"}],["meta",{"property":"og:description","content":"effective c++ 47 请使用trait class 表现类型信息 #pragma once //http://www.cplusplus.com/reference/iterator/iterator_traits/ #include &lt;iterator&gt; template&lt;typename IterT, typename DistT&gt; void doAdvance(IterT&amp; iter, DistT d, std::random_access_iterator_tag) { \\titer += d; } template&lt;typename IterT, typename DistT&gt; void doAdvance(IterT&amp; iter, DistT d, std::bidirectional_iterator_tag) { \\tif (d &gt;= 0) \\t{ \\t\\twhile (d--) \\t\\t{ \\t\\t\\t++iter; \\t\\t} \\t} \\telse \\t{ \\t\\twhile (d++) \\t\\t{ \\t\\t\\t--iter; \\t\\t} \\t} } template&lt;typename IterT, typename DistT&gt; void doAdvance(IterT&amp; iter, DistT d, std::input_iterator_tag) { \\tif (d &lt; 0) \\t{ \\t\\tthrow std::out_of_range(\\"Negative distance\\"); \\t} \\twhile (d--) \\t{ \\t\\t++iter; \\t} } template&lt;typename IterT, typename DistT&gt; void advance(IterT&amp; iter, DistT d) { \\t//doAdvance(iter, d, typename std::iterator_traits&lt;IterT&gt;::iterator_category()); \\tauto category = typename std::iterator_traits&lt;IterT&gt;::iterator_category(); \\tdoAdvance(iter, d, category); } int main() { \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T06:58:32.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-11T06:58:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 47 请使用trait class 表现类型信息\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T06:58:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788312000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.62,"words":185},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-47.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 47 请使用trait class 表现类型信息</h1>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">pragma</span> <span class=\\"token expression\\">once</span></span>\\n\\n<span class=\\"token comment\\">//http://www.cplusplus.com/reference/iterator/iterator_traits/</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iterator&gt;</span></span>\\n\\n<span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">IterT</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">DistT</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">doAdvance</span><span class=\\"token punctuation\\">(</span>IterT<span class=\\"token operator\\">&amp;</span> iter<span class=\\"token punctuation\\">,</span> DistT d<span class=\\"token punctuation\\">,</span> std<span class=\\"token double-colon punctuation\\">::</span>random_access_iterator_tag<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\titer <span class=\\"token operator\\">+=</span> d<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">IterT</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">DistT</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">doAdvance</span><span class=\\"token punctuation\\">(</span>IterT<span class=\\"token operator\\">&amp;</span> iter<span class=\\"token punctuation\\">,</span> DistT d<span class=\\"token punctuation\\">,</span> std<span class=\\"token double-colon punctuation\\">::</span>bidirectional_iterator_tag<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>d <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>d<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token operator\\">++</span>iter<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">else</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>d<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token operator\\">--</span>iter<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">IterT</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">DistT</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">doAdvance</span><span class=\\"token punctuation\\">(</span>IterT<span class=\\"token operator\\">&amp;</span> iter<span class=\\"token punctuation\\">,</span> DistT d<span class=\\"token punctuation\\">,</span> std<span class=\\"token double-colon punctuation\\">::</span>input_iterator_tag<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>d <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">throw</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">out_of_range</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Negative distance\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>d<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token operator\\">++</span>iter<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">IterT</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">DistT</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">advance</span><span class=\\"token punctuation\\">(</span>IterT<span class=\\"token operator\\">&amp;</span> iter<span class=\\"token punctuation\\">,</span> DistT d<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//doAdvance(iter, d, typename std::iterator_traits&lt;IterT&gt;::iterator_category());</span>\\n\\n\\t<span class=\\"token keyword\\">auto</span> category <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">std</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token class-name\\">iterator_traits</span><span class=\\"token operator\\">&lt;</span>IterT<span class=\\"token operator\\">&gt;</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">iterator_category</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">doAdvance</span><span class=\\"token punctuation\\">(</span>iter<span class=\\"token punctuation\\">,</span> d<span class=\\"token punctuation\\">,</span> category<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
