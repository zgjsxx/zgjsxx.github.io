const e=JSON.parse('{"key":"v-d4745b80","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-04.html","title":"effective c++ 04 确定对象被使用前已被初始化","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 04 确定对象被使用前已被初始化 在本节中，作者主要强调了对象使用前一定要进行显式的初始化。其中要区分构造函数中的赋值和初始化。另外跨编译模块的初始化问题需要引起注意(通常可以使用单例模式解决)。 分析 使用成员变量初始化列表进行初始化 在构造函数中，下面的形式是赋值: //01. Assignments ABEntry::ABEntry(const std::string&amp; name, const std::string&amp; address, const std::list&lt;PhoneNumber&gt;&amp; phones) { \\t// these are all assignments. \\ttheName = name; \\ttheAddress = address; \\tthePhones = phones; \\tnumTimesConsulted = 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-04.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 04 确定对象被使用前已被初始化"}],["meta",{"property":"og:description","content":"effective c++ 04 确定对象被使用前已被初始化 在本节中，作者主要强调了对象使用前一定要进行显式的初始化。其中要区分构造函数中的赋值和初始化。另外跨编译模块的初始化问题需要引起注意(通常可以使用单例模式解决)。 分析 使用成员变量初始化列表进行初始化 在构造函数中，下面的形式是赋值: //01. Assignments ABEntry::ABEntry(const std::string&amp; name, const std::string&amp; address, const std::list&lt;PhoneNumber&gt;&amp; phones) { \\t// these are all assignments. \\ttheName = name; \\ttheAddress = address; \\tthePhones = phones; \\tnumTimesConsulted = 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-21T02:52:35.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-21T02:52:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 04 确定对象被使用前已被初始化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-21T02:52:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[{"level":3,"title":"使用成员变量初始化列表进行初始化","slug":"使用成员变量初始化列表进行初始化","link":"#使用成员变量初始化列表进行初始化","children":[]},{"level":3,"title":"确保全局变量已经初始化","slug":"确保全局变量已经初始化","link":"#确保全局变量已经初始化","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684637555000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":1.51,"words":453},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-04.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 04 确定对象被使用前已被初始化</h1>\\n<p>在本节中，作者主要强调了对象使用前一定要进行显式的初始化。其中要区分构造函数中的赋值和初始化。另外跨编译模块的初始化问题需要引起注意(通常可以使用单例模式解决)。</p>\\n<h2> 分析</h2>\\n<h3> 使用成员变量初始化列表进行初始化</h3>\\n<p>在构造函数中，下面的形式是赋值:</p>\\n<div class=\\"language-CPP line-numbers-mode\\" data-ext=\\"CPP\\"><pre class=\\"language-CPP\\"><code>//01. Assignments\\nABEntry::ABEntry(const std::string&amp; name, const std::string&amp; address, const std::list&lt;PhoneNumber&gt;&amp; phones)\\n{\\n\\t// these are all assignments.\\n\\ttheName = name;\\n\\ttheAddress = address;\\n\\tthePhones = phones;\\n\\tnumTimesConsulted = 0;\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
