import{_ as a,V as p,W as t,X as n,Y as e,$ as o,a0 as c,F as l}from"./framework-9a29aaa0.js";const u={},i=c(`<p><code>std::function</code>是怎样实现的？ 首先必须实现一个默认的模板函数，然后根据参数个数特例化不同的实现，在没有变长参数模块语法支持时，只能根据参数个数特例化多个实现，非常繁琐。有了语法支持后，可以使用变长参数模板轻松实现任意个数参数的function。</p><p>大致实现如下：</p><p>不需要参数时： C++</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> my <span class="token punctuation">{</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">TR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> PFunc <span class="token operator">=</span> <span class="token function">TR</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PFunc pfunc_<span class="token punctuation">;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">function</span><span class="token punctuation">(</span>PFunc pfunc<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>pfunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    TR <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要一个参数时： C++</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> my <span class="token punctuation">{</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">TArg</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">TR</span><span class="token punctuation">(</span>TArg<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> PFunc <span class="token operator">=</span> <span class="token function">TR</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PFunc pfunc_<span class="token punctuation">;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">function</span><span class="token punctuation">(</span>PFunc pfunc<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>pfunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    TR <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TArg arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要两个参数时： C++</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> my <span class="token punctuation">{</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">TArg1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">TArg2</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">TR</span><span class="token punctuation">(</span>TArg1<span class="token punctuation">,</span> TArg2<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> PFunc <span class="token operator">=</span> <span class="token function">TR</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TArg1<span class="token punctuation">,</span> TArg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PFunc pfunc_<span class="token punctuation">;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">function</span><span class="token punctuation">(</span>PFunc pfunc<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>pfunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    TR <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TArg1 arg1<span class="token punctuation">,</span> TArg2 arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多个数的参数同理增加参数就行，接下来介绍使用变长参数模板如何实现</p><p>使用变长参数模块实现 C++</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> my <span class="token punctuation">{</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TR</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>TArgs<span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">TR</span><span class="token punctuation">(</span>TArgs<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> PFunc <span class="token operator">=</span> <span class="token function">TR</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TArgs<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PFunc pfunc_<span class="token punctuation">;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">function</span><span class="token punctuation">(</span>PFunc pfunc<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>pfunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    TR <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TArgs<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">pfunc_</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">subtraction</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> sub1 <span class="token operator">=</span> subtraction<span class="token punctuation">;</span>
  my<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> sub2 <span class="token operator">=</span> subtraction<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token function">sub1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token function">sub2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),k={href:"https://zhuanlan.zhihu.com/p/142175297",target:"_blank",rel:"noopener noreferrer"};function r(d,v){const s=l("ExternalLinkIcon");return p(),t("div",null,[i,n("p",null,[n("a",k,[e("https://zhuanlan.zhihu.com/p/142175297"),o(s)])])])}const b=a(u,[["render",r],["__file","cpp_std_function.html.vue"]]);export{b as default};
