const n=JSON.parse('{"key":"v-2dd55e63","path":"/posts/datastructure_algorithm/bucket-sort.html","title":"桶排序分析","lang":"zh-CN","frontmatter":{"category":["data structure"],"tag":["data structure"],"description":"桶排序分析 桶排序概述 桶排序的流程： 创建几个存储桶，将元素分别划分到存储桶中 分别对存储桶中的元素进行排序 将存储桶中的元素进行收集 适用场景： 输入均匀地分布在一个范围内。 桶排序代码 // Bucket sort in C++ #include &lt;iomanip&gt; #include &lt;iostream&gt; using namespace std; #define NARRAY 7 // Array size #define NBUCKET 6 // Number of buckets #define INTERVAL 10 // Each bucket capacity struct Node { int data; struct Node *next; }; void BucketSort(int arr[]); struct Node *InsertionSort(struct Node *list); void print(int arr[]); void printBuckets(struct Node *list); int getBucketIndex(int value); // Sorting function void BucketSort(int arr[]) { int i, j; struct Node **buckets; // Create buckets and allocate memory size buckets = (struct Node **)malloc(sizeof(struct Node *) * NBUCKET); // Initialize empty buckets for (i = 0; i &lt; NBUCKET; ++i) { buckets[i] = NULL; } // Fill the buckets with respective elements for (i = 0; i &lt; NARRAY; ++i) { struct Node *current; int pos = getBucketIndex(arr[i]); current = (struct Node *)malloc(sizeof(struct Node)); current-&gt;data = arr[i]; current-&gt;next = buckets[pos]; buckets[pos] = current; } // Print the buckets along with their elements for (i = 0; i &lt; NBUCKET; i++) { cout &lt;&lt; \\"Bucket[\\" &lt;&lt; i &lt;&lt; \\"] : \\"; printBuckets(buckets[i]); cout &lt;&lt; endl; } // Sort the elements of each bucket for (i = 0; i &lt; NBUCKET; ++i) { buckets[i] = InsertionSort(buckets[i]); } cout &lt;&lt; \\"-------------\\" &lt;&lt; endl; cout &lt;&lt; \\"Bucktets after sorted\\" &lt;&lt; endl; for (i = 0; i &lt; NBUCKET; i++) { cout &lt;&lt; \\"Bucket[\\" &lt;&lt; i &lt;&lt; \\"] : \\"; printBuckets(buckets[i]); cout &lt;&lt; endl; } // Put sorted elements on arr for (j = 0, i = 0; i &lt; NBUCKET; ++i) { struct Node *node; node = buckets[i]; while (node) { arr[j++] = node-&gt;data; node = node-&gt;next; } } for (i = 0; i &lt; NBUCKET; ++i) { struct Node *node; node = buckets[i]; while (node) { struct Node *tmp; tmp = node; node = node-&gt;next; free(tmp); } } free(buckets); return; } // Function to sort the elements of each bucket struct Node *InsertionSort(struct Node *list) { struct Node *k, *nodeList; if (list == 0 || list-&gt;next == 0) { return list; } nodeList = list; k = list-&gt;next; nodeList-&gt;next = 0; while (k != 0) { struct Node *ptr; if (nodeList-&gt;data &gt; k-&gt;data) { struct Node *tmp; tmp = k; k = k-&gt;next; tmp-&gt;next = nodeList; nodeList = tmp; continue; } for (ptr = nodeList; ptr-&gt;next != 0; ptr = ptr-&gt;next) { if (ptr-&gt;next-&gt;data &gt; k-&gt;data) break; } if (ptr-&gt;next != 0) { struct Node *tmp; tmp = k; k = k-&gt;next; tmp-&gt;next = ptr-&gt;next; ptr-&gt;next = tmp; continue; } else { ptr-&gt;next = k; k = k-&gt;next; ptr-&gt;next-&gt;next = 0; continue; } } return nodeList; } int getBucketIndex(int value) { return value / INTERVAL; } // Print buckets void print(int ar[]) { int i; for (i = 0; i &lt; NARRAY; ++i) { cout &lt;&lt; setw(3) &lt;&lt; ar[i]; } cout &lt;&lt; endl; } void printBuckets(struct Node *list) { struct Node *cur = list; while (cur) { cout &lt;&lt; setw(3) &lt;&lt; cur-&gt;data; cur = cur-&gt;next; } } // Driver code int main(void) { int array[NARRAY] = {42, 32, 33, 52, 37, 47, 51}; cout &lt;&lt; \\"Initial array: \\" &lt;&lt; endl; print(array); cout &lt;&lt; \\"-------------\\" &lt;&lt; endl; BucketSort(array); cout &lt;&lt; \\"-------------\\" &lt;&lt; endl; cout &lt;&lt; \\"Sorted array: \\" &lt;&lt; endl; print(array); } 执行结果： ```shell Initial array: 42 32 33 52 37 47 51 ------------- Bucket[0] : Bucket[1] : Bucket[2] : Bucket[3] : 37 33 32 Bucket[4] : 47 42 Bucket[5] : 51 52 ------------- Bucktets after sorted Bucket[0] : Bucket[1] : Bucket[2] : Bucket[3] : 32 33 37 Bucket[4] : 42 47 Bucket[5] : 51 52 ------------- Sorted array: 32 33 37 42 47 51 52","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/datastructure_algorithm/bucket-sort.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"桶排序分析"}],["meta",{"property":"og:description","content":"桶排序分析 桶排序概述 桶排序的流程： 创建几个存储桶，将元素分别划分到存储桶中 分别对存储桶中的元素进行排序 将存储桶中的元素进行收集 适用场景： 输入均匀地分布在一个范围内。 桶排序代码 // Bucket sort in C++ #include &lt;iomanip&gt; #include &lt;iostream&gt; using namespace std; #define NARRAY 7 // Array size #define NBUCKET 6 // Number of buckets #define INTERVAL 10 // Each bucket capacity struct Node { int data; struct Node *next; }; void BucketSort(int arr[]); struct Node *InsertionSort(struct Node *list); void print(int arr[]); void printBuckets(struct Node *list); int getBucketIndex(int value); // Sorting function void BucketSort(int arr[]) { int i, j; struct Node **buckets; // Create buckets and allocate memory size buckets = (struct Node **)malloc(sizeof(struct Node *) * NBUCKET); // Initialize empty buckets for (i = 0; i &lt; NBUCKET; ++i) { buckets[i] = NULL; } // Fill the buckets with respective elements for (i = 0; i &lt; NARRAY; ++i) { struct Node *current; int pos = getBucketIndex(arr[i]); current = (struct Node *)malloc(sizeof(struct Node)); current-&gt;data = arr[i]; current-&gt;next = buckets[pos]; buckets[pos] = current; } // Print the buckets along with their elements for (i = 0; i &lt; NBUCKET; i++) { cout &lt;&lt; \\"Bucket[\\" &lt;&lt; i &lt;&lt; \\"] : \\"; printBuckets(buckets[i]); cout &lt;&lt; endl; } // Sort the elements of each bucket for (i = 0; i &lt; NBUCKET; ++i) { buckets[i] = InsertionSort(buckets[i]); } cout &lt;&lt; \\"-------------\\" &lt;&lt; endl; cout &lt;&lt; \\"Bucktets after sorted\\" &lt;&lt; endl; for (i = 0; i &lt; NBUCKET; i++) { cout &lt;&lt; \\"Bucket[\\" &lt;&lt; i &lt;&lt; \\"] : \\"; printBuckets(buckets[i]); cout &lt;&lt; endl; } // Put sorted elements on arr for (j = 0, i = 0; i &lt; NBUCKET; ++i) { struct Node *node; node = buckets[i]; while (node) { arr[j++] = node-&gt;data; node = node-&gt;next; } } for (i = 0; i &lt; NBUCKET; ++i) { struct Node *node; node = buckets[i]; while (node) { struct Node *tmp; tmp = node; node = node-&gt;next; free(tmp); } } free(buckets); return; } // Function to sort the elements of each bucket struct Node *InsertionSort(struct Node *list) { struct Node *k, *nodeList; if (list == 0 || list-&gt;next == 0) { return list; } nodeList = list; k = list-&gt;next; nodeList-&gt;next = 0; while (k != 0) { struct Node *ptr; if (nodeList-&gt;data &gt; k-&gt;data) { struct Node *tmp; tmp = k; k = k-&gt;next; tmp-&gt;next = nodeList; nodeList = tmp; continue; } for (ptr = nodeList; ptr-&gt;next != 0; ptr = ptr-&gt;next) { if (ptr-&gt;next-&gt;data &gt; k-&gt;data) break; } if (ptr-&gt;next != 0) { struct Node *tmp; tmp = k; k = k-&gt;next; tmp-&gt;next = ptr-&gt;next; ptr-&gt;next = tmp; continue; } else { ptr-&gt;next = k; k = k-&gt;next; ptr-&gt;next-&gt;next = 0; continue; } } return nodeList; } int getBucketIndex(int value) { return value / INTERVAL; } // Print buckets void print(int ar[]) { int i; for (i = 0; i &lt; NARRAY; ++i) { cout &lt;&lt; setw(3) &lt;&lt; ar[i]; } cout &lt;&lt; endl; } void printBuckets(struct Node *list) { struct Node *cur = list; while (cur) { cout &lt;&lt; setw(3) &lt;&lt; cur-&gt;data; cur = cur-&gt;next; } } // Driver code int main(void) { int array[NARRAY] = {42, 32, 33, 52, 37, 47, 51}; cout &lt;&lt; \\"Initial array: \\" &lt;&lt; endl; print(array); cout &lt;&lt; \\"-------------\\" &lt;&lt; endl; BucketSort(array); cout &lt;&lt; \\"-------------\\" &lt;&lt; endl; cout &lt;&lt; \\"Sorted array: \\" &lt;&lt; endl; print(array); } 执行结果： ```shell Initial array: 42 32 33 52 37 47 51 ------------- Bucket[0] : Bucket[1] : Bucket[2] : Bucket[3] : 37 33 32 Bucket[4] : 47 42 Bucket[5] : 51 52 ------------- Bucktets after sorted Bucket[0] : Bucket[1] : Bucket[2] : Bucket[3] : 32 33 37 Bucket[4] : 42 47 Bucket[5] : 51 52 ------------- Sorted array: 32 33 37 42 47 51 52"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-27T02:27:28.000Z"}],["meta",{"property":"article:tag","content":"data structure"}],["meta",{"property":"article:modified_time","content":"2023-06-27T02:27:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"桶排序分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-27T02:27:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"桶排序概述","slug":"桶排序概述","link":"#桶排序概述","children":[]},{"level":2,"title":"桶排序代码","slug":"桶排序代码","link":"#桶排序代码","children":[]}],"git":{"createdTime":1687746469000,"updatedTime":1687832848000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":2,"words":601},"filePathRelative":"posts/datastructure_algorithm/bucket-sort.md","localizedDate":"2023年6月26日","excerpt":"<h1> 桶排序分析</h1>\\n<h2> 桶排序概述</h2>\\n<p>桶排序的流程：</p>\\n<ul>\\n<li>创建几个存储桶，将元素分别划分到存储桶中</li>\\n<li>分别对存储桶中的元素进行排序</li>\\n<li>将存储桶中的元素进行收集</li>\\n</ul>\\n<p>适用场景：\\n输入均匀地分布在一个范围内。</p>\\n<h2> 桶排序代码</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">// Bucket sort in C++</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iomanip&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">NARRAY</span> <span class=\\"token expression\\"><span class=\\"token number\\">7</span>   </span><span class=\\"token comment\\">// Array size</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">NBUCKET</span> <span class=\\"token expression\\"><span class=\\"token number\\">6</span>  </span><span class=\\"token comment\\">// Number of buckets</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">INTERVAL</span> <span class=\\"token expression\\"><span class=\\"token number\\">10</span>  </span><span class=\\"token comment\\">// Each bucket capacity</span></span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">int</span> data<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>next<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">BucketSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> arr<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span><span class=\\"token function\\">InsertionSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> arr<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">printBuckets</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getBucketIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Sorting function</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">BucketSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> arr<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">,</span> j<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span>buckets<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// Create buckets and allocate memory size</span>\\n    buckets <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> NBUCKET<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// Initialize empty buckets</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NBUCKET<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// Fill the buckets with respective elements</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NARRAY<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>current<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> pos <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getBucketIndex</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        current <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        current<span class=\\"token operator\\">-&gt;</span>data <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        current<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> buckets<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        buckets<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> current<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// Print the buckets along with their elements</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NBUCKET<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Bucket[\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> i <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"] : \\"</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">printBuckets</span><span class=\\"token punctuation\\">(</span>buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// Sort the elements of each bucket</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NBUCKET<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">InsertionSort</span><span class=\\"token punctuation\\">(</span>buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-------------\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Bucktets after sorted\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NBUCKET<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Bucket[\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> i <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"] : \\"</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">printBuckets</span><span class=\\"token punctuation\\">(</span>buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// Put sorted elements on arr</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>j <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NBUCKET<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>node<span class=\\"token punctuation\\">;</span>\\n        node <span class=\\"token operator\\">=</span> buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>data<span class=\\"token punctuation\\">;</span>\\n        node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NBUCKET<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>node<span class=\\"token punctuation\\">;</span>\\n        node <span class=\\"token operator\\">=</span> buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>tmp<span class=\\"token punctuation\\">;</span>\\n        tmp <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">;</span>\\n        node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>tmp<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>buckets<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Function to sort the elements of each bucket</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span><span class=\\"token function\\">InsertionSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>list<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>k<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>nodeList<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>list <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> list<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> list<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    nodeList <span class=\\"token operator\\">=</span> list<span class=\\"token punctuation\\">;</span>\\n    k <span class=\\"token operator\\">=</span> list<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n    nodeList<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>k <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>ptr<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nodeList<span class=\\"token operator\\">-&gt;</span>data <span class=\\"token operator\\">&gt;</span> k<span class=\\"token operator\\">-&gt;</span>data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>tmp<span class=\\"token punctuation\\">;</span>\\n        tmp <span class=\\"token operator\\">=</span> k<span class=\\"token punctuation\\">;</span>\\n        k <span class=\\"token operator\\">=</span> k<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n        tmp<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> nodeList<span class=\\"token punctuation\\">;</span>\\n        nodeList <span class=\\"token operator\\">=</span> tmp<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>ptr <span class=\\"token operator\\">=</span> nodeList<span class=\\"token punctuation\\">;</span> ptr<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> ptr <span class=\\"token operator\\">=</span> ptr<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ptr<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token operator\\">-&gt;</span>data <span class=\\"token operator\\">&gt;</span> k<span class=\\"token operator\\">-&gt;</span>data<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ptr<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>tmp<span class=\\"token punctuation\\">;</span>\\n        tmp <span class=\\"token operator\\">=</span> k<span class=\\"token punctuation\\">;</span>\\n        k <span class=\\"token operator\\">=</span> k<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n        tmp<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> ptr<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n        ptr<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> tmp<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        ptr<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> k<span class=\\"token punctuation\\">;</span>\\n        k <span class=\\"token operator\\">=</span> k<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n        ptr<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> nodeList<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getBucketIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> value<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> value <span class=\\"token operator\\">/</span> INTERVAL<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Print buckets</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> ar<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> NARRAY<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">setw</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> ar<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">printBuckets</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>list<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token operator\\">*</span>cur <span class=\\"token operator\\">=</span> list<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>cur<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">setw</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> cur<span class=\\"token operator\\">-&gt;</span>data<span class=\\"token punctuation\\">;</span>\\n        cur <span class=\\"token operator\\">=</span> cur<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Driver code</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> array<span class=\\"token punctuation\\">[</span>NARRAY<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">32</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">33</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">52</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">37</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">47</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">51</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Initial array: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>array<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-------------\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token function\\">BucketSort</span><span class=\\"token punctuation\\">(</span>array<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"-------------\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Sorted array: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>array<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n执行结果：\\n\\n```shell\\nInitial array<span class=\\"token operator\\">:</span> \\n <span class=\\"token number\\">42</span> <span class=\\"token number\\">32</span> <span class=\\"token number\\">33</span> <span class=\\"token number\\">52</span> <span class=\\"token number\\">37</span> <span class=\\"token number\\">47</span> <span class=\\"token number\\">51</span>\\n<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span>\\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> \\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> \\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> \\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span>  <span class=\\"token number\\">37</span> <span class=\\"token number\\">33</span> <span class=\\"token number\\">32</span>\\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span>  <span class=\\"token number\\">47</span> <span class=\\"token number\\">42</span>\\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span>  <span class=\\"token number\\">51</span> <span class=\\"token number\\">52</span>\\n<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span>\\nBucktets after sorted\\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> \\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> \\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> \\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span>  <span class=\\"token number\\">32</span> <span class=\\"token number\\">33</span> <span class=\\"token number\\">37</span>\\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span>  <span class=\\"token number\\">42</span> <span class=\\"token number\\">47</span>\\nBucket<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span>  <span class=\\"token number\\">51</span> <span class=\\"token number\\">52</span>\\n<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span>\\nSorted array<span class=\\"token operator\\">:</span> \\n <span class=\\"token number\\">32</span> <span class=\\"token number\\">33</span> <span class=\\"token number\\">37</span> <span class=\\"token number\\">42</span> <span class=\\"token number\\">47</span> <span class=\\"token number\\">51</span> <span class=\\"token number\\">52</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
