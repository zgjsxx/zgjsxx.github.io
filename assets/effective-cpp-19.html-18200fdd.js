const e=JSON.parse('{"key":"v-59976ec8","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-19.html","title":"effective c++ 19 设置class犹如设计type","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 19 设置class犹如设计type 哎，该讲也是一个非常宽泛的话题。需要程序员在工作中不断积累。作者在本节中也没有举任何的例子，本节的话题实在太大， 本人的建议就是去多看看优秀的开源项目， 看看别人是如何设计类的，看的多了自然就会有进步。 分析 当你需要设计一个新的type时，你可以思考下面的一些问题。 新type的对象应该如何被创建和销毁 对象的初始化和对象的复制应该有什么样的差别。 新type的对象如果被passed by value，意味着什么? 什么时新type的\\"合法值\\"。 你的新type需要配合某个继承体系吗? 你的新type需要什么样的转换? 什么样的操作符和函数对此新type而言是合理的? 什么样的标准函数应该驳回? 什么是新type的\\"未声明接口\\"? 你的新type有多么一般化? 你真的需要一个新type吗?","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-19.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 19 设置class犹如设计type"}],["meta",{"property":"og:description","content":"effective c++ 19 设置class犹如设计type 哎，该讲也是一个非常宽泛的话题。需要程序员在工作中不断积累。作者在本节中也没有举任何的例子，本节的话题实在太大， 本人的建议就是去多看看优秀的开源项目， 看看别人是如何设计类的，看的多了自然就会有进步。 分析 当你需要设计一个新的type时，你可以思考下面的一些问题。 新type的对象应该如何被创建和销毁 对象的初始化和对象的复制应该有什么样的差别。 新type的对象如果被passed by value，意味着什么? 什么时新type的\\"合法值\\"。 你的新type需要配合某个继承体系吗? 你的新type需要什么样的转换? 什么样的操作符和函数对此新type而言是合理的? 什么样的标准函数应该驳回? 什么是新type的\\"未声明接口\\"? 你的新type有多么一般化? 你真的需要一个新type吗?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-13T13:26:57.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-13T13:26:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 19 设置class犹如设计type\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-13T13:26:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683984417000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-19.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 19 设置class犹如设计type</h1>\\n<p>哎，该讲也是一个非常宽泛的话题。需要程序员在工作中不断积累。作者在本节中也没有举任何的例子，本节的话题实在太大， 本人的建议就是去多看看优秀的开源项目， 看看别人是如何设计类的，看的多了自然就会有进步。</p>\\n<h2> 分析</h2>\\n<p>当你需要设计一个新的type时，你可以思考下面的一些问题。</p>\\n<ul>\\n<li>新type的对象应该如何被创建和销毁</li>\\n<li>对象的初始化和对象的复制应该有什么样的差别。</li>\\n<li>新type的对象如果被passed by value，意味着什么?</li>\\n<li>什么时新type的\\"合法值\\"。</li>\\n<li>你的新type需要配合某个继承体系吗?</li>\\n<li>你的新type需要什么样的转换?</li>\\n<li>什么样的操作符和函数对此新type而言是合理的?</li>\\n<li>什么样的标准函数应该驳回?</li>\\n<li>什么是新type的\\"未声明接口\\"?</li>\\n<li>你的新type有多么一般化?</li>\\n<li>你真的需要一个新type吗?</li>\\n</ul>","autoDesc":true}');export{e as data};
