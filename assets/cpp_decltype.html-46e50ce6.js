const n=JSON.parse('{"key":"v-40696b34","path":"/posts/Program_language/cpp/cpp_decltype.html","title":"decltype","lang":"zh-CN","frontmatter":{"description":"decltype 左值表达式有哪些? ++操作 class Test { public: Test(int i): value_(i){} int value() {return value_}; Test&amp; operator++() { ++value_; } Test operator++(int){ Test ret(value_); ++value_; return ret } private: int value_; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_decltype.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"decltype"}],["meta",{"property":"og:description","content":"decltype 左值表达式有哪些? ++操作 class Test { public: Test(int i): value_(i){} int value() {return value_}; Test&amp; operator++() { ++value_; } Test operator++(int){ Test ret(value_); ++value_; return ret } private: int value_; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-18T01:39:20.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-18T01:39:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"decltype\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T01:39:20.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1694496008000,"updatedTime":1695001160000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.85,"words":255},"filePathRelative":"posts/Program_language/cpp/cpp_decltype.md","localizedDate":"2023年9月12日","excerpt":"<h1> decltype</h1>\\n<p>左值表达式有哪些?</p>\\n<ul>\\n<li>++操作</li>\\n</ul>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Test</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token function\\">value_</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">return</span> value_<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    Test<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token operator\\">++</span>value_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    Test <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        Test <span class=\\"token function\\">ret</span><span class=\\"token punctuation\\">(</span>value_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token operator\\">++</span>value_<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> ret\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> value_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
