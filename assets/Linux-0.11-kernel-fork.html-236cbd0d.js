import{_ as n,V as s,W as a,a0 as p}from"./framework-c954d91f.js";const t={},e=p(`<h1 id="linux-0-11-kernel目录fork-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录fork-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录fork.c详解</h1><p>fork.c中主要实现内核对于创建新的进程的行为。其中copy_process是其最和新的函数。</p><h2 id="copy-process" tabindex="-1"><a class="header-anchor" href="#copy-process" aria-hidden="true">#</a> copy_process</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">copy_process</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">long</span> ebp<span class="token punctuation">,</span><span class="token keyword">long</span> edi<span class="token punctuation">,</span><span class="token keyword">long</span> esi<span class="token punctuation">,</span><span class="token keyword">long</span> gs<span class="token punctuation">,</span><span class="token keyword">long</span> none<span class="token punctuation">,</span>
		<span class="token keyword">long</span> ebx<span class="token punctuation">,</span><span class="token keyword">long</span> ecx<span class="token punctuation">,</span><span class="token keyword">long</span> edx<span class="token punctuation">,</span>
		<span class="token keyword">long</span> fs<span class="token punctuation">,</span><span class="token keyword">long</span> es<span class="token punctuation">,</span><span class="token keyword">long</span> ds<span class="token punctuation">,</span>
		<span class="token keyword">long</span> eip<span class="token punctuation">,</span><span class="token keyword">long</span> cs<span class="token punctuation">,</span><span class="token keyword">long</span> eflags<span class="token punctuation">,</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> ss<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是从old进程中复制出一个new进程。</p><p>首先在内存中分配了一个空闲页用于存储进程的PCB，即task_struct结构。并将该PCB放入了PCB的数组中。</p><p>最后将old进程的PCB内容先直接拷贝给new进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span>
task<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>	
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>current<span class="token punctuation">;</span>	<span class="token comment">/* NOTE! this doesn&#39;t copy the supervisor stack */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段就是将继承来的PCB结构进行适当的修改， 详细解释见注释。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>p<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span><span class="token comment">//设置进程状态为不可被中断</span>
p<span class="token operator">-&gt;</span>pid <span class="token operator">=</span> last_pid<span class="token punctuation">;</span><span class="token comment">//last_pid为find_empty_process找到的没有被使用的pid值， 将其设置给新的进程</span>
p<span class="token operator">-&gt;</span>father <span class="token operator">=</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span><span class="token comment">//设置该进程的父进程</span>
p<span class="token operator">-&gt;</span>counter <span class="token operator">=</span> p<span class="token operator">-&gt;</span>priority<span class="token punctuation">;</span><span class="token comment">//设置该进程的时间片， 值等于其优先级的值。</span>
p<span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//alarm定时的时间</span>
p<span class="token operator">-&gt;</span>leader <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">//是否是进程组的leader</span>
p<span class="token operator">-&gt;</span>utime <span class="token operator">=</span> p<span class="token operator">-&gt;</span>stime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//用户态运行时间和和核心态运行时间</span>
p<span class="token operator">-&gt;</span>cutime <span class="token operator">=</span> p<span class="token operator">-&gt;</span>cstime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//子进程用户态运行时间和核心态运行时间。</span>
p<span class="token operator">-&gt;</span>start_time <span class="token operator">=</span> jiffies<span class="token punctuation">;</span><span class="token comment">//进程的开始时间设置为系统的滴答数。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面一段是设置PCB中有关TSS寄存器的值。下面也通过注释进行详解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>back_link <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>esp0 <span class="token operator">=</span> PAGE_SIZE <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span><span class="token comment">//进程的内核栈栈顶指针</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ss0 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span><span class="token comment">//内核栈的段选择符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="" alt="内核栈的示意图" tabindex="0" loading="lazy"><figcaption>内核栈的示意图</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>eip <span class="token operator">=</span> eip<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>eflags <span class="token operator">=</span> eflags<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>eax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ecx <span class="token operator">=</span> ecx<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>edx <span class="token operator">=</span> edx<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ebx <span class="token operator">=</span> ebx<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>esp <span class="token operator">=</span> esp<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ebp <span class="token operator">=</span> ebp<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>esi <span class="token operator">=</span> esi<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>edi <span class="token operator">=</span> edi<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>es <span class="token operator">=</span> es <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>     
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>cs <span class="token operator">=</span> cs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ss <span class="token operator">=</span> ss <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ds <span class="token operator">=</span> ds <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>fs <span class="token operator">=</span> fs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>gs <span class="token operator">=</span> gs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这里进程内存的拷贝， 实际上确定进行进程新的线性地址， 并进行页表的拷贝。详见本文中copy_mem的讲解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_mem</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    task<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">free_page</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面主要处理对进程打开的文件的引用计数增加1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_OPEN<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">=</span>p<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        f<span class="token operator">-&gt;</span>f_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pwd<span class="token punctuation">)</span>
    current<span class="token operator">-&gt;</span>pwd<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span>
    current<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span>
    current<span class="token operator">-&gt;</span>executable<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里设置GDT表中tss和ldt描述符的内容。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">set_tss_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span><span class="token punctuation">(</span>nr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>tss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set_ldt_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span><span class="token punctuation">(</span>nr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>FIRST_LDT_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span>	<span class="token comment">/* do this last, just in case */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="copy-mem" tabindex="-1"><a class="header-anchor" href="#copy-mem" aria-hidden="true">#</a> copy_mem</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">copy_mem</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>code_limit<span class="token operator">=</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data_limit<span class="token operator">=</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
old_code_base <span class="token operator">=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
old_data_base <span class="token operator">=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>old_data_base <span class="token operator">!=</span> old_code_base<span class="token punctuation">)</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;We don&#39;t support separate I&amp;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>data_limit <span class="token operator">&lt;</span> code_limit<span class="token punctuation">)</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Bad data_limit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//确立新进程的代码段地址， Linux-0.11的线性地址是按照64M划分的，所以进程号nr的线性地址的起始位置是nr* 0x4000000</span>
new_data_base <span class="token operator">=</span> new_code_base <span class="token operator">=</span> nr <span class="token operator">*</span> <span class="token number">0x4000000</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>start_code <span class="token operator">=</span> new_code_base<span class="token punctuation">;</span>  <span class="token comment">// 设置该位置到PCB中</span>
<span class="token function">set_base</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>new_code_base<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置代码段的地址</span>
<span class="token function">set_base</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>new_data_base<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置数据段的地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段就是进行页表的拷贝。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_page_tables</span><span class="token punctuation">(</span>old_data_base<span class="token punctuation">,</span>new_data_base<span class="token punctuation">,</span>data_limit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;free_page_tables: from copy_mem\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free_page_tables</span><span class="token punctuation">(</span>new_data_base<span class="token punctuation">,</span>data_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="verify-area" tabindex="-1"><a class="header-anchor" href="#verify-area" aria-hidden="true">#</a> verify_area</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> addr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>start <span class="token operator">&amp;=</span> <span class="token number">0xfffff000</span><span class="token punctuation">;</span><span class="token comment">//start为逻辑地址的以4K为划分的起始地址</span>
start <span class="token operator">+=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前进程在线性地址中数据段的起始地址， 加起来就是该逻辑地址转化到了线性地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面进行写保护验证， 如果页面不可以写，则进行页面复制。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    size <span class="token operator">-=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
    <span class="token function">write_verify</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    start <span class="token operator">+=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-kernel-fork.html.vue"]]);export{r as default};
