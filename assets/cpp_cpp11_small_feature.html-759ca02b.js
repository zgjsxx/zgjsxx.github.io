const t=JSON.parse('{"key":"v-03bd7406","path":"/posts/Program_language/cpp/cpp_cpp11_small_feature.html","title":"c++14的新增的小的特性","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++"],"description":"c++14的新增的小的特性 std::decay 类型退化： 去除const和volatile 去除引用 数组退化为指针 函数退化为指针 如果类型T是一个函数类型，那么从函数到指针的类型转换将被应用，并且T的衰变类型等同于： add_pointer&lt;T&gt;::type 如果类型T是一个数组类型，那么从数组到指针的类型转换将被应用，并且T的衰变类型等同于： add_pointer&lt;remove_extent&lt;remove_reference&lt;T&gt;::type&gt;::type&gt;::type","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_cpp11_small_feature.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++14的新增的小的特性"}],["meta",{"property":"og:description","content":"c++14的新增的小的特性 std::decay 类型退化： 去除const和volatile 去除引用 数组退化为指针 函数退化为指针 如果类型T是一个函数类型，那么从函数到指针的类型转换将被应用，并且T的衰变类型等同于： add_pointer&lt;T&gt;::type 如果类型T是一个数组类型，那么从数组到指针的类型转换将被应用，并且T的衰变类型等同于： add_pointer&lt;remove_extent&lt;remove_reference&lt;T&gt;::type&gt;::type&gt;::type"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-14T08:39:26.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2023-06-14T08:39:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++14的新增的小的特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-14T08:39:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"std::decay","slug":"std-decay","link":"#std-decay","children":[]}],"git":{"createdTime":1686731966000,"updatedTime":1686731966000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.78,"words":233},"filePathRelative":"posts/Program_language/cpp/cpp_cpp11_small_feature.md","localizedDate":"2023年6月14日","excerpt":"<h1> c++14的新增的小的特性</h1>\\n<h2> std::decay</h2>\\n<p>类型退化：</p>\\n<ul>\\n<li>去除const和volatile</li>\\n<li>去除引用</li>\\n<li>数组退化为指针</li>\\n<li>函数退化为指针</li>\\n</ul>\\n<p>如果类型T是一个函数类型，那么从函数到指针的类型转换将被应用，并且T的衰变类型等同于：</p>\\n<p><code>add_pointer&lt;T&gt;::type</code></p>\\n<p>如果类型T是一个数组类型，那么从数组到指针的类型转换将被应用，并且T的衰变类型等同于：</p>\\n<p><code>add_pointer&lt;remove_extent&lt;remove_reference&lt;T&gt;::type&gt;::type&gt;::type</code></p>","autoDesc":true}');export{t as data};
