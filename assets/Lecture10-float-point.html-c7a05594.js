const e=JSON.parse('{"key":"v-da73e966","path":"/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture10-float-point.html","title":"第十讲：浮点数","lang":"zh-CN","frontmatter":{"category":["汇编语言"],"description":"第十讲：浮点数 由于历史原因，x86-64 有两个独立的浮点系统，它们之间的功能有一些重叠，但也有一些不同的功能。这两个系统是： 旧的 x87 协处理器指令集 较新的 XMM 矢量处理指令 无论哪种方式，浮点运算都使用一组完全不同的寄存器以及一组完全不同的操作。浮点值以二进制表示，其方式与有符号或无符号值完全不同。 浮点数的表示方法 我们可以使用三种浮点大小/表示形式，分别是 float（32 位）、double（64 位）和 long double（80 位，存储为 128 位，有 48 个未使用的填充位）。表示形式相似，唯一的区别是专用于数字每个部分的位数。实际的浮点格式（哪位执行什么操作）由名为 IEEE-754 的国际标准定义。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture10-float-point.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"第十讲：浮点数"}],["meta",{"property":"og:description","content":"第十讲：浮点数 由于历史原因，x86-64 有两个独立的浮点系统，它们之间的功能有一些重叠，但也有一些不同的功能。这两个系统是： 旧的 x87 协处理器指令集 较新的 XMM 矢量处理指令 无论哪种方式，浮点运算都使用一组完全不同的寄存器以及一组完全不同的操作。浮点值以二进制表示，其方式与有符号或无符号值完全不同。 浮点数的表示方法 我们可以使用三种浮点大小/表示形式，分别是 float（32 位）、double（64 位）和 long double（80 位，存储为 128 位，有 48 个未使用的填充位）。表示形式相似，唯一的区别是专用于数字每个部分的位数。实际的浮点格式（哪位执行什么操作）由名为 IEEE-754 的国际标准定义。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-12T02:31:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-12T02:31:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十讲：浮点数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-12T02:31:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"浮点数的表示方法","slug":"浮点数的表示方法","link":"#浮点数的表示方法","children":[]},{"level":2,"title":"二进制的表示","slug":"二进制的表示","link":"#二进制的表示","children":[]},{"level":2,"title":"尾数","slug":"尾数","link":"#尾数","children":[]},{"level":2,"title":"指数","slug":"指数","link":"#指数","children":[]},{"level":2,"title":"64位的表示方法","slug":"_64位的表示方法","link":"#_64位的表示方法","children":[]},{"level":2,"title":"x87浮点数指令","slug":"x87浮点数指令","link":"#x87浮点数指令","children":[{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"浮点寄存器栈","slug":"浮点寄存器栈","link":"#浮点寄存器栈","children":[]},{"level":3,"title":"加载","slug":"加载","link":"#加载","children":[]},{"level":3,"title":"写入memory","slug":"写入memory","link":"#写入memory","children":[]},{"level":3,"title":"算术运算","slug":"算术运算","link":"#算术运算","children":[]},{"level":3,"title":"浮点函数参数","slug":"浮点函数参数","link":"#浮点函数参数","children":[]},{"level":3,"title":"浮点数的比较","slug":"浮点数的比较","link":"#浮点数的比较","children":[]},{"level":3,"title":"数学运算","slug":"数学运算","link":"#数学运算","children":[]},{"level":3,"title":"在 x87 和 XMM 模式之间切换","slug":"在-x87-和-xmm-模式之间切换","link":"#在-x87-和-xmm-模式之间切换","children":[]}]},{"level":2,"title":"XMM 浮点指令","slug":"xmm-浮点指令","link":"#xmm-浮点指令","children":[{"level":3,"title":"寄存器","slug":"寄存器","link":"#寄存器","children":[]},{"level":3,"title":"移动浮点值","slug":"移动浮点值","link":"#移动浮点值","children":[]},{"level":3,"title":"在 .data 中存储浮点值","slug":"在-data-中存储浮点值","link":"#在-data-中存储浮点值","children":[]},{"level":3,"title":"浮点转换","slug":"浮点转换","link":"#浮点转换","children":[]},{"level":3,"title":"算术","slug":"算术","link":"#算术","children":[]},{"level":3,"title":"浮点比较","slug":"浮点比较","link":"#浮点比较","children":[]},{"level":3,"title":"函数的浮点参数","slug":"函数的浮点参数","link":"#函数的浮点参数","children":[]}]},{"level":2,"title":"浮点数的其他知识点","slug":"浮点数的其他知识点","link":"#浮点数的其他知识点","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[]}],"git":{"createdTime":1709629879000,"updatedTime":1710210664000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":8}]},"readingTime":{"minutes":24.57,"words":7372},"filePathRelative":"posts/Program_language/Assembly_language/fullerton_CSci241/Lecture10-float-point.md","localizedDate":"2024年3月5日","excerpt":"<h1> 第十讲：浮点数</h1>\\n<p>由于历史原因，x86-64 有两个独立的浮点系统，它们之间的功能有一些重叠，但也有一些不同的功能。这两个系统是：</p>\\n<ul>\\n<li>旧的 x87 协处理器指令集</li>\\n<li>较新的 XMM 矢量处理指令</li>\\n</ul>\\n<p>无论哪种方式，浮点运算都使用一组完全不同的寄存器以及一组完全不同的操作。浮点值以二进制表示，其方式与有符号或无符号值完全不同。</p>\\n<h2> 浮点数的表示方法</h2>\\n<p>我们可以使用三种浮点大小/表示形式，分别是 <code>float</code>（32 位）、<code>double</code>（64 位）和 <code>long double</code>（80 位，存储为 128 位，有 48 个未使用的填充位）。表示形式相似，唯一的区别是专用于数字每个部分的位数。实际的浮点格式（哪位执行什么操作）由名为 IEEE-754 的国际标准定义。</p>","autoDesc":true}');export{e as data};
