import{_ as s,V as e,W as p,a0 as a,X as n,Y as t}from"./framework-c954d91f.js";const i={},l=a(`<h1 id="makefile简介" tabindex="-1"><a class="header-anchor" href="#makefile简介" aria-hidden="true">#</a> makefile简介</h1><h1 id="makefile规则" tabindex="-1"><a class="header-anchor" href="#makefile规则" aria-hidden="true">#</a> makefile规则</h1><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">targets</span> <span class="token punctuation">:</span> prerequisites
    command
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">targets</span> <span class="token punctuation">:</span> prerequisites <span class="token punctuation">;</span> command
    command
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>command是命令行，如果其不与“target:prerequisites”在一行，那么，必须以 Tab 键开头，如果和prerequisites在一行，那么可以用分号做为分隔</p><h1 id="使用-简化书写" tabindex="-1"><a class="header-anchor" href="#使用-简化书写" aria-hidden="true">#</a> 使用$@ $&lt; $^ 简化书写</h1><p>$@ 表示目标文件</p><p>$^ 表示所有的依赖文件</p><p>$&lt; 表示第一个依赖文件</p><p>例如： main: main.cpp add.cpp</p>`,11),c=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"@"),n("mtext",null,"指的就是"),n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"i"),n("mi",null,"n"),n("mtext",null,"，")]),n("annotation",{encoding:"application/x-tex"},"@指的就是main，")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},"@"),n("span",{class:"mord cjk_fallback"},"指的就是"),n("span",{class:"mord mathnormal"},"main"),n("span",{class:"mord cjk_fallback"},"，")])])]),t("<指的就是main.cpp, $^指的就是main.cpp add.cpp")],-1),o=a(`<p>文件结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── main
├── main.cpp
└── Makefile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.cpp如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Makefile内容如下:</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">main</span><span class="token punctuation">:</span>main.cpp
        g++ <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
<span class="token target symbol">.PHONY clean</span><span class="token punctuation">:</span>
        rm -rf main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="使用vpath和vpath指定依赖文件搜索路径" tabindex="-1"><a class="header-anchor" href="#使用vpath和vpath指定依赖文件搜索路径" aria-hidden="true">#</a> 使用vpath和VPATH指定依赖文件搜索路径</h1><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── inc
│   └── add.hpp
├── Makefile
└── src
    ├── add.cpp
    └── main.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;add.hpp&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">my_add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>add.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;add.hpp&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">my_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>add.hpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">my_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Makefile</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>VPATH <span class="token operator">=</span> src<span class="token punctuation">:</span>inc

<span class="token target symbol">test</span> <span class="token punctuation">:</span> main.o add.o
        g++ -o main main.o add.o

<span class="token target symbol">main.o</span> <span class="token punctuation">:</span> main.cpp add.hpp
        g++ -c <span class="token variable">$&lt;</span> -I inc/

<span class="token target symbol">add.o</span> <span class="token punctuation">:</span> add.cpp add.hpp
        g++ -c <span class="token variable">$&lt;</span> -I inc/

<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
        rm -rf *.o main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组合使用VPATH和$&lt;之后， makefile自动推导出了语句，在main.cpp前加上了src前缀</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g++ <span class="token parameter variable">-c</span> src/main.cpp <span class="token parameter variable">-I</span> inc/
g++ <span class="token parameter variable">-c</span> src/add.cpp <span class="token parameter variable">-I</span> inc/
g++ <span class="token parameter variable">-o</span> main main.o add.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="wildcard-patsubst" tabindex="-1"><a class="header-anchor" href="#wildcard-patsubst" aria-hidden="true">#</a> wildcard，patsubst</h1><p>$(wildcard *.c) 可以获取工作目录下的所有.c文件列表</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.c,%.o,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> *.c<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先使用“wildcard”函数获取工作目录下的.c文件列表；之后将列表中所有文件名的后缀.c替换为.o。这样我们就可以得到在当前目录可生成的.o文件列表。</p><h1 id="静态模式" tabindex="-1"><a class="header-anchor" href="#静态模式" aria-hidden="true">#</a> 静态模式</h1><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">&lt;targets ...&gt;</span> <span class="token punctuation">:</span> &lt;target-pattern&gt; <span class="token punctuation">:</span> &lt;prereq-patterns ...&gt;
    &lt;commands&gt;
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>objects <span class="token operator">=</span> foo.o bar.o

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(objects)</span><span class="token punctuation">:</span> %.o<span class="token punctuation">:</span> %.c
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">foo.o</span> <span class="token punctuation">:</span> foo.c
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> foo.c -o foo.o
<span class="token target symbol">bar.o</span> <span class="token punctuation">:</span> bar.c
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> bar.c -o bar.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目录结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── add.cpp
├── main.cpp
└── Makefile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用wildcard，patsubst函数以及静态模式来书写makefile</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>OBJS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.cpp,%.o,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> *.cpp<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(OBJS)</span><span class="token punctuation">:</span> %o <span class="token punctuation">:</span> %cpp
        g++ -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>g++ -c add.cpp -o add.o
g++ -c main.cpp -o main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="makefile自动生成依赖" tabindex="-1"><a class="header-anchor" href="#makefile自动生成依赖" aria-hidden="true">#</a> makefile自动生成依赖</h1><h1 id="makefile打印日志" tabindex="-1"><a class="header-anchor" href="#makefile打印日志" aria-hidden="true">#</a> makefile打印日志</h1><p>$(info Hello world)</p><h1 id="makefile中的-和" tabindex="-1"><a class="header-anchor" href="#makefile中的-和" aria-hidden="true">#</a> makefile中的@和-</h1><p>1、如果makefile执行的命令前面加了@符号，则不显示命令本身而只显示结果。</p><p>2、通常make执行的命令出错（该命令的退出状态非0）就立刻终止，不再执行后续命令，但是如果命令前面加上“-”，即使这条命令出错，makefile也会继续执行后续命令的。</p><h1 id="综合运用上述技巧" tabindex="-1"><a class="header-anchor" href="#综合运用上述技巧" aria-hidden="true">#</a> 综合运用上述技巧</h1><p>在最后的这个例子中， 我们将综合运用上述的一些技巧去完成模块的构建。</p><p>该目录中有inc和src两个子目录， 其中inc目录中包含了add.hpp和sub.hpp两个头文件。</p><p>在src目录中， 包含一个main.cpp的入口函数所在的文件， 还包含一个math子目录，math子目录中包含了add.cpp和sub.cpp两个文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── inc
│   ├── add.hpp
│   └── sub.hpp
├── Makefile
└── src
    ├── main.cpp
    └── math
        ├── add.cpp
        └── sub.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是这些文件中的内容， 案例主要关注Makefile的编写， 因此源文件的代码都较为简单。</p><p>add.hpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">my_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>sub.hpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">my_sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>main.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;add.hpp&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sub.hpp&quot;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">my_add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; + &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">my_sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>add.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;add.hpp&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">my_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sub.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sub.hpp&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">my_sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是Makefile中的内容:</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>VPATH <span class="token operator">=</span> src<span class="token punctuation">:</span>src/math<span class="token punctuation">:</span>inc

CXX<span class="token operator">=</span>g++
MODULE<span class="token operator">=</span>demo5
SOURCE_PATH <span class="token operator">+=</span> ./src \\
               ./src/math
TEMP_PATH<span class="token operator">=</span>./tmp
TARGET<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/demo5

CXXFLAGS<span class="token operator">+=</span>-I./inc
COMPILEFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span>


CPP_SOURCES <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">foreach</span> d,<span class="token variable">$</span><span class="token punctuation">(</span>SOURCE_PATH<span class="token punctuation">)</span>,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> <span class="token variable">$</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>/*.cpp<span class="token punctuation">)</span> <span class="token punctuation">)</span>
CPP_OBJS <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.cpp, <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.o, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
CPP_DEPS <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.cpp, <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.d, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
OBJS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_OBJS<span class="token punctuation">)</span>


<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_DEPS<span class="token punctuation">)</span>
        <span class="token operator">@</span>echo <span class="token string">&quot;generate final target&quot;</span>
        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(CPP_OBJS)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.o <span class="token punctuation">:</span> %.cpp
        -<span class="token operator">@</span>mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>
        <span class="token operator">@</span>echo [<span class="token variable">$</span><span class="token punctuation">(</span>MODULE<span class="token punctuation">)</span> CXX] <span class="token variable">$&lt;</span>
        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -c  <span class="token variable">$</span><span class="token punctuation">(</span>COMPILEFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>

<span class="token target symbol"><span class="token variable">$</span>(CPP_DEPS)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.d<span class="token punctuation">:</span> %.cpp
        -<span class="token operator">@</span>mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>
        -<span class="token operator">@</span>echo -n <span class="token string">&quot;$(TEMP_PATH)/&quot;</span> &gt; <span class="token variable">$@</span>
        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -MM <span class="token variable">$</span><span class="token punctuation">(</span>COMPILEFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> &gt;&gt; <span class="token variable">$@</span>

<span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_DEPS<span class="token punctuation">)</span>

<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
        rm -rf <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/*.o  <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面一一分析。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>VPATH <span class="token operator">=</span> src<span class="token punctuation">:</span>src/math<span class="token punctuation">:</span>inc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先使用VPATH依赖文件存在的路径， 以便下面自动推导文件的相对路径。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>CXX<span class="token operator">=</span>g++
MODULE<span class="token operator">=</span>demo5
SOURCE_PATH <span class="token operator">+=</span> ./src \\
               ./src/math
TEMP_PATH<span class="token operator">=</span>./tmp
TARGET<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/demo5

CXXFLAGS<span class="token operator">+=</span>-I./inc
COMPILEFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了一些变量，包括源文件的路径， 目标文件存放的位置， 编译参数等等。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>CPP_SOURCES <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">foreach</span> d,<span class="token variable">$</span><span class="token punctuation">(</span>SOURCE_PATH<span class="token punctuation">)</span>,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> <span class="token variable">$</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>/*.cpp<span class="token punctuation">)</span> <span class="token punctuation">)</span>
CPP_OBJS <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.cpp, <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.o, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
CPP_DEPS <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.cpp, <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.d, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里首先使用foreach去遍历SOURCE_PATH路径下的所有的.cpp文件</p><p>然后将.cpp文件做字符串替换， 替换为.o， 同时增加了存放的路径， 这里使用了patsubst做字符串替换， 并使用了notdir去获取文件名。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_DEPS<span class="token punctuation">)</span>
        <span class="token operator">@</span>echo <span class="token string">&quot;generate final target&quot;</span>
        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里展开便是</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">demo5</span><span class="token punctuation">:</span> main.o sub.o add.o main.d sub.d main.d
    g++ -o demo5 main.o sub.o add.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol"><span class="token variable">$</span>(CPP_OBJS)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.o <span class="token punctuation">:</span> %.cpp
        -<span class="token operator">@</span>mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>
        <span class="token operator">@</span>echo [<span class="token variable">$</span><span class="token punctuation">(</span>MODULE<span class="token punctuation">)</span> CXX] <span class="token variable">$&lt;</span>
        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -c  <span class="token variable">$</span><span class="token punctuation">(</span>COMPILEFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里展开便是</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">main.o</span><span class="token punctuation">:</span> main.cpp
    g++ -c main.cpp -o tmp/main.o -I./inc
<span class="token target symbol">add.o</span><span class="token punctuation">:</span> add.cpp
    g++ -c add.cpp -o tmp/add.o -I./inc
<span class="token target symbol">sub.o</span><span class="token punctuation">:</span> sub.cpp
    g++ -c sub.cpp -o tmp/sub.o -I./inc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该步骤就是生成了.o文件</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol"><span class="token variable">$</span>(CPP_DEPS)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/%.d<span class="token punctuation">:</span> %.cpp
        -<span class="token operator">@</span>mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>
        -<span class="token operator">@</span>echo -n <span class="token string">&quot;$(TEMP_PATH)/&quot;</span> &gt; <span class="token variable">$@</span>
        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -MM <span class="token variable">$</span><span class="token punctuation">(</span>COMPILEFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> &gt;&gt; <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该步骤使用了g++ -MM参数用于自动生成依赖文件， 以便于当头文件修改时，也可以自动编译</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
        rm -rf <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/*.o  <span class="token variable">$</span><span class="token punctuation">(</span>TEMP_PATH<span class="token punctuation">)</span>/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后这个模块用于清除生成的文件。</p>`,74),u=[l,c,o];function d(r,k){return e(),p("div",null,u)}const m=s(i,[["render",d],["__file","makefile-knowledge.html.vue"]]);export{m as default};
