const e=JSON.parse('{"key":"v-3cd1f112","path":"/posts/Program_language/cpp/cpp20/cpp_cpp20_module.html","title":"c++20 module的理解","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++"],"description":"c++20 module的理解 在c++20之前，在一个模块中(.cpp)想要获取别的模块的声明， 就需要使用#include去包含其他模块的头文件。 c++20引入了module关键字，使得c++拥有了类似于java和python的包管理机制，本文就来讲解一下module这个语法糖。 include头文件与module方式的对比 #include头文件有下面这些负面影响： 低效：头文件的本职工作是提供前置声明，而提供前置声明的方式采用了文本拷贝，文本拷贝过程不带有语法分析，会一股脑将需要的、不需要的声明全部拷贝到源文件中。 传递性：最底层的头文件中宏、变量等实体的可见性，可以通过中间头文件“透传”给最上层的头文件，这种透传会带来很多麻烦。 降低编译速度：加入 a.h 被三个模块包含，则 a 会被展开三次、编译三次。 顺序相关：程序的行为受头文件的包含顺影响，也受是否包含某一个头文件影响，在 C++ 中尤为严重（重载）。 不确定性：同一个头文件在不同的源文件中可能表现出不同的行为，导致这些不同的原因，可能源自源文件（比如该源文件包含的其他头文件、该源文件中定义的宏等），也可能源自编译选项。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp20/cpp_cpp20_module.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++20 module的理解"}],["meta",{"property":"og:description","content":"c++20 module的理解 在c++20之前，在一个模块中(.cpp)想要获取别的模块的声明， 就需要使用#include去包含其他模块的头文件。 c++20引入了module关键字，使得c++拥有了类似于java和python的包管理机制，本文就来讲解一下module这个语法糖。 include头文件与module方式的对比 #include头文件有下面这些负面影响： 低效：头文件的本职工作是提供前置声明，而提供前置声明的方式采用了文本拷贝，文本拷贝过程不带有语法分析，会一股脑将需要的、不需要的声明全部拷贝到源文件中。 传递性：最底层的头文件中宏、变量等实体的可见性，可以通过中间头文件“透传”给最上层的头文件，这种透传会带来很多麻烦。 降低编译速度：加入 a.h 被三个模块包含，则 a 会被展开三次、编译三次。 顺序相关：程序的行为受头文件的包含顺影响，也受是否包含某一个头文件影响，在 C++ 中尤为严重（重载）。 不确定性：同一个头文件在不同的源文件中可能表现出不同的行为，导致这些不同的原因，可能源自源文件（比如该源文件包含的其他头文件、该源文件中定义的宏等），也可能源自编译选项。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T08:12:39.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2024-02-27T08:12:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++20 module的理解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-27T08:12:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"include头文件与module方式的对比","slug":"include头文件与module方式的对比","link":"#include头文件与module方式的对比","children":[]},{"level":2,"title":"c++20 module 的 Helloworld","slug":"c-20-module-的-helloworld","link":"#c-20-module-的-helloworld","children":[]},{"level":2,"title":"c++20 module管理","slug":"c-20-module管理","link":"#c-20-module管理","children":[{"level":3,"title":"export关键字","slug":"export关键字","link":"#export关键字","children":[]},{"level":3,"title":"import关键字","slug":"import关键字","link":"#import关键字","children":[]},{"level":3,"title":"module关键字","slug":"module关键字","link":"#module关键字","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1709021559000,"updatedTime":1709021559000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":7.38,"words":2214},"filePathRelative":"posts/Program_language/cpp/cpp20/cpp_cpp20_module.md","localizedDate":"2024年2月27日","excerpt":"<h1> c++20 module的理解</h1>\\n<p>在c++20之前，在一个模块中(.cpp)想要获取别的模块的声明， 就需要使用<code>#include</code>去包含其他模块的头文件。 c++20引入了module关键字，使得c++拥有了类似于java和python的包管理机制，本文就来讲解一下module这个语法糖。</p>\\n<h2> include头文件与module方式的对比</h2>\\n<p><code>#include</code>头文件有下面这些负面影响：</p>\\n<ul>\\n<li>低效：头文件的本职工作是提供前置声明，而提供前置声明的方式采用了文本拷贝，文本拷贝过程不带有语法分析，会一股脑将需要的、不需要的声明全部拷贝到源文件中。</li>\\n<li>传递性：最底层的头文件中宏、变量等实体的可见性，可以通过中间头文件“透传”给最上层的头文件，这种透传会带来很多麻烦。</li>\\n<li>降低编译速度：加入 a.h 被三个模块包含，则 a 会被展开三次、编译三次。</li>\\n<li>顺序相关：程序的行为受头文件的包含顺影响，也受是否包含某一个头文件影响，在 C++ 中尤为严重（重载）。</li>\\n<li>不确定性：同一个头文件在不同的源文件中可能表现出不同的行为，导致这些不同的原因，可能源自源文件（比如该源文件包含的其他头文件、该源文件中定义的宏等），也可能源自编译选项。</li>\\n</ul>","autoDesc":true}');export{e as data};
