const t=JSON.parse('{"key":"v-467383b4","path":"/posts/Program_language/cpp/effective-cpp-13.html","title":"effective c++ 13 以对象管理资源","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 13 以对象管理资源 总结 为防止资源泄露，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源。 两个常被使用的RAII class分别是tr1::shared_ptr和auto_ptr。(这个点可以忽略，对于更新的c++标准，这些类是std::shared_ptr, std::unique_ptr 和 std::weak_ptr)。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp-13.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 13 以对象管理资源"}],["meta",{"property":"og:description","content":"effective c++ 13 以对象管理资源 总结 为防止资源泄露，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源。 两个常被使用的RAII class分别是tr1::shared_ptr和auto_ptr。(这个点可以忽略，对于更新的c++标准，这些类是std::shared_ptr, std::unique_ptr 和 std::weak_ptr)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-08T02:28:15.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-08T02:28:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 13 以对象管理资源\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-08T02:28:15.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683512895000,"updatedTime":1683512895000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.33,"words":100},"filePathRelative":"posts/Program_language/cpp/effective-cpp-13.md","localizedDate":"2023年5月8日","excerpt":"<h1> effective c++ 13 以对象管理资源</h1>\\n<h2> 总结</h2>\\n<ul>\\n<li>为防止资源泄露，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源。</li>\\n<li>两个常被使用的RAII class分别是tr1::shared_ptr和auto_ptr。(这个点可以忽略，对于更新的c++标准，这些类是std::shared_ptr, std::unique_ptr 和 std::weak_ptr)。</li>\\n</ul>\\n","autoDesc":true}');export{t as data};
