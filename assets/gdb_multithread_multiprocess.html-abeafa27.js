import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const e={},p=t(`<h1 id="gdb的多进程多线程调试技巧" tabindex="-1"><a class="header-anchor" href="#gdb的多进程多线程调试技巧" aria-hidden="true">#</a> gdb的多进程多线程调试技巧</h1><p>前面我们了解过了gdb使用过程中的一些基础指令，在实际的开发过程中，程序通常都是多进程，多线程的。本节就将针对多线程和多进程场景下，如何使用gdb进行调试进行总结。</p><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h2><h2 id="多线程调试常用命令" tabindex="-1"><a class="header-anchor" href="#多线程调试常用命令" aria-hidden="true">#</a> 多线程调试常用命令</h2><table><thead><tr><th>命令</th><th>效果</th></tr></thead><tbody><tr><td><code>info threads</code></td><td>显示当前可调试的所有线程，每个线程会有一个id，带有*标记的是当前调试的线程。</td></tr><tr><td><code>thread &lt;ID&gt;</code></td><td>切换当前调试线程为指定的线程</td></tr><tr><td><code>set scheduler-locking off</code></td><td>不锁定任何线程，也就是所有线程都执行，这是默认值</td></tr><tr><td><code>set scheduler-locking on</code></td><td>只有当前被调试线程会执行</td></tr><tr><td><code>set scheduler-locking on step</code></td><td>在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行</td></tr><tr><td><code>thread apply all command</code></td><td>让所有被调试线程执行GDB命令command</td></tr><tr><td><code>thread apply ID1 ID2 command</code></td><td>让一个或者多个线程执行GDB命令command</td></tr><tr><td><code>break thread_test.c:123</code> thread all</td><td>在所有线程中相应的行上设置断点</td></tr><tr><td><code>set print thread-events</code></td><td>控制是否打印线程启动、退出消息</td></tr></tbody></table><p>在GNU/Linux操作系统上，当GDB检测到有一个新的线程时，你可能会看到下面这样的语句：</p><p>[New Thread 0x41e02940 (LWP 25582)]</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am thread1, my tid is : %lu \\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am thread2, my tid is : %lu \\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">;</span>

    <span class="token comment">//创建两个线程</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//等待进程</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),c=[p];function o(i,d){return s(),a("div",null,c)}const u=n(e,[["render",o],["__file","gdb_multithread_multiprocess.html.vue"]]);export{u as default};
