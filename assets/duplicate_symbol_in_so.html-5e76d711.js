import{_ as p,V as t,W as c,X as n,Y as s,$ as e,a0 as i,F as o}from"./framework-9a29aaa0.js";const l={},u=i(`<h1 id="动态库中包含了相同的符号-行为是怎样的" tabindex="-1"><a class="header-anchor" href="#动态库中包含了相同的符号-行为是怎样的" aria-hidden="true">#</a> 动态库中包含了相同的符号，行为是怎样的？</h1><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>主程序依赖了两个库libA的funcA函数和libB的funcB函数。示意的代码(main.cpp)如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,&quot;</span><span class="token punctuation">,</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>libA示意实现(libA.cpp)如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">subfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">subfunc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>libB示意实现(libB.cpp)如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">subfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">subfunc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见funcA调用了libA中的内部函数subfunc，funcB调用了libB中的内部函数subfunc，这两个subfunc实现不同，但不幸的是名字不小心起得一样了</p><p>这时我们尝试编译并运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g++ <span class="token parameter variable">-fPIC</span> libA.cpp <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libA.so
g++ <span class="token parameter variable">-fPIC</span> libB.cpp <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libB.so
g++ main.cpp libA.so libB.so <span class="token parameter variable">-o</span> main

<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>.
./main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们期望的结果是3,1（funcA和funcB各自调用不同的subfunc实现）， 实际得到的结果是3,3（funcA和funcB都调用了libA中的subfunc实现）</p><p>原因</p><p>我们通过readelf来查看符号：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ readelf <span class="token parameter variable">-a</span> libA.so <span class="token operator">|</span> <span class="token function">grep</span> subfunc
000000200a60  000200000007 R_X86_64_JUMP_SLO 0000000000000708 _Z7subfuncii + <span class="token number">0</span>
     <span class="token number">2</span>: 0000000000000708    <span class="token number">20</span> FUNC    GLOBAL DEFAULT   <span class="token number">10</span> _Z7subfuncii
    <span class="token number">45</span>: 0000000000000708    <span class="token number">20</span> FUNC    GLOBAL DEFAULT   <span class="token number">10</span> _Z7subfuncii
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ readelf <span class="token parameter variable">-a</span> libB.so <span class="token operator">|</span> <span class="token function">grep</span> subfunc 
000000200a60  000200000007 R_X86_64_JUMP_SLO 0000000000000708 _Z7subfuncii + <span class="token number">0</span>
     <span class="token number">2</span>: 0000000000000708    <span class="token number">22</span> FUNC    GLOBAL DEFAULT   <span class="token number">10</span> _Z7subfuncii
    <span class="token number">45</span>: 0000000000000708    <span class="token number">22</span> FUNC    GLOBAL DEFAULT   <span class="token number">10</span> _Z7subfuncii
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见libA和libB里面都有subfunc符号，名字完全一样，而且都是GLOBAL的</p><p>GLOBAL的符号即全局的符号，同名的全局符号会被认为是同一个符号，由于main先加载了libA，得到了libA中的subfunc符号，再加载libB时，就把libB中的subfunc忽略了。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><p>这其实是符号的可见性（Symbol Visibility）问题，既然有GLOBAL符号，那自然会有LOCAL符号，LOCAL的符号只在当前lib可见，全局不可见。</p><p>如何将符号变成LOCAL的呢，最直接的就是加上visibility为hidden的标志，修改后的libA.cpp：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">visibility</span> <span class="token punctuation">(</span><span class="token string">&quot;hidden&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">subfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">subfunc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再重新编译执行，可以得到结果为3,1，成功！这里再查看一下libA的符号：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ readelf <span class="token parameter variable">-a</span> libA.so <span class="token operator">|</span> <span class="token function">grep</span> subfunc
    <span class="token number">40</span>: 00000000000006a8    <span class="token number">20</span> FUNC    LOCAL  DEFAULT   <span class="token number">10</span> _Z7subfuncii
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可见subfunc符号已经变成了LOCAL</p><p>使用objdump对比GLOBAL和LOCAL的区别，可以看出GLOBAL走的是.plt .got.plt动态连接这条路， 而LOCAL直接写死了偏移量。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token number">625</span><span class="token operator">:</span>   e8 <span class="token number">06</span> ff ff ff          callq  <span class="token number">530</span> <span class="token operator">&lt;</span>_Z7subfuncii@plt<span class="token operator">&gt;</span> <span class="token comment">//GLOBAL</span>

<span class="token number">5</span>d5<span class="token operator">:</span>   e8 cf ff ff ff          callq  <span class="token number">5</span>a9 <span class="token operator">&lt;</span>_Z7subfuncii<span class="token operator">&gt;</span>  <span class="token comment">//LOCAL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认LOCAL</strong></p><p>上面的方法可以解决问题，但是，实际情况往往是，libA里面有很多的内部函数，而暴露给外部的只有少数，能不能指定少数符号为GLOBAL，其它的都是LOCAL呢？答案是肯定的，修改libA.cpp如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">subfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">visibility</span> <span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">subfunc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，libA的编译参数需要加上-fvisibility=hidden：</p>`,31),r={href:"http://libA.so",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"就ok",-1),k={href:"https://blog.csdn.net/qq_38350702/article/details/106128157",target:"_blank",rel:"noopener noreferrer"};function b(v,m){const a=o("ExternalLinkIcon");return t(),c("div",null,[u,n("p",null,[s("g++ -fPIC libA.cpp -shared -fvisibility=hidden -o "),n("a",r,[s("libA.so"),e(a)])]),d,n("p",null,[s("原文链接："),n("a",k,[s("https://blog.csdn.net/qq_38350702/article/details/106128157"),e(a)])])])}const g=p(l,[["render",b],["__file","duplicate_symbol_in_so.html.vue"]]);export{g as default};
