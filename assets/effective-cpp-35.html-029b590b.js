const t=JSON.parse('{"key":"v-362d5ca2","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-35.html","title":"effective c++ 35 考虑virtual函数以外的其他选择","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 35 考虑virtual函数以外的其他选择 总结 使用non-virtual interface(NVI)手法， 那么是Template Method设计模式的一种特殊形式。它以public non-virtual成员函数包裹较低访问性的virtual函数。 将virtual函数替换为\\"函数指针成员变量\\"， 这是Strategy设计模式的一种分解表现形式。 使用std::function成员变量替换virtual函数，因而允许任何可调用对象搭配一个兼容于需求的签名式。这也是Strategy设计模式的某种形式。 将继承体系内的virtual函数替换为另一个继承体系内的virtual函数。这是Strategy设计模式的传统实现手法。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-35.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 35 考虑virtual函数以外的其他选择"}],["meta",{"property":"og:description","content":"effective c++ 35 考虑virtual函数以外的其他选择 总结 使用non-virtual interface(NVI)手法， 那么是Template Method设计模式的一种特殊形式。它以public non-virtual成员函数包裹较低访问性的virtual函数。 将virtual函数替换为\\"函数指针成员变量\\"， 这是Strategy设计模式的一种分解表现形式。 使用std::function成员变量替换virtual函数，因而允许任何可调用对象搭配一个兼容于需求的签名式。这也是Strategy设计模式的某种形式。 将继承体系内的virtual函数替换为另一个继承体系内的virtual函数。这是Strategy设计模式的传统实现手法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T09:30:25.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-15T09:30:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 35 考虑virtual函数以外的其他选择\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-15T09:30:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684143025000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.64,"words":191},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-35.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 35 考虑virtual函数以外的其他选择</h1>\\n<h2> 总结</h2>\\n<ul>\\n<li>使用non-virtual interface(NVI)手法， 那么是Template Method设计模式的一种特殊形式。它以public non-virtual成员函数包裹较低访问性的virtual函数。</li>\\n<li>将virtual函数替换为\\"函数指针成员变量\\"， 这是Strategy设计模式的一种分解表现形式。</li>\\n<li>使用std::function成员变量替换virtual函数，因而允许任何可调用对象搭配一个兼容于需求的签名式。这也是Strategy设计模式的某种形式。</li>\\n<li>将继承体系内的virtual函数替换为另一个继承体系内的virtual函数。这是Strategy设计模式的传统实现手法。</li>\\n</ul>","autoDesc":true}');export{t as data};
