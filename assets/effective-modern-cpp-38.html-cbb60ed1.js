const e=JSON.parse('{"key":"v-352502e3","path":"/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-38.html","title":"Item38：关注不同线程句柄的析构行为","lang":"zh-CN","frontmatter":{"category":["C++","effective Modern C++"],"description":"Item38：关注不同线程句柄的析构行为 本文主要focus线程的future句柄析构行的讨论上。 分析 future的析构行为是要分场景的。 如果future的创建同时满足了一下几个条件，它的析构过程会阻塞到任务执行完毕： 它关联到由于调用std::async而创建出的共享状态。 任务的启动策略是std::launch::async（参见Item36），原因是运行时系统选择了该策略，或者在对std::async的调用中指定了该策略。 这个future是关联共享状态的最后一个future。对于std::future，情况总是如此，对于std::shared_future，如果还有其他的std::shared_future，与要被销毁的future引用相同的共享状态，则要被销毁的future遵循正常行为（即简单地销毁它的数据成员）。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-38.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Item38：关注不同线程句柄的析构行为"}],["meta",{"property":"og:description","content":"Item38：关注不同线程句柄的析构行为 本文主要focus线程的future句柄析构行的讨论上。 分析 future的析构行为是要分场景的。 如果future的创建同时满足了一下几个条件，它的析构过程会阻塞到任务执行完毕： 它关联到由于调用std::async而创建出的共享状态。 任务的启动策略是std::launch::async（参见Item36），原因是运行时系统选择了该策略，或者在对std::async的调用中指定了该策略。 这个future是关联共享状态的最后一个future。对于std::future，情况总是如此，对于std::shared_future，如果还有其他的std::shared_future，与要被销毁的future引用相同的共享状态，则要被销毁的future遵循正常行为（即简单地销毁它的数据成员）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T06:58:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-11T06:58:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Item38：关注不同线程句柄的析构行为\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T06:58:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788312000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.59,"words":476},"filePathRelative":"posts/Program_language/cpp/effective-modern-cpp/effective-modern-cpp-38.md","localizedDate":"2023年5月11日","excerpt":"<h1> Item38：关注不同线程句柄的析构行为</h1>\\n<p>本文主要focus线程的future句柄析构行的讨论上。</p>\\n<h2> 分析</h2>\\n<p>future的析构行为是要分场景的。</p>\\n<p>如果future的创建同时满足了一下几个条件，它的析构过程会阻塞到任务执行完毕：</p>\\n<ul>\\n<li>它关联到由于调用std::async而创建出的共享状态。</li>\\n<li>任务的启动策略是std::launch::async（参见Item36），原因是运行时系统选择了该策略，或者在对std::async的调用中指定了该策略。</li>\\n<li>这个future是关联共享状态的最后一个future。对于std::future，情况总是如此，对于std::shared_future，如果还有其他的std::shared_future，与要被销毁的future引用相同的共享状态，则要被销毁的future遵循正常行为（即简单地销毁它的数据成员）。</li>\\n</ul>","autoDesc":true}');export{e as data};
