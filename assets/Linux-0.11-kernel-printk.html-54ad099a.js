const t=JSON.parse('{"key":"v-6c720eab","path":"/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-printk.html","title":"Linux-0.11 kernel目录printk.c详解","lang":"zh-CN","frontmatter":{"category":["Linux"],"tag":["Linux-0.11代码解读系列"],"description":"Linux-0.11 kernel目录printk.c详解 模块简介 该模块只有一个函数， 即printk函数， 用于在内核中向控制台打印字符串， 函数详解 printk printk 与 printf 的差异 其实这两个函数几乎是相同的, 出现这种差异是因为 tty_write 函数需要使用 fs 指向的被显示的字符串, 而 fs 是专门用于存放用户态段选择符的, 因此, 在内核态时, 为了配合 tty_write函数, printk 会把 fs 修改为内核态数据段选择符 ds 中的值, 这样才能正确指向内核的数据缓冲区, 当然这个操作会先对 fs 进行压栈保存, 调用 tty_write 完毕后再出栈恢复. 总结说来, printk 与 printf 的差异是由 fs 造成的, 所以差异也是围绕对 fs 的处理。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-printk.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux-0.11 kernel目录printk.c详解"}],["meta",{"property":"og:description","content":"Linux-0.11 kernel目录printk.c详解 模块简介 该模块只有一个函数， 即printk函数， 用于在内核中向控制台打印字符串， 函数详解 printk printk 与 printf 的差异 其实这两个函数几乎是相同的, 出现这种差异是因为 tty_write 函数需要使用 fs 指向的被显示的字符串, 而 fs 是专门用于存放用户态段选择符的, 因此, 在内核态时, 为了配合 tty_write函数, printk 会把 fs 修改为内核态数据段选择符 ds 中的值, 这样才能正确指向内核的数据缓冲区, 当然这个操作会先对 fs 进行压栈保存, 调用 tty_write 完毕后再出栈恢复. 总结说来, printk 与 printf 的差异是由 fs 造成的, 所以差异也是围绕对 fs 的处理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-18T05:47:29.000Z"}],["meta",{"property":"article:tag","content":"Linux-0.11代码解读系列"}],["meta",{"property":"article:modified_time","content":"2023-04-18T05:47:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-0.11 kernel目录printk.c详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-18T05:47:29.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块简介","slug":"模块简介","link":"#模块简介","children":[]},{"level":2,"title":"函数详解","slug":"函数详解","link":"#函数详解","children":[{"level":3,"title":"printk","slug":"printk","link":"#printk","children":[]}]}],"git":{"createdTime":1680579191000,"updatedTime":1681796849000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":1.28,"words":384},"filePathRelative":"posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-printk.md","localizedDate":"2023年4月4日","excerpt":"<h1> Linux-0.11 kernel目录printk.c详解</h1>\\n<h2> 模块简介</h2>\\n<p>该模块只有一个函数， 即printk函数， 用于在内核中向控制台打印字符串，</p>\\n<h2> 函数详解</h2>\\n<h3> printk</h3>\\n<p><strong>printk 与 printf 的差异</strong></p>\\n<p>其实这两个函数几乎是相同的, 出现这种差异是因为 tty_write 函数需要使用 fs 指向的被显示的字符串, 而 fs 是专门用于存放<strong>用户态段选择符</strong>的, 因此, 在内核态时, 为了配合 tty_write函数, printk 会把 fs 修改为<strong>内核态数据段</strong>选择符 ds 中的值, 这样才能正确指向内核的数据缓冲区, 当然这个操作会先对 fs 进行压栈保存, 调用 tty_write 完毕后再出栈恢复. 总结说来, printk 与 printf 的差异是由 fs 造成的, 所以差异也是围绕对 fs 的处理。</p>","autoDesc":true}');export{t as data};
