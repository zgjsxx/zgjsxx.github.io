import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const e={},p=t(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95mktimecprintkc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录mktime.c/printk.c详解</a><ul><li><a href="#mktimec%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">mktime.c模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#kernel_mktime">kernel_mktime</a></li></ul></li><li><a href="#printkc%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">printk.c模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3-1">函数详解</a><ul><li><a href="#printk">printk</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录mktime-c-printk-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录mktime-c-printk-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录mktime.c/printk.c详解</h1><h2 id="mktime-c模块简介" tabindex="-1"><a class="header-anchor" href="#mktime-c模块简介" aria-hidden="true">#</a> mktime.c模块简介</h2><p>该模块较为简单，仅有一个函数，仅在内核中使用，计算系统开机时的滴答数。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="kernel-mktime" tabindex="-1"><a class="header-anchor" href="#kernel-mktime" aria-hidden="true">#</a> kernel_mktime</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">kernel_mktime</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span> tm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是计算1970年以来的秒数。 其在time_init函数中调用，用于获取开机的时间。</p><p>首先计算开机时距离1970年有多少年。如果tm_year大于70， 说明年份在区间[1970-1999]中。如果tm_year小于70，说明年份在区间[2000， 2069]。依次进行判断计算出距离1970的年数year。在计算一年的秒数时使用的是365天，因此还需要加上闰年的天数， 即<code>DAY*((year+1)/4)</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> res<span class="token punctuation">;</span>
<span class="token keyword">int</span> year<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>tm<span class="token operator">-&gt;</span>tm_year <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> 
  year <span class="token operator">=</span> tm<span class="token operator">-&gt;</span>tm_year <span class="token operator">-</span> <span class="token number">70</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  year <span class="token operator">=</span> tm<span class="token operator">-&gt;</span>tm_year <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">;</span> 
  res <span class="token operator">=</span> YEAR<span class="token operator">*</span>year <span class="token operator">+</span> DAY<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着计算出当前年份的月份所占有的秒数。同时由于month数组的2月计算的是29天，因此如果当年不是闰年，需要减去一天。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>res <span class="token operator">+=</span> month<span class="token punctuation">[</span>tm<span class="token operator">-&gt;</span>tm_mon<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>tm<span class="token operator">-&gt;</span>tm_mon<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  res <span class="token operator">-=</span> DAY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一步就是加上开机时的(日， 小时， 秒)对应的秒数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>res <span class="token operator">+=</span> DAY<span class="token operator">*</span><span class="token punctuation">(</span>tm<span class="token operator">-&gt;</span>tm_mday<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">+=</span> HOUR<span class="token operator">*</span>tm<span class="token operator">-&gt;</span>tm_hour<span class="token punctuation">;</span>
res <span class="token operator">+=</span> MINUTE<span class="token operator">*</span>tm<span class="token operator">-&gt;</span>tm_min<span class="token punctuation">;</span>
res <span class="token operator">+=</span> tm<span class="token operator">-&gt;</span>tm_sec<span class="token punctuation">;</span>
<span class="token keyword">return</span> res<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="printk-c模块简介" tabindex="-1"><a class="header-anchor" href="#printk-c模块简介" aria-hidden="true">#</a> printk.c模块简介</h2><p>该模块只有一个函数， 即printk函数， 用于在内核中向控制台打印字符串，</p><h2 id="函数详解-1" tabindex="-1"><a class="header-anchor" href="#函数详解-1" aria-hidden="true">#</a> 函数详解</h2><h3 id="printk" tabindex="-1"><a class="header-anchor" href="#printk" aria-hidden="true">#</a> printk</h3><p><strong>printk 与 printf 的差异</strong></p><p>其实这两个函数几乎是相同的, 出现这种差异是因为 tty_write 函数需要使用 fs 指向的被显示的字符串, 而 fs 是专门用于存放<strong>用户态段选择符</strong>的, 因此, 在内核态时, 为了配合 tty_write函数, printk 会把 fs 修改为<strong>内核态数据段</strong>选择符 ds 中的值, 这样才能正确指向内核的数据缓冲区, 当然这个操作会先对 fs 进行压栈保存, 调用 tty_write 完毕后再出栈恢复. 总结说来, printk 与 printf 的差异是由 fs 造成的, 所以差异也是围绕对 fs 的处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>va_list args<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
i<span class="token operator">=</span><span class="token function">vsprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>fmt<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串格式化到buf中</span>
<span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;push %%fs\\n\\t&quot;</span><span class="token comment">//将当前的fs保存起来</span>
  <span class="token string">&quot;push %%ds\\n\\t&quot;</span><span class="token comment">//将当前的ds放入栈</span>
  <span class="token string">&quot;pop %%fs\\n\\t&quot;</span><span class="token comment">//fs = ds</span>
  <span class="token string">&quot;pushl %0\\n\\t&quot;</span><span class="token comment">//字符串长度 ax寄存器</span>
  <span class="token string">&quot;pushl $buf\\n\\t&quot;</span><span class="token comment">//将buf地址压入栈中</span>
  <span class="token string">&quot;pushl $0\\n\\t&quot;</span><span class="token comment">//将数值0压入栈中，代表显示通道</span>
  <span class="token string">&quot;call tty_write\\n\\t&quot;</span><span class="token comment">//调用tty_write tty_write(unsigned channel, char * buf, int nr)</span>
  <span class="token string">&quot;addl $8,%%esp\\n\\t&quot;</span>
  <span class="token string">&quot;popl %0\\n\\t&quot;</span><span class="token comment">//将长度发给到ax寄存器中</span>
  <span class="token string">&quot;pop %%fs&quot;</span><span class="token comment">//将fs弹出</span>
  <span class="token operator">::</span><span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;ax&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cx&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;dx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[p];function c(i,r){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","Linux-0.11-kernel-mktime-printk.html.vue"]]);export{u as default};
