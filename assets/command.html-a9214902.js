const t=JSON.parse('{"key":"v-e683e5b2","path":"/posts/design-pattern/command.html","title":"设计模式 - 适配器模式(行为型)","lang":"zh-CN","frontmatter":{"description":"category: 设计模式 tag: 设计模式 设计模式 - 适配器模式(行为型) 命令模式用到最核心的实现手段，就是将函数封装成对象。 我们知道，在大部分编程语言中，函数是没法作为参数传递给其他函数的，也没法赋值给变量。借助命令模式，我们将函数封装成对象，这样就可以实现把函数像对象一样使用。 命令模式的主要作用和应用场景，是用来控制命令的执行，比如，异步、延迟、排队执行命令、撤销重做命令、存储命令、给命令记录日志等等，这才是命令模式能发挥独一无二作用的地方。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/design-pattern/command.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"设计模式 - 适配器模式(行为型)"}],["meta",{"property":"og:description","content":"category: 设计模式 tag: 设计模式 设计模式 - 适配器模式(行为型) 命令模式用到最核心的实现手段，就是将函数封装成对象。 我们知道，在大部分编程语言中，函数是没法作为参数传递给其他函数的，也没法赋值给变量。借助命令模式，我们将函数封装成对象，这样就可以实现把函数像对象一样使用。 命令模式的主要作用和应用场景，是用来控制命令的执行，比如，异步、延迟、排队执行命令、撤销重做命令、存储命令、给命令记录日志等等，这才是命令模式能发挥独一无二作用的地方。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-25T15:24:12.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-25T15:24:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式 - 适配器模式(行为型)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-25T15:24:12.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1682436252000,"updatedTime":1682436252000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.82,"words":545},"filePathRelative":"posts/design-pattern/command.md","localizedDate":"2023年4月25日","excerpt":"<hr>\\n<p>category:</p>\\n<ul>\\n<li>设计模式\\ntag:</li>\\n<li>设计模式</li>\\n</ul>\\n<hr>\\n<h1> 设计模式 - 适配器模式(行为型)</h1>\\n<p>命令模式用到最核心的实现手段，就是将<strong>函数封装成对象</strong>。\\n我们知道，在大部分编程语言中，函数是没法作为参数传递给其他函数的，也没法赋值给变量。借助命令模式，我们将函数封装成对象，这样就可以实现把函数像对象一样使用。</p>\\n<p>命令模式的主要作用和应用场景，是用来控制命令的执行，比如，异步、延迟、排队执行命令、撤销重做命令、存储命令、给命令记录日志等等，这才是命令模式能发挥独一无二作用的地方。</p>","autoDesc":true}');export{t as data};
