import{_ as n,V as s,W as a,a0 as p}from"./framework-9a29aaa0.js";const t={},e=p(`<h1 id="effective-c-18-让接口容易被正确使用-不易被误用" tabindex="-1"><a class="header-anchor" href="#effective-c-18-让接口容易被正确使用-不易被误用" aria-hidden="true">#</a> effective c++ 18 让接口容易被正确使用， 不易被误用</h1><p>在本节中作者建议大家在写代码的时候要提供的接口需要拥有正确性和易用性。 写代码时你可能根据第一感觉就写出了一个接口，这个时候你可能需要再思考思考这个接口是否好用， 是否可能被误用。作者这里用了一些例子来说明如此写出好的接口。 实际工作中， 开发出好的接口远比本节讲的要复杂的多。 个人的理解就是你可以根据第一感觉写出接口， 但是建议再思考思考这样是不是最好的。 如果你的同事抱怨你的接口不好用， 这个时候你就更应该重新思考你的接口。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>作者这里给了一个例子，设计了如下的一个日期的类。 乍一看好像没有啥问题， 哈哈。其实实际工作中大部分人都是这么干的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>
<span class="token keyword">public</span>：
    <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果遇到比较粗心的程序员， 他可能这样调用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Date <span class="token function">d</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候编译器不会有任何报错。这个错误将会一直到运行时才能发现。很多时候需要到QA才能报出问题。</p><p>倘若这时候我们为年月日定义出类型， 并且在构造函数中使用该类型， 这样上面的使用错误将会在编译期就报出。</p><p>因此<strong>恰当地引入新类型</strong>对预防&quot;接口被误用&quot;有很好的效果。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Day</span>
<span class="token punctuation">{</span>
<span class="token keyword">explicit</span> <span class="token function">Day</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Month</span>
<span class="token punctuation">{</span>
<span class="token keyword">explicit</span> <span class="token function">Month</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Year</span>
<span class="token punctuation">{</span>
<span class="token keyword">explicit</span> <span class="token function">Year</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">Date</span>
<span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">const</span> Month<span class="token operator">&amp;</span> m<span class="token punctuation">,</span> <span class="token keyword">const</span> Day<span class="token operator">&amp;</span> d<span class="token punctuation">,</span> <span class="token keyword">const</span> Year<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">:</span>
	   <span class="token function">month</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">day</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">year</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">int</span> month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> year<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。</li><li>&quot;促进正确使用&quot;的办法包括接口的一致性，以及与内置类型的行为兼容。</li><li>&quot;阻止误用&quot;的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。</li><li>tr1::shared_ptr支持定制型删除器。这可防范DLL问题，可被用来自动解除互斥锁。(新标准是std::shared_ptr)</li></ul>`,13),c=[e];function o(i,l){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","effective-cpp-18.html.vue"]]);export{d as default};
