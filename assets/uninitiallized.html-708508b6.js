import{_ as n,V as a,W as s,a0 as t}from"./framework-9a29aaa0.js";const e={},i=t(`<h1 id="uninitialized模板" tabindex="-1"><a class="header-anchor" href="#uninitialized模板" aria-hidden="true">#</a> uninitialized模板</h1><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="uninitialized-copy" tabindex="-1"><a class="header-anchor" href="#uninitialized-copy" aria-hidden="true">#</a> uninitialized_copy</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIter</span><span class="token operator">&gt;</span>
ForwardIter <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>InputIter first<span class="token punctuation">,</span> InputIter last<span class="token punctuation">,</span> ForwardIter result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">unchecked_uninit_copy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> result<span class="token punctuation">,</span> 
                                     std<span class="token double-colon punctuation">::</span>is_trivially_copy_assignable<span class="token operator">&lt;</span>
                                     <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>
                                     value_type<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uninitialized-fill-n" tabindex="-1"><a class="header-anchor" href="#uninitialized-fill-n" aria-hidden="true">#</a> uninitialized_fill_n</h3><p>uninitialized_fill_n实现调用了unchecked_uninit_fill_n方法。unchecked_uninit_fill_n方法有两个版本， 第一个版本是针对平凡类型的特化版本，第二个版本是针对非平凡类型的版本。非平凡版本在构造数据时需要调用构造函数。平凡类型的unchecked_uninit_fill_n方法内部调用fill_n方法，fill_n方法也分为两个版本，一个是针对char类型的特化版本，内部调用memset，另一个是平凡类型的通用版本，使用赋值运行符进行构造，</p><p>uninitialized_fill_n的调用体系如下所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/open_source_project/MyTinySTL/uninitialized/uninitiallized_fill_n.png" alt="uninitialized_fill_n" tabindex="0" loading="lazy"><figcaption>uninitialized_fill_n</figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
ForwardIter <span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>ForwardIter first<span class="token punctuation">,</span> Size n<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> mystl<span class="token double-colon punctuation">::</span><span class="token function">unchecked_uninit_fill_n</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> n<span class="token punctuation">,</span> value<span class="token punctuation">,</span> 
                                        std<span class="token double-colon punctuation">::</span>is_trivially_copy_assignable<span class="token operator">&lt;</span>
                                        <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>
                                        value_type<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),p=[i];function l(o,c){return a(),s("div",null,p)}const r=n(e,[["render",l],["__file","uninitiallized.html.vue"]]);export{r as default};
