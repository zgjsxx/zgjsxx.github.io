import{_,V as n,W as a,X as e,Y as t}from"./framework-9a29aaa0.js";const o={},r=e("h1",{id:"network",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#network","aria-hidden":"true"},"#"),t(" Network")],-1),i=e("h2",{id:"time-wait的状态是在哪一端产生的-它的作用是什么",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#time-wait的状态是在哪一端产生的-它的作用是什么","aria-hidden":"true"},"#"),t(" TIME_WAIT的状态是在哪一端产生的？它的作用是什么？")],-1),s=e("p",null,"TIME_WAIT状态在主动关闭端产生。主要作用如下：",-1),I=e("ul",null,[e("li",null,"可靠的关闭连接。TIME_WAIT状态确保了最终的ACK（确认）消息能够被成功接收。根据TCP协议，当一端（主动关闭连接的一端）发送FIN（终止）请求后，进入FIN_WAIT_1状态，然后等待对方的ACK消息并进入FIN_WAIT_2状态。对方接收到FIN后，回复ACK并发送自己的FIN请求。主动关闭连接的一端收到对方的FIN后，回复ACK，并进入TIME_WAIT状态。TIME_WAIT状态持续两个最大报文段寿命（MSL, Maximum Segment Lifetime），确保最后的ACK能被对方接收，即使对方的FIN因为网络问题需要重传。"),e("li",null,"防止旧连接的数据干扰新连接。TIME_WAIT状态的另一个重要作用是防止在网络中滞留的旧连接数据包干扰新连接。由于TCP连接是通过五元组（源IP地址、源端口、目标IP地址、目标端口、协议）唯一标识的，TIME_WAIT状态的持续时间（通常为2倍的MSL）足够确保旧连接的所有数据包在新连接建立前都已经过期和丢弃。这样可以避免新连接接收到旧连接遗留的数据包，从而保持数据传输的正确性和完整性。")],-1),c=[r,i,s,I];function l(d,T){return n(),a("div",null,c)}const A=_(o,[["render",l],["__file","network.html.vue"]]);export{A as default};
