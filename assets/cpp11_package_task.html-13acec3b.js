const e=JSON.parse('{"key":"v-30212d68","path":"/posts/Program_language/cpp/cpp11_package_task.html","title":"c++11中的多线程std::packaged_task","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"c++11中的多线程std::packaged_task std::thread是c++11中提供的线程，其有一大缺点，就是无法获取线程函数执行的结果。这与pthread_create是有区别的，pthread_join可以获取线程函数的返回。而std::thread::join是无法获取返回值的(可能大部分场景不关心返回值)。下面是std::thread::join的声明，既无入参，也没有返回值，因此无法获取任何信息。 void join(); (since C++11)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp11_package_task.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++11中的多线程std::packaged_task"}],["meta",{"property":"og:description","content":"c++11中的多线程std::packaged_task std::thread是c++11中提供的线程，其有一大缺点，就是无法获取线程函数执行的结果。这与pthread_create是有区别的，pthread_join可以获取线程函数的返回。而std::thread::join是无法获取返回值的(可能大部分场景不关心返回值)。下面是std::thread::join的声明，既无入参，也没有返回值，因此无法获取任何信息。 void join(); (since C++11)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T06:58:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-11T06:58:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++11中的多线程std::packaged_task\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T06:58:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788312000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"posts/Program_language/cpp/cpp11_package_task.md","localizedDate":"2023年5月11日","excerpt":"<h1> c++11中的多线程std::packaged_task</h1>\\n<p><code>std::thread</code>是c++11中提供的线程，其有一大缺点，就是无法获取线程函数执行的结果。这与pthread_create是有区别的，pthread_join可以获取线程函数的返回。而<code>std::thread::join</code>是无法获取返回值的(可能大部分场景不关心返回值)。下面是<code>std::thread::join</code>的声明，既无入参，也没有返回值，因此无法获取任何信息。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">(</span>since C<span class=\\"token operator\\">++</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
