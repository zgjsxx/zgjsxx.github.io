const n=JSON.parse('{"key":"v-48644d60","path":"/posts/Program_language/cpp/cpp11_thread.html","title":"c++11中的多线程std::thread","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"c++11中的多线程std::thread 在c++11中提供了新的多线程的创建方式std::thread, 丰富了对于多线程的使用。 std::thread类的原型如下所示： namespace std { class thread { public: // 类型声明: class id; typedef implementation-defined native_handle_type; // 构造函数、拷贝构造函数和析构函数声明: thread() noexcept; template &lt;class F, class ...Args&gt; explicit thread(F&amp;&amp; f, Args&amp;&amp;... args); ~thread(); thread(const thread&amp;) = delete; thread(thread&amp;&amp;) noexcept; thread&amp; operator=(const thread&amp;) = delete; thread&amp; operator=(thread&amp;&amp;) noexcept; // 成员函数声明: void swap(thread&amp;) noexcept; bool joinable() const noexcept; void join(); void detach(); id get_id() const noexcept; native_handle_type native_handle(); // 静态成员函数声明: static unsigned hardware_concurrency() noexcept; }; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp11_thread.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++11中的多线程std::thread"}],["meta",{"property":"og:description","content":"c++11中的多线程std::thread 在c++11中提供了新的多线程的创建方式std::thread, 丰富了对于多线程的使用。 std::thread类的原型如下所示： namespace std { class thread { public: // 类型声明: class id; typedef implementation-defined native_handle_type; // 构造函数、拷贝构造函数和析构函数声明: thread() noexcept; template &lt;class F, class ...Args&gt; explicit thread(F&amp;&amp; f, Args&amp;&amp;... args); ~thread(); thread(const thread&amp;) = delete; thread(thread&amp;&amp;) noexcept; thread&amp; operator=(const thread&amp;) = delete; thread&amp; operator=(thread&amp;&amp;) noexcept; // 成员函数声明: void swap(thread&amp;) noexcept; bool joinable() const noexcept; void join(); void detach(); id get_id() const noexcept; native_handle_type native_handle(); // 静态成员函数声明: static unsigned hardware_concurrency() noexcept; }; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-30T05:51:28.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-30T05:51:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++11中的多线程std::thread\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-30T05:51:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"std::thread创建线程的方式","slug":"std-thread创建线程的方式","link":"#std-thread创建线程的方式","children":[{"level":3,"title":"使用普通函数创建线程","slug":"使用普通函数创建线程","link":"#使用普通函数创建线程","children":[]},{"level":3,"title":"使用仿函数创建线程","slug":"使用仿函数创建线程","link":"#使用仿函数创建线程","children":[]},{"level":3,"title":"使用lambda表达式创建线程","slug":"使用lambda表达式创建线程","link":"#使用lambda表达式创建线程","children":[]},{"level":3,"title":"使用成员函数创建线程","slug":"使用成员函数创建线程","link":"#使用成员函数创建线程","children":[]}]},{"level":2,"title":"std::thread的销毁","slug":"std-thread的销毁","link":"#std-thread的销毁","children":[]},{"level":2,"title":"std::thread的传参","slug":"std-thread的传参","link":"#std-thread的传参","children":[]},{"level":2,"title":"std::thread的native handle","slug":"std-thread的native-handle","link":"#std-thread的native-handle","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1682351150000,"updatedTime":1693374688000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":5}]},"readingTime":{"minutes":6.65,"words":1994},"filePathRelative":"posts/Program_language/cpp/cpp11_thread.md","localizedDate":"2023年4月24日","excerpt":"<h1> c++11中的多线程std::thread</h1>\\n<p>在c++11中提供了新的多线程的创建方式<code>std::thread</code>, 丰富了对于多线程的使用。 <code>std::thread</code>类的原型如下所示：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">namespace</span> std <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">thread</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">// 类型声明:</span>\\n    <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">id</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">typedef</span> implementation<span class=\\"token operator\\">-</span>defined native_handle_type<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 构造函数、拷贝构造函数和析构函数声明:</span>\\n    <span class=\\"token function\\">thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">F</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">class</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>Args<span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">explicit</span> <span class=\\"token function\\">thread</span><span class=\\"token punctuation\\">(</span>F<span class=\\"token operator\\">&amp;&amp;</span> f<span class=\\"token punctuation\\">,</span> Args<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> thread<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">thread</span><span class=\\"token punctuation\\">(</span>thread<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>\\n    thread<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> thread<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">;</span>\\n    thread<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>thread<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 成员函数声明:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>thread<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">bool</span> <span class=\\"token function\\">joinable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">detach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    id <span class=\\"token function\\">get_id</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>\\n    native_handle_type <span class=\\"token function\\">native_handle</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 静态成员函数声明:</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">unsigned</span> <span class=\\"token function\\">hardware_concurrency</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">noexcept</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
