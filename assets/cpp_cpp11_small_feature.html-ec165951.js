import{_ as s,V as n,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},e=t(`<h1 id="c-14的新增的小的特性" tabindex="-1"><a class="header-anchor" href="#c-14的新增的小的特性" aria-hidden="true">#</a> c++14的新增的小的特性</h1><h2 id="std-decay" tabindex="-1"><a class="header-anchor" href="#std-decay" aria-hidden="true">#</a> std::decay</h2><p>类型退化：</p><ul><li>去除const和volatile</li><li>去除引用</li><li>数组退化为指针</li><li>函数退化为指针</li></ul><p>如果类型T是一个函数类型，那么从函数到指针的类型转换将被应用，并且T的衰变类型等同于：</p><p><code>add_pointer&lt;T&gt;::type</code></p><p>如果类型T是一个数组类型，那么从数组到指针的类型转换将被应用，并且T的衰变类型等同于：</p><p><code>add_pointer&lt;remove_extent&lt;remove_reference&lt;T&gt;::type&gt;::type&gt;::type</code></p><p>当左值到右值转换被应用时，T的衰变类型等同于：</p><p><code>remove_cv&lt;remove_reference&lt;T&gt;::type&gt;::type</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits&gt;</span></span>
 
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">decay_equiv</span> <span class="token operator">:</span> 
    <span class="token base-clause">std<span class="token double-colon punctuation">::</span><span class="token class-name">is_same</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">decay</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token class-name">type</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token class-name">type</span></span> 
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha
              <span class="token operator">&lt;&lt;</span> decay_equiv<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
              <span class="token operator">&lt;&lt;</span> decay_equiv<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
              <span class="token operator">&lt;&lt;</span> decay_equiv<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
              <span class="token operator">&lt;&lt;</span> decay_equiv<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
              <span class="token operator">&lt;&lt;</span> decay_equiv<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
              <span class="token operator">&lt;&lt;</span> decay_equiv<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
              <span class="token operator">&lt;&lt;</span> decay_equiv<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[e];function l(c,r){return n(),a("div",null,o)}const k=s(p,[["render",l],["__file","cpp_cpp11_small_feature.html.vue"]]);export{k as default};
