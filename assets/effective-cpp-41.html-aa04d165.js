const t=JSON.parse('{"key":"v-64403567","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-41.html","title":"effective c++ 41 隐式接口和编译器多态","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 41 隐式接口和编译器多态 分析 面向对象编程总是以显式接口和运行期多态解决问题。举个例子，给定这样“无意义”的类 class Widget{ public: \\tWidget(); \\tvirtual ~Widget(); \\tvirtual std::size_t size() const; \\tvirtual void normalize(); \\tvoid swap(Widget&amp; other); };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-41.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 41 隐式接口和编译器多态"}],["meta",{"property":"og:description","content":"effective c++ 41 隐式接口和编译器多态 分析 面向对象编程总是以显式接口和运行期多态解决问题。举个例子，给定这样“无意义”的类 class Widget{ public: \\tWidget(); \\tvirtual ~Widget(); \\tvirtual std::size_t size() const; \\tvirtual void normalize(); \\tvoid swap(Widget&amp; other); };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T02:19:06.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-17T02:19:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 41 隐式接口和编译器多态\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T02:19:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684289946000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":3.2,"words":959},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-41.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 41 隐式接口和编译器多态</h1>\\n<h2> 分析</h2>\\n<p>面向对象编程总是以显式接口和运行期多态解决问题。举个例子，给定这样“无意义”的类</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Widget</span><span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token operator\\">~</span><span class=\\"token function\\">Widget</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">virtual</span> std<span class=\\"token double-colon punctuation\\">::</span>size_t <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">normalize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>Widget<span class=\\"token operator\\">&amp;</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
