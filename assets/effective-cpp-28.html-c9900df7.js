import{_ as e,V as o,W as c,X as n,Y as t,$ as p,a0 as s,F as i}from"./framework-9a29aaa0.js";const l={},u=s(`<h1 id="effective-c-28-避免返回handles指向对象内部成分" tabindex="-1"><a class="header-anchor" href="#effective-c-28-避免返回handles指向对象内部成分" aria-hidden="true">#</a> effective c++ 28 避免返回handles指向对象内部成分</h1><p>本节也是作者的一个建议，让我们避免返回handles，handle包含了指针，引用和迭代器等等，并阐述了如果返回handle可能会引起哪些问题。和上一节类似，是作者的一个建议，并不意味着在任何时候都不可以返回handle。</p><p>下面就看看返回handle可能存在的问题。upperLeft是一个const函数，但是其返回了Point&amp;， 这就意味着，虽然在upperLeft内部虽然不会修改成员变量，但在函数外部却可以进行修改！ 这是矛盾的，也一定程度上破坏了封装性。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>返回handle可能带来的第一个问题就是可能导致封装性的降低。</p><p>看下面的例子，</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

	<span class="token comment">// class for representing points</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> xx<span class="token punctuation">,</span> <span class="token keyword">int</span> yy<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">int</span> newX<span class="token punctuation">)</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> newX<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">int</span> newY<span class="token punctuation">)</span> <span class="token punctuation">{</span> y <span class="token operator">=</span> newY<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Point data for a Rectangle</span>
<span class="token keyword">struct</span> <span class="token class-name">RectData</span>
<span class="token punctuation">{</span>
	<span class="token comment">//RectData() {}</span>
	<span class="token function">RectData</span><span class="token punctuation">(</span>Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		ulhc <span class="token operator">=</span> p1<span class="token punctuation">;</span>
		lrhc <span class="token operator">=</span> p2<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Point ulhc<span class="token punctuation">;</span>	<span class="token comment">// upper left hand corner</span>
	Point lrhc<span class="token punctuation">;</span>	<span class="token comment">// lower rght hand corner</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Rectangle</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">Rectangle</span><span class="token punctuation">(</span>Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">pData</span><span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	Point<span class="token operator">&amp;</span> <span class="token function">upperLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> pData<span class="token operator">-&gt;</span>ulhc<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	Point<span class="token operator">&amp;</span> <span class="token function">lowerRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> pData<span class="token operator">-&gt;</span>lrhc<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>RectData<span class="token operator">&gt;</span> pData<span class="token punctuation">;</span>
	RectData<span class="token operator">*</span> <span class="token function">create</span><span class="token punctuation">(</span>Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">RectData</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Point <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Point <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Rectangle <span class="token function">rec</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rec<span class="token punctuation">.</span><span class="token function">upperLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r={href:"https://godbolt.org/z/fE36T3rn5",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>那么如何修改呢？</p><p>很简单，在upperLeft的返回值中加上const， 这样就不允许去修改rectangle内部的point,只能获取。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span>	Point<span class="token operator">&amp;</span> <span class="token function">upperLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> pData<span class="token operator">-&gt;</span>ulhc<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span>	Point<span class="token operator">&amp;</span> <span class="token function">lowerRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> pData<span class="token operator">-&gt;</span>lrhc<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={href:"https://godbolt.org/z/xo33z1nPK",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>下面便是第二个问题，upperLeft可能还会导致悬空引用的问题。看下面的例子：</p><p>boundingBox的调用可以获取一个新的rectangle的临时对象，并将其upperLeft的point返回给指针。但是这句话执行完毕之后，这个对象就已经被析构了，这是一个右值。也就是此时的pUpperLeft的指针指向了栈空间中的一个被析构的对象，这是很危险的，容易引起段错误。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> Rectangle <span class="token function">boundingBox</span><span class="token punctuation">(</span><span class="token keyword">const</span> GuiObject<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Rectangle r<span class="token punctuation">;</span>
	<span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// make pgo point to some GUI object</span>
	GuiObject<span class="token operator">*</span> pgo <span class="token operator">=</span> <span class="token keyword">new</span> GuiObject<span class="token punctuation">;</span>

	<span class="token comment">// get ptr to the upper left point of its bounding box</span>
	<span class="token keyword">const</span> Point<span class="token operator">*</span> pUpperLeft <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">boundingBox</span><span class="token punctuation">(</span><span class="token operator">*</span>pgo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upperLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这便是作者给出的两点理由，当然这也是作者的建议，并不意味着任何时候都不能返回。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>避免返回handles(包括references、指针、迭代器)指向对象内部。遵守这个条款可增加封装性，帮助const成员函数的行为像一个const，并将发生悬空指针(引用)的可能性降至最低。</li></ul>`,6);function m(b,f){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[t("have a try"),p(a)])]),k,n("p",null,[n("a",d,[t("have a try"),p(a)])]),v])}const y=e(l,[["render",m],["__file","effective-cpp-28.html.vue"]]);export{y as default};
