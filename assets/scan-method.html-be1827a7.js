const n=JSON.parse('{"key":"v-de166c5a","path":"/posts/datastructure_algorithm/scan-method.html","title":"scan算法","lang":"zh-CN","frontmatter":{"description":"scan算法 Koggle-stone Brent-kung #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;omp.h&gt; void printData(const std::vector&lt;int&gt;&amp; data){ std::cout &lt;&lt; \\"current array: \\"; for (int i : data) { std::cout &lt;&lt; i &lt;&lt; \\" \\"; } std::cout &lt;&lt; std::endl; } // 上升阶段（Up-Sweep）：计算每个节点的前缀和 void up_sweep(std::vector&lt;int&gt;&amp; data) { int n = data.size(); // 计算每层的合并 for (int d = 1; d &lt; n; d *= 2) { int start = 2*d-1; #pragma omp parallel for for (int i = start; i &lt; n; i += 2 * d) { data[i] += data[i - d]; } printData(data); } } // 下降阶段（Down-Sweep）：从根节点将结果分发到每个叶子节点 void down_sweep(std::vector&lt;int&gt;&amp; data) { int n = data.size(); // 计算每层的分发 for (int d = n / 4; d &gt; 0; d /= 2) { int start = 2*d - 1; #pragma omp parallel for for (int i = start; i &lt; n; i += 2 * d) { data[i+d] += data[i]; } printData(data); } } // 并行前缀和主函数 void parallel_prefix_sum(std::vector&lt;int&gt;&amp; data) { int n = data.size(); if (n &lt;= 1) return; // 如果数组元素小于等于 1，直接返回 // 上升阶段 up_sweep(data); // 下降阶段 down_sweep(data); } int main() { // 初始化数据 std::vector&lt;int&gt; data = {3, 1, 7, 0, 4, 1, 6, 3, 2}; std::cout &lt;&lt; \\"Original array: \\"; for (int i : data) { std::cout &lt;&lt; i &lt;&lt; \\" \\"; } std::cout &lt;&lt; std::endl; // 执行并行前缀和计算 parallel_prefix_sum(data); // 输出结果 std::cout &lt;&lt; \\"Prefix sum array: \\"; for (int i : data) { std::cout &lt;&lt; i &lt;&lt; \\" \\"; } std::cout &lt;&lt; std::endl; return 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/datastructure_algorithm/scan-method.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"scan算法"}],["meta",{"property":"og:description","content":"scan算法 Koggle-stone Brent-kung #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;omp.h&gt; void printData(const std::vector&lt;int&gt;&amp; data){ std::cout &lt;&lt; \\"current array: \\"; for (int i : data) { std::cout &lt;&lt; i &lt;&lt; \\" \\"; } std::cout &lt;&lt; std::endl; } // 上升阶段（Up-Sweep）：计算每个节点的前缀和 void up_sweep(std::vector&lt;int&gt;&amp; data) { int n = data.size(); // 计算每层的合并 for (int d = 1; d &lt; n; d *= 2) { int start = 2*d-1; #pragma omp parallel for for (int i = start; i &lt; n; i += 2 * d) { data[i] += data[i - d]; } printData(data); } } // 下降阶段（Down-Sweep）：从根节点将结果分发到每个叶子节点 void down_sweep(std::vector&lt;int&gt;&amp; data) { int n = data.size(); // 计算每层的分发 for (int d = n / 4; d &gt; 0; d /= 2) { int start = 2*d - 1; #pragma omp parallel for for (int i = start; i &lt; n; i += 2 * d) { data[i+d] += data[i]; } printData(data); } } // 并行前缀和主函数 void parallel_prefix_sum(std::vector&lt;int&gt;&amp; data) { int n = data.size(); if (n &lt;= 1) return; // 如果数组元素小于等于 1，直接返回 // 上升阶段 up_sweep(data); // 下降阶段 down_sweep(data); } int main() { // 初始化数据 std::vector&lt;int&gt; data = {3, 1, 7, 0, 4, 1, 6, 3, 2}; std::cout &lt;&lt; \\"Original array: \\"; for (int i : data) { std::cout &lt;&lt; i &lt;&lt; \\" \\"; } std::cout &lt;&lt; std::endl; // 执行并行前缀和计算 parallel_prefix_sum(data); // 输出结果 std::cout &lt;&lt; \\"Prefix sum array: \\"; for (int i : data) { std::cout &lt;&lt; i &lt;&lt; \\" \\"; } std::cout &lt;&lt; std::endl; return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-22T08:11:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-22T08:11:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"scan算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-22T08:11:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Koggle-stone","slug":"koggle-stone","link":"#koggle-stone","children":[]},{"level":2,"title":"Brent-kung","slug":"brent-kung","link":"#brent-kung","children":[]}],"git":{"createdTime":1724314284000,"updatedTime":1724314284000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"posts/datastructure_algorithm/scan-method.md","localizedDate":"2024年8月22日","excerpt":"<h1> scan算法</h1>\\n<h2> Koggle-stone</h2>\\n<h2> Brent-kung</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;omp.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">printData</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"current array: \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">:</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> i <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 上升阶段（Up-Sweep）：计算每个节点的前缀和</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">up_sweep</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 计算每层的合并</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> d <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> d <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> d <span class=\\"token operator\\">*=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> start <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span>d<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">pragma</span> <span class=\\"token expression\\">omp parallel <span class=\\"token keyword\\">for</span></span></span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> start<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> d<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            data<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> data<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">-</span> d<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token function\\">printData</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 下降阶段（Down-Sweep）：从根节点将结果分发到每个叶子节点</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">down_sweep</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 计算每层的分发</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> d <span class=\\"token operator\\">=</span> n <span class=\\"token operator\\">/</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">;</span> d <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> d <span class=\\"token operator\\">/=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> start  <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span>d <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">pragma</span> <span class=\\"token expression\\">omp parallel <span class=\\"token keyword\\">for</span></span></span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> start<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> d<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            data<span class=\\"token punctuation\\">[</span>i<span class=\\"token operator\\">+</span>d<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> data<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token function\\">printData</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 并行前缀和主函数</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">parallel_prefix_sum</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> n <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 如果数组元素小于等于 1，直接返回</span>\\n\\n    <span class=\\"token comment\\">// 上升阶段</span>\\n    <span class=\\"token function\\">up_sweep</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 下降阶段</span>\\n    <span class=\\"token function\\">down_sweep</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 初始化数据</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Original array: \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">:</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> i <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 执行并行前缀和计算</span>\\n    <span class=\\"token function\\">parallel_prefix_sum</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 输出结果</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Prefix sum array: \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">:</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> i <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
