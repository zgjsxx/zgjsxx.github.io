import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const t={},p=e(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86schedc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录进程管理sched.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#schedule">schedule</a></li><li><a href="#show_task">show_task</a></li><li><a href="#show_stat">show_stat</a></li><li><a href="#math_state_restore">math_state_restore</a></li><li><a href="#sys_pause">sys_pause</a></li><li><a href="#sleep_on">sleep_on</a></li><li><a href="#interruptible_sleep_on">interruptible_sleep_on</a></li><li><a href="#wake_up">wake_up</a></li><li><a href="#ticks_to_floppy_on">ticks_to_floppy_on</a></li><li><a href="#floppy_on">floppy_on</a></li><li><a href="#floppy_off">floppy_off</a></li><li><a href="#do_floppy_timer">do_floppy_timer</a></li><li><a href="#add_timer">add_timer</a></li><li><a href="#do_timer">do_timer</a></li><li><a href="#sys_alarm">sys_alarm</a></li><li><a href="#sys_getpid">sys_getpid</a></li><li><a href="#sys_getppid">sys_getppid</a></li><li><a href="#sys_getuid">sys_getuid</a></li><li><a href="#sys_geteuid">sys_geteuid</a></li><li><a href="#sys_getgid">sys_getgid</a></li><li><a href="#sys_getegid">sys_getegid</a></li><li><a href="#sys_nice">sys_nice</a></li><li><a href="#sched_init">sched_init</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录进程管理sched-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理sched-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理sched.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>sched.c是内核中有关任务(进程调度管理的程序)，其中包括有关调度的基本函数(sleep_on()、wakeup()、schedule()等)以及一些简单的系统调用函数(比如getpid())。系统时钟中断处理函数do_timer()也被放置在本程序中。另外，为了便于软盘驱动器定时处理的编程，Linux也将有关软盘定时操作的几个函数放到了这里。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="schedule" tabindex="-1"><a class="header-anchor" href="#schedule" aria-hidden="true">#</a> schedule</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>schedule函数的基本功能可以分为两大块， 第一块是<strong>检查task中的报警信息和信号</strong>， 第二块则是<strong>进行任务的调度</strong>。</p><p>在第一块中，首先从任务数组的尾部任务开始，检查alarm是否小于当前系统滴答值，如果小于则代表alarm时间已经到期。将进程的signal中的SIGALARM位置1。</p><p>接着就看如果检查进程的信号中如果处理BLOCK位以外还有别的信号，并且如果任务处于可中断状态，则将任务置为就绪状态。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span>next<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果设置了任务定时的值alarm， 并且已经过期</span>
                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将信号的SIGALARM位置为1</span>
                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token comment">//如果信号位图中除了被阻塞的信号外还有其他信号， 并且任务处于可中断状态</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span> <span class="token comment">//修改任务的状态为就绪态</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二块的代码就是任务调度的核心代码。</p><p>这里会从任务数组的尾部任务开始进行遍历，从所有任务从选取counter值最大的任务作为下一个运行的任务去执行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从最后一个任务开始</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//遍历所有的task， 取出其中counter最大的task</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">--</span>p<span class="token punctuation">)</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">&gt;</span> c<span class="token punctuation">)</span><span class="token comment">//取出所有任务中counter值最大的任务作为下一个任务</span>
			c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token comment">//如果当前没有RUNNING状态的任务的counter可以大于-1，那么则去更新counter的值，counter = counter/2 + priority</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
			<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
					<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>priority<span class="token punctuation">;</span><span class="token comment">//更新counter值 counter = counter/2 + priority</span>
<span class="token punctuation">}</span>
<span class="token comment">//切换任务执行next</span>
<span class="token function">switch_to</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意如果所有运行状态的任务时间片为0的时候，重新调整所有任务的时间片。这里的算法是<code>counter = counter/2 + priority</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token comment">//如果当前没有RUNNING状态的任务的counter可以大于-1，那么则去更新counter的值，counter = counter/2 + priority</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
			<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
					<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>priority<span class="token punctuation">;</span><span class="token comment">//更新counter值 counter = counter/2 + priority</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结起来：</p><ol><li>当系统中存在运行状态的进程，则比较所有的进程的counter，取出拥有最大的counter的进程继续执行。如果系统中所有运行状态的进程的counter都为0， 则重新调整所有进程的counter。并取出序号最小的运行状态的进程继续执行。</li><li>当系统中不存在处于运行状态的进程，则切换0号进程运行。</li></ol><p>最后梳理一下，哪些地方会调用到<code>schedule</code>：</p><ul><li>do_exit</li><li>sys_waitpid</li><li>sys_pause</li><li>sleep_on</li><li>interruptible_sleep_on</li><li>do_timer</li><li>tty_write</li></ul><h3 id="show-task" tabindex="-1"><a class="header-anchor" href="#show-task" aria-hidden="true">#</a> show_task</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">show_task</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>show_task方法在show_stat方法中被调用。调用关系如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── func<span class="token punctuation">(</span>keyboard.S<span class="token punctuation">)</span>
  └── show_task
	└── do_timer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是显示任务序号为<code>nr</code>的进程的<code>pid</code>，进程状态以及内核栈剩余的大小。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">4096</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d: pid=%d, state=%d, &quot;</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时j指向PCB所在内存页的顶部， i指向<code>task_struct</code>结构体的下一个字节。下面这段代码的所用实际就是统计内核栈中空闲大小。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/show_task.png" alt="show_task" tabindex="0" loading="lazy"><figcaption>show_task</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d (of %d) chars free in kernel stack\\n\\r&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内核栈的位置是在fork.c中<code>copy_process</code>设置的。</p><h3 id="show-stat" tabindex="-1"><a class="header-anchor" href="#show-stat" aria-hidden="true">#</a> show_stat</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">show_stat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数内部调用<code>show_task</code>函数，实际上就是遍历<code>task</code>数组， 调用<code>show_stat</code>函数显示进程相关信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历task数组</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token function">show_task</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用show_task</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-state-restore" tabindex="-1"><a class="header-anchor" href="#math-state-restore" aria-hidden="true">#</a> math_state_restore</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">math_state_restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法的调用层级如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── int 0x7
  └── device_not_available
	└── math_state_restore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是将当前协处理器内容保存到老协处理器状态数组中，并将当前任务的协处理器内容加载进协处理器。</p><p>这个条件判断检查上一个使用数学协处理器的任务是否与当前任务相同。如果是，则说明上一个任务就是当前任务，不需要进行任何操作，直接返回。这是一种优化，避免在不必要的情况下重复保存和恢复数学协处理器的状态。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fwait</code> 指令是协处理器指令，用于确保之前的协处理器操作已经完成。在发送新的协处理器指令之前，必须确保之前的操作已经完成。</p><p>如果上一个任务使用了数学协处理器，则使用 <code>fnsave</code> 指令保存其协处理器状态到该任务的 <code>tss.i387</code> 结构中。<code>fnsave</code> 指令将协处理器的状态保存到内存中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;fwait&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;fnsave %0&quot;</span><span class="token operator">::</span><span class="token string">&quot;m&quot;</span> <span class="token punctuation">(</span>last_task_used_math<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新 <code>last_task_used_math</code> 指针，指向当前任务。这是为了在下一次调用时，可以知道上一个使用数学协处理器的任务是哪一个。</p><p>如果当前任务曾经使用过数学协处理器，则使用 <code>frstor</code> 指令从任务的 <code>tss.i387</code> 结构中恢复其协处理器状态。<code>frstor</code> 指令从内存中加载协处理器的状态。</p><p>如果当前任务是第一次使用数学协处理器，则使用 <code>fninit</code> 指令向协处理器发送初始化命令，并设置当前任务的 used_math 标志为 1，表示该任务已经使用了数学协处理器。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	last_task_used_math<span class="token operator">=</span>current<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>used_math<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;frstor %0&quot;</span><span class="token operator">::</span><span class="token string">&quot;m&quot;</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;fninit&quot;</span><span class="token operator">::</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向协处理器发初始化命令</span>
		current<span class="token operator">-&gt;</span>used_math<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 设置已使用协处理器标志</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-pause" tabindex="-1"><a class="header-anchor" href="#sys-pause" aria-hidden="true">#</a> sys_pause</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是<code>pause</code>的系统调用。该函数会将当前任务的状态修改为可中断的状态， 并调用<code>schedule</code>函数去进行进程的调度。</p><p>调用<code>pause</code>函数的进程会进入睡眠状态， 直到收到一个信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span>
<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sleep-on" tabindex="-1"><a class="header-anchor" href="#sleep-on" aria-hidden="true">#</a> sleep_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将当前的task置为<strong>不可中断的等待状态</strong>， 直到被<code>wake_up</code>唤醒再继续执行。入参p是等待任务队列的头指针。通过p指针和tmp变量将等待的任务串在了一起。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/sleep_on.png" alt="sleep_on示意图" tabindex="0" loading="lazy"><figcaption>sleep_on示意图</figcaption></figure><p>该函数首先对一些异常情况进行了处理他， 例如p是空指针。或者当前task是任务0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>

<span class="token comment">// 若指针无效，则退出。（指针所指的对象可以是NULL，但指针本身不会为0)。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 如果当前任务是任务0，则死机(impossible!)。</span>
	<span class="token function">panic</span> <span class="token punctuation">(</span><span class="token string">&quot;task[0] trying to sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着让当前等待任务的头指针指向当前任务。并将当前任务修改为<strong>不可中断的等待状态</strong>。进行调用schedule函数让操作系统切换其他任务执行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span>
<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当程序从<code>schedule</code>返回继续执行时，说明任务已经被显式的<code>wake_up</code>，如果此时还有其他进程仍然在等待，那么也一同唤醒。</p><p>因为任务都在等待同样的资源， 那么当资源可用的时候， 就可以唤醒所有等待的任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>			<span class="token comment">// 若还存在等待的任务，则也将其置为就绪状态（唤醒）。</span>
	tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的将<code>tmp-&gt;state = 0</code>具有传递性，如果当前进程被唤醒，则将<code>sleep</code>链的下一个进程唤醒。当CPU执行到下一个进程时，又会将再下一个进程的状态状态改为运行态，以此类推。</p><h3 id="interruptible-sleep-on" tabindex="-1"><a class="header-anchor" href="#interruptible-sleep-on" aria-hidden="true">#</a> interruptible_sleep_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">interruptible_sleep_on</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数与<code>sleep_on</code>类似，但是该函数会将任务的状态修改为<strong>可中断的等待状态</strong>， 而<code>sleep_on</code>则是将任务修改为<strong>不可中断的等待状态</strong>。因此通过<code>interruptible_sleep_on</code>而等待的task是可以被信号唤醒的。 而通过<code>sleep_on</code>而等待的task是<strong>不会被信号唤醒的</strong>，只能通过<code>wake_up</code>函数唤醒。</p><p>这个点在<code>schedule</code>方法中也可以看出，当进程状态是<code>TASK_INTERRUPTIBLE</code>，可以被信号唤醒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span>
		<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/interruptible_sleep_on.png" alt="interruptible_sleep_on示意图" tabindex="0" loading="lazy"><figcaption>interruptible_sleep_on示意图</figcaption></figure><p>下面这段代码与<code>sleep_on</code>并无太大区别， 只是将进程的状态修改为可中断的等待状态。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span> <span class="token punctuation">(</span><span class="token string">&quot;task[0] trying to sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>
repeat<span class="token operator">:</span>
	current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span>
	<span class="token function">schedule</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于任务是可以被信号唤醒的，因此下面需要判断唤醒的任务是否是等待任务队列的头节点。如果不是则需要等待其他任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> current<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面一句代码有误，应该是<code>*p = tmp</code>，让队列头指针指向其余等待任务，否则在当前任务之前插入 等待队列的任务均被抹掉了</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
	tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wake-up" tabindex="-1"><a class="header-anchor" href="#wake-up" aria-hidden="true">#</a> wake_up</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是唤醒某一个任务。*p是任务等待队列的头指针。由于新的等待任务是插入在等待队列头指针处，因此唤醒的是最后进入等待队列的任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		<span class="token comment">// 置为就绪（可运行）状态。</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ticks-to-floppy-on" tabindex="-1"><a class="header-anchor" href="#ticks-to-floppy-on" aria-hidden="true">#</a> ticks_to_floppy_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ticks_to_floppy_on</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数指定软盘到正常运转状态所需延迟滴答数（时间）。</p><p>入参nr代表软驱号，其范围是（0-3）。因此程序的开始先进行参数的判断。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// 系统最多4个软驱。</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>nr<span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;floppy_on: nr&gt;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// 下面数组分别存放各软驱在马达停转之前需维持的时间。程序中设定为10000个滴答，1个滴答=1/100秒，因此是100秒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> moff_timer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
moff_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>		<span class="token comment">/* 100 s = very big :-) */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后取当前DOR寄存器值到临时变量mask中，并把指定软驱的马达启动标志置位。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">/* use floppy_off to turn it off */</span>
	mask <span class="token operator">|=</span> current_DOR<span class="token punctuation">;</span>
    <span class="token comment">// 如果当前没有选择软驱，则首先复位其他软驱的选择位，然后置指定软驱选择位。</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		mask <span class="token operator">&amp;=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span>
		mask <span class="token operator">|=</span> nr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>current_DOR定义如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">char</span> current_DOR <span class="token operator">=</span> <span class="token number">0x0C</span><span class="token punctuation">;</span>       <span class="token comment">// 允许DMA中断请求、启动FDC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该寄存器每位的定义如下：</p><ul><li>位7-4：分别控制驱动器D-A马达的启动。1-启动；0-关闭。</li><li>位3：1 - 允许DMA和中断请求；0 - 禁止DMA和中断请求。</li><li>位2：1 - 允许软盘控制器；0 - 复位软盘控制器。</li><li>位1-0：00-11，用于选择控制的软驱A-D。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+---------------+------+------+-------+
+   reg<span class="token punctuation">[</span><span class="token number">7</span>：4<span class="token punctuation">]</span>   <span class="token operator">|</span>reg<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">|</span>reg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">|</span>reg<span class="token punctuation">[</span><span class="token number">1</span>:0<span class="token operator">|</span>
+---------------+------+------+-------+
+    0000       +  <span class="token number">1</span>   +  <span class="token number">1</span>   +  00   +
+-------------------------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此current_DOR的含义是允许DMA中断请求、启动软盘控制器。</p><p>mask设置的1代表运行A马达的启动。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">char</span> mask <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">&lt;&lt;</span> nr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果数字输出寄存器的当前值与要求的值不同，则向FDC数字输出端口输出新值(mask)，</p><p>并且如果要求启动的马达还没有启动，则置相应软驱的马达启动定时器值(HZ/2 = 0.5秒，或50个滴答)。</p><p>若已经启动，则再设置启动定时为2个滴答，能满足下面<code>do_floppy_timer()</code>中先递减后判断的要求。执行本次定时代码的要求即可。此后更新当前数字输出寄存器<code>current_DOR</code>。</p><p>随后可以开启中断。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">!=</span> current_DOR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">outb</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">^</span> current_DOR<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span>
			mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> HZ<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
			mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
		current_DOR <span class="token operator">=</span> mask<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 开中断</span>
	<span class="token keyword">return</span> mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 最后返回启动马达所需的时间值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floppy-on" tabindex="-1"><a class="header-anchor" href="#floppy-on" aria-hidden="true">#</a> floppy_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">floppy_on</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数等待指定软驱马达启动所需时间。</p><p>等待指定软驱马达启动所需的一段时间，然后返回。设置指定软驱的马达启动到正常转速所需的延时，然后睡眠等待。在定时中断过程中会一直递减判断这里设定的延时值。当延时到期，就会唤醒这里的等待进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">// 关中断</span>
    <span class="token comment">// 如果马达启动定时还没到，就一直把当前进程置为不可中断睡眠状态并放入等待马达运行的队列中。</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">ticks_to_floppy_on</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">sleep_on</span><span class="token punctuation">(</span>nr<span class="token operator">+</span>wait_motor<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">// 开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floppy-off" tabindex="-1"><a class="header-anchor" href="#floppy-off" aria-hidden="true">#</a> floppy_off</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">floppy_off</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭相应的软驱马达停转定时器3s。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>moff_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span>HZ<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>置关闭相应软驱马达停转定时器(3秒)。若不使用该函数明确关闭指定的软驱马达，则在马达开启100秒之后也会被关闭</p><h3 id="do-floppy-timer" tabindex="-1"><a class="header-anchor" href="#do-floppy-timer" aria-hidden="true">#</a> do_floppy_timer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_floppy_timer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>软盘定时处理子程序。调用关系如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── int 0x20
  └── timer_interrupt
	└── do_timer
		└── do_floppy_timer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新马达启动定时值和马达关闭停转计时值。该子程序会在时钟定时中断过程中被调用，因此系统每经过一个滴答(10ms)就会被调用一次，随时更新马达开启或停转定时器 的值。如果某一个马达停转定时到，则将数字输出寄存器马达启动位复位。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> mask <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> current_DOR<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// 如果不是DOR指定的马达则跳过。</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// 如果马达启动定时到则唤醒进程。</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token function">wake_up</span><span class="token punctuation">(</span>i<span class="token operator">+</span>wait_motor<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>moff_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果马达停转定时到则复位相应马达，并更新数字输出寄存器</span>
			current_DOR <span class="token operator">&amp;=</span> <span class="token operator">~</span>mask<span class="token punctuation">;</span>
			<span class="token function">outb</span><span class="token punctuation">(</span>current_DOR<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span>
			moff_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment">// 否则马达停转计时递减。</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有一个马达启动定时到则唤醒进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token function">wake_up</span><span class="token punctuation">(</span>i<span class="token operator">+</span>wait_motor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果马达停转定时到期则复位相应马达启动位，并更新数字输出到寄存器。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>moff_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	current_DOR <span class="token operator">&amp;=</span> <span class="token operator">~</span>mask<span class="token punctuation">;</span>
	<span class="token function">outb</span><span class="token punctuation">(</span>current_DOR<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>否则马达停转计时递减。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  moff_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="add-timer" tabindex="-1"><a class="header-anchor" href="#add-timer" aria-hidden="true">#</a> add_timer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> jiffies<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是设置定时值和相应的处理函数。</p><p>在了解<code>add_timer</code>方法之前，首先了解一下timer_list的结构。包含两个元素：</p><ul><li>jiffies 定时滴答数</li><li>定时处理函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token punctuation">{</span>
	<span class="token keyword">long</span> jiffies<span class="token punctuation">;</span>                   <span class="token comment">// 定时滴答数</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 定时处理程序</span>
	<span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> next<span class="token punctuation">;</span>       <span class="token comment">// 链接指向下一个定时器</span>
<span class="token punctuation">}</span> timer_list<span class="token punctuation">[</span>TIME_REQUESTS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span> next_timer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment">// next_timer是定时器队列头指针</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果定时的值小于0， 那么立即调用处理函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果定时的值大于0， 那么首先取<code>timer_list</code>数组中寻找一个位置，将该位置上的滴答数设置为<code>jiffies</code>，将该位置上的\`\`fn\`\`\`设置为入参fn。并让next_timer指向它。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> timer_list <span class="token punctuation">;</span> p <span class="token operator">&lt;</span> timer_list <span class="token operator">+</span> TIME_REQUESTS <span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-&gt;</span>fn<span class="token punctuation">)</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> timer_list <span class="token operator">+</span> TIME_REQUESTS<span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;No more time requests free&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> next_timer<span class="token punctuation">;</span>
next_timer <span class="token operator">=</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段代码的作用是将刚刚插入链表中的timer移动的合适的位置。</p><p>由于<code>next_timer</code>这个链表上的jiffies是一个相对值，即相对于前面一个timer还有多久到期。因此上面步骤的timer也需要进行转换。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/add_timer.png" alt="timer移动示意图" tabindex="0" loading="lazy"><figcaption>timer移动示意图</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies <span class="token operator">&lt;</span> p<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p<span class="token operator">-&gt;</span>jiffies <span class="token operator">-=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span><span class="token comment">//减去下一个timer的jiffies</span>
	fn <span class="token operator">=</span> p<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span><span class="token comment">//将当前的fn保存给临时变量</span>
	p<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span><span class="token comment">//将当前的fn设置为下一个timer的fn</span>
	p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span><span class="token comment">//将下一个timer的fn设置为临时变量fn</span>
	jiffies <span class="token operator">=</span> p<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span><span class="token comment">//将jiffies保存给一个临时变量</span>
	p<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span><span class="token comment">//将当前的jiffies设置为下一个timer的jiffies</span>
	p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span><span class="token comment">//将下一个timer的jiffies设置为当前的jiffies</span>
	p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	<span class="token comment">//这一步骤实际上将p向后挪动到合适的位置， 并把jiffies转化成相对值。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-timer" tabindex="-1"><a class="header-anchor" href="#do-timer" aria-hidden="true">#</a> do_timer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> cpl<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是时钟中断的处理函数。其在system_call.s中的timer_interrupt函数中被调用。调用层级如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── int 0x20
  └── timer_interrupt
	└── do_timer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数<code>cp</code>表示的是当前的特权级， 0表示时钟中断发生时，当前运行在内核态，3表示时钟中断发生时，当前运行在用户态。</p><p>程序的开始判断扬声器发生次数是否已经到。如果到了，就停止发声。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">extern</span> <span class="token keyword">int</span> beepcount<span class="token punctuation">;</span>               <span class="token comment">// 扬声器发声滴答数</span>
	<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 关闭扬声器。</span>

    <span class="token comment">// 如果发声计数次数到，则关闭发声。(向0x61口发送命令，复位位0和1，位0</span>
    <span class="token comment">// 控制8253计数器2的工作，位1控制扬声器)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>beepcount<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>beepcount<span class="token punctuation">)</span>
			<span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里代码似乎可以简化为</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span>beepcount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">--</span>beepcount<span class="token punctuation">;</span>
	<span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sysbeepstop</code>定义在<code>console.c</code>中，向<code>0x61</code>口发送命令，复位位0和1，即<code>0xFC = 11111100</code>，位0控制8253计数器2的工作，位1控制扬声器)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* disable counter 2 */</span>
	<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码根据<code>cpl</code>的值将进程PCB中的<code>utime</code>和<code>stime</code>进行修改。如果<code>cpl</code>为0，则增加stime(supervisor time)， 如果<code>cpl</code>为3， 则增加<code>utime</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>cpl<span class="token punctuation">)</span>
	current<span class="token operator">-&gt;</span>utime<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	current<span class="token operator">-&gt;</span>stime<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面对定时器的链表进行遍历。 将链表的第一个定时器的滴答数减1。如果滴答数已经等于0， 代表该定时器已经到期，那么需要调用相应的处理程序进行处理。定时器是会在<code>add_timer</code>被创建。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>next_timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	next_timer<span class="token operator">-&gt;</span>jiffies<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>next_timer <span class="token operator">&amp;&amp;</span> next_timer<span class="token operator">-&gt;</span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		fn <span class="token operator">=</span> next_timer<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span>
		next_timer<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		next_timer <span class="token operator">=</span> next_timer<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面代码则是将当前运行的进程的时间片减去1，如果此时进程时间片没有用完，该函数则返回。 如果此时进程时间已经用完，则将时间片设置为0。并且如果此时cpl表明中断发生用户态，那么还将会触发进程的调度。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>current<span class="token operator">-&gt;</span>counter<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-alarm" tabindex="-1"><a class="header-anchor" href="#sys-alarm" aria-hidden="true">#</a> sys_alarm</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_alarm</span><span class="token punctuation">(</span><span class="token keyword">long</span> seconds<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于设置<strong>报警值</strong>。</p><p><code>jiffies</code>是指的是系统开机到目前经历的滴答数。</p><p><code>current-&gt;alarm</code>的单位也是系统滴答数。</p><p>因此<code>(current-&gt;alarm - jiffies) /100</code> 就代表就是当前的定时器还剩下多少秒。</p><p>而设置<code>alarm</code>值则需要加上系统当前的滴答数据<code>jiffies</code>， 如下图所示:</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/sys_alarm.png" alt="sys_alarm" tabindex="0" loading="lazy"><figcaption>sys_alarm</figcaption></figure><h3 id="sys-getpid" tabindex="-1"><a class="header-anchor" href="#sys-getpid" aria-hidden="true">#</a> sys_getpid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取进程的pid。</p><h3 id="sys-getppid" tabindex="-1"><a class="header-anchor" href="#sys-getppid" aria-hidden="true">#</a> sys_getppid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getppid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取父进程的pid。</p><h3 id="sys-getuid" tabindex="-1"><a class="header-anchor" href="#sys-getuid" aria-hidden="true">#</a> sys_getuid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取用户的uid。</p><h3 id="sys-geteuid" tabindex="-1"><a class="header-anchor" href="#sys-geteuid" aria-hidden="true">#</a> sys_geteuid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_geteuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取用户的有效id(euid)。</p><h3 id="sys-getgid" tabindex="-1"><a class="header-anchor" href="#sys-getgid" aria-hidden="true">#</a> sys_getgid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getgid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取组和id号(gid)。</p><h3 id="sys-getegid" tabindex="-1"><a class="header-anchor" href="#sys-getegid" aria-hidden="true">#</a> sys_getegid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getegid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取有效的组id(egid)</p><h3 id="sys-nice" tabindex="-1"><a class="header-anchor" href="#sys-nice" aria-hidden="true">#</a> sys_nice</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_nice</span><span class="token punctuation">(</span><span class="token keyword">long</span> increment<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是降低进程在调度时的优先级。</p><h3 id="sched-init" tabindex="-1"><a class="header-anchor" href="#sched-init" aria-hidden="true">#</a> sched_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sched_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是初始化进程调度模块。</p><p>首先在<code>gdt</code>表中设置任务0的<code>tss</code>和<code>ldt</code>值。接着对其他任务的tss和ldt进行初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">set_tss_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>tss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_ldt_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_LDT_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> gdt<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		p<span class="token operator">-&gt;</span>a<span class="token operator">=</span>p<span class="token operator">-&gt;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
		p<span class="token operator">-&gt;</span>a<span class="token operator">=</span>p<span class="token operator">-&gt;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这句话用于将EFLAGS的NT标志进行复位。 主要执行了三个指令：</p><ul><li><code>pushfl</code>：将标志寄存器（flags register）的内容（通常包括 CPU 状态标志，比如进位标志、零标志等）压入栈中。</li><li><code>andl</code> $0xffffbfff,(%esp)：将栈顶的值与 0xffffbfff 进行按位与运算。这个操作的目的是将 NT（Nested Task）标志位清零，0xffffbfff 是一个掩码，将 NT 位清零，其余位不变。</li><li><code>popfl</code>：将修改后的标志寄存器的值弹出栈，并恢复到标志寄存器中。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;pushfl ; andl $0xffffbfff,(%esp) ; popfl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 复位NT标志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>NT 标志是 x86 架构中的一个标志位，位于 EFLAGS 寄存器的第 14 位（从右往左数）。NT 标志用于指示 CPU 是否支持任务切换（task switching）功能。</p><p>EFLAGS还有一些其他标志位，如下所示：</p><ul><li>CF（Carry Flag）进位标志：用于处理无符号整数运算时的进位情况。</li><li>PF（Parity Flag）奇偶标志：用于指示结果中包含的 1 的位数是否为偶数。</li><li>AF（Adjust Flag）辅助进位标志：用于处理 BCD（Binary Coded Decimal）运算中的进位情况。</li><li>ZF（Zero Flag）零标志：用于指示运算结果是否为零。</li><li>SF（Sign Flag）符号标志：用于指示运算结果的符号（正或负）。</li><li>TF（Trap Flag）陷阱标志：用于启用单步调试模式。</li><li>IF（Interrupt Enable Flag）中断允许标志：用于控制外部中断的允许或禁止。</li><li>DF（Direction Flag）方向标志：用于控制字符串操作的方向，比如向上或向下。</li><li>OF（Overflow Flag）溢出标志：用于指示有符号整数运算是否发生了溢出。</li></ul><p>下面的代码显式地将任务0的tss加载到寄存器tr中， 显式地将任务0的ldt加载到ldtr中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">ltr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lldt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ltr和lldt的定义如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ltr</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;ltr %%ax&quot;</span><span class="token expression"><span class="token operator">::</span></span><span class="token string">&quot;a&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">_TSS</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lldt</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;lldt %%ax&quot;</span><span class="token expression"><span class="token operator">::</span></span><span class="token string">&quot;a&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">_LDT</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ltr(n)</code> 宏：</p><p>这个宏用于加载任务状态段（TSS）的选择子，从而切换到新的任务上下文。</p><p><code>&quot;ltr %%ax&quot;</code> 是汇编指令，它将 AX 寄存器中的值加载到任务寄存器（Task Register，TR）中，从而指定新的 <code>TSS</code>。</p><p><code>::&quot;a&quot; (_TSS(n))</code> 是输入限定符，指定了 AX 寄存器的值为 <code>_TSS(n)</code>，<code>_TSS(n)</code> 可能是一个宏，用于生成 TSS 的选择子值。</p><p><code>lldt(n)</code> 宏：</p><p>这个宏用于加载局部描述符表（LDT）的选择子，从而切换到新的 LDT。</p><p><code>&quot;lldt %%ax&quot;</code> 是汇编指令，它将 AX 寄存器中的值加载到局部描述符表寄存器（Local Descriptor Table Register, LDTR）中，从而指定新的 LDT。</p><p><code>::&quot;a&quot; (_LDT(n))</code> 是输入限定符，指定了 AX 寄存器的值为 <code>_LDT(n)</code>，<code>_LDT(n)</code> 可能是一个宏，用于生成 LDT 的选择子值。</p><p>下面的代码用于初始化8253定时器。通道0，选择工作方式3，二进制计数方式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// PC机8253定时芯片的输入时钟频率约为1.193180MHz. Linux内核希望定时器发出中断的频率是</span>
<span class="token comment">// 100Hz，也即没10ms发出一次时钟中断。因此这里的LATCH是设置8253芯片的初值。</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LATCH</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1193180</span><span class="token operator">/</span>HZ<span class="token punctuation">)</span></span></span>
<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* binary, mode 3, LSB/MSB, ch 0 */</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>LATCH <span class="token operator">&amp;</span> <span class="token number">0xff</span> <span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* LSB */</span>
<span class="token function">outb</span><span class="token punctuation">(</span>LATCH <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* MSB */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>outb_p(0x36,0x43)</code>：</p><p>这一行向 I/O 端口地址 <code>0x43</code> 发送字节 <code>0x36</code>。在 PC 架构中，<code>0x43</code> 是 PIT 的控制寄存器端口，<code>0x36</code> 是控制字节，用于配置 PIT 的工作模式。 0x36 中的不同位用于设置 PIT 的工作模式、计数值的读取方式（LSB/MSB）等。在这里，0x36 设置了二进制计数模式（binary mode）、工作模式 3（mode 3）、以及将计数值作为 LSB/MSB 分别写入的方式。</p><p><code>outb_p(LATCH &amp; 0xff , 0x40)</code>：</p><ul><li>这一行向 I/O 端口地址 0x40 发送了 LATCH 的低字节（LSB）。</li><li>LATCH 可能是一个宏或者变量，代表了 PIT 的计数值（定时器的计数器初始值）。在这里，&amp; 0xff 用于确保只发送 LATCH 的低 8 位。</li></ul><p><code>outb(LATCH &gt;&gt; 8 , 0x40)</code>：</p><p>这一行向 I/O 端口地址 0x40 发送了 LATCH 的高字节（MSB）。<code>LATCH &gt;&gt; 8</code> 是将 LATCH 向右移动 8 位，以获取其高字节部分。</p><p>综合起来，这段代码配置了 PIT 为二进制计数模式，工作模式 3，然后向 PIT 发送了计数器的初始值（分为低字节和高字节），从而开始了一个间隔定时器的计数。(PIT 是 Programmable Interval Timer 的缩写，中文意为可编程间隔定时器)</p><p>最后设置时钟中断处理程序的处理函数， 设置系统调用的中断处理函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>timer_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>system_call<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,219),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-kernel-sched.html.vue"]]);export{r as default};
