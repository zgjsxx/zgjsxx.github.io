import{_ as n,V as s,W as a,a0 as p}from"./framework-9a29aaa0.js";const t={},e=p(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86trapc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录进程管理trap.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#die">die</a></li><li><a href="#trap_init">trap_init</a></li><li><a href="#%E4%B8%AD%E6%96%AD%E5%87%BD%E6%95%B0%E5%85%A5%E5%8F%A3">中断函数入口</a><ul><li><a href="#do_double_fault">do_double_fault</a></li><li><a href="#do_general_protection">do_general_protection</a></li><li><a href="#do_divide_error">do_divide_error</a></li><li><a href="#do_int3">do_int3</a></li><li><a href="#do_nmi">do_nmi</a></li><li><a href="#do_debug">do_debug</a></li><li><a href="#do_overflow">do_overflow</a></li><li><a href="#do_bounds">do_bounds</a></li><li><a href="#do_invalid_op">do_invalid_op</a></li><li><a href="#do_device_not_available">do_device_not_available</a></li><li><a href="#do_coprocessor_segment_overrun">do_coprocessor_segment_overrun</a></li><li><a href="#do_invalid_tss">do_invalid_TSS</a></li><li><a href="#do_segment_not_present">do_segment_not_present</a></li><li><a href="#do_stack_segment">do_stack_segment</a></li><li><a href="#do_coprocessor_error">do_coprocessor_error</a></li><li><a href="#do_reserved">do_reserved</a></li></ul></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录进程管理trap-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理trap-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理trap.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>trap.c程序主要包括一些在处理异常故障（硬件中断）底层代码asm.s文件中调用的相应c函数。用于显示出错位置和出错号等调试信息。大部分的方法都会使用<code>die</code>方法显示详细的出错信息。</p><p>trap.c中还有一个重要的方法<code>trap_init</code>，该方法在init/main.c中被调用，用于初始化硬件异常处理中断向量(陷阱门)，并设置允许中断请求信号的倒来。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="die" tabindex="-1"><a class="header-anchor" href="#die" aria-hidden="true">#</a> die</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">long</span> esp_ptr<span class="token punctuation">,</span><span class="token keyword">long</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>d该函数用于在出现异常时，打印一些出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token operator">*</span> esp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> esp_ptr<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %04x\\n\\r&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>nr<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;EIP:\\t%04x:%p\\nEFLAGS:\\t%p\\nESP:\\t%04x:%p\\n&quot;</span><span class="token punctuation">,</span>
	esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;fs: %04x\\n&quot;</span><span class="token punctuation">,</span><span class="token function">_fs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;base: %p, limit: %p\\n&quot;</span><span class="token punctuation">,</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Stack: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%p &quot;</span><span class="token punctuation">,</span><span class="token function">get_seg_long</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Pid: %d, process nr: %d\\n\\r&quot;</span><span class="token punctuation">,</span>current<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span><span class="token number">0xffff</span> <span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span><span class="token number">0xff</span> <span class="token operator">&amp;</span> <span class="token function">get_seg_byte</span><span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* play segment exception */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数首先将传递进来的堆栈指针 <code>esp_ptr</code> 转换为长整型指针 <code>esp</code>，以便于后续对堆栈内容的读取。接着用 printk 打印出一些异常信息的标题，以及异常号的低16位。这些信息可能包含异常的类型或来源。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token operator">*</span> esp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> esp_ptr<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %04x\\n\\r&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>nr<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，打印当前堆栈中的关键寄存器值，包括指令指针（EIP）、标志寄存器（EFLAGS）和堆栈指针（ESP）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;EIP:\\t%04x:%p\\nEFLAGS:\\t%p\\nESP:\\t%04x:%p\\n&quot;</span><span class="token punctuation">,</span>
	esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，它打印当前任务的文件系统段寄存器值（fs），以及当前任务局部描述符表（LDT）中第二个段描述符指向的段的基址和段限长。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;fs: %04x\\n&quot;</span><span class="token punctuation">,</span><span class="token function">_fs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;base: %p, limit: %p\\n&quot;</span><span class="token punctuation">,</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用get_base和get_limit方法获取段基址和段限长，这里基于段描述符的结构进行实现。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+-------------------+-----------------+
<span class="token operator">|</span> 段描述符字段       <span class="token operator">|</span> 字节            <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 基址 <span class="token number">23</span>:16        <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>             <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 其他              <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> 高4位        <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 基址 <span class="token number">29</span>:16        <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> 低4位        <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 其他              <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>             <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 其他              <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 基址 <span class="token number">23</span>:16        <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 基址 <span class="token number">15</span>:0         <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2</span>-3<span class="token punctuation">]</span>           <span class="token operator">|</span>
+-------------------+-----------------+
<span class="token operator">|</span> 段限长 <span class="token number">15</span>:0       <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">0</span>-1<span class="token punctuation">]</span>           <span class="token operator">|</span>
+-------------------+-----------------+

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来如果堆栈在用户数据段，则还会打印16字节堆栈内容。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Stack: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%p &quot;</span><span class="token punctuation">,</span><span class="token function">get_seg_long</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后打印了任务号，进程号，10字节指令码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 取当前运行任务的任务号</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Pid: %d, process nr: %d\\n\\r&quot;</span><span class="token punctuation">,</span>current<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span><span class="token number">0xffff</span> <span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span><span class="token number">0xff</span> <span class="token operator">&amp;</span> <span class="token function">get_seg_byte</span><span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* play segment exception */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里相对难懂的是这句代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span><span class="token number">0xff</span> <span class="token operator">&amp;</span> <span class="token function">get_seg_byte</span><span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>esp[1]</code>的内容是cs段描述符， <code>esp[0]</code>的内容是EIP指针。这段代码的作用是打印当前栈帧中连续 10 个字节的十六进制值，以便在调试时查看栈上的内容。</p><h3 id="trap-init" tabindex="-1"><a class="header-anchor" href="#trap-init" aria-hidden="true">#</a> trap_init</h3><p>trap_init方法的原型如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">trap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是异常(陷阱)中断程序初始化子程序。设置它们的中断调用门(中断向量)。<code>set_trap_gate</code>与<code>set_system_gate</code>都使用了IDT中的陷阱门，它们之间的区别在于前者设置的特权级为0，后者是3。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>divide_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nmi<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>int3<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* int3-5 can be called from all */</span>
	<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>bounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>invalid_op<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>device_not_available<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>double_fault<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>coprocessor_segment_overrun<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>invalid_TSS<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>segment_not_present<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stack_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>general_protection<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>page_fault<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>reserved<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>coprocessor_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">48</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">set_trap_gate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>reserved<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>irq13<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xfb</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xdf</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>parallel_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了陷阱门以外，还有一种中断门，其方法是<code>set_intr_gate</code>。</p><p><strong>中断门</strong>和<strong>陷阱门</strong>是两种不同类型的门，用于在 x86 架构中实现中断和异常处理。它们之间的主要区别在于如何处理被调用的处理程序（即中断服务例程或异常处理例程）的返回方式。</p><p>中断门（Interrupt Gate）：</p><ul><li>中断门用于处理中断请求（IRQs）或外部设备产生的中断。当硬件引发中断时，CPU会从当前执行的代码转到中断门指定的中断服务例程中执行。中断门通常用于处理需要及时响应并可能涉及硬件处理的情况，如键盘输入、定时器中断等。</li><li>中断门在调用中断服务例程时会关闭中断标志位（IF），这意味着在执行中断服务例程期间，CPU不会响应其他中断请求。</li><li>中断服务例程执行完毕后，通常会通过 IRET 指令返回到被中断的程序，IRET 会恢复中断标志位，从而允许其他中断请求再次被响应。</li></ul><p>陷阱门（Trap Gate）：</p><ul><li>陷阱门用于处理软件产生的异常或陷阱，如除零错误、调试异常等。与中断不同，陷阱是由当前运行的程序显式地触发的，而不是由外部设备引发的。</li><li>与中断门不同，陷阱门在调用陷阱处理例程时不会关闭中断标志位，这意味着在处理陷阱期间，其他中断仍然可以被响应。</li><li>陷阱处理例程执行完毕后，同样通过 IRET 指令返回到被中断的程序，恢复中断标志位。</li></ul><p>总的来说，中断门和陷阱门之间的主要区别在于中断门会关闭中断，而陷阱门不会。中断门通常用于处理需要及时响应且可能涉及硬件处理的情况，而陷阱门则用于处理软件产生的异常或陷阱。</p><p><code>set_trap_gate</code>和<code>set_system_gate</code>都是通过<code>_set_gate</code>宏定义实现的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_set_gate</span><span class="token expression"><span class="token punctuation">(</span>gate_addr<span class="token punctuation">,</span>type<span class="token punctuation">,</span>dpl<span class="token punctuation">,</span>addr<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token function">__asm__</span> <span class="token punctuation">(</span></span><span class="token string">&quot;movw %%dx,%%ax\\n\\t&quot;</span> <span class="token punctuation">\\</span>
	<span class="token string">&quot;movw %0,%%dx\\n\\t&quot;</span> <span class="token punctuation">\\</span>
	<span class="token string">&quot;movl %%eax,%1\\n\\t&quot;</span> <span class="token punctuation">\\</span>
	<span class="token string">&quot;movl %%edx,%2&quot;</span> <span class="token punctuation">\\</span>
	<span class="token expression"><span class="token operator">:</span> </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;i&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0x8000</span><span class="token operator">+</span><span class="token punctuation">(</span>dpl<span class="token operator">&lt;&lt;</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>type<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\\</span>
	<span class="token string">&quot;o&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>gate_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\\</span>
	<span class="token string">&quot;o&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>gate_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\\</span>
	<span class="token string">&quot;d&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span></span>
	<span class="token string">&quot;a&quot;</span> <span class="token punctuation">(</span><span class="token number">0x00080000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个是内嵌汇编，理解起来有一定难度，我们慢慢读。</p><p>在<code>head.s</code>中，我们曾经将所有的中断描述符都设置为了<code>ignore_int</code>。这里再回顾一下当时的过程，使用了EDX存储高32位数据，EAX存储了低32位数据。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">63</span>                                      <span class="token number">32</span> 
+------------------+-+-+------+---+-----+
+                  <span class="token operator">|</span> <span class="token operator">|</span>D <span class="token operator">|</span>     <span class="token operator">|</span>   <span class="token operator">|</span>     +
+  偏移地址高16位   <span class="token operator">|</span>P<span class="token operator">|</span>P <span class="token operator">|</span>01110<span class="token operator">|</span>000<span class="token operator">|</span>     +
+                  <span class="token operator">|</span> <span class="token operator">|</span>L <span class="token operator">|</span>     <span class="token operator">|</span>   <span class="token operator">|</span>     +
+------------------+-+--+-----+---+-----+
+   addr<span class="token punctuation">[</span><span class="token number">31</span>：16<span class="token punctuation">]</span>   <span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span>00<span class="token operator">|</span>01110<span class="token operator">|</span>000<span class="token operator">|</span>00000+
+------------------+-+--+-----+---+-----+
+                 EDX                   +
+---------------------------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">31</span>                                     <span class="token number">0</span>
+------------------+-------------------+
+     段描述符      +   偏移地址低16位   +
+------------------+-------------------+
+       0x8        +    addr<span class="token punctuation">[</span><span class="token number">31</span>：16<span class="token punctuation">]</span>   +
+------------------+-------------------+
+                 EAX                  +
+--------------------------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>_set_gate</code>同样使用EDX存储高32位数据，EAX存储了低32位数据。</p><p>首先理解下占位符%0-%4：</p><ul><li>%0 由dpl和type组合成的类型标识字。修改存在为1，<code>0x8000 = 0x10000000_00000000</code>，相当于将存在位设置为1，设置dpl的值(dpl&lt;&lt;13)， 并设置中断的类型是陷阱门还是中断门(type&lt;&lt;8)。</li><li>%1 描述符低32位地址</li><li>%2 描述符高32位地址</li><li>%3 edx等于中断程序入口地址</li><li>%4 eax，高位设置位0x8，即段描述符是0x8。</li></ul><p>这里<code>edx</code>被初始化了中断程序入口地址。于是后面需要将其进行拆分，低16位要拆分到<code>eax</code>中。下面这句汇编的含义便是如此：</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>movw %%dx,%%ax\\n\\t&quot; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来将构建好的类型标识字赋给<code>edx</code>的低16位，即<code>dx</code></p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>movw %0,%%dx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>到此为止，edx和eax组装完毕，将其赋值到指定的内存地址上。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>&quot;movl %%eax,%1\\n\\t&quot; \\
&quot;movl %%edx,%2&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其实过程和之前设置<code>ignore_int</code>大同小异。</p><h3 id="中断函数入口" tabindex="-1"><a class="header-anchor" href="#中断函数入口" aria-hidden="true">#</a> 中断函数入口</h3><p>下面这部分是很多中断执行的最终的入口，大部分都是调用了<code>die</code>方法。</p><h4 id="do-double-fault" tabindex="-1"><a class="header-anchor" href="#do-double-fault" aria-hidden="true">#</a> do_double_fault</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_double_fault</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印double fault的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
	<span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;double fault&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-general-protection" tabindex="-1"><a class="header-anchor" href="#do-general-protection" aria-hidden="true">#</a> do_general_protection</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_general_protection</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印general protection的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
	<span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;general protection&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-divide-error" tabindex="-1"><a class="header-anchor" href="#do-divide-error" aria-hidden="true">#</a> do_divide_error</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_divide_error</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印divide error的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
	<span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;divide error&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-int3" tabindex="-1"><a class="header-anchor" href="#do-int3" aria-hidden="true">#</a> do_int3</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_int3</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">,</span>
		<span class="token keyword">long</span> fs<span class="token punctuation">,</span><span class="token keyword">long</span> es<span class="token punctuation">,</span><span class="token keyword">long</span> ds<span class="token punctuation">,</span>
		<span class="token keyword">long</span> ebp<span class="token punctuation">,</span><span class="token keyword">long</span> esi<span class="token punctuation">,</span><span class="token keyword">long</span> edi<span class="token punctuation">,</span>
		<span class="token keyword">long</span> edx<span class="token punctuation">,</span><span class="token keyword">long</span> ecx<span class="token punctuation">,</span><span class="token keyword">long</span> ebx<span class="token punctuation">,</span><span class="token keyword">long</span> eax<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印int3的信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> tr<span class="token punctuation">;</span>

	<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;str %%ax&quot;</span><span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;eax\\t\\tebx\\t\\tecx\\t\\tedx\\n\\r%8x\\t%8x\\t%8x\\t%8x\\n\\r&quot;</span><span class="token punctuation">,</span>
		eax<span class="token punctuation">,</span>ebx<span class="token punctuation">,</span>ecx<span class="token punctuation">,</span>edx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;esi\\t\\tedi\\t\\tebp\\t\\tesp\\n\\r%8x\\t%8x\\t%8x\\t%8x\\n\\r&quot;</span><span class="token punctuation">,</span>
		esi<span class="token punctuation">,</span>edi<span class="token punctuation">,</span>ebp<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> esp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\rds\\tes\\tfs\\ttr\\n\\r%4x\\t%4x\\t%4x\\t%4x\\n\\r&quot;</span><span class="token punctuation">,</span>
		ds<span class="token punctuation">,</span>es<span class="token punctuation">,</span>fs<span class="token punctuation">,</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;EIP: %8x   CS: %4x  EFLAGS: %8x\\n\\r&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-nmi" tabindex="-1"><a class="header-anchor" href="#do-nmi" aria-hidden="true">#</a> do_nmi</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_nmi</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印nmi的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;nmi&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-debug" tabindex="-1"><a class="header-anchor" href="#do-debug" aria-hidden="true">#</a> do_debug</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_debug</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印debug的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-overflow" tabindex="-1"><a class="header-anchor" href="#do-overflow" aria-hidden="true">#</a> do_overflow</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_overflow</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印overflow的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;overflow&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-bounds" tabindex="-1"><a class="header-anchor" href="#do-bounds" aria-hidden="true">#</a> do_bounds</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_bounds</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印bounds的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;bounds&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-invalid-op" tabindex="-1"><a class="header-anchor" href="#do-invalid-op" aria-hidden="true">#</a> do_invalid_op</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_invalid_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印invalid operand的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;invalid operand&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-device-not-available" tabindex="-1"><a class="header-anchor" href="#do-device-not-available" aria-hidden="true">#</a> do_device_not_available</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_device_not_available</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印device not available的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;device not available&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-coprocessor-segment-overrun" tabindex="-1"><a class="header-anchor" href="#do-coprocessor-segment-overrun" aria-hidden="true">#</a> do_coprocessor_segment_overrun</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_coprocessor_segment_overrun</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印coprocessor segment overrun的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;coprocessor segment overrun&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-invalid-tss" tabindex="-1"><a class="header-anchor" href="#do-invalid-tss" aria-hidden="true">#</a> do_invalid_TSS</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_invalid_TSS</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_invalid_TSS的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;invalid TSS&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-segment-not-present" tabindex="-1"><a class="header-anchor" href="#do-segment-not-present" aria-hidden="true">#</a> do_segment_not_present</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_segment_not_present</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_segment_not_present的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;segment not present&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-stack-segment" tabindex="-1"><a class="header-anchor" href="#do-stack-segment" aria-hidden="true">#</a> do_stack_segment</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_stack_segment</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_stack_segment的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;stack segment&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-coprocessor-error" tabindex="-1"><a class="header-anchor" href="#do-coprocessor-error" aria-hidden="true">#</a> do_coprocessor_error</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_coprocessor_error</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">!=</span> current<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;coprocessor error&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，函数检查 last_task_used_math 是否等于当前任务 current，如果不相等，则说明上次使用浮点数单元的任务不是当前任务，这意味着上一次的错误处理已经由其他任务处理了，因此当前任务无需处理该错误，直接返回。如果 last_task_used_math 等于当前任务 current，则说明上次使用浮点数单元的任务就是当前任务，需要当前任务来处理这个错误。</p><p>函数调用 die 函数，传递了错误消息字符串 &quot;coprocessor error&quot;、栈指针 esp 和错误代码 error_code 作为参数。这个 die 函数用于在内核发生严重错误时停止程序的执行，进行错误信息的输出和系统的关闭或者重启。</p><p>在Linux-0.11中，<code>do_coprocessor_error</code>没有被调用的地方。</p><p><code>trap_init</code>中设置的协处理器错误的中断函数入口是<code>coprocessor_error</code>，其定义在<code>system_call.s</code>中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>coprocessor_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="do-reserved" tabindex="-1"><a class="header-anchor" href="#do-reserved" aria-hidden="true">#</a> do_reserved</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_reserved</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用die打印do_reserved的出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;reserved (15,17-47) error&quot;</span><span class="token punctuation">,</span>esp<span class="token punctuation">,</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,123),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-kernel-trap.html.vue"]]);export{r as default};
