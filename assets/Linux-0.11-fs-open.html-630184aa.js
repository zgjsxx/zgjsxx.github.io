const e=JSON.parse('{"key":"v-30b8b062","path":"/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-open.html","title":"Linux-0.11 文件系统open.c详解","lang":"zh-CN","frontmatter":{"category":["Linux"],"tag":["Linux-0.11代码解读系列"],"description":"Linux-0.11 文件系统open.c详解 模块简介 对于一个文件系统，需要提供一些封装好的系统调用提供给应用层调用。例如打开一个文件，对于应用层而言，其并不关心底层的inode和buffer_cache的操作。 open.c便是提供这样的一个功能。 同样是文件系统high-level的API的有: open.c exec.c stat.c fcntl.c ioctl.c 函数详解","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-open.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux-0.11 文件系统open.c详解"}],["meta",{"property":"og:description","content":"Linux-0.11 文件系统open.c详解 模块简介 对于一个文件系统，需要提供一些封装好的系统调用提供给应用层调用。例如打开一个文件，对于应用层而言，其并不关心底层的inode和buffer_cache的操作。 open.c便是提供这样的一个功能。 同样是文件系统high-level的API的有: open.c exec.c stat.c fcntl.c ioctl.c 函数详解"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-21T05:44:18.000Z"}],["meta",{"property":"article:tag","content":"Linux-0.11代码解读系列"}],["meta",{"property":"article:modified_time","content":"2023-04-21T05:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-0.11 文件系统open.c详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-21T05:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块简介","slug":"模块简介","link":"#模块简介","children":[]},{"level":2,"title":"函数详解","slug":"函数详解","link":"#函数详解","children":[{"level":3,"title":"sys_ustat","slug":"sys-ustat","link":"#sys-ustat","children":[]},{"level":3,"title":"sys_utime","slug":"sys-utime","link":"#sys-utime","children":[]},{"level":3,"title":"sys_access","slug":"sys-access","link":"#sys-access","children":[]},{"level":3,"title":"sys_chdir","slug":"sys-chdir","link":"#sys-chdir","children":[]},{"level":3,"title":"sys_chroot","slug":"sys-chroot","link":"#sys-chroot","children":[]},{"level":3,"title":"sys_chmod","slug":"sys-chmod","link":"#sys-chmod","children":[]},{"level":3,"title":"sys_chown","slug":"sys-chown","link":"#sys-chown","children":[]},{"level":3,"title":"sys_open","slug":"sys-open","link":"#sys-open","children":[]},{"level":3,"title":"sys_creat","slug":"sys-creat","link":"#sys-creat","children":[]},{"level":3,"title":"sys_close","slug":"sys-close","link":"#sys-close","children":[]}]},{"level":2,"title":"Q & A","slug":"q-a","link":"#q-a","children":[]}],"git":{"createdTime":1680686630000,"updatedTime":1682055858000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":6}]},"readingTime":{"minutes":5.2,"words":1560},"filePathRelative":"posts/Linux/kernel/Linux-0.11/Linux-0.11-fs-open.md","localizedDate":"2023年4月5日","excerpt":"<h1> Linux-0.11 文件系统open.c详解</h1>\\n<h2> 模块简介</h2>\\n<p>对于一个文件系统，需要提供一些封装好的系统调用提供给应用层调用。例如打开一个文件，对于应用层而言，其并不关心底层的inode和buffer_cache的操作。 open.c便是提供这样的一个功能。</p>\\n<p>同样是文件系统high-level的API的有:</p>\\n<ul>\\n<li><strong>open.c</strong></li>\\n<li>exec.c</li>\\n<li>stat.c</li>\\n<li>fcntl.c</li>\\n<li>ioctl.c</li>\\n</ul>\\n<h2> 函数详解</h2>","autoDesc":true}');export{e as data};
