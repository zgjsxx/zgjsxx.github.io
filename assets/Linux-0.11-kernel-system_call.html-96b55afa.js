const e=JSON.parse('{"key":"v-7dca628a","path":"/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.html","title":"Linux-0.11 kernel目录进程管理system_call.s详解","lang":"zh-CN","frontmatter":{"category":["Linux"],"tag":["Linux-0.11代码解读系列"],"description":"Linux-0.11 kernel目录进程管理system_call.s详解 模块简介 本节主要介绍了在Linux-0.11中关于系统调用的相关实现。Linux-0.11使用int 0x80中断以及eax寄存器中存储的功能号去调用内核中所提供的功能，在系统调用发生的过程中伴随着用户态向内核态的主动切换。 需要注意的时，用户通常并不是直接使用系统调用的中断，而是libc中所提供的接口函数实现。 过程分析 system_call 当0x80号中断发生的时候，CPU除了切入内核态之外，还会自动完成下列几件事：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux-0.11 kernel目录进程管理system_call.s详解"}],["meta",{"property":"og:description","content":"Linux-0.11 kernel目录进程管理system_call.s详解 模块简介 本节主要介绍了在Linux-0.11中关于系统调用的相关实现。Linux-0.11使用int 0x80中断以及eax寄存器中存储的功能号去调用内核中所提供的功能，在系统调用发生的过程中伴随着用户态向内核态的主动切换。 需要注意的时，用户通常并不是直接使用系统调用的中断，而是libc中所提供的接口函数实现。 过程分析 system_call 当0x80号中断发生的时候，CPU除了切入内核态之外，还会自动完成下列几件事："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-27T11:18:21.000Z"}],["meta",{"property":"article:tag","content":"Linux-0.11代码解读系列"}],["meta",{"property":"article:modified_time","content":"2023-05-27T11:18:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-0.11 kernel目录进程管理system_call.s详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-27T11:18:21.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块简介","slug":"模块简介","link":"#模块简介","children":[]},{"level":2,"title":"过程分析","slug":"过程分析","link":"#过程分析","children":[{"level":3,"title":"system_call","slug":"system-call","link":"#system-call","children":[]}]}],"git":{"createdTime":1680579191000,"updatedTime":1685186301000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":4}]},"readingTime":{"minutes":2.51,"words":753},"filePathRelative":"posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.md","localizedDate":"2023年4月4日","excerpt":"<h1> Linux-0.11 kernel目录进程管理system_call.s详解</h1>\\n<h2> 模块简介</h2>\\n<p>本节主要介绍了在Linux-0.11中关于系统调用的相关实现。Linux-0.11使用<code>int 0x80</code>中断以及eax寄存器中存储的功能号去调用内核中所提供的功能，在系统调用发生的过程中伴随着用户态向内核态的主动切换。</p>\\n<p>需要注意的时，用户通常并不是直接使用系统调用的中断，而是libc中所提供的接口函数实现。</p>\\n<h2> 过程分析</h2>\\n<h3> system_call</h3>\\n<p>当0x80号中断发生的时候，CPU除了切入内核态之外，还会自动完成下列几件事：</p>","autoDesc":true}');export{e as data};
