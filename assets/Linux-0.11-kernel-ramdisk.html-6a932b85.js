import{_ as a,V as n,W as s,a0 as e}from"./framework-9a29aaa0.js";const t={},r=e(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86ramdiskc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录进程管理ramdisk.c详解</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#rd_init">rd_init</a></li><li><a href="#do_rd_request">do_rd_request</a></li><li><a href="#rd_load">rd_load</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录进程管理ramdisk-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理ramdisk-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理ramdisk.c详解</h1><p>ramdisk.c是内存虚拟盘的驱动程序。虚拟盘设备是一种利用物理内存来模拟实际磁盘存储数据的方式。其目的是提高对磁盘数据的读写操作速度。除了占用一些宝贵的内存资源外，其主要缺点是一旦系统崩溃或关闭，虚拟盘中的所有数据将全部消失。因此虚拟盘中通常存放一些系统命令等常用工具程序或临时数据，而非重要的输入文档。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="rd-init" tabindex="-1"><a class="header-anchor" href="#rd-init" aria-hidden="true">#</a> rd_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">rd_init</span><span class="token punctuation">(</span><span class="token keyword">long</span> mem_start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法的作用是返回内存虚拟盘ramdisk所需要的内存量。</p><p>首先设置设备的<code>request_fn</code>为<code>do_rd_request</code>。进而设置了虚拟判断起始地址和长度。参数在main.c中传递。对于16M系统，起始地址是4MB。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn <span class="token operator">=</span> DEVICE_REQUEST<span class="token punctuation">;</span>
	rd_start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> mem_start<span class="token punctuation">;</span>
	rd_length <span class="token operator">=</span> length<span class="token punctuation">;</span>
	cp <span class="token operator">=</span> rd_start<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来将虚拟盘的区域进行清零。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-rd-request" tabindex="-1"><a class="header-anchor" href="#do-rd-request" aria-hidden="true">#</a> do_rd_request</h3><h3 id="rd-load" tabindex="-1"><a class="header-anchor" href="#rd-load" aria-hidden="true">#</a> rd_load</h3>`,13),i=[r];function o(c,l){return n(),s("div",null,i)}const d=a(t,[["render",o],["__file","Linux-0.11-kernel-ramdisk.html.vue"]]);export{d as default};
