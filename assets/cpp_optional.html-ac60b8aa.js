const a=JSON.parse('{"key":"v-10d3936a","path":"/posts/Program_language/cpp/cpp_optional.html","title":"std::optional的使用与实现","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"std::optional的使用与实现 使用 实现原理 Optional为任意的数据类型添加了空的语义。实际就是对原始的类型进行包装，为其添加一个bool变量，表明是否已经初始化。一个最直接的想法就是下面的形式： template&lt;typename T&gt; class Optional { private: bool m_hasInit{false}; T data_; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_optional.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"std::optional的使用与实现"}],["meta",{"property":"og:description","content":"std::optional的使用与实现 使用 实现原理 Optional为任意的数据类型添加了空的语义。实际就是对原始的类型进行包装，为其添加一个bool变量，表明是否已经初始化。一个最直接的想法就是下面的形式： template&lt;typename T&gt; class Optional { private: bool m_hasInit{false}; T data_; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-17T14:32:56.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-17T14:32:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"std::optional的使用与实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-17T14:32:56.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"实现原理","slug":"实现原理","link":"#实现原理","children":[]}],"git":{"createdTime":1693753401000,"updatedTime":1694961176000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":2.36,"words":708},"filePathRelative":"posts/Program_language/cpp/cpp_optional.md","localizedDate":"2023年9月3日","excerpt":"<h1> std::optional的使用与实现</h1>\\n<h2> 使用</h2>\\n<h2> 实现原理</h2>\\n<p>Optional为任意的数据类型添加了空的语义。实际就是对原始的类型进行包装，为其添加一个bool变量，表明是否已经初始化。一个最直接的想法就是下面的形式：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">T</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Optional</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">bool</span> m_hasInit<span class=\\"token punctuation\\">{</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    T data_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
