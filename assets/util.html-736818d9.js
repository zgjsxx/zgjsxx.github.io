import{_ as a,V as s,W as n,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<h1 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> util</h1><p>util.h主要实现了一些通用的模板方法，例如move， forward， swap等函数， 以及pair等。</p><h2 id="remove-reference" tabindex="-1"><a class="header-anchor" href="#remove-reference" aria-hidden="true">#</a> remove_reference</h2><p>util.h并没有自己实现自己的remove_reference版本，而是直接调用了<code>std::remove_reference</code>。这里还是有必要了解其实现的原理。</p><p>首先讲解一下remove_reference的作用，其作用是为了去除&amp;的标记。</p><p>例如，T&amp;&amp; -&gt; T， T&amp; -&gt; T， T -&gt; T。</p><p>这里定义了类模板，并为其创建了两个特化版本。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">remove_reference</span>
<span class="token punctuation">{</span> <span class="token keyword">typedef</span> _Tp   type<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// 特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span> <span class="token keyword">typedef</span> _Tp   type<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span> <span class="token keyword">typedef</span> _Tp   type<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="move" tabindex="-1"><a class="header-anchor" href="#move" aria-hidden="true">#</a> move</h2><p>标准库中有<code>std::move</code>,作者这里自己实现了一遍，便于读者理解其原理。</p><p>move的作用是:</p><ul><li>当传递一个左值时，入参arg为一个左值引用，这个时候将强转为右值引用。</li><li>当传递一个右值时，入参arg为一个右值引用，这个时候仍然强转为右值引用。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>remove_reference<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> arg<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>remove_reference<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后还需要补充一点：</p><p>从函数的形式中看出，<code>move</code>最终会返回一个右值引用<code>T &amp;&amp;</code>，那么它是左值还是右值呢?</p><p>看下面的例子这个：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>右值引用ref指向的必须是右值，所以move返回的<code>T &amp;&amp;</code>是个右值。而ref本身又是左值。</p><p>所以右值引用既可能是左值，又可能是右值吗？</p><p>确实如此：右值引用既可以是左值也可以是右值，如果有名称则为左值，否则是右值。</p><p>作为函数返回值的 &amp;&amp; 是右值，直接声明出来的 &amp;&amp; 是左值。</p>`,21),o=[t];function c(l,r){return s(),n("div",null,o)}const d=a(p,[["render",c],["__file","util.html.vue"]]);export{d as default};
