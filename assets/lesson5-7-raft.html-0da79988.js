import{_ as t,V as a,W as r,a0 as e}from"./framework-9a29aaa0.js";const i={},s=e('<ul><li><a href="#raft%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95">raft一致性算法</a><ul><li><a href="#raft%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80">raft算法基础</a></li></ul></li></ul><h1 id="raft一致性算法" tabindex="-1"><a class="header-anchor" href="#raft一致性算法" aria-hidden="true">#</a> raft一致性算法</h1><h2 id="raft算法基础" tabindex="-1"><a class="header-anchor" href="#raft算法基础" aria-hidden="true">#</a> raft算法基础</h2><p>一个 Raft 集群包含若干个服务器；通常有五个，这使得系统可以容忍两个节点发生故障。</p><p>在任何特定时间，每个服务器都处于三种状态之一：<strong>领导者</strong>（leader）、<strong>跟随者</strong>（follower）或者<strong>候选者</strong>（candidate）。</p><ul><li>在正常运行时，只有<strong>一个领导者</strong>，其他所有服务器<strong>都是跟随者</strong>。</li><li>跟随者是被动的，它们自身不发出请求，而只是响应来自领导者和候选者的请求。</li><li>领导者处理所有客户端请求， 如果客户端与一个跟随者联系，跟随者会将其重定向到领导者。</li><li>候选者是一个特殊状态，用于选举新的领导者。</li></ul><p>下图展示了这些状态及其转换：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/lesson/6.824/raft-server-state.png" alt="raft服务器状态" tabindex="0" loading="lazy"><figcaption>raft服务器状态</figcaption></figure>',8),l=[s];function n(o,f){return a(),r("div",null,l)}const d=t(i,[["render",n],["__file","lesson5-7-raft.html.vue"]]);export{d as default};
