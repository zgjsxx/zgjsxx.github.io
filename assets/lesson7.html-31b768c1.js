const e=JSON.parse('{"key":"v-6a3126d3","path":"/posts/lesson/cs6.824-distributed-system/lesson7.html","title":"","lang":"zh-CN","frontmatter":{"category":["分布式系统"],"tag":["分布式系统"],"description":"线性一致性 有些论文提到了强一致性，它基本等同于线性一致性。 线性一致性的描述的是一个分布式系统表现的就像只有一台服务器一样(假设其不会崩溃)，该服务器可以按照顺序逐一执行客户端请求，且期间没有任何异常情况发生时的行为。 其定义如下： 客户端的一系列请求构成一个执行历史，执行历史整体可以按照一个顺序排列，要求排列顺序与客户端的实际时间相符合。 对于非并发请求，即那些在时间上没有重叠的请求，其先后顺序已经确定的，要求排列顺序不能与这些确定的顺序冲突。例如所以如果一个客户端发送请求并收到响应，随后在某个时间点，另一个客户端发送请求并收到响应，那么这两个请求时有序的，因为其中一个是在另一个完成后开始的，所以它是线性化的。(happen-before关系) 每个读操作都能看到最近一次对该同一个数据进行写入之后的值。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/lesson/cs6.824-distributed-system/lesson7.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:description","content":"线性一致性 有些论文提到了强一致性，它基本等同于线性一致性。 线性一致性的描述的是一个分布式系统表现的就像只有一台服务器一样(假设其不会崩溃)，该服务器可以按照顺序逐一执行客户端请求，且期间没有任何异常情况发生时的行为。 其定义如下： 客户端的一系列请求构成一个执行历史，执行历史整体可以按照一个顺序排列，要求排列顺序与客户端的实际时间相符合。 对于非并发请求，即那些在时间上没有重叠的请求，其先后顺序已经确定的，要求排列顺序不能与这些确定的顺序冲突。例如所以如果一个客户端发送请求并收到响应，随后在某个时间点，另一个客户端发送请求并收到响应，那么这两个请求时有序的，因为其中一个是在另一个完成后开始的，所以它是线性化的。(happen-before关系) 每个读操作都能看到最近一次对该同一个数据进行写入之后的值。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T08:52:56.000Z"}],["meta",{"property":"article:tag","content":"分布式系统"}],["meta",{"property":"article:modified_time","content":"2024-10-22T08:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-22T08:52:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1729587176000,"updatedTime":1729587176000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.18,"words":353},"filePathRelative":"posts/lesson/cs6.824-distributed-system/lesson7.md","localizedDate":"2024年10月22日","excerpt":"<p>线性一致性</p>\\n<p>有些论文提到了强一致性，它基本等同于线性一致性。</p>\\n<p><strong>线性一致性</strong>的描述的是一个分布式系统表现的就像只有一台服务器一样(假设其不会崩溃)，该服务器可以按照顺序逐一执行客户端请求，且期间没有任何异常情况发生时的行为。</p>\\n<p>其定义如下：</p>\\n<ul>\\n<li>客户端的一系列请求构成一个执行历史，执行历史整体可以按照一个顺序排列，要求排列顺序与客户端的实际时间相符合。</li>\\n<li>对于非并发请求，即那些在时间上没有重叠的请求，其先后顺序已经确定的，要求排列顺序不能与这些确定的顺序冲突。例如所以如果一个客户端发送请求并收到响应，随后在某个时间点，另一个客户端发送请求并收到响应，那么这两个请求时有序的，因为其中一个是在另一个完成后开始的，所以它是线性化的。(happen-before关系)</li>\\n<li>每个读操作都能看到最近一次对该同一个数据进行写入之后的值。</li>\\n</ul>","autoDesc":true}');export{e as data};
