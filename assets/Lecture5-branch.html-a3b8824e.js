import{_ as e,V as d,W as o,a0 as c}from"./framework-9a29aaa0.js";const a={},s=c(`<h1 id="第五讲-分支、条件、循环、函数" tabindex="-1"><a class="header-anchor" href="#第五讲-分支、条件、循环、函数" aria-hidden="true">#</a> 第五讲：分支、条件、循环、函数</h1><h2 id="算术运算" tabindex="-1"><a class="header-anchor" href="#算术运算" aria-hidden="true">#</a> 算术运算</h2><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>add dest, src       ; dest += src
sub dest, src       ; dest -= src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>add</code>和<code>sub</code>在两个相同大小的操作数之间执行加法和减法。在内部，<code>sub</code> 也是使用加法实现，只是将第二个操作数执行取反再加1的操作。</p><p><code>add</code>和<code>sub</code> 会设置/取消设置 OF、SF、ZF、AF、CF 和 PF 标志：</p><ul><li>对于有符号运算，OF 标志指示发生了上溢/下溢。如果结果的符号位不正确，则设置该位，因为正确的结果对于目标来说太大/太小而无法保存。例如，有符号 127+127 将产生溢出。 （无符号 127+127 = 254 仍然可以容纳在无符号字节中，因此不会设置进位标志。） 结果的正确符号很容易确定：如果两个输入均为正，则结果应为正；如果两者均为负数，则结果应为负数。如果一个为正，另一个为负，那么结果的正确符号就更难确定，但在这种情况下事实证明这并不重要。正值和负值相加不可能溢出。减法的处理方式类似，只是第二个操作数的符号被翻转（即，a - b 被视为 a + (-b)）。 如果输入无符号，则 OF 标志仍会设置/取消设置，但其值毫无意义。</li><li>对于无符号运算，CF 标志表示末尾&quot;剩余&quot;了额外的进位/借位。这表明操作结果太大/太小而无法容纳目的地。例如，255+127 对于一个字节来说太大，并且会设置进位标志。它不会设置溢出标志，因为 255 无符号 = -1 有符号，而 127-1 = 126 适合有符号字节。 请注意，在无符号减法 a - b 之后，如果设置了进位标志(CF)，则表示 b &gt; a。</li><li>如果结果为 0（全零位），则设置 ZF 标志。</li><li>SF 标志设置为符号位的副本（对于有符号运算，如果结果为负则设置）。对于无符号运算，它只是结果高位的副本。</li><li>如果结果的低字节中设置的(=1)位的数量是奇数，则PF标志被设置。奇偶校验标志是历史产物，使用不多，部分原因是它不给出整个结果的奇偶校验，只给出它的最低字节。</li><li>我们将忽略 AF 标志，因为它仅在 BCD 算术上下文中有意义。</li></ul><p>请注意，所有标志都会在所有操作中设置/清除，但某些标志仅对有符号/无符号操作有意义。加/减指令不知道您是否正在执行有符号或无符号的操作，因此您需要确保检查正在执行的操作类型的正确标志。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token number">111</span>  <span class="token number">11</span>
   <span class="token number">10110011</span>   <span class="token operator">=</span> <span class="token number">179</span> <span class="token punctuation">(</span>unsigned<span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token parameter variable">-77</span> <span class="token punctuation">(</span>signed<span class="token punctuation">)</span>
 + 01100110   <span class="token operator">=</span> <span class="token number">102</span> <span class="token punctuation">(</span>unsigned<span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token number">102</span> <span class="token punctuation">(</span>signed<span class="token punctuation">)</span>
────────────
<span class="token number">1</span>  00011001   <span class="token operator">=</span>  <span class="token number">25</span> <span class="token punctuation">(</span>unsigned<span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token number">25</span>  <span class="token punctuation">(</span>signed<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解释为有符号值时，一个输入为负，另一个输入为正，因此结果的符号保证是正确的。<code>OF= 0</code>。</li><li>解释为无符号，加法产生一个额外的进位，<code>CF = 1</code>。</li><li>结果不为 0，因此 ZF = 0。</li><li>结果中低字节为1的位数为奇数，因此 PF = 1</li><li>高位未置位（结果为正），因此 SF = 0。</li></ul><h2 id="递增和递减" tabindex="-1"><a class="header-anchor" href="#递增和递减" aria-hidden="true">#</a> 递增和递减</h2><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>inc dest    ; 类似于C/C++中的++dest
dec dest    ; 类似于C/C++中的--dest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inc</code> 和 <code>dec</code> 递增/递减其单个操作数，该操作数可以是寄存器或内存位置。 <code>inc</code> 和 <code>dec</code> 不会像 <code>add r, 1</code> 或 <code>sub r, 1</code> 指令那样修改进位标志。标志 OF、SF、ZF、AF 和 PF 按预期设置/清除。当用于有符号值时，行为仍然是正确的（增加负值使其更接近 0，减少负值使其更负）。</p><h2 id="标记" tabindex="-1"><a class="header-anchor" href="#标记" aria-hidden="true">#</a> 标记</h2><h2 id="函数-分支-和-条件指令" tabindex="-1"><a class="header-anchor" href="#函数-分支-和-条件指令" aria-hidden="true">#</a> 函数 分支 和 条件指令</h2><ul><li>分支（也称为跳转、goto 语句等）跳转到程序中的新位置</li><li>比较比较两个操作数，然后适当地设置标志寄存器。只有一条比较指令，它执行所有可能的比较（等于、小于、等于零等）</li><li>条件分支通常执行分支或继续执行下一条指令，具体取决于其中一个标志的状态（之前通过比较操作设置）。</li><li>条件移动是否执行移动取决于标志之一的状态。</li></ul><p>函数调用和返回只是操作堆栈的分支的特殊形式。</p><h2 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h2><p>有两个比较指令，其中 cmp 是第一个也是最直接的；它需要两个操作数，并且两个操作数的大小必须相同。第一个操作数不能是立即数，但第二个操作数可以是。其中一个操作数可以位于内存中，但不能同时位于内存中。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>cmp op1, op2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比较指令在内部执行 op1 - op2 减法，丢弃结果，但相应地更新标志寄存器。例如，如果 op1 - op2 == 0，则零标志 ZF 将被设置；但如果 op1 - op2 == 0 则 op1 == op2，因此置零标志告诉我们原始操作数是相等的。类似地，如果 op1 &gt; op2，减法会设置进位标志。</p><h3 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h3><p>可以使用标志的各种组合来确定 sub a、b 的两个操作数之间的关系：</p><ul><li>如果 <code>a == b</code> 则结果将为 0，这将设置 ZF = 1。因此我们可以通过查看零标志来检测相等性。 （ZF == 1 的条件代码是 e 或 z。）</li></ul><h3 id="内存比较" tabindex="-1"><a class="header-anchor" href="#内存比较" aria-hidden="true">#</a> 内存比较</h3><p>cmp 指令无法比较内存中的两个操作数。 cmps* 系列指令可以比较内存中的两个操作数，第一个操作数位于 <code>[rsi]</code>，第二个操作数位于 <code>[rdi]</code>。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>cmpsb</code></td><td>比较 <code>byte [rsi]</code>和 <code>byte [rdi]</code></td></tr><tr><td><code>cmpsw</code></td><td>比较 <code>word [rsi]</code>和 <code>word [rdi]</code></td></tr><tr><td><code>cmpsd</code></td><td>比较 <code>dword [rsi]</code>和 <code>dword [rdi]</code></td></tr><tr><td><code>cmpsq</code></td><td>比较 <code>qword [rsi]</code>和 <code>qword [rdi]</code></td></tr></tbody></table><p><code>cmps*</code> 指令不带任何操作数；他们总是使用 <code>rsi</code> 和 <code>rdi</code>。</p><h2 id="条件分支的指令" tabindex="-1"><a class="header-anchor" href="#条件分支的指令" aria-hidden="true">#</a> 条件分支的指令</h2><p>条件分支指令检查标志寄存器并跳转到目标或不跳转到目标。这些通常称为 jcc，其中 cc 是条件代码：</p><p>|操作|描述|标志位的状态| |<code>je</code>|当<code>op1 == op2</code>时跳转| <code>ZF == 1</code>| |<code>jne</code>|当<code>op1 != op2</code>时跳转| <code>ZF == 0</code>| |<code>jl</code>|当<code>op1 &lt; op2</code>时跳转， 针对有符号的数据比较|<code>SF != OF</code>| |<code>jle</code>|当<code>op1 &lt;= op2</code>时跳转， 针对有符号的数据比较|<code>ZF ==1 or SF != OF</code>| |<code>jg</code>|当<code>op1 &gt; op2</code>时进行跳转， 针对有符号的数据比较|<code>ZF == 0 &amp;&amp; SF ==OF</code>| |<code>jge</code>|当<code>op1 &gt;= op2</code>时进行跳转， 针对有符号的数据比较|<code>SF ==OF</code>| |<code>jb</code>|当<code>op1 &lt; op2</code>时进行跳转， 针对无符号的数据比较|<code>CF == 1</code>| |<code>jbe</code>|当<code>op1 &lt;= op2</code>时进行跳转， 针对无符号的数据比较|<code>CF == 1 or ZF == 1</code>| |<code>ja</code>|当<code>op1 &gt; op2</code>时进行跳转， 针对无符号的数据比较|<code>CF ==0 &amp;&amp; ZF == 0</code>| |<code>jae</code>|当<code>op1 &gt;= op2</code>时进行跳转， 针对无符号的数据比较|<code>CF == 0</code>|</p><p>对于无符号数据的比较，&quot;a&quot;是&quot;above&quot;的缩写， &quot;b&quot;是&quot;below&quot;的缩写。 对于有符号的比较， &quot;g&quot;是&quot;greater&quot;的缩写， &quot;l&quot;是&quot;less&quot;的缩写。&quot;e&quot;是&quot;equal&quot;的缩写。</p><p>对于那些因 C/C++ 没有否定比较（!&lt;, !&gt;=）而烦恼的人，会很高兴知道汇编将 <code>jnl</code>（不小于）作为 <code>jge</code> 的同义词。</p><p>下面是一些上述符号的同义词</p><p>|操作|描述| |<code>jna</code>|当<code>op1 &lt;= op2</code>时进行跳转， 针对无符号的数据比较| |<code>jnae</code>|当<code>op1 &lt; op2</code>时进行跳转， 针对无符号的数据比较| |<code>jnb</code>|当<code>op1 &gt;= op2</code>时进行跳转， 针对无符号的数据比较| |<code>jnbe</code>|当<code>op1 &gt; op2</code>时进行跳转， 针对无符号的数据比较| |<code>jng</code>|当<code>op1 &lt;= op2</code>时进行跳转， 针对有符号的数据比较| |<code>jnge</code>|当<code>op1 &lt; op2</code>时进行跳转， 针对有符号的数据比较| |<code>jnl</code>|当<code>op1 &gt;= op2</code>时进行跳转， 针对有符号的数据比较| |<code>jnle</code>|当<code>op1 &gt; op2</code>时进行跳转， 针对有符号的数据比较|</p><p>这些只是上述指令的别名（例如，<code>jna</code> 是 <code>jbe</code> 的别名）。</p><p>有一组跳转通过检查 <code>rcx</code> 寄存器来模拟循环操作：</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>jcxz</td><td>Jump if cx == 0</td></tr><tr><td>jecxz</td><td>Jump if ecx == 0</td></tr><tr><td>jrcxz</td><td>Jump if rcx == 0</td></tr></tbody></table><p>请注意，如果 rcx 等于 0，则这些跳转，而如果 rcx 不等于 0，则循环跳转。</p><p>最后，有一组直接引用标志名称的半冗余条件</p><p>Operation Description jc Jump if CF == 1 jnc Jump if CF == 0 jz Jump if ZF == 1 jnz Jump if ZF == 0 jo Jump if OF == 1 jno Jump if OF == 0 js Jump if SF == 1 jns Jump if SF == 0 jz Jump if ZF == 1 jnz Jump if ZF == 0 jp Jump if PF == 1 jpo Jump if PF == 1 (jump if parity odd) jpe Jump if PF == 0 (jump if parity even)</p>`,40),n=[s];function t(p,i){return d(),o("div",null,n)}const l=e(a,[["render",t],["__file","Lecture5-branch.html.vue"]]);export{l as default};
