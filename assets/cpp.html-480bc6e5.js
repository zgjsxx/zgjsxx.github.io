import{_ as a,V as p,W as t,X as n,Y as e,$ as o,a0 as c,F as l}from"./framework-9a29aaa0.js";const i={},u=c(`<ul><li><a href="#c%E9%9D%A2%E7%BB%8F">c++面经</a><ul><li><a href="#c%E5%9F%BA%E7%A1%80">c++基础</a><ul><li><a href="#const%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8">const关键字的作用</a></li><li><a href="#const%E6%88%90%E5%91%98%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95">const成员的初始化方法</a></li><li><a href="#const%E6%88%90%E5%91%98%E5%BC%95%E7%94%A8%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96">const成员引用如何初始化</a></li><li><a href="#%E5%A7%94%E6%89%98%E6%9E%84%E9%80%A0%E5%92%8C%E7%BB%A7%E6%89%BF%E6%9E%84%E9%80%A0%E6%98%AF%E4%BB%80%E4%B9%88">委托构造和继承构造是什么？</a></li><li><a href="#const%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E9%9C%80%E8%A6%81%E4%BF%AE%E6%94%B9%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">const成员函数内部需要修改成员变量如何解决？</a></li><li><a href="#%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%8F%AF%E4%BB%A5%E4%B8%8D%E4%B8%80%E6%A0%B7%E5%90%97">虚函数的返回值可以不一样吗？</a></li><li><a href="#dynamic_cast%E5%A4%B1%E8%B4%A5%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7">dynamic_cast失败会怎么样？</a></li><li><a href="#%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E6%97%B6%E6%8C%87%E5%90%91%E5%AD%90%E7%B1%BB%E7%9A%84%E6%8C%87%E9%92%88%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%9F%BA%E7%B1%BB%E6%8C%87%E9%92%88%E4%BC%9A%E5%8F%98%E5%90%97">多重继承时，指向子类的指针转化为基类，指针会变吗?</a></li><li><a href="#%E5%B8%A6%E6%9C%89%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83">带有虚函数的多重继承的内存分布</a></li><li><a href="#static%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E6%98%AFconst%E5%90%97">static方法可以是const吗?</a></li><li><a href="#%E8%AF%B7%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstrcpy%E6%96%B9%E6%B3%95">请实现一个strcpy方法</a></li><li><a href="#%E5%86%85%E5%AD%98%E5%A0%86%E6%A0%88%E5%AF%B9%E6%AF%94%E5%88%86%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9%E5%AE%83%E4%BB%AC%E7%9A%84%E5%88%86%E9%85%8D%E6%95%88%E7%8E%87%E5%A6%82%E4%BD%95">内存堆栈对比，分别有什么特点？它们的分配效率如何？</a></li><li><a href="#i%E5%92%8Ci%E5%93%AA%E4%B8%AA%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98">++i和i++哪个效率更高？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%A6%81%E7%94%A8%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">如何禁用拷贝构造函数</a></li><li><a href="#stdfuture%E5%92%8Cstdpromise%E7%9A%84%E4%BD%9C%E7%94%A8">std::future和std::promise的作用</a></li><li><a href="#%E4%BD%8D%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9">位域是什么？有哪些注意点</a></li><li><a href="#c11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B">c++11的新特性有哪些？</a></li></ul></li><li><a href="#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1">类和对象</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFrtti">什么是RTTI</a></li></ul></li><li><a href="#stl">STL</a><ul><li><a href="#map%E5%92%8Cunordered_map%E7%9A%84%E5%8C%BA%E5%88%AB-%E5%90%84%E8%87%AA%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%98%AF%E4%BB%80%E4%B9%88">map和unordered_map的区别? 各自使用场景是什么？</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h1 id="c-面经" tabindex="-1"><a class="header-anchor" href="#c-面经" aria-hidden="true">#</a> c++面经</h1><h2 id="c-基础" tabindex="-1"><a class="header-anchor" href="#c-基础" aria-hidden="true">#</a> c++基础</h2><h3 id="const关键字的作用" tabindex="-1"><a class="header-anchor" href="#const关键字的作用" aria-hidden="true">#</a> const关键字的作用</h3><p>const 关键字在C++中用于定义常量。它是一个非常重要的关键字，主要用于声明不可修改的变量、指针、引用和成员函数。使用 const 可以帮助防止意外修改数据，提高代码的安全性和可维护性。</p><p><strong>const 的主要用法和作用</strong></p><p><strong>1.常量变量:</strong></p><p>使用 const 声明的变量在初始化后不可被修改。这对于定义不可改变的值（如数学常量）特别有用。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_SIZE <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>、
<span class="token comment">// MAX_SIZE 不能被修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.常量指针</strong>:</p><p><strong>指向常量的指针</strong>: const 用于指针声明中，表示指针指向的数据不可修改。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>
<span class="token comment">// *ptr 不能被修改，但 ptr 可以指向不同的地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常量的指针</strong>: const 也可以放在指针前面，表示指针本身是常量，不可修改。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> ptr<span class="token punctuation">;</span>
<span class="token comment">// ptr 不能被修改，但 *ptr 可以被修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常量指针和常量数据</strong>: 可以将 const 关键字应用于指针和指向的数据，表示指针和数据都不可修改。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> ptr<span class="token punctuation">;</span>
<span class="token comment">// ptr 和 *ptr 都不能被修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.常量参数</strong>:</p><p>使用 const 可以保证函数参数在函数内部不会被修改，提高函数的安全性和可读性。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// data 不能被修改</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.常量成员函数:</strong></p><p>在类中，常量成员函数是不会修改类成员的函数，声明为 const 的成员函数可以保证不会改变对象的状态。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不能修改类的成员变量</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.常量返回值:</strong></p><p>函数返回 const 值，表示返回的值不能被修改。这通常用于防止修改返回对象的成员。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 const 的好处</strong></p><ul><li>提高安全性: const 关键字可以防止数据被意外或错误地修改，从而提高代码的稳定性。</li><li>增强可读性: 明确表明某些数据或对象不应该被修改，使代码更易于理解和维护。</li><li>优化编译: 编译器可以利用 const 信息进行优化，因为它知道某些数据在代码运行期间不会变化。</li></ul><p><strong>总结</strong></p><p>const 是C++中的一个重要关键字，广泛用于定义常量、常量指针、常量引用、常量成员函数等。它不仅有助于防止数据的意外修改，还提高了代码的安全性和可读性。在设计类和函数接口时合理使用 const 可以帮助创建更可靠和维护友好的代码。</p><h3 id="const成员的初始化方法" tabindex="-1"><a class="header-anchor" href="#const成员的初始化方法" aria-hidden="true">#</a> const成员的初始化方法</h3><ul><li>构造函数的初始化列表中初始化</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> myConst<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 构造函数的初始化列表中初始化const成员</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">myConst</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构造函数体中不能再对myConst赋值</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The value of myConst is: &quot;</span> <span class="token operator">&lt;&lt;</span> myConst <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接在成员定义时初始化(c++11)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>class MyClass <span class="token punctuation">{</span>
private<span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> myConst <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>  <span class="token comment">// 直接在类定义中初始化</span>

public<span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构造函数中不需要再初始化myConst</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The value of myConst is: &quot;</span> <span class="token operator">&lt;&lt;</span> myConst <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const成员引用如何初始化" tabindex="-1"><a class="header-anchor" href="#const成员引用如何初始化" aria-hidden="true">#</a> const成员引用如何初始化</h3><p>在C++中，const成员引用必须在构造函数的初始化列表中进行初始化。这是因为引用一旦绑定到某个对象或变量上，就不能再指向别的对象或变量，因此必须在对象创建时明确绑定到某个对象上。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ref<span class="token punctuation">;</span>  <span class="token comment">// const成员引用</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 构造函数，使用初始化列表初始化ref</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> r<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The value of ref is: &quot;</span> <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    MyClass <span class="token function">obj</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建对象时传入引用的变量</span>
    obj<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：The value of ref is: 42</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="委托构造和继承构造是什么" tabindex="-1"><a class="header-anchor" href="#委托构造和继承构造是什么" aria-hidden="true">#</a> 委托构造和继承构造是什么？</h3><p>在C++中，委托构造和继承构造是两种与构造函数相关的技术，它们用于简化代码和提高代码复用性，尤其是在处理构造函数链时。</p><p><strong>1. 委托构造（Delegating Constructors）</strong></p><p>委托构造是指一个构造函数调用同一个类中另一个构造函数来完成对象的初始化。这在C++11标准中引入，是为了减少重复代码并简化构造函数的实现。</p><p>示例代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化其他成员或执行其他操作</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 委托构造函数，只接受一个参数</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">MyClass</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 委托给另一个构造函数</span>
        <span class="token comment">// 这里可以添加额外的初始化代码</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，MyClass(int x)构造函数委托给MyClass(int x, int y)构造函数。通过这种方式，MyClass(int x)可以复用已有的初始化逻辑，而不必重复编写代码。</p><p><strong>优点</strong></p><ul><li>减少重复代码：如果多个构造函数具有相同或类似的初始化逻辑，可以通过委托构造减少代码重复。</li><li>简化维护：逻辑集中在一个地方，使得代码更容易维护。</li></ul><p><strong>2. 继承构造（Inherited Constructors）</strong></p><p>继承构造是指在派生类中使用基类的构造函数，而不需要在派生类中重新定义这些构造函数。C++11引入了这一特性，使得派生类可以直接继承基类的构造函数，从而简化派生类的代码。</p><p>示例代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">using</span> Base<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">;</span>  <span class="token comment">// 继承基类的构造函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Derived <span class="token function">obj1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 使用 Base(int x) 构造函数</span>
    Derived <span class="token function">obj2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 Base(int x, int y) 构造函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Derived类继承了Base类的构造函数，这意味着可以像使用Base构造函数一样来创建Derived对象，而不需要在Derived中手动定义这些构造函数。</p><p><strong>优点</strong></p><ul><li>代码复用：派生类无需重新实现基类的构造函数，直接复用基类已有的构造函数逻辑。</li><li>简化代码：减少在派生类中定义构造函数的代码量。</li></ul><p><strong>3. 委托构造和继承构造的区别</strong></p><ul><li>委托构造：是同一个类内部构造函数之间的调用。它允许一个构造函数委托另一个构造函数来执行部分或全部初始化工作。</li><li>继承构造：是派生类直接使用基类的构造函数。它允许派生类无需重新实现基类的构造函数，而直接使用它们。</li></ul><p><strong>总结</strong></p><ul><li>委托构造：用于在同一个类中，减少构造函数间的重复代码，使得构造函数可以相互调用。</li><li>继承构造：用于在派生类中，直接复用基类的构造函数，简化派生类的代码编写。</li></ul><p>这两种技术都为代码复用和简化提供了有效的手段，在实际开发中能够显著提高代码的可读性和可维护性。</p><h3 id="const成员函数内部需要修改成员变量如何解决" tabindex="-1"><a class="header-anchor" href="#const成员函数内部需要修改成员变量如何解决" aria-hidden="true">#</a> const成员函数内部需要修改成员变量如何解决？</h3><ul><li>使用mutable关键字</li></ul><p>mutable关键字可以用于类的成员变量，使得这个变量即使在const成员函数中也可以被修改。</p><p>例子：使用mutable在const成员函数中修改成员变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">mutable</span> <span class="token keyword">int</span> mutableCounter<span class="token punctuation">;</span>  <span class="token comment">// 可变成员，即使在const函数中也可以修改</span>
    <span class="token keyword">int</span> normalCounter<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">mutableCounter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">normalCounter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">incrementCounters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        mutableCounter<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 可以修改，因为mutableCounter是mutable的</span>
        <span class="token comment">// normalCounter++;  // 错误：不能修改非mutable的成员</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">displayCounters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Mutable Counter: &quot;</span> <span class="token operator">&lt;&lt;</span> mutableCounter <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Normal Counter: &quot;</span> <span class="token operator">&lt;&lt;</span> normalCounter <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyClass obj<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span><span class="token function">incrementCounters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用const成员函数</span>
    obj<span class="token punctuation">.</span><span class="token function">displayCounters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：Mutable Counter: 1, Normal Counter: 0</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用const_cast进行类型转换</li></ul><p>const_cast是C++中的一种类型转换操作符，它可以用于去除对象的const属性，从而允许修改const对象的成员。但这种方法应该谨慎使用，因为它可能破坏const的语义，导致代码的可维护性和可读性下降。</p><p>示例：使用const_cast去除const属性</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> counter<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用const_cast去除this指针的const属性，允许修改counter</span>
        <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyClass<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用一个指针指向该成员，使用const_cast去除const属性</span>
        <span class="token keyword">int</span><span class="token operator">*</span> temp <span class="token operator">=</span><span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>temp<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">displayCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Counter: &quot;</span> <span class="token operator">&lt;&lt;</span> counter <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyClass obj<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span><span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用const成员函数</span>
    obj<span class="token punctuation">.</span><span class="token function">displayCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：Counter: 1</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，incrementCounter 是一个 const 成员函数，但通过 const_cast，我们可以去除 this 指针的 const 属性，从而修改 counter 成员变量。</p><p>注意：这种方法应谨慎使用，只有在明确知道这样做是安全的情况下才使用 const_cast。如果滥用它，可能会导致难以发现的错误和未定义行为。</p><h3 id="虚函数的返回值可以不一样吗" tabindex="-1"><a class="header-anchor" href="#虚函数的返回值可以不一样吗" aria-hidden="true">#</a> 虚函数的返回值可以不一样吗？</h3><p>在C++中，虚函数的返回值可以有所不同，但只能在特定情况下实现。通常情况下，虚函数在基类和派生类中的返回类型必须是相同的，但有一个例外：协变返回类型（covariant return types）。</p><p>协变返回类型 协变返回类型允许派生类中的虚函数返回类型与基类中的虚函数返回类型不同，但前提是派生类的返回类型必须是基类返回类型的派生类。换句话说，派生类中的返回类型必须是基类中返回类型的“子类型”。</p><p>示例：协变返回类型</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> Base<span class="token operator">*</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Base clone&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 返回类型是Base*的派生类型Derived*</span>
    Derived<span class="token operator">*</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Derived clone&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Base<span class="token operator">*</span> derived <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Base<span class="token operator">*</span> baseClone <span class="token operator">=</span> base<span class="token operator">-&gt;</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用Base的clone方法</span>
    Base<span class="token operator">*</span> derivedClone <span class="token operator">=</span> derived<span class="token operator">-&gt;</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用Derived的clone方法</span>

    <span class="token keyword">delete</span> base<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> derived<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> baseClone<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> derivedClone<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，基类 Base 有一个虚函数 clone，它返回一个指向 Base 类型的指针（Base*）。派生类 Derived 重写了 clone 函数，并将返回类型更改为 Derived*，这是允许的，因为 Derived* 是 Base* 的派生类型。</p><p><strong>关键点总结</strong></p><ul><li>协变返回类型允许派生类中的虚函数返回类型与基类中的不同，但前提是派生类中的返回类型必须是基类返回类型的派生类型。</li><li>返回类型之间的关系必须是基类与派生类的关系，即派生类中的返回类型必须是基类返回类型的派生类。</li><li>除了协变返回类型之外，虚函数在基类和派生类中的返回类型必须严格相同。</li><li>使用协变返回类型可以在面向对象编程中实现更灵活的多态性，尤其是在需要返回派生类对象的场景中。</li></ul><h3 id="dynamic-cast失败会怎么样" tabindex="-1"><a class="header-anchor" href="#dynamic-cast失败会怎么样" aria-hidden="true">#</a> dynamic_cast失败会怎么样？</h3><p>在C++中，dynamic_cast 是一种类型转换运算符，用于在多态类型（即带有虚函数的类）之间进行安全的向下转换（downcasting）。dynamic_cast 在运行时检查类型的有效性，如果转换失败，会有两种不同的行为，具体取决于转换的目标类型：</p><ul><li>转换为指针类型 如果 dynamic_cast 转换的是指针类型（例如，从 Base* 转换为 Derived*），并且转换失败（即目标类型与实际对象的类型不匹配），那么返回值将是 nullptr。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>  <span class="token comment">// 必须有虚函数以使dynamic_cast正常工作</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Derived<span class="token operator">*</span> derived <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Derived<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 尝试将Base*转换为Derived*</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>derived <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;dynamic_cast failed, returned nullptr.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">delete</span> base<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，由于 base 实际上是 Base 类型的对象，而不是 Derived 类型，dynamic_cast&lt;Derived*&gt;(base) 将返回 nullptr。</p><ul><li>转换为引用类型</li></ul><p>如果 dynamic_cast 转换的是引用类型（例如，从 Base&amp; 转换为 Derived&amp;），并且转换失败，dynamic_cast 会抛出 std::bad_cast 异常。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo&gt;</span>  <span class="token comment">// 需要包含这个头文件来处理std::bad_cast异常</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>  <span class="token comment">// 必须有虚函数以使dynamic_cast正常工作</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Base base<span class="token punctuation">;</span>
        Derived<span class="token operator">&amp;</span> derived <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Derived<span class="token operator">&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 尝试将Base&amp;转换为Derived&amp;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>bad_cast<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;dynamic_cast failed, caught exception: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，base 是一个 Base 类型的对象，dynamic_cast&lt;Derived&amp;&gt;(base) 试图将其转换为 Derived&amp; 类型的引用，但是由于类型不匹配，转换失败并抛出了 std::bad_cast 异常。</p><p><strong>关键点总结</strong></p><ul><li>指针类型转换失败：dynamic_cast 返回 nullptr。</li><li>引用类型转换失败：dynamic_cast 抛出 std::bad_cast 异常。</li><li>前提条件：dynamic_cast 只能用于多态类型，即类必须有至少一个虚函数（通常是虚析构函数）。</li><li>dynamic_cast 是一种运行时类型检查机制，用于安全的向下转换，以避免未定义行为。如果转换可能失败，使用 dynamic_cast 是一种安全的选择。</li></ul><h3 id="多重继承时-指向子类的指针转化为基类-指针会变吗" tabindex="-1"><a class="header-anchor" href="#多重继承时-指向子类的指针转化为基类-指针会变吗" aria-hidden="true">#</a> 多重继承时，指向子类的指针转化为基类，指针会变吗?</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
在C<span class="token operator">++</span>中，使用多重继承时，将指向子类对象的指针转换为基类指针时，指针的值可能会改变。这个变化取决于基类在子类中的位置，因为多重继承可能会导致不同的基类在子类对象中的存储位置不同。

详细解释
<span class="token number">1.</span> 单一继承的情况
如果只有单一继承，指向子类的指针转换为基类指针时，指针的值不会发生改变。这是因为在内存布局中，子类对象的基类子对象通常位于子类对象的开头。

<span class="token number">2.</span> 多重继承的情况
在多重继承的情况下，子类对象中不同的基类子对象可能在不同的内存地址上。将指向子类的指针转换为某个基类指针时，指针的值可能会发生变化，以正确指向该基类在子类对象内的地址。

\`\`\`cpp
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base1</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Base1&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base2</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Base2&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Base2</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Derived&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Derived d<span class="token punctuation">;</span>
    Derived<span class="token operator">*</span> derivedPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span>

    Base1<span class="token operator">*</span> base1Ptr <span class="token operator">=</span> derivedPtr<span class="token punctuation">;</span>  <span class="token comment">// 转换为Base1指针</span>
    Base2<span class="token operator">*</span> base2Ptr <span class="token operator">=</span> derivedPtr<span class="token punctuation">;</span>  <span class="token comment">// 转换为Base2指针</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Derived pointer: &quot;</span> <span class="token operator">&lt;&lt;</span> derivedPtr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Base1 pointer: &quot;</span> <span class="token operator">&lt;&lt;</span> base1Ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Base2 pointer: &quot;</span> <span class="token operator">&lt;&lt;</span> base2Ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出示例（实际输出可能会因编译器和内存布局而异）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Derived pointer: 0x7fffd738abc0
Base1 pointer: 0x7fffd738abc0
Base2 pointer: 0x7fffd738abc8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>derivedPtr：指向整个 Derived 对象。 base1Ptr：指向 Base1 的子对象。由于 Base1 是第一个继承的基类，base1Ptr 和 derivedPtr 指向相同的地址。 base2Ptr：指向 Base2 的子对象。由于 Base2 在 Derived 对象中可能位于不同的位置，base2Ptr 的值可能不同于 derivedPtr 和 base1Ptr。</p><p><strong>关键点总结</strong></p><ul><li>单一继承时，指向子类的指针转换为基类指针，指针的值通常不会改变。</li><li>多重继承时，指向子类的指针转换为基类指针，指针的值可能会改变，以正确指向该基类子对象在内存中的位置。</li></ul><p>这种变化是由于内存布局中不同基类的存储位置不同导致的。</p><h3 id="带有虚函数的多重继承的内存分布" tabindex="-1"><a class="header-anchor" href="#带有虚函数的多重继承的内存分布" aria-hidden="true">#</a> 带有虚函数的多重继承的内存分布</h3><p>当类结构中引入虚函数时，内存布局会变得更复杂，因为需要引入虚函数表（vtable）和虚函数表指针（vptr）来支持动态多态性。为了说明这一点，以下是一个带有虚函数的多重继承的例子，基于C++。</p><p>假设有以下类定义：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base1</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base2</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Base2</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中：</p><ul><li>Base1 有一个整数成员 a 和一个虚函数 func1()。</li><li>Base2 有一个整数成员 b 和一个虚函数 func2()。</li><li>Derived 类从 Base1 和 Base2 继承，有一个额外的整数成员 c，并定义了一个新的虚函数 func3()。</li></ul><p><strong>内存分布</strong></p><p>在这种情况下，内存布局包括：</p><ul><li>每个类的成员变量。</li><li>每个类的虚函数表指针（vptr）。</li></ul><p>假设 int 占 4 字节，指针（vptr）占 8 字节（64位系统），内存布局如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Derived 对象内存分布:
+-------------------+
<span class="token operator">|</span> vptr<span class="token punctuation">(</span>Base1<span class="token punctuation">)</span>       <span class="token operator">|</span>  <span class="token operator">&lt;</span>- 虚函数表指针，指向 Base1 的虚函数表
+-------------------+
<span class="token operator">|</span> Base1::a          <span class="token operator">|</span>
+-------------------+
<span class="token operator">|</span> vptr<span class="token punctuation">(</span>Base2<span class="token punctuation">)</span>       <span class="token operator">|</span>  <span class="token operator">&lt;</span>- 虚函数表指针，指向 Base2 的虚函数表
+-------------------+
<span class="token operator">|</span> Base2::b          <span class="token operator">|</span>
+-------------------+
<span class="token operator">|</span> Derived::c        <span class="token operator">|</span>
+-------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>具体内存分布</strong></p><p>Base1 的部分：</p><ul><li>vptr(Base1) 指针占用前 8 字节，指向 Base1 的虚函数表。</li><li>Base1::a 紧接着占用 4 字节。</li></ul><p>Base2 的部分：</p><ul><li>vptr(Base2) 指针紧随其后，占用 8 字节，指向 Base2 的虚函数表。</li><li>Base2::b 紧接着占用 4 字节。</li></ul><p>Derived 的部分：</p><ul><li>Derived::c 紧接着占用 4 字节。</li></ul><p>内存布局图示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+-------------------+  <span class="token operator">&lt;</span>- Offset <span class="token number">0</span>
<span class="token operator">|</span> vptr<span class="token punctuation">(</span>Base1<span class="token punctuation">)</span>       <span class="token operator">|</span>  <span class="token punctuation">(</span>指向 Base1 的虚函数表<span class="token punctuation">)</span>
+-------------------+  <span class="token operator">&lt;</span>- Offset <span class="token number">8</span>
<span class="token operator">|</span> Base1::a          <span class="token operator">|</span>
+-------------------+  <span class="token operator">&lt;</span>- Offset <span class="token number">12</span>
<span class="token operator">|</span> vptr<span class="token punctuation">(</span>Base2<span class="token punctuation">)</span>       <span class="token operator">|</span>  <span class="token punctuation">(</span>指向 Base2 的虚函数表<span class="token punctuation">)</span>
+-------------------+  <span class="token operator">&lt;</span>- Offset <span class="token number">20</span>
<span class="token operator">|</span> Base2::b          <span class="token operator">|</span>
+-------------------+  <span class="token operator">&lt;</span>- Offset <span class="token number">24</span>
<span class="token operator">|</span> Derived::c        <span class="token operator">|</span>
+-------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虚函数表的影响</p><ul><li>Derived 类实际上有两个虚函数表，一个是为 Base1 服务的，另一个是为 Base2 服务的。</li><li>每个 vptr 指针指向相应类的虚函数表，当调用虚函数时，程序会通过这个指针找到合适的函数实现。</li></ul><p><strong>虚拟继承的影响</strong></p><ul><li>如果使用虚拟继承，情况会更复杂。虚拟继承通常引入额外的开销，例如共享基类的指针或偏移量来确保单一实例化。</li></ul><p><strong>总结</strong></p><p>虚函数使得每个类的对象需要存储虚函数表指针 vptr，并且在多重继承的情况下，每个父类都会有自己的虚函数表指针。这样，内存布局不仅包含数据成员的顺序，还包含指向虚函数表的指针，这些指针在动态多态中起到关键作用。</p><h3 id="static方法可以是const吗" tabindex="-1"><a class="header-anchor" href="#static方法可以是const吗" aria-hidden="true">#</a> static方法可以是const吗?</h3><p>在C++中，static方法不能被声明为const。这是因为const成员函数是用来保证该成员函数不会修改其所属对象的状态。而static方法属于类本身，而不是某个具体的对象实例，因此它们不能访问任何非静态成员变量，也不存在修改对象状态的问题。</p><p><strong>详细解释</strong></p><ul><li>const成员函数： <ul><li>const成员函数是指函数的声明中有一个const关键字，通常放在函数声明的末尾。</li><li>该关键字表示该函数不会修改对象的成员变量，适用于实例方法。</li></ul></li></ul><p>例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token comment">// This method cannot modify the member variable x.</span>
        <span class="token comment">// x = 10; // This would be an error.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>static成员函数：</p><p>static成员函数属于整个类，而不是某个具体的对象实例。</p><p>它们不能访问非静态成员变量和非静态成员函数，因为它们不依赖于对象的this指针。</p><p>例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This method cannot access non-static members.</span>
        <span class="token comment">// x = 10; // This would be an error if x were non-static.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么static方法不能是const</strong></p><ul><li><p>static成员函数没有this指针：</p><ul><li>const关键字在成员函数中使用是为了修饰隐含的this指针，使其指向的对象是const的。</li><li>由于static成员函数不依赖于任何对象实例，因此没有this指针，也就没有可以修饰的对象。</li></ul></li><li><p>const关键字对static成员函数无意义：</p></li><li><p>因为static成员函数不与任何特定的对象实例关联，不可能修改对象状态，所以将static成员函数声明为const是没有意义的。</p></li></ul><p>因此，C++不允许static方法被声明为const。</p><h3 id="请实现一个strcpy方法" tabindex="-1"><a class="header-anchor" href="#请实现一个strcpy方法" aria-hidden="true">#</a> 请实现一个strcpy方法</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 实现 strcpy 函数</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">my_strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> destination<span class="token punctuation">;</span>

    <span class="token comment">// 复制源字符串中的每一个字符到目标字符串</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>source <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>source<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 确保目标字符串以 &#39;\\0&#39; 结尾</span>
    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> destination<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> source<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> destination<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 目标字符串的大小应足够容纳源字符串</span>

    <span class="token comment">// 使用自定义的 strcpy 函数</span>
    <span class="token function">my_strcpy</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 输出复制后的目标字符串</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Copied string: %s\\n&quot;</span><span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里函数需要返回<code>char*</code>，主要是因为：</p><ul><li>链式调用（Chaining）：</li></ul><p>由于strcpy返回destination，可以在一条语句中进行多个操作。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> destination<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一致的函数接口设计：</li></ul><p>在C标准库中，许多字符串处理函数（例如strcat、strncpy等）都会返回目标字符串指针。这种设计提供了一种一致的接口，使得函数的行为和使用方式更具一致性和可预测性。</p><ul><li>增强代码的灵活性：</li></ul><p>返回目标字符串指针可以增强代码的灵活性，使调用者可以在需要时使用返回值，或忽略它。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> destination<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Copied string: %s\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存堆栈对比-分别有什么特点-它们的分配效率如何" tabindex="-1"><a class="header-anchor" href="#内存堆栈对比-分别有什么特点-它们的分配效率如何" aria-hidden="true">#</a> 内存堆栈对比，分别有什么特点？它们的分配效率如何？</h3><p><strong>栈（Stack）</strong></p><p>特点：</p><ul><li>内存分配方式：栈是一个连续的内存区域，内存分配和释放遵循后进先出（LIFO，Last In First Out）原则。</li><li>管理方式：由编译器自动管理，无需手动控制。函数调用时，栈帧会自动分配，函数返回时，栈帧会自动释放。</li><li>生命周期：变量的生命周期与其所在的作用域一致，当作用域结束时，变量的内存会自动释放。</li><li>内存大小：栈的大小通常较小，并且在程序启动时确定。大多数系统的栈大小限制在几MB至几十MB之间。</li></ul><p>分配效率：</p><ul><li>高效率：由于栈是由编译器自动管理的，内存分配和释放速度非常快，通常只需增加或减少栈指针即可完成。</li><li>低开销：栈上的内存分配不需要复杂的内存管理算法，开销极低。</li></ul><p><strong>堆（Heap）</strong></p><p>特点：</p><ul><li>内存分配方式：堆是一个不连续的内存区域，通过动态内存分配函数（如malloc、calloc、realloc、free）进行分配和释放。</li><li>管理方式：需要程序员手动管理内存分配和释放，容易发生内存泄漏（忘记释放内存）或内存碎片（频繁分配和释放导致）。</li><li>生命周期：变量的生命周期由程序员控制，分配的内存在手动释放前一直有效。</li><li>内存大小：堆的大小通常较大，可以根据系统的物理内存和操作系统的限制进行扩展。</li></ul><p>分配效率：</p><ul><li>较低效率：堆内存的分配和释放涉及复杂的算法和数据结构（如自由链表、二叉树、位图等），因此速度较慢。</li><li>较高开销：由于需要维护内存管理的数据结构，分配和释放内存的操作开销较高。</li></ul><p>总结</p><ul><li>栈： <ul><li>优点：分配和释放速度快、开销低、自动管理内存、不容易发生内存泄漏。</li><li>缺点：内存空间有限、灵活性差，不能用于需要大量内存或动态调整大小的情况。</li></ul></li><li>堆： <ul><li>优点：内存空间大、灵活性高，可以分配任意大小的内存块，适合需要动态内存分配的场景。</li><li>缺点：分配和释放速度慢、开销高、需要手动管理内存、容易发生内存泄漏和碎片化。</li></ul></li></ul><h3 id="i和i-哪个效率更高" tabindex="-1"><a class="header-anchor" href="#i和i-哪个效率更高" aria-hidden="true">#</a> ++i和i++哪个效率更高？</h3><p>对于<strong>内建数据类型</strong>，效率没有区别。</p><p>对于<strong>自定义的数据类型</strong>， 前缀式(++i)可以返回对象的引用，而后缀式(i++)必须返回对象的值，存在复制开销。因此++i效率更高。</p><h3 id="如何禁用拷贝构造函数" tabindex="-1"><a class="header-anchor" href="#如何禁用拷贝构造函数" aria-hidden="true">#</a> 如何禁用拷贝构造函数</h3><ul><li><p>如果你的编译器支持 C++11，直接使用 delete</p></li><li><p>可以把拷贝构造函数和赋值操作符声明成private同时不提供实现。</p></li><li><p>可以通过一个基类来封装第二步，因为默认生成的拷贝构造函数会自动调用基类的拷贝构造函数，如果基类的拷贝构造函数是private，那么它无法访问，也就无法正常生成拷贝构造函数</p></li></ul><h3 id="std-future和std-promise的作用" tabindex="-1"><a class="header-anchor" href="#std-future和std-promise的作用" aria-hidden="true">#</a> std::future和std::promise的作用</h3><p><strong>1.std::promise 和 std::future 的设计原理</strong></p><p><strong>std::promise</strong></p><ul><li>std::promise 是一个模板类，表示一个值的“承诺”（promise），它允许我们在未来某个时刻设置一个值或传递一个异常。</li><li>promise 对象内部维护了一个共享状态，这个状态可以包含一个值或异常。</li><li>std::promise 的主要操作是 set_value（设置值）和 set_exception（设置异常）。设置完成后，这个共享状态会被标记为“就绪”。</li></ul><p><strong>std::future</strong></p><ul><li>std::future 是与 std::promise 配对的对象，用于检索 promise 设置的值或异常。</li><li>future 对象也持有相同的共享状态。通过调用 get() 方法，future 可以访问该状态中的值或捕获的异常。</li><li>如果 future 的 get() 在共享状态未就绪时调用，它会阻塞调用线程，直到状态就绪。</li></ul><p><strong>2. promise 和 future 的基本原理</strong></p><p>1.共享状态:</p><ul><li>promise 和 future 之间共享同一个状态。promise 是生产者，可以设置共享状态的值或异常；future 是消费者，可以等待并获取这个状态的值或异常。</li></ul><p>2.一次性:</p><ul><li>promise 的 set_value 或 set_exception 只能调用一次；相应地，future 的 get() 也只能调用一次。调用 get() 后，future 不再持有共享状态。</li><li>如果多次调用 get() 会抛出 std::future_error 异常。</li></ul><p>3.线程安全:</p><ul><li>promise 和 future 的实现保证了它们在不同线程之间操作时的线程安全性。这使得它们非常适合多线程环境下的同步操作。</li></ul><p><strong>3. 典型使用场景</strong></p><p>单一任务的异步结果获取</p><ul><li>场景: 你有一个耗时操作需要在后台线程中完成，但你希望在主线程中等待其结果。</li><li>解决方案: 创建一个 std::promise，启动线程执行耗时任务，并在任务完成时通过 promise.set_value() 设置结果。主线程通过 std::future 的 get() 方法获取结果。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>p<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行耗时操作</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">some_long_running_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> result <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阻塞直到 result 就绪</span>
t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常传递</p><ul><li>场景: 如果后台任务在执行过程中发生异常，你希望在主线程中处理这个异常。</li><li>解决方案: 在后台线程中捕获异常并通过 promise.set_exception() 传递给主线程。主线程在调用 future.get() 时会捕获到这个异常。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>p<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">some_potentially_throwing_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p<span class="token punctuation">.</span><span class="token function">set_exception</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">current_exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>exception<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Exception: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.std::async 和 std::shared_future</strong> std::async</p><ul><li>作用: std::async 是一个高层的工具，用于启动异步任务，并返回一个 std::future。它可以在后台线程或当前线程中执行任务，取决于传递的标志（std::launch::async 或 std::launch::deferred）。</li><li>内部实现: std::async 内部会创建一个 promise，并启动任务。在任务完成时，将结果通过 promise 设置，从而使得返回的 future 可以获取这个结果。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>std::future&lt;int&gt; f = std::async(std::launch::async, [] {
    return some_long_running_task();
});

int result = f.get();  // 阻塞直到结果就绪
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>std::shared_future</p><ul><li>作用: std::future 是一次性的，不能被多次调用 get()。为了实现结果的多次访问，C++ 提供了 std::shared_future，它允许多个线程共享同一个 future 的结果。</li><li>用法: 可以通过 future.share() 方法将 std::future 转换为 std::shared_future。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>shared_future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> sf <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>sf<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> result <span class="token operator">=</span> sf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>sf<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> result <span class="token operator">=</span> sf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. promise 和 future 的高级用法</strong></p><p>链式任务执行</p><ul><li>场景: 有时一个任务的输出需要作为另一个任务的输入，这种情况下可以通过 future 的链式调用来实现任务的依赖管理。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">auto</span> chained_future <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> final_result <span class="token operator">=</span> chained_future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// final_result = 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>并行任务处理</strong> 场景: 你有多个独立的任务，希望它们同时执行，并在所有任务完成后获取结果。 解决方案: 可以启动多个线程，每个线程处理一个任务并使用 promise 来设置结果。使用多个 future 来等待所有任务的完成。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> futures<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    futures<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">async</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>launch<span class="token double-colon punctuation">::</span>async<span class="token punctuation">,</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> f <span class="token operator">:</span> futures<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Result: &quot;</span> <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结</p><ul><li>std::promise: 用于在多线程环境中设置一个值或异常，并将其传递给 future。</li><li>std::future: 用于等待和获取 promise 设置的值或异常。get() 方法在值就绪之前阻塞调用线程。</li><li>std::async: 提供了一个简单的接口来启动异步任务，并返回一个 future。</li><li>std::shared_future: 允许多个线程共享同一个 future 的结果。</li></ul><p>通过合理地使用 promise 和 future，可以有效地管理多线程任务的结果传递和异常处理，从而实现复杂的异步编程模式。</p><h3 id="位域是什么-有哪些注意点" tabindex="-1"><a class="header-anchor" href="#位域是什么-有哪些注意点" aria-hidden="true">#</a> 位域是什么？有哪些注意点</h3><p><strong>位域</strong>（Bit-field）是在C语言、C++等编程语言中，允许程序员定义占用特定位数的变量，这些变量被称为位域成员。位域通常用于高效地管理硬件寄存器、实现压缩的数据结构或传输数据时节省空间。</p><p><strong>位域的定义</strong></p><p>在结构体中定义位域时，可以指定某个成员仅占用特定位数的存储空间。其语法如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token punctuation">{</span>
    type member_name <span class="token operator">:</span> number_of_bits<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type：成员的类型，通常是int或unsigned int。</li><li>member_name：位域成员的名称。</li><li>number_of_bits：该位域成员占用的位数。</li></ul><p>示例</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Flags</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> isOn <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// 占用1位</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> hasError <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 占用1位</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">;</span>     <span class="token comment">// 占用6位</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，结构体Flags有三个成员，分别占用1位、1位和6位，总共占用8位（1字节）。</p><p><strong>位域的注意点</strong></p><ul><li><p>平台依赖性：位域的实现是与平台相关的。例如，位域的布局顺序（高位在前还是低位在前）、对齐方式和最大位宽等特性可能在不同编译器或平台上有所不同。</p></li><li><p>对齐：位域通常会被编译器对齐到某个字节边界（例如4字节或8字节）。如果位域成员无法完全填满一个存储单元（如一个字节），编译器可能会自动填充空余位，从而导致结构体占用更多的存储空间。</p></li><li><p>不可跨越字节边界：位域成员一般不能跨越存储单元（如字节）的边界。如果一个位域成员不能在一个字节内存储，通常会移至下一个存储单元开始。</p></li><li><p>读取与写入：由于位域通常不能按位访问（直接访问位），它们的读取和写入操作可能比普通变量慢一些，因为这些操作需要执行额外的位运算。</p></li><li><p>不可取地址：不能获取位域成员的地址，这意味着&amp;操作符不能应用于位域成员。</p></li><li><p>移植性：由于位域的实现细节因编译器和平台而异，代码的可移植性会受到影响。在不同平台之间移植代码时，必须谨慎处理位域结构。</p></li><li><p>最大位宽限制：位域的位宽不能超过基础类型的大小，例如，如果类型为int且int为32位，那么位宽最大只能是32。</p></li><li><p>位域数据的合法数据范围</p></li></ul><p><strong>使用场景</strong></p><p>位域通常用于嵌入式系统编程、硬件寄存器的映射和数据压缩等领域，因为这些领域对空间和性能有较高的要求。</p><p>总结来说，位域在节省存储空间方面非常有用，但在使用时需要注意其平台相关性、对齐方式等特性，以避免潜在的移植问题和性能问题。</p><p>对于，位域数据的合法数据范围这个注意点，下面的例子可以很好的说明。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">MixedBitFields</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 4位的 unsigned int 类型位域</span>
    <span class="token keyword">int</span> b <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 4位的 unsigned int 类型位域</span>
    <span class="token keyword">char</span> c <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token comment">// 4位的 char 类型位域</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> d <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">// 4位的 unsigned char 类型位域</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MixedBitFields fields <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a: &quot;</span> <span class="token operator">&lt;&lt;</span> fields<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b: &quot;</span> <span class="token operator">&lt;&lt;</span> fields<span class="token punctuation">.</span>b <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;c: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 需要将 char 转换为 int</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;d: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>d<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 需要将 unsigned char 转换为 int</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>a: <span class="token parameter variable">-1</span>
b: <span class="token number">7</span>
c: <span class="token parameter variable">-7</span>
d: <span class="token number">10</span>
Size of MixedBitFields: <span class="token number">4</span> bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a成员的类型为4个bit的有符号整形数据，那么其合法区间就是<code>[-8，7]</code>。因此这里给a赋15就会超过其合法区间。</p><h3 id="c-11的新特性有哪些" tabindex="-1"><a class="header-anchor" href="#c-11的新特性有哪些" aria-hidden="true">#</a> c++11的新特性有哪些？</h3><p>一、语法和语言特性</p><p><strong>1. auto类型推导</strong></p><p>auto关键字允许编译器自动推导变量的类型，简化了代码编写。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// i被推导为int类型</span>
<span class="token keyword">auto</span> d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// d被推导为double类型</span>
<span class="token keyword">auto</span> s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s被推导为std::string类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 范围for循环（Range-based for Loop）</strong></p><p>引入了一种简化的for循环语法，用于遍历容器中的元素。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> value <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. Lambda表达式</strong></p><p>Lambda表达式（匿名函数）提供了一种在代码中定义内联函数的方法，特别适用于需要将函数作为参数传递的场景。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. nullptr</strong></p><p>引入了新的空指针常量nullptr，替代传统的NULL，提供了类型安全的空指针表示。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5. 强类型枚举（Scoped Enum）</strong></p><p>通过enum class定义强类型枚举，避免了传统枚举类型的作用域和类型安全问题。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>复制代码
<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token punctuation">}</span><span class="token punctuation">;</span>
Color c <span class="token operator">=</span> Color<span class="token double-colon punctuation">::</span>Red<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6. 委托构造函数（Delegating Constructors）</strong></p><p>允许一个构造函数调用同一类中的另一个构造函数，简化了构造函数的实现。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 委托构造函数</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7. 默认和删除函数（Defaulted and Deleted Functions）</strong></p><p>可以使用= default和= delete来显式指定默认函数的生成或禁止函数的使用。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment">// 使用默认构造函数</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span> <span class="token comment">// 禁止拷贝构造函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>8. constexpr</strong></p><p>constexpr关键字用于声明在编译时可计算的常量表达式，提高程序的性能。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 等同于int array[25];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>9. 右值引用和移动语义（Rvalue References and Move Semantics）</strong></p><p>引入了右值引用（&amp;&amp;）和std::move，优化了对象的转移，减少了不必要的拷贝，提高了程序性能。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>string str1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string str2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移动构造，str1变为空</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>10. 变长模板（Variadic Templates）</strong></p><p>支持模板参数的可变长度，使得编写通用代码更加灵活。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&lt;&lt;</span> args<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：123hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、库增强</p><p><strong>1. 智能指针</strong></p><p>引入了std::unique_ptr、std::shared_ptr和std::weak_ptr，用于自动管理动态分配的内存，避免内存泄漏。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> sptr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 多线程支持</strong></p><p>标准库中增加了对多线程的支持，包括std::thread、std::mutex、std::lock_guard等，方便进行并发编程。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Thread is running&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 新的容器</strong></p><p>添加了无序容器，如std::unordered_map、std::unordered_set，提供了基于哈希表的高效查找。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> umap<span class="token punctuation">;</span>
umap<span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
umap<span class="token punctuation">[</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 正则表达式</strong></p><p>引入了正则表达式库，支持模式匹配和字符串操作。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex&gt;</span></span>
std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>regex <span class="token function">e</span><span class="token punctuation">(</span><span class="token string">&quot;(\\\\w+)\\\\s(\\\\w+)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>smatch sm<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sm<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> sm<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 时间库（Chrono）</strong></p><p>提供了高精度的时间测量和处理功能。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span>
<span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 进行一些操作</span>
<span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> duration <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>milliseconds<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Elapsed time: &quot;</span> <span class="token operator">&lt;&lt;</span> duration<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ms&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6. 元组（Tuple）</strong></p><p>std::tuple允许存储多个不同类型的值。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7. 数组（Array）</strong></p><p>std::array是一个定长的数组封装，替代传统的C风格数组。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> elem <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> elem <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>8. 随机数库</strong></p><p>提供了更强大的随机数生成功能，包括多种随机数引擎和分布。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random&gt;</span></span>
std<span class="token double-colon punctuation">::</span>random_device rd<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>mt19937 <span class="token function">gen</span><span class="token punctuation">(</span><span class="token function">rd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> random_number <span class="token operator">=</span> <span class="token function">dis</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三、其他改进</p><p><strong>1. 统一的初始化列表（Uniform Initialization）</strong></p><p>引入了统一的花括号{}初始化语法，适用于所有类型的初始化。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Point p<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 原子操作（Atomic Operations）</strong></p><p>提供了std::atomic类型，支持线程安全的原子操作。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic&gt;</span></span>
std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">atomic_counter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
atomic_counter<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 静态断言（Static Assertions）</strong></p><p>static_assert允许在编译时检查条件是否满足，提高代码的健壮性。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>复制代码
<span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;int size is not 4 bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 用户自定义字面量（User-defined Literals）</strong></p><p>允许用户定义自定义的字面量，增强代码的可读性。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>复制代码
<span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token keyword">operator</span><span class="token string">&quot;&quot;</span> <span class="token function">_kg</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> weight <span class="token operator">=</span> <span class="token number">3.5</span>_kg<span class="token punctuation">;</span> <span class="token comment">// weight = 3500</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 新的字符串字面量</strong></p><p>支持原始字符串（Raw String）和UTF-8、UTF-16、UTF-32字符串字面量。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>复制代码
std<span class="token double-colon punctuation">::</span>string raw_str <span class="token operator">=</span> <span class="token raw-string string">R&quot;(Line1
Line2
Line3)&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6. 类型推导（decltype）</strong></p><p>decltype关键字用于获取表达式的类型。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>复制代码
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// b的类型被推导为int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><p>C++11作为C++语言的重大更新，引入了众多新特性，提升了语言的表达能力、性能和安全性。这些新特性使得C++编程更加高效、简洁和现代化。熟练掌握C++11的新特性对于提高开发效率和代码质量具有重要意义。</p><h2 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h2><h3 id="什么是rtti" tabindex="-1"><a class="header-anchor" href="#什么是rtti" aria-hidden="true">#</a> 什么是RTTI</h3><p>RTTI（Run-Time Type Information，运行时类型信息）是一种在程序运行时提供对象类型信息的机制。它允许在运行时检查对象的类型，通常用于以下几个方面：</p><ul><li>类型识别：确定一个对象是否属于特定的类，或者确定对象的实际类型。</li><li>动态转换：安全地将基类指针或引用转换为派生类指针或引用。</li><li>调试和日志记录：在调试和日志记录过程中获取对象的类型信息。</li></ul><p>在C++中，RTTI主要通过以下两个操作符实现：</p><ul><li><p>typeid：用于获取对象的类型信息。例如，typeid(object)会返回一个表示object类型的std::type_info对象。</p></li><li><p>dynamic_cast：用于将基类指针或引用安全地转换为派生类指针或引用。只有在转换是合法的情况下，dynamic_cast才会成功，否则会返回nullptr（对于指针）或抛出std::bad_cast异常（对于引用）。</p></li><li></li></ul><p>使用RTTI需要在编译时启用支持RTTI的选项，因为某些编译器可能默认禁用RTTI以优化性能和减小代码大小。RTTI机制在C++的多态性（polymorphism）中非常有用，特别是在处理继承层次结构复杂的情况下。</p><p>以下是一个简单的示例，展示了RTTI的使用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Base<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> Derived<span class="token punctuation">;</span>
    
    <span class="token comment">// 使用typeid操作符</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Type of b: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">// 使用dynamic_cast进行安全的向下转换</span>
    Derived<span class="token operator">*</span> d <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Derived<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b is of type Derived.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b is not of type Derived.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">delete</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>typeid</code>用于获取对象的类型信息，而<code>dynamic_cast</code>用于安全地将基类指针转换为派生类指针。</p><h2 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h2><h3 id="map和unordered-map的区别-各自使用场景是什么" tabindex="-1"><a class="header-anchor" href="#map和unordered-map的区别-各自使用场景是什么" aria-hidden="true">#</a> map和unordered_map的区别? 各自使用场景是什么？</h3><p><strong>1.底层实现</strong></p><ul><li>map: 是基于红黑树（一种自平衡二叉搜索树）实现的。这使得 map 中的元素是按照键的顺序自动排序的。</li><li>unordered_map: 是基于哈希表实现的，元素的存储顺序是无序的，取决于哈希函数的结果。</li></ul><p><strong>2. 时间复杂度</strong></p><ul><li><p>map: 由于是平衡二叉搜索树，插入、删除和查找操作的平均时间复杂度为 O(log n)。</p></li><li><p>unordered_map: 由于是基于哈希表实现的，插入、删除和查找操作的平均时间复杂度为 O(1)。但在最坏情况下，可能会退化到 O(n)（例如，当哈希冲突严重时）。 <strong>3. 元素的存储顺序</strong></p></li><li><p>map: 元素按键的顺序存储和遍历。</p></li><li><p>unordered_map: 元素没有特定的顺序，遍历顺序是不可预测的。 <strong>4. 内存消耗</strong></p></li><li><p>map: 由于红黑树结构的原因，通常需要额外的内存来维持树的平衡。</p></li><li><p>unordered_map: 由于使用哈希表，其内存使用量主要取决于负载因子和哈希冲突的处理方式。 <strong>5. 使用场景</strong></p></li><li><p>map:</p><ul><li>当需要对键值进行排序或按顺序遍历时，选择 map。</li><li>例如，需要按字母顺序存储和检索学生姓名及其成绩的情况。</li><li>适合需要较稳定的时间复杂度和有序数据访问的场景。</li></ul></li><li><p>unordered_map:</p><ul><li>当主要关注查找速度而不关心键的顺序时，选择 unordered_map。</li><li>例如，用于统计单词频率或存储哈希表以快速查找的情况。</li><li>适合数据量大且对性能要求高的场景，特别是需要高效的查找、插入和删除操作时。</li></ul></li></ul><p><strong>总结</strong></p><ul><li>使用 map 当你需要有序的数据或者需要比较稳定的性能时。</li><li>使用 unordered_map 当你更关注查找、插入和删除操作的性能，并且不需要数据顺序时。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,338),r={href:"https://zhuanlan.zhihu.com/p/629336564(%E5%90%AB%E7%AD%94%E6%A1%88)",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=l("ExternalLinkIcon");return p(),t("div",null,[u,n("p",null,[n("a",r,[e("https://zhuanlan.zhihu.com/p/629336564(含答案)"),o(s)])])])}const b=a(i,[["render",d],["__file","cpp.html.vue"]]);export{b as default};
