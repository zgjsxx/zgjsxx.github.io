const e=JSON.parse('{"key":"v-64403567","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-41.html","title":"effective c++ 41 隐式接口和编译器多态","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 41 隐式接口和编译器多态 总结 classes和template都支持接口和多态。 对classes而言接口时显示的explicit， 以函数签名为中心。多态则是通过虚函数发生于运行期。 对template参数而言，接口时隐式的，奠基于有效表达式。多态则是通过template具现化和函数重载解析发生于编译期。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-41.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 41 隐式接口和编译器多态"}],["meta",{"property":"og:description","content":"effective c++ 41 隐式接口和编译器多态 总结 classes和template都支持接口和多态。 对classes而言接口时显示的explicit， 以函数签名为中心。多态则是通过虚函数发生于运行期。 对template参数而言，接口时隐式的，奠基于有效表达式。多态则是通过template具现化和函数重载解析发生于编译期。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T09:30:25.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-15T09:30:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 41 隐式接口和编译器多态\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-15T09:30:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684143025000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.38,"words":113},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-41.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 41 隐式接口和编译器多态</h1>\\n<h2> 总结</h2>\\n<ul>\\n<li>classes和template都支持接口和多态。</li>\\n<li>对classes而言接口时显示的explicit， 以函数签名为中心。多态则是通过虚函数发生于运行期。</li>\\n<li>对template参数而言，接口时隐式的，奠基于有效表达式。多态则是通过template具现化和函数重载解析发生于编译期。</li>\\n</ul>\\n","autoDesc":true}');export{e as data};
