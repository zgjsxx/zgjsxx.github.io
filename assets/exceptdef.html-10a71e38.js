import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<p>category:</p><ul><li>C++ tag:</li><li>C++</li><li>MyTinySTL</li></ul><hr><h1 id="exceptdef" tabindex="-1"><a class="header-anchor" href="#exceptdef" aria-hidden="true">#</a> exceptdef</h1><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="相关宏定义" tabindex="-1"><a class="header-anchor" href="#相关宏定义" aria-hidden="true">#</a> 相关宏定义</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MYSTL_DEBUG</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">assert</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span>  </span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THROW_LENGTH_ERROR_IF</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> what<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">length_error</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THROW_OUT_OF_RANGE_IF</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> what<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THROW_RUNTIME_ERROR_IF</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> what<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","exceptdef.html.vue"]]);export{r as default};
