const e=JSON.parse('{"key":"v-d11ccfee","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-50.html","title":"effective c++ 50 new合理替换时机","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 50 new合理替换时机 本文主要讲解什么场景下我们需要替换编译器提供的operator new或者operator delete。 分析 用来检测运用上的错误。 为了强化效能 为了收集使用上的统计数据 为了检测运用错误 为了收集动态分配内存之使用统计信息 总结 有许多理由需要写个自定的new和delete，包括改善性能、对heap运用错误进行调试、收集heap使用信息。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-50.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 50 new合理替换时机"}],["meta",{"property":"og:description","content":"effective c++ 50 new合理替换时机 本文主要讲解什么场景下我们需要替换编译器提供的operator new或者operator delete。 分析 用来检测运用上的错误。 为了强化效能 为了收集使用上的统计数据 为了检测运用错误 为了收集动态分配内存之使用统计信息 总结 有许多理由需要写个自定的new和delete，包括改善性能、对heap运用错误进行调试、收集heap使用信息。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T06:23:55.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-17T06:23:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 50 new合理替换时机\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T06:23:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684304635000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":0.48,"words":144},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-50.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 50 new合理替换时机</h1>\\n<p>本文主要讲解什么场景下我们需要替换编译器提供的operator new或者operator delete。</p>\\n<h2> 分析</h2>\\n<ul>\\n<li>用来检测运用上的错误。</li>\\n<li>为了强化效能</li>\\n<li>为了收集使用上的统计数据</li>\\n<li>为了检测运用错误</li>\\n<li>为了收集动态分配内存之使用统计信息</li>\\n</ul>\\n<h2> 总结</h2>\\n<ul>\\n<li>有许多理由需要写个自定的new和delete，包括改善性能、对heap运用错误进行调试、收集heap使用信息。</li>\\n</ul>","autoDesc":true}');export{e as data};
