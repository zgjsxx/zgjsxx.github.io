const e=JSON.parse('{"key":"v-2a7d4f2b","path":"/posts/Linux/compile/ldconfig-soname.html","title":"Linux中的SO-NAME与动态库的版本","lang":"zh-CN","frontmatter":{"category":["编译原理","Linux","ELF文件"],"description":"Linux中的SO-NAME与动态库的版本 由于动态库有着诸多优点，其在程序中的运用非常广泛。现代的系统中一般存在大量的动态库。如何组织管理好这些动态库是一个非常重要的问题。Linux系统对于共享库的管理有一套很成熟的体系，这对于开发者而言进行程序的维护升级带来了方便。本文将对于Linux系统对于动态库的管理体系进行介绍。 共享库的兼容性问题 对于一个库而言，开发者会不停地更新共享库的版本，修复一些问题，增加库的功能以及对性能的改进等等。由于共享库的特性，应用程序的共享库和应用程序本身可以独立开发和更新。例如Hello_World程序依赖于一个动态库libhello.so。当libhello.so的开发者开发出新的版本后，理论上只需要使用新的libhello.so去替换旧的版本就可以。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/compile/ldconfig-soname.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux中的SO-NAME与动态库的版本"}],["meta",{"property":"og:description","content":"Linux中的SO-NAME与动态库的版本 由于动态库有着诸多优点，其在程序中的运用非常广泛。现代的系统中一般存在大量的动态库。如何组织管理好这些动态库是一个非常重要的问题。Linux系统对于共享库的管理有一套很成熟的体系，这对于开发者而言进行程序的维护升级带来了方便。本文将对于Linux系统对于动态库的管理体系进行介绍。 共享库的兼容性问题 对于一个库而言，开发者会不停地更新共享库的版本，修复一些问题，增加库的功能以及对性能的改进等等。由于共享库的特性，应用程序的共享库和应用程序本身可以独立开发和更新。例如Hello_World程序依赖于一个动态库libhello.so。当libhello.so的开发者开发出新的版本后，理论上只需要使用新的libhello.so去替换旧的版本就可以。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-06T10:06:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-06T10:06:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux中的SO-NAME与动态库的版本\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-06T10:06:26.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1707213986000,"updatedTime":1707213986000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":3.48,"words":1043},"filePathRelative":"posts/Linux/compile/ldconfig-soname.md","localizedDate":"2024年2月6日","excerpt":"<h1> Linux中的SO-NAME与动态库的版本</h1>\\n<p>由于动态库有着诸多优点，其在程序中的运用非常广泛。现代的系统中一般存在大量的动态库。如何组织管理好这些动态库是一个非常重要的问题。Linux系统对于共享库的管理有一套很成熟的体系，这对于开发者而言进行程序的维护升级带来了方便。本文将对于Linux系统对于动态库的管理体系进行介绍。</p>\\n<h1> 共享库的兼容性问题</h1>\\n<p>对于一个库而言，开发者会不停地更新共享库的版本，修复一些问题，增加库的功能以及对性能的改进等等。由于共享库的特性，应用程序的共享库和应用程序本身可以独立开发和更新。例如Hello_World程序依赖于一个动态库libhello.so。当libhello.so的开发者开发出新的版本后，理论上只需要使用新的libhello.so去替换旧的版本就可以。</p>","autoDesc":true}');export{e as data};
