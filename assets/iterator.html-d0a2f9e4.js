import{_ as n,V as e,W as t,X as s,Y as p,$ as o,a0 as c,F as l}from"./framework-9a29aaa0.js";const r={},i=c(`<h1 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h1><h2 id="萃取器" tabindex="-1"><a class="header-anchor" href="#萃取器" aria-hidden="true">#</a> 萃取器</h2><p>萃取器的作用是在编译器获取一个迭代器的类型。其有三个版本。</p><p>第一个版本就是最common的场景，Iterator是一个class类型的type， 例如list类型。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 萃取迭代器的特性</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iterator</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span> 
  <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">iterator_traits_helper</span><span class="token operator">&lt;</span><span class="token class-name">Iterator</span><span class="token punctuation">,</span> <span class="token class-name">has_iterator_cat</span><span class="token operator">&lt;</span><span class="token class-name">Iterator</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token class-name">value</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个版本就是针对原生指针类型的迭代器，例如<code>vector&lt;int&gt;</code>， 其迭代器就是<code>int*</code>，可以看到原生指针迭代器的类型是random_access_iterator_tag。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 针对原生指针的偏特化版本</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> random_access_iterator_tag           iterator_category<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> T                                    value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> T<span class="token operator">*</span>                                   pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> T<span class="token operator">&amp;</span>                                   reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                            difference_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个版本就是针对const原生指针类型的迭代器，可以看到原生指针迭代器的类型也是random_access_iterator_tag。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span><span class="token keyword">const</span> T<span class="token operator">*</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> random_access_iterator_tag           iterator_category<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> T                                    value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">const</span> T<span class="token operator">*</span>                             pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span>                             reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                            difference_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="has-iterator-cat" tabindex="-1"><a class="header-anchor" href="#has-iterator-cat" aria-hidden="true">#</a> has_iterator_cat</h2><p>从名字中我们大概知道，这个类的作用是用来判断是否一个迭代器拥有Category的type。</p><p>对于一个正常的iterator类，其会拥有一个iterator_category的属性，该属性是一个类型值，暗指迭代器的类型，也就是那五种，input_iterator_tag，output_iterator_tag， forward_iterator_tag， bidirectional_iterator_tag， random_access_iterator_tag。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// iterator 模板</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Category</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Distance</span> <span class="token operator">=</span> ptrdiff_t<span class="token punctuation">,</span>
  <span class="token keyword">class</span> <span class="token class-name">Pointer</span> <span class="token operator">=</span> T<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Reference</span> <span class="token operator">=</span> T<span class="token operator">&amp;</span><span class="token operator">&gt;</span>
  <span class="token keyword">struct</span> <span class="token class-name">iterator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">typedef</span> Category                             iterator_category<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> T                                    value_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> Pointer                              pointer<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> Reference                            reference<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> Distance                             difference_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果某个人自定义个了一个迭代器，但是这个迭代器中没有iterator_category这个类型属性，那么我们的trait_class是不能工作的，于是has_iterator_cat就派上了用场，它就是用于判断某个迭代器是否拥有该类型属性。</p><p>下面就看看has_iterator_cat是如何工作的。</p><p>这里有两个test函数，第一个test函数返回two结构体， 第二个test函数返回char类型字符。这是一个SFINAE的技巧。当类型U当中有iterator_category类型时，会匹配上第二个函数，返回char， 如果类型U中没有iterator_category类型时，匹配第一个函数，返回two。</p><p>因此当T的类型中包含了iterator_category的type时，为true。 反之，为false。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">has_iterator_cat</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">struct</span> <span class="token class-name">two</span> <span class="token punctuation">{</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token keyword">char</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token keyword">static</span> two <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token double-colon punctuation">::</span>iterator_category<span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">test</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iterator-traits-helper" tabindex="-1"><a class="header-anchor" href="#iterator-traits-helper" aria-hidden="true">#</a> iterator_traits_helper</h2><p>has_iterator_cat首先帮我们进行最基本的判断，看迭代器有否含有iterator_category的类型。</p><p>接着，iterator_traits_helper帮我们判断这个类型是否是从input_iterator_tag或者output_iterator_tag派生而来的。因为STL的迭代器都是从这两种类型派生而来。</p><p>这里使用了is_convertible，用来判断From是否可隐式转换为To。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">From</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">To</span><span class="token operator">&gt;</span> 
<span class="token keyword">struct</span> <span class="token class-name">is_convertible</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以iterator_traits_helper就是判断<code>Iterator::iterator_category</code>算否可以隐式转换为输入迭代器或输入迭代器。如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/*! 没有迭代器类型 */</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iterator</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits_helper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/*! 有迭代器类型 判断是否能隐式转换为input_iterator_tag或output_iterator_tag */</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iterator</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits_helper</span><span class="token operator">&lt;</span>Iterator<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token keyword">public</span> iterator_traits_impl<span class="token operator">&lt;</span>Iterator<span class="token punctuation">,</span>
	std<span class="token double-colon punctuation">::</span>is_convertible<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span>iterator_category<span class="token punctuation">,</span> input_iterator_tag<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">||</span>
	std<span class="token double-colon punctuation">::</span>is_convertible<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span>iterator_category<span class="token punctuation">,</span> output_iterator_tag<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iterator-traits-impl" tabindex="-1"><a class="header-anchor" href="#iterator-traits-impl" aria-hidden="true">#</a> iterator_traits_impl</h2><p>经过has_iterator_cat和iterator_traits_helper帮助我们进行校验，到这里我们就可以进行编译器的if-else判断了。</p><p>如果iterator_traits_impl的模板参数中第二个参数是false，代表该迭代器中不含有iterator_category的类型或者iterator_category的类型不是从input_iterator_tag或者output_iterator_tag继承而来，属于一种自定义的状态，那这种状态就无法进行萃取。</p><p>反之，iterator_traits_impl的模板参数中第二个参数是true时，代表该迭代器是我们可以萃取的类型。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iterator</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits_impl</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iterator</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits_impl</span><span class="token operator">&lt;</span>Iterator<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span>iterator_category iterator_category<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span>value_type        value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span>pointer           pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span>reference         reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span>difference_type   difference_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,31),d={href:"https://blog.csdn.net/zp126789zp/article/details/127887498",target:"_blank",rel:"noopener noreferrer"};function k(u,m){const a=l("ExternalLinkIcon");return e(),t("div",null,[i,s("p",null,[s("a",d,[p("https://blog.csdn.net/zp126789zp/article/details/127887498"),o(a)])])])}const y=n(r,[["render",k],["__file","iterator.html.vue"]]);export{y as default};
