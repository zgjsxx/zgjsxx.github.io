const t=JSON.parse('{"key":"v-e683e5b2","path":"/posts/design-pattern/command.html","title":"设计模式 - 命令模式(行为型)","lang":"zh-CN","frontmatter":{"description":"category: 设计模式 tag: 设计模式 设计模式 - 命令模式(行为型) 命令模式主要解决了什么问题？ 在软件系统中，行为的请求者和行为的执行者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。 在网上也看到其他一些对于命令模式的理解，我觉得也有一定道理。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/design-pattern/command.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"设计模式 - 命令模式(行为型)"}],["meta",{"property":"og:description","content":"category: 设计模式 tag: 设计模式 设计模式 - 命令模式(行为型) 命令模式主要解决了什么问题？ 在软件系统中，行为的请求者和行为的执行者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。 在网上也看到其他一些对于命令模式的理解，我觉得也有一定道理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-26T02:07:59.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-26T02:07:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式 - 命令模式(行为型)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-26T02:07:59.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1682436252000,"updatedTime":1682474879000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":2.5,"words":751},"filePathRelative":"posts/design-pattern/command.md","localizedDate":"2023年4月25日","excerpt":"<hr>\\n<p>category:</p>\\n<ul>\\n<li>设计模式\\ntag:</li>\\n<li>设计模式</li>\\n</ul>\\n<hr>\\n<h1> 设计模式 - 命令模式(行为型)</h1>\\n<p>命令模式主要解决了什么问题？</p>\\n<p>在软件系统中，<strong>行为的请求者</strong>和<strong>行为的执行者</strong>通常是一种<strong>紧耦合</strong>的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p>\\n<p>在网上也看到其他一些对于命令模式的理解，我觉得也有一定道理。</p>","autoDesc":true}');export{t as data};
