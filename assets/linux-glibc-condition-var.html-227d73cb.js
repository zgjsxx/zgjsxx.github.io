import{_ as p,V as e,W as o,X as n,Y as a,$ as t,a0 as c,F as l}from"./framework-9a29aaa0.js";const i={},u=c(`<h1 id="深入了解glibc的条件变量" tabindex="-1"><a class="header-anchor" href="#深入了解glibc的条件变量" aria-hidden="true">#</a> 深入了解glibc的条件变量</h1><h2 id="pthread-cond-t" tabindex="-1"><a class="header-anchor" href="#pthread-cond-t" aria-hidden="true">#</a> pthread_cond_t</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">union</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">__pthread_cond_s</span> __data<span class="token punctuation">;</span>
  <span class="token keyword">char</span> __size<span class="token punctuation">[</span>__SIZEOF_PTHREAD_COND_T<span class="token punctuation">]</span><span class="token punctuation">;</span>
  __extension__ <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> __align<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">pthread_cond_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token keyword">struct</span> <span class="token class-name">__pthread_cond_s</span>
<span class="token punctuation">{</span>
  __extension__ <span class="token keyword">union</span>
  <span class="token punctuation">{</span>
    __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> __wseq<span class="token punctuation">;</span>
    <span class="token keyword">struct</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __low<span class="token punctuation">;</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __high<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> __wseq32<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  __extension__ <span class="token keyword">union</span>
  <span class="token punctuation">{</span>
    __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> __g1_start<span class="token punctuation">;</span>
    <span class="token keyword">struct</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __low<span class="token punctuation">;</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __high<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> __g1_start32<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g_refs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> __LOCK_ALIGNMENT<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g_size<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g1_orig_size<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __wrefs<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __g_signals<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>__wrefs: 等待的线程数，是按照8的倍数来的，1个线程为8，2个线程是16，以此类推。</li><li>__g1_start: G1的开始位置</li><li>__g1_orig_size: G1的原始长度。低2位代表条件变量的内部的锁。</li><li>__wseq32：等待的序列号</li><li>__g_refs: futex waiter的引用计数</li><li>__g_signals：可以被消费的信号数</li><li>__g_size：g1和g2在产生切换时，里面剩余的waiter数量。</li><li></li></ul><h2 id="pthread-cond-signal" tabindex="-1"><a class="header-anchor" href="#pthread-cond-signal" aria-hidden="true">#</a> pthread_cond_signal</h2><p>pthread_cond_signal是条件变量发送信号的方法，其过程如下所示：</p><ul><li><ol><li>检查 cond __wrefs, 若没有waiter则直接返回</li></ol></li><li><ol start="2"><li>有waiter, 检查是否需要切换组(例如首次调用 wait 后 G1 为空，G2有一个等待者，则首次调用 signal 后需要将 G2 切换为 G1)</li></ol></li><li><ol start="3"><li>递增 __g_signals, 递减__g_size(未唤醒的waiters个数)，再调用futex_wake</li></ol></li></ul><p>首先读取条件变量的等待任务的数量。 <code>wref &gt;&gt; 3</code> 等同于<code>wref/8</code>，wref每次是按照8递增的，在pthread_conf_wait函数中有相应实现。</p><p>如果没有waiter，就不用发送信号，于是直接返回。所谓waiter就是调用了pthread_cond_wait而陷入wait的任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> wrefs <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__wrefs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>wrefs <span class="token operator">&gt;&gt;</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里获取条件变量中的序列号，通过序列号来获取现在的g1数组的下标（0或者1）。</p><p>刚开始时wseq为偶数，因此g1为1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> wseq <span class="token operator">=</span> <span class="token function">__condvar_load_wseq_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> g1 <span class="token operator">=</span> <span class="token punctuation">(</span>wseq <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>
  wseq <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  bool do_futex_wake <span class="token operator">=</span> false<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里首先检查G1的是否有waiter，如果有，向G1组中发送信号值（对应的signals+2），并将G1中剩余的waiter减去1。</p><p>如果G1已经没有剩余的waiter，那么就需要从G2中取waiter。实际上__condvar_quiesce_and_switch_g1是将G1和G2的身份做了调换。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token operator">||</span> <span class="token function">__condvar_quiesce_and_switch_g1</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> wseq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g1<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* Add a signal.  Relaxed MO is fine because signaling does not need to
	 establish a happens-before relation (see above).  We do not mask the
	 release-MO store when initializing a group in
	 __condvar_quiesce_and_switch_g1 because we use an atomic
	 read-modify-write and thus extend that store&#39;s release sequence.  */</span>
      <span class="token function">atomic_fetch_add_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token comment">/* TODO Only set it if there are indeed futex waiters.  */</span>
      do_futex_wake <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面详细看看__condvar_quiesce_and_switch_g1都做了哪些事情，其定义在了<code>nptl/pthread_cond_common.c</code>文件中。</p><p>__condvar_quiesce_and_switch_g1首先检查g2是否有waiter，如果没有waiter，则不进行操作。即G1和G2不需要进行调整，新的waiter仍然记录在G2中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> old_orig_size <span class="token operator">=</span> <span class="token function">__condvar_get_orig_size</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> old_g1_start <span class="token operator">=</span> <span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>wseq <span class="token operator">-</span> old_g1_start <span class="token operator">-</span> old_orig_size<span class="token punctuation">)</span>
	  <span class="token operator">+</span> cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> false<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面将g1的signal值和1进行与操作，标记此时g1已经被close。因为程序的并发性，这个时候可能还会有新的线程加入到旧的G1中。于是就给他们发送特殊的信号值，使得这些waiter可以感知。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token function">atomic_fetch_or_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，将G1中剩下的waiter全部唤醒。__g_refs和已经调用futex_wait进行睡眠的waiter数量相关。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> r <span class="token operator">=</span> <span class="token function">atomic_fetch_or_release</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> spin <span class="token operator">=</span> maxspin<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>spin <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> spin<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        r <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        r <span class="token operator">=</span> <span class="token function">atomic_fetch_or_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">futex_wait_simple</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">,</span> r<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        r <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这里就将对G1和G2进行切换。由于signal调用只能唤醒一个waiter，于是还需要计算新的G1还多少waiter没有唤醒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    wseq <span class="token operator">=</span> <span class="token function">__condvar_fetch_xor_wseq_release</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    g1 <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>g1index <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> orig_size <span class="token operator">=</span> wseq <span class="token operator">-</span> <span class="token punctuation">(</span>old_g1_start <span class="token operator">+</span> old_orig_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__condvar_set_orig_size</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> orig_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Use and addition to not loose track of cancellations in what was
        previously G2.  */</span>
    cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span> <span class="token operator">+=</span> orig_size<span class="token punctuation">;</span><span class="token comment">//计算还有多少waiter没有唤醒</span>

    <span class="token comment">//如果waiter cacel了wait，可能会走到这个if语句中。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_size<span class="token punctuation">[</span>g1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>

    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__condvar_quiesce_and_switch_g1到此位置就结束了，实际上就是当旧的G1中所有的waiter都唤醒时，将老的G1和G2身份对调。于是老的G2就成为了G1。后续将从G1继续唤醒waiter。</p><p>回到pthread_cond_signal，最后一部分代码则将互斥锁进行释放，接着如果需要进入内核，则调用futex_wake对waiter进行唤醒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token function">__condvar_release_lock</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_futex_wake<span class="token punctuation">)</span>
    <span class="token function">futex_wake</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pthread-cond-wait" tabindex="-1"><a class="header-anchor" href="#pthread-cond-wait" aria-hidden="true">#</a> pthread_cond_wait</h2><p>pthread_cond_wait是等待条件变量的方法，其过程如下所示：</p><ol><li>注册waiter到cond 的 _wseq 队列 （分为G1 G2两个组）</li><li>释放互斥锁</li><li>自旋等待，检查 __g_signals，自旋次数结束，进入 futex_wait_cancelable，休眠</li><li>完成后，需要对mutex进行加锁</li></ol><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/cond-var/cond-var.png" alt="glic-cond-var" tabindex="0" loading="lazy"><figcaption>glic-cond-var</figcaption></figure><p>下面就对照源码进行解析。</p><p>pthread_cond_wait首先会获取一个等待的序列号。条件变量的结构体中有一个字段是__wseq，这个便是所谓的序列号，每次pthread_cond_wait都会将序列号加上2。</p><p>从条件变量的初始化可以知道，wseq初始值为0。而wseq每次原子地递增2，因此当前wseq是一个偶数。wseq的奇偶性不是一成不变的，当g1和g2发生切换时，wseq会发生变化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTHREAD_COND_INITIALIZER</span> <span class="token expression"><span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来将wseq和1进行与操作，由于wseq为偶数，因此g等于0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token class-name">uint64_t</span> wseq <span class="token operator">=</span> <span class="token function">__condvar_fetch_add_wseq_acquire</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> g <span class="token operator">=</span> wseq <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> seq <span class="token operator">=</span> wseq <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，使用原子函数atomic_fetch_add_relaxed将增加条件变量的等待数量，注意这里一次增加了8。这里使用了relaxed的memory order已经足够了，因为我们的目的仅仅为了将cond-&gt;__data.__wrefs增加8。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token function">atomic_fetch_add_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__wrefs<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来调用__pthread_mutex_unlock_usercnt释放互斥锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  err <span class="token operator">=</span> <span class="token function">__pthread_mutex_unlock_usercnt</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">__condvar_cancel_waiting</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> seq<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">__condvar_confirm_wakeup</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先自旋检查<code>cond-&gt;__data.__g_signals+ g</code>group中的信号数量，如果有信号，意味着不用进入内核态，而直接唤醒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> spin <span class="token operator">=</span> maxspin<span class="token punctuation">;</span>
	  <span class="token keyword">while</span> <span class="token punctuation">(</span>signals <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> spin <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
	    <span class="token punctuation">{</span>
	      <span class="token comment">/* Check that we are not spinning on a group that&#39;s already
		 closed.  */</span>
	      <span class="token keyword">if</span> <span class="token punctuation">(</span>seq <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> done<span class="token punctuation">;</span>

	      <span class="token comment">/* TODO Back off.  */</span>

	      <span class="token comment">/* Reload signals.  See above for MO.  */</span>
	      signals <span class="token operator">=</span> <span class="token function">atomic_load_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
	      spin<span class="token operator">--</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，如果signal的值是低位为1，意味着当前的组已经被closed，直接跳出wait方法。</p><p>如果signals的值低位不是1，并且大于0，则认为获取到了有效的信号。跳过下面的逻辑。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>signals <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> done<span class="token punctuation">;</span>

    <span class="token comment">/* If there is an available signal, don&#39;t block.  */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>signals <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果逻辑没有走到这里，意味着自旋过程中，没有收到信号，于是尝试开始进行阻塞的动作。</p><p>首先将引用计数增加2。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token function">atomic_fetch_add_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_refs <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">atomic_load_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token operator">||</span> <span class="token punctuation">(</span>seq <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Our group is closed.  Wake up any signalers that might be
        waiting.  */</span>
        <span class="token function">__condvar_dec_grefs</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是进行一些清理工作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">struct</span> <span class="token class-name">_pthread_cleanup_buffer</span> buffer<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_condvar_cleanup_buffer</span> cbuffer<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>wseq <span class="token operator">=</span> wseq<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>cond <span class="token operator">=</span> cond<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>mutex <span class="token operator">=</span> mutex<span class="token punctuation">;</span>
    cbuffer<span class="token punctuation">.</span>private <span class="token operator">=</span> private<span class="token punctuation">;</span>
    <span class="token function">__pthread_cleanup_push</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> __condvar_cleanup_waiting<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cbuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token function">__futex_abstimed_wait_cancelable64</span> <span class="token punctuation">(</span>
    cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> clockid<span class="token punctuation">,</span> abstime<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">__pthread_cleanup_pop</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> ETIMEDOUT <span class="token operator">||</span> err <span class="token operator">==</span> EOVERFLOW<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">__condvar_dec_grefs</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* If we timed out, we effectively cancel waiting.  Note that
        we have decremented __g_refs before cancellation, so that a
        deadlock between waiting for quiescence of our group in
        __condvar_quiesce_and_switch_g1 and us trying to acquire
        the lock during cancellation is not possible.  */</span>
        <span class="token function">__condvar_cancel_waiting</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> seq<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> err<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token function">__condvar_dec_grefs</span> <span class="token punctuation">(</span>cond<span class="token punctuation">,</span> g<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Reload signals.  See above for MO.  */</span>
    signals <span class="token operator">=</span> <span class="token function">atomic_load_acquire</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token class-name">uint64_t</span> g1_start <span class="token operator">=</span> <span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seq <span class="token operator">&lt;</span> <span class="token punctuation">(</span>g1_start <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g1_start <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> g<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">__condvar_load_g1_start_relaxed</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">==</span> g1_start<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token function">atomic_compare_exchange_weak_relaxed</span>
                    <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">futex_wake</span> <span class="token punctuation">(</span>cond<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__g_signals <span class="token operator">+</span> g<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gdb观察条件变量的内部值的变化" tabindex="-1"><a class="header-anchor" href="#gdb观察条件变量的内部值的变化" aria-hidden="true">#</a> gdb观察条件变量的内部值的变化</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//g++ test.cpp -g -lpthread</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
pthread_t t1<span class="token punctuation">;</span>
pthread_t t2<span class="token punctuation">;</span>
pthread_mutex_t mutex<span class="token punctuation">;</span>
pthread_cond_t cond<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Process1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is Process1\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Process2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is Process2,i=%d\\n&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>Process1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>Process2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用gdb调试上述程序，并在源码中的第20行下一个断点。运行程序。</p><p>在程序中，创建了两个线程，一个线程wait，一个线程signal。我们在signal的方法中下了断点。</p><p>在上文中，我们知道，pthread_cond_wait每次会首先获取一个序列号，并将该序列号加上2。从上述的打印中的内容，我们看到__wseq的值确实为2。</p><p>此时还没有收到信号，因此__g_signals = {0, 0}。由于其中一个线程已经调用futex_wait进行sleep，因此__g_refs = {2, 0}。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># gdb a.out  -q</span>
Reading symbols from a.out<span class="token punctuation">..</span>.done.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">20</span>
Breakpoint <span class="token number">1</span> at 0x400968: <span class="token function">file</span> test.cpp, line <span class="token number">20</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> r
Starting program: /home/work/cpp_proj/test/a.out
Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-164.el8.x86_64
<span class="token punctuation">[</span>Thread debugging using libthread_db enabled<span class="token punctuation">]</span>
Using <span class="token function">host</span> libthread_db library <span class="token string">&quot;/lib64/libthread_db.so.1&quot;</span><span class="token builtin class-name">.</span>
<span class="token punctuation">[</span>New Thread 0x7ffff6ebb700 <span class="token punctuation">(</span>LWP <span class="token number">17663</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
this is Process1
<span class="token punctuation">[</span>New Thread 0x7ffff66ba700 <span class="token punctuation">(</span>LWP <span class="token number">17664</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>Switching to Thread 0x7ffff6ebb700 <span class="token punctuation">(</span>LWP <span class="token number">17663</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

Thread <span class="token number">2</span> <span class="token string">&quot;a.out&quot;</span> hit Breakpoint <span class="token number">1</span>, Process1 <span class="token punctuation">(</span>arg<span class="token operator">=</span>0x0<span class="token punctuation">)</span> at test.cpp:20
<span class="token number">20</span>                pthread_cond_signal<span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
Missing separate debuginfos, use: yum debuginfo-install libgcc-8.5.0-4.el8_5.x86_64 libstdc++-8.5.0-4.el8_5.x86_64
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">2</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">2</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">0</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">0</span>,
        __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">0</span>, __wrefs <span class="token operator">=</span> <span class="token number">8</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">15</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">19</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们使用next，使得其中一个线程进行signal操作。</p><p>signal操作的g1切换的过程中将修改__wseq的值，会将__wseq和1做异或操作。</p><p><code>2 ^ 1 = 3</code>，因此此时cond中的__wseq的值为3。</p><p>此时的g1为0，因此 __g_signals = {2, 0}。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">26</span>           pthread_mutex_unlock<span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">3</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">3</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">1</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">1</span>,
        __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">4</span>, __wrefs <span class="token operator">=</span> <span class="token number">8</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\003">\\003</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\002">\\002</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">15</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\004">\\004</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\002">\\002</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，继续运行，其中一个线程再次进行了wait，这个时候__wseq为5。 之前__wseq为3，加上2，因此等于5。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> shell
Continuing.
this is Process2,i<span class="token operator">=</span><span class="token number">2</span>
this is Process1

Thread <span class="token number">2</span> <span class="token string">&quot;a.out&quot;</span> hit Breakpoint <span class="token number">1</span>, Process1 <span class="token punctuation">(</span>arg<span class="token operator">=</span>0x0<span class="token punctuation">)</span> at test.cpp:20
<span class="token number">20</span>                pthread_cond_signal<span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$3</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">5</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">5</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">1</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">1</span>,
        __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">2</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">4</span>, __wrefs <span class="token operator">=</span> <span class="token number">8</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\005">\\005</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\004">\\004</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们使用next，使得其中一个线程进行signal操作。</p><p>原先__wseq为5，这里和1异或</p><p><code>5 ^ 1 = 4</code>，因此此时cond中的__wseq的值为4。</p><p>signal操作可能会导致__wseq从奇数跳变为偶数，或者从偶数跳变为奇数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">26</span>           pthread_mutex_unlock<span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p cond
<span class="token variable">$4</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>__wseq <span class="token operator">=</span> <span class="token number">4</span>, __wseq32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">4</span>, __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>__g1_start <span class="token operator">=</span> <span class="token number">2</span>, __g1_start32 <span class="token operator">=</span> <span class="token punctuation">{</span>__low <span class="token operator">=</span> <span class="token number">2</span>,
        __high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, __g_refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">2</span><span class="token punctuation">}</span>, __g_size <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">}</span>, __g1_orig_size <span class="token operator">=</span> <span class="token number">4</span>, __wrefs <span class="token operator">=</span> <span class="token number">8</span>, __g_signals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\004">\\004</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\002">\\002</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">11</span> times<span class="token operator">&gt;</span>, <span class="token string">&quot;<span class="token entity" title="\\004">\\004</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\b">\\b</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\002">\\002</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span>&quot;</span>, __align <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> PS</h2><h3 id="_1-异或操作" tabindex="-1"><a class="header-anchor" href="#_1-异或操作" aria-hidden="true">#</a> 1.异或操作</h3><p>异或操作的计算如下所示，不同得1，相同得0。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0</span> ^ <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token number">0</span> ^ <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token number">1</span> ^ <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token number">1</span> ^ <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,78),r={href:"https://zhuanlan.zhihu.com/p/374385534",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/weixin_34128411/article/details/88883008",target:"_blank",rel:"noopener noreferrer"};function d(_,v){const s=l("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[a("https://zhuanlan.zhihu.com/p/374385534"),t(s)])]),n("p",null,[n("a",k,[a("https://blog.csdn.net/weixin_34128411/article/details/88883008"),t(s)])])])}const b=p(i,[["render",d],["__file","linux-glibc-condition-var.html.vue"]]);export{b as default};
