const e=JSON.parse('{"key":"v-cda0f904","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-06.html","title":"effective c++ 06 不自动生成的函数，就明确拒绝","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 06 不自动生成的函数，就明确拒绝 在item-5中提到了，c++会为我们所定义的类创建一些默认的方法。大多数时候，这可以让我们少敲一些键盘，让我们避免得腱鞘炎。然而有的时候我们却不需要某些自动创建的方法，这个时候我们就需要显式的拒绝。 分析 本文阐述了两种方法，在更新的c++标准中，还拥有=delete这样的声明方法，可以在effective modern c++中进行了解。 方法1:将成员函数声明为private并不予实现 下面是一个例子，这个例子如果进行赋值编译将不会通过。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-06.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 06 不自动生成的函数，就明确拒绝"}],["meta",{"property":"og:description","content":"effective c++ 06 不自动生成的函数，就明确拒绝 在item-5中提到了，c++会为我们所定义的类创建一些默认的方法。大多数时候，这可以让我们少敲一些键盘，让我们避免得腱鞘炎。然而有的时候我们却不需要某些自动创建的方法，这个时候我们就需要显式的拒绝。 分析 本文阐述了两种方法，在更新的c++标准中，还拥有=delete这样的声明方法，可以在effective modern c++中进行了解。 方法1:将成员函数声明为private并不予实现 下面是一个例子，这个例子如果进行赋值编译将不会通过。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-21T03:13:34.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-21T03:13:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 06 不自动生成的函数，就明确拒绝\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-21T03:13:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[{"level":3,"title":"方法1:将成员函数声明为private并不予实现","slug":"方法1-将成员函数声明为private并不予实现","link":"#方法1-将成员函数声明为private并不予实现","children":[]},{"level":3,"title":"方法2：继承Uncopyable","slug":"方法2-继承uncopyable","link":"#方法2-继承uncopyable","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684638814000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":1.05,"words":316},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-06.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 06 不自动生成的函数，就明确拒绝</h1>\\n<p>在item-5中提到了，c++会为我们所定义的类创建一些默认的方法。大多数时候，这可以让我们少敲一些键盘，让我们避免得腱鞘炎。然而有的时候我们却不需要某些自动创建的方法，这个时候我们就需要显式的拒绝。</p>\\n<h2> 分析</h2>\\n<p>本文阐述了两种方法，在更新的c++标准中，还拥有=delete这样的声明方法，可以在effective modern c++中进行了解。</p>\\n<h3> 方法1:将成员函数声明为private并不予实现</h3>\\n<p>下面是一个例子，这个例子如果进行赋值编译将不会通过。</p>","autoDesc":true}');export{e as data};
