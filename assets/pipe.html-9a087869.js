import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<h1 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe" aria-hidden="true">#</a> pipe</h1><h2 id="peeknamedpipe" tabindex="-1"><a class="header-anchor" href="#peeknamedpipe" aria-hidden="true">#</a> PeekNamedPipe</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Get data size available from pipe</span>
DWORD bytesAvail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
BOOL isOK <span class="token operator">=</span> <span class="token function">PeekNamedPipe</span><span class="token punctuation">(</span>hPipe<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesAvail<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isOK<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">// Check GetLastError() code</span>
<span class="token punctuation">}</span>

<span class="token comment">// Allocate buffer and peek data from pipe</span>
DWORD bytesRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token function">buffer</span><span class="token punctuation">(</span>bytesAvail<span class="token punctuation">)</span><span class="token punctuation">;</span>
isOK <span class="token operator">=</span> <span class="token function">PeekNamedPipe</span><span class="token punctuation">(</span>hPipe<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bytesAvail<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isOK<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">// Check GetLastError() code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","pipe.html.vue"]]);export{r as default};
