import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},e=t(`<h1 id="linux-0-11-kernel目录tty-ioctl-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录tty-ioctl-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录tty_ioctl.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="change-speed" tabindex="-1"><a class="header-anchor" href="#change-speed" aria-hidden="true">#</a> change_speed</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change_speed</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是用于设置终端传输波特率。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">short</span> port<span class="token punctuation">,</span>quot<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>port <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//获取串口的端口地址(0x3f8或者0x2f8)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
quot <span class="token operator">=</span> quotient<span class="token punctuation">[</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cflag <span class="token operator">&amp;</span> CBAUD<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取波特率因此quot</span>
<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* set DLAB */</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>quot <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* LS of divisor */</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>quot <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* MS of divisor */</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span>port<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* reset DLAB */</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flush" tabindex="-1"><a class="header-anchor" href="#flush" aria-hidden="true">#</a> flush</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	queue<span class="token operator">-&gt;</span>head <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>tail<span class="token punctuation">;</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wait-until-sent" tabindex="-1"><a class="header-anchor" href="#wait-until-sent" aria-hidden="true">#</a> wait_until_sent</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">wait_until_sent</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>未实现。</p><h3 id="send-break" tabindex="-1"><a class="header-anchor" href="#send-break" aria-hidden="true">#</a> send_break</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send_break</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>未实现</p><h3 id="get-termios" tabindex="-1"><a class="header-anchor" href="#get-termios" aria-hidden="true">#</a> get_termios</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_termios</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span> termios<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取终端termios结构信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	<span class="token function">verify_area</span><span class="token punctuation">(</span>termios<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termios<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termios<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">put_fs_byte</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termios <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-termios" tabindex="-1"><a class="header-anchor" href="#set-termios" aria-hidden="true">#</a> set_termios</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">set_termios</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span> termios<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于设置终端termios结构信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termios<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">change_speed</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-termio" tabindex="-1"><a class="header-anchor" href="#get-termio" aria-hidden="true">#</a> get_termio</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_termio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span> termio<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是读取termio结构信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">termio</span> tmp_termio<span class="token punctuation">;</span>

	<span class="token function">verify_area</span><span class="token punctuation">(</span>termio<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	tmp_termio<span class="token punctuation">.</span>c_iflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_iflag<span class="token punctuation">;</span>
	tmp_termio<span class="token punctuation">.</span>c_oflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_oflag<span class="token punctuation">;</span>
	tmp_termio<span class="token punctuation">.</span>c_cflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cflag<span class="token punctuation">;</span>
	tmp_termio<span class="token punctuation">.</span>c_lflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_lflag<span class="token punctuation">;</span>
	tmp_termio<span class="token punctuation">.</span>c_line <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_line<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCC <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		tmp_termio<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">put_fs_byte</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tmp_termio<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termio <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-termio" tabindex="-1"><a class="header-anchor" href="#set-termio" aria-hidden="true">#</a> set_termio</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">set_termio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span> termio<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是设置termio结构信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">termio</span> tmp_termio<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tmp_termio<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termio<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_iflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_iflag<span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_oflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_oflag<span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_cflag<span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_lflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_lflag<span class="token punctuation">;</span>
	tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_line <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_line<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCC <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">change_speed</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tty-ioctl" tabindex="-1"><a class="header-anchor" href="#tty-ioctl" aria-hidden="true">#</a> tty_ioctl</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tty_ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于终端设备的io控制。</p><p>函数用于从tty_table数组中获取对应dev的tty结构体。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dev<span class="token operator">=</span>current<span class="token operator">-&gt;</span>tty<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>dev<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;tty_ioctl: dev&lt;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span>
		dev<span class="token operator">=</span><span class="token function">MINOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
	tty <span class="token operator">=</span> dev <span class="token operator">+</span> tty_table<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，根据cmd的类型去调用对应的方法。</p><p>如果cmd等于TCGETS，调用get_termios去获取获取终端termios的结构信息。</p><p>如果cmd等于TCSETSF，则用于刷新输入队列。</p><p>如果cmd等于TCSETSW，则用于等待输出队列中所有数据处理完。</p><p>如果cmd等于TCSETS，则用于设置终端的结构信息。</p><p>如果cmd等于TCGETA，则用于获取终端termio结构中的信息。</p><p>如果cmd等于TCSETAF，则用于刷新输入队列。</p><p>如果cmd等于TCSETAW，则用于等待输出队列中的所有数据处理完。</p><p>如果cmd等于TCSETA，则用于设置终端termio结构信息。</p><p>如果cmd等于TCSBRK， 则用于发送break。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> TCGETS<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">get_termios</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TCSETSF<span class="token operator">:</span>
			<span class="token function">flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* fallthrough */</span>
		<span class="token keyword">case</span> TCSETSW<span class="token operator">:</span>
			<span class="token function">wait_until_sent</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* fallthrough */</span>
		<span class="token keyword">case</span> TCSETS<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">set_termios</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TCGETA<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">get_termio</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TCSETAF<span class="token operator">:</span>
			<span class="token function">flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* fallthrough */</span>
		<span class="token keyword">case</span> TCSETAW<span class="token operator">:</span>
			<span class="token function">wait_until_sent</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* fallthrough */</span>
		<span class="token keyword">case</span> TCSETA<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">set_termio</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TCSBRK<span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">wait_until_sent</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token function">send_break</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TCXONC<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TCFLSH<span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
				<span class="token function">flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
				<span class="token function">flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token function">flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span>
				<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TIOCEXCL<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCNXCL<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCSCTTY<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* set controlling term NI */</span>
		<span class="token keyword">case</span> TIOCGPGRP<span class="token operator">:</span>
			<span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">put_fs_long</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TIOCSPGRP<span class="token operator">:</span>
			tty<span class="token operator">-&gt;</span>pgrp<span class="token operator">=</span><span class="token function">get_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TIOCOUTQ<span class="token operator">:</span>
			<span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token function">CHARS</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TIOCINQ<span class="token operator">:</span>
			<span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token function">CHARS</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> TIOCSTI<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCGWINSZ<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCSWINSZ<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCMGET<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCMBIS<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCMBIC<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCMSET<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCGSOFTCAR<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">case</span> TIOCSSOFTCAR<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">/* not implemented */</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,49),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-kernel-tty_ioctl.html.vue"]]);export{r as default};
