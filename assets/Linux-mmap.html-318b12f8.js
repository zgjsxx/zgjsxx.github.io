const e=JSON.parse('{"key":"v-e0a440be","path":"/posts/Linux/Linux-mmap.html","title":"","lang":"zh-CN","frontmatter":{"description":"mmap内存映射 一般分为 3个阶段： 进程启动映射，在 虚拟地址空间中为创建 虚拟映射区域(VMA)。 1.1. 用户进程 调用 mmap库函数。 1.2. 在进程的 虚拟地址空间 中，寻找一段 满足要求的、空闲的、连续的虚拟地址。 1.3. 为该段 虚拟地址 分配一个 VMA结构 并进行 初始化。 1.4. 将 VMA结构 插入进程的 mm_struct的链表或树中 。 内核空间执行 文件操作mmap，创建 物理地址 和 用户虚拟地址 的映射关系。 2.1. 找到文件的 文件结构体(struct file)。 2.2. 找到文件的 文件操作集file_operations，并执行其中的 mmap函数。 2.3. mmap函数 通过 inode结构体 定位到文件在 磁盘 上的 物理地址。 2.4. 通过 remap_pfn_range函数 建立 页表，即建立了 文件地址 和 虚拟映射区域(VMA) 的映射关系。注意，此时 VMA 并没有分配到实际的 物理内存 。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/Linux-mmap.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:description","content":"mmap内存映射 一般分为 3个阶段： 进程启动映射，在 虚拟地址空间中为创建 虚拟映射区域(VMA)。 1.1. 用户进程 调用 mmap库函数。 1.2. 在进程的 虚拟地址空间 中，寻找一段 满足要求的、空闲的、连续的虚拟地址。 1.3. 为该段 虚拟地址 分配一个 VMA结构 并进行 初始化。 1.4. 将 VMA结构 插入进程的 mm_struct的链表或树中 。 内核空间执行 文件操作mmap，创建 物理地址 和 用户虚拟地址 的映射关系。 2.1. 找到文件的 文件结构体(struct file)。 2.2. 找到文件的 文件操作集file_operations，并执行其中的 mmap函数。 2.3. mmap函数 通过 inode结构体 定位到文件在 磁盘 上的 物理地址。 2.4. 通过 remap_pfn_range函数 建立 页表，即建立了 文件地址 和 虚拟映射区域(VMA) 的映射关系。注意，此时 VMA 并没有分配到实际的 物理内存 。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-15T03:42:08.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-15T03:42:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-15T03:42:08.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1674572478000,"updatedTime":1676432528000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2},{"name":"zgjsxx","email":"119160625@qq.com","commits":1}]},"readingTime":{"minutes":1.81,"words":542},"filePathRelative":"posts/Linux/Linux-mmap.md","localizedDate":"2023年1月24日","excerpt":"<p>mmap内存映射 一般分为 3个阶段：</p>\\n<p>进程启动映射，在 虚拟地址空间中为创建 虚拟映射区域(VMA)。\\n1.1. 用户进程 调用 mmap库函数。\\n1.2. 在进程的 虚拟地址空间 中，寻找一段 满足要求的、空闲的、连续的虚拟地址。\\n1.3. 为该段 虚拟地址 分配一个 VMA结构 并进行 初始化。\\n1.4. 将 VMA结构 插入进程的 mm_struct的链表或树中 。\\n内核空间执行 文件操作mmap，创建 物理地址 和 用户虚拟地址 的映射关系。\\n2.1. 找到文件的 文件结构体(struct file)。\\n2.2. 找到文件的 文件操作集file_operations，并执行其中的 mmap函数。\\n2.3. mmap函数 通过 inode结构体 定位到文件在 磁盘 上的 物理地址。\\n2.4. 通过 remap_pfn_range函数 建立 页表，即建立了 文件地址 和 虚拟映射区域(VMA) 的映射关系。注意，此时 VMA 并没有分配到实际的 物理内存 。</p>","autoDesc":true}');export{e as data};
