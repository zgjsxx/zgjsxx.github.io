import{_ as n,V as s,W as a,a0 as t}from"./framework-c954d91f.js";const p={},e=t(`<h1 id="linux-0-11-kernel目录tty-io-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录tty-io-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录tty_io.c详解</h1><p>keyboard_interrupt -&gt; call *key_table(,%eax,4) -&gt; do_self -&gt; put_queue -&gt; (tty-&gt;read_q)-&gt; do_tty_interrupt-&gt; copy_to_cooked -&gt; (tty-&gt;secondary) -&gt;wake_up &lt;- sys_read &lt;- rw_char &lt;- tty_read &lt;- read &lt;- (shell)</p><h2 id="tty-init" tabindex="-1"><a class="header-anchor" href="#tty-init" aria-hidden="true">#</a> tty_init</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tty_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="tty-intr" tabindex="-1"><a class="header-anchor" href="#tty-intr" aria-hidden="true">#</a> tty_intr</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tty_intr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sleep-if-empty" tabindex="-1"><a class="header-anchor" href="#sleep-if-empty" aria-hidden="true">#</a> sleep_if_empty</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_if_empty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sleep-if-full" tabindex="-1"><a class="header-anchor" href="#sleep-if-full" aria-hidden="true">#</a> sleep_if_full</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_if_full</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="wait-for-keypress" tabindex="-1"><a class="header-anchor" href="#wait-for-keypress" aria-hidden="true">#</a> wait_for_keypress</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wait_for_keypress</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="copy-to-cooked" tabindex="-1"><a class="header-anchor" href="#copy-to-cooked" aria-hidden="true">#</a> copy_to_cooked</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">copy_to_cooked</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数作用复制成规范模式字符序列。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">signed</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">FULL</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果读队列不为空， 且辅助队列不满，就循环读取一个字节</span>
    <span class="token function">GETCH</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取一个字符到c</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span>       <span class="token comment">//如果是回车字符</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_CRNL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//回车转换行置位</span>
            c<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">//处理成换行符LF</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_NOCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//NOCR置位</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//忽略回车</span>
        <span class="token keyword">else</span> <span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token function">I_NLCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是换行符， 并且换行转回车NLCR置为，则将其转换为回车符CR。</span>
        c<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token comment">//转换为回车</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_UCLC</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果大写转小写置位， 则换成小写</span>
        c<span class="token operator">=</span><span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//CANON置位</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">KILL_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是KILL(^U)</span>
            <span class="token comment">/* deal with killing the input line */</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">LAST</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">10</span> <span class="token operator">||</span>
                    c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//本地回显标志置位</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment">//控制字符要删2字节</span>
                        <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">DEC</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//继续读取读队列中字符进行处理</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">ERASE_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果该字符是删除控制字符ERASE(^H)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">LAST</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">10</span> <span class="token operator">||</span>
                c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//本地回写标志置位</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">)</span>
                    <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">DEC</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">STOP_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果字符是停止控制字符（^S）, 则置tty停止标志，停止tty输出</span>
            tty<span class="token operator">-&gt;</span>stopped<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">START_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是开始字符(^Q)</span>
            tty<span class="token operator">-&gt;</span>stopped<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ISIG</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">INTR_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tty_intr</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span>INTMASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token function">QUIT_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tty_intr</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span>QUITMASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">10</span> <span class="token operator">||</span> c<span class="token operator">==</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span>
        tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>data<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHOCTL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token char">&#39;^&#39;</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
            <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">.</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tty-read" tabindex="-1"><a class="header-anchor" href="#tty-read" aria-hidden="true">#</a> tty_read</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tty_read</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> channel<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="tty-write" tabindex="-1"><a class="header-anchor" href="#tty-write" aria-hidden="true">#</a> tty_write</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tty_write</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> channel<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="do-tty-interrupt" tabindex="-1"><a class="header-anchor" href="#do-tty-interrupt" aria-hidden="true">#</a> do_tty_interrupt</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_tty_interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> tty<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是终端中断处理函数。</p><p>该函数的内部实现就是调用copy_to_cooked函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">copy_to_cooked</span><span class="token punctuation">(</span>tty_table<span class="token operator">+</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="chr-dev-init" tabindex="-1"><a class="header-anchor" href="#chr-dev-init" aria-hidden="true">#</a> chr_dev_init</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">chr_dev_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数时字符设备初始化函数。该函数实现为空，为以后做准备。</p>`,28),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Linux-0.11-kernel-tty-io.html.vue"]]);export{k as default};
