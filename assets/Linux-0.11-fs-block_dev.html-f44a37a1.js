import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<h1 id="linux-0-11-文件系统block-dev-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统block-dev-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统block_dev.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="block-write" tabindex="-1"><a class="header-anchor" href="#block-write" aria-hidden="true">#</a> block_write</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">block_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是进行块设备的写。</p><p>入参dev代表设备号，pos代表磁盘中的位置(字节数)，buf是待写数据的缓冲区，count是需要写入的字符数量。</p><p>程序的开始定义了一些变量，其中使用了位运算计算出了pos对应的block和在该block中的偏移量offset。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">;</span>
	<span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BLOCK_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> chars<span class="token punctuation">;</span>
	<span class="token keyword">int</span> written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
	<span class="token keyword">register</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来使用breada将block块中的内容读取到内存中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		chars <span class="token operator">=</span> BLOCK_SIZE <span class="token operator">-</span> offset<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span>
			chars<span class="token operator">=</span>count<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">==</span> BLOCK_SIZE<span class="token punctuation">)</span>
			bh <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span>
			bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">,</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>block<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		block<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span>
			<span class="token keyword">return</span> written<span class="token operator">?</span>written<span class="token operator">:</span><span class="token operator">-</span>EIO<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，从block开始的数据块中开始写入数据，如果该block写完之后，还没有结束，那么则进行下一轮循环。同时需要将该block的脏数据位设置为1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    p <span class="token operator">=</span> offset <span class="token operator">+</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
    offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>pos <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
    written <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
    count <span class="token operator">-=</span> chars<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的最后返回写入的数据总数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">return</span> written<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="block-read" tabindex="-1"><a class="header-anchor" href="#block-read" aria-hidden="true">#</a> block_read</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">block_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是进行块设备的读。</p><p>入参dev代表设备号，pos代表磁盘中的位置(字节数)，buf是接收缓冲区，count是需要读取的字符数量。</p><p>程序的开始定义了一些变量，其中使用了位运算计算出了pos对应的block和在该block中的偏移量offset。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">;</span>
    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BLOCK_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> chars<span class="token punctuation">;</span>
    <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
    <span class="token keyword">register</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来使用breada将block块中的内容读取到内存中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    chars <span class="token operator">=</span> BLOCK_SIZE<span class="token operator">-</span>offset<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span>
        chars <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">,</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>block<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> read<span class="token operator">?</span>read<span class="token operator">:</span><span class="token operator">-</span>EIO<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，从block开始的数据块中开始读取数据，如果该block读完之后，还没有结束，那么则进行下一轮循环。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    block<span class="token operator">++</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> offset <span class="token operator">+</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
    offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>pos <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
    read <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
    count <span class="token operator">-=</span> chars<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2><h3 id="block-read中获取商和余数为什么不使用-和" tabindex="-1"><a class="header-anchor" href="#block-read中获取商和余数为什么不使用-和" aria-hidden="true">#</a> block_read中获取商和余数为什么不使用/和%？</h3><p>在block_read函数中，<code>block=(*pos)/1024</code>， <code>offset=(*pos)%1024</code>。 由于除数是2的次幂，因此求商和余数可以使用位运算进行加速，这可以当作一个范式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">;</span>
<span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BLOCK_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[t];function c(l,r){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","Linux-0.11-fs-block_dev.html.vue"]]);export{u as default};
