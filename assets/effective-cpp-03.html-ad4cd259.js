const n=JSON.parse('{"key":"v-d7de0cbe","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-03.html","title":"effective c++ 03 尽可能使用const","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 03 尽可能使用const 在可以使用const的地方尽量使用const，可以避免很多错误 如果在const函数内部需要修改成员变量， 则需要使用mutable 下面是一个例子，如果不适用mutable， 则不能通过编译。 #include &lt;string&gt; #include &lt;string.h&gt; class CTextBlock3 { public: \\texplicit CTextBlock3(const char* t) : pText(t), lengthIsValid(false) \\t{ \\t} \\tstd::size_t length() const; private: \\tconst char* pText; \\tmutable std::size_t textLength; \\tmutable bool lengthIsValid; }; std::size_t CTextBlock3::length() const { \\tif (!lengthIsValid) \\t{ \\t\\ttextLength = strlen(pText); \\t\\tlengthIsValid = true; \\t} \\treturn textLength; } int main() { CTextBlock3 block(\\"chinese\\"); block.length(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-03.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 03 尽可能使用const"}],["meta",{"property":"og:description","content":"effective c++ 03 尽可能使用const 在可以使用const的地方尽量使用const，可以避免很多错误 如果在const函数内部需要修改成员变量， 则需要使用mutable 下面是一个例子，如果不适用mutable， 则不能通过编译。 #include &lt;string&gt; #include &lt;string.h&gt; class CTextBlock3 { public: \\texplicit CTextBlock3(const char* t) : pText(t), lengthIsValid(false) \\t{ \\t} \\tstd::size_t length() const; private: \\tconst char* pText; \\tmutable std::size_t textLength; \\tmutable bool lengthIsValid; }; std::size_t CTextBlock3::length() const { \\tif (!lengthIsValid) \\t{ \\t\\ttextLength = strlen(pText); \\t\\tlengthIsValid = true; \\t} \\treturn textLength; } int main() { CTextBlock3 block(\\"chinese\\"); block.length(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T06:58:32.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-11T06:58:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 03 尽可能使用const\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T06:58:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"在可以使用const的地方尽量使用const，可以避免很多错误","slug":"在可以使用const的地方尽量使用const-可以避免很多错误","link":"#在可以使用const的地方尽量使用const-可以避免很多错误","children":[]},{"level":2,"title":"如果在const函数内部需要修改成员变量， 则需要使用mutable","slug":"如果在const函数内部需要修改成员变量-则需要使用mutable","link":"#如果在const函数内部需要修改成员变量-则需要使用mutable","children":[]},{"level":2,"title":"当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复","slug":"当const和non-const成员函数有着实质等价的实现时-令non-const版本调用const版本可避免代码重复","link":"#当const和non-const成员函数有着实质等价的实现时-令non-const版本调用const版本可避免代码重复","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788312000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.61,"words":482},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-03.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 03 尽可能使用const</h1>\\n<h2> 在可以使用const的地方尽量使用const，可以避免很多错误</h2>\\n<h2> 如果在const函数内部需要修改成员变量， 则需要使用mutable</h2>\\n<p>下面是一个例子，如果不适用mutable， 则不能通过编译。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">CTextBlock3</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">explicit</span> <span class=\\"token function\\">CTextBlock3</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> t<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">pText</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">lengthIsValid</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>size_t <span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> pText<span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token keyword\\">mutable</span> std<span class=\\"token double-colon punctuation\\">::</span>size_t textLength<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">mutable</span> <span class=\\"token keyword\\">bool</span> lengthIsValid<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nstd<span class=\\"token double-colon punctuation\\">::</span>size_t <span class=\\"token class-name\\">CTextBlock3</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>lengthIsValid<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\ttextLength <span class=\\"token operator\\">=</span> <span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>pText<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\tlengthIsValid <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">return</span> textLength<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    CTextBlock3 <span class=\\"token function\\">block</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"chinese\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    block<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
