import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<h1 id="linux-0-11-kernel目录进程管理signal-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理signal-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理signal.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>signal.c主要涉及的是进程的信号处理。该章节中最难理解的是<strong>do_signal</strong>函数。</p><p>在unix系统中，信号是一种&quot;软件中断&quot;处理机制。有许多较为复杂的程序会使用到信号。信号机制提供了一种处理异步时间的方法。例如用户在终端键盘上键入ctrl-C组合来终止一个程序的执行。该操作就会产生一个SIGINT信号，并被发送到当前的前台执行的进程中。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="sys-sgetmask" tabindex="-1"><a class="header-anchor" href="#sys-sgetmask" aria-hidden="true">#</a> sys_sgetmask</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_sgetmask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是获取进程的<strong>信号的屏蔽图</strong>，即进程对哪些信号可以不做处理。</p><p>代码很简单，就是返回进程PCB中的<strong>blocked</strong>字段，<code>blocked</code>字段是一个long类型的数据，有32个bit。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">return</span> current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-ssetmask" tabindex="-1"><a class="header-anchor" href="#sys-ssetmask" aria-hidden="true">#</a> sys_ssetmask</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_ssetmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> newmask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用于设置<strong>新的信号屏蔽位图</strong>。其中<code>SIGKILL</code>是不可以被屏蔽的。</p><p><code> ~(1&lt;&lt;(SIGKILL-1))</code> 保证了SIGKILL的屏蔽位为0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> old<span class="token operator">=</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">;</span><span class="token comment">//保存旧的信号屏蔽位</span>

current<span class="token operator">-&gt;</span>blocked <span class="token operator">=</span> newmask <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGKILL<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置新的信号屏蔽位</span>
<span class="token keyword">return</span> old<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="save-old" tabindex="-1"><a class="header-anchor" href="#save-old" aria-hidden="true">#</a> save_old</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">save_old</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> from<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> to<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数在<strong>sys_sigaction</strong>中被调用，其作用是将旧的<code>sigaction</code>对象拷贝到用户地址空间。该方法的调用关系如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── int 0x80
  └── sys_sigaction
	└── save_old
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面分析该函数的代码。</p><p>首先对<code>to</code>所在的内存调用<code>verify_area</code>(fork.c中)进行校验。</p><p>接着进行遍历，将<code>from</code>的内容拷贝到<code>to</code>的位置，实际就是拷贝了<code>from</code>位置的<code>sigaction</code>对象到<code>to</code>位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">verify_area</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对内存区域进行校验</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">,</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
	from<span class="token operator">++</span><span class="token punctuation">;</span>
	to<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中调用了<code>put_fs_byte</code>函数，其定义在<code>segment.h</code>文件中，其作用是把内核态一个字节的数据拷贝到由 <code>fs:addr</code> 指向的用户态内存地址空间。</p><p><code>*from</code>指向内核空间， <code>*to</code>指向用户空间，由于二者的段描述符不相同，因此拷贝时，不能直接复制，需要使用<code>put_fs_byte</code>。</p><h3 id="get-new" tabindex="-1"><a class="header-anchor" href="#get-new" aria-hidden="true">#</a> get_new</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get_new</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> from<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> to<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数在<strong>sys_sigaction</strong>中被调用，其作用是将用户设置的<code>sigaction</code>传递到内核中。</p><p>其中调用了<code>get_fs_byte</code>函数， 其定义在segment.h文件中， 其作用是把<code>fs:from</code> 指向的用户态内存的一个字节拷贝到内核态to的地址中。该函数借助了<code>fs</code>寄存器，在<code>system_call</code>函数中，将<code>fs</code>寄存器设置为了<code>0x17</code>，指向了用户的数据段。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token operator">*</span><span class="token punctuation">(</span>to<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>from<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝用户空间的一个字节</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学习完<code>save_old</code>/<code>get_new</code>要有一个概念，内核态与用户态进行数据传输时，要借助于<code>fs</code>寄存器。</p><h3 id="sys-signal" tabindex="-1"><a class="header-anchor" href="#sys-signal" aria-hidden="true">#</a> sys_signal</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">long</span> handler<span class="token punctuation">,</span> <span class="token keyword">long</span> restorer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是<code>signal()</code>的系统调用，其用于设置信号的处理函数。</p><p><code>sys_signal</code>有三个入参， 而<code>signal</code>函数只有两个入参(如下所示)，这第三个参数<code>restorer</code>是在编译的过程中由编译器加入的，其作用将在<code>do_signal</code>中阐述。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">sigfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	sigfunc <span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signr<span class="token punctuation">,</span> sigfunc <span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>程序首先对入参<code>signum</code>做校验，其大小必须在区间<code>[1，32]</code>中，并且其值不得为SIGKILL（9）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sigaction</span> tmp<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>signum<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> signum<span class="token operator">&gt;</span><span class="token number">32</span> <span class="token operator">||</span> signum<span class="token operator">==</span>SIGKILL<span class="token punctuation">)</span><span class="token comment">//对signum做检查</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sa_restorer</code>保存的是恢复处理函数，会在<code>do_signal</code>函数中再次被提到， 其作用就是在信号处理函数结束之后，恢复现场。</p><p>接下来设置信号处理函数以及对应的一些标志。根据提供的参数组建<code>sigaction</code>结构内容。<code>sa_handler</code>是指定的信号处理句柄(函数)。<code>sa_mask</code>是执行信号处理句柄时的信号屏蔽码。<code>sa_flags</code>是执行时的一些标志组合。这里设定该信号处理句柄只使用1次后就恢复到默认值，并允许信号在自己的处理句柄中收到。</p><p><code>SA_ONESHOT</code> 和 <code>SA_NOMASK</code> 都是信号处理器的标志（flags）。它们的作用如下：</p><ul><li>SA_ONESHOT 表示信号处理器只会被执行一次。也就是说，当信号发生时，处理器被调用后，它会自动被系统设置为默认行为（通常是终止进程）。</li><li>SA_NOMASK标志通常是指定在信号处理函数执行期间不阻塞其他信号。在信号处理函数执行期间，内核通常会阻塞同一信号类型的其他实例，以避免竞态条件和递归调用。但是，如果设置了SA_NOMASK标志，则处理函数的执行期间不会阻塞相同类型的信号。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	tmp<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span><span class="token comment">//设置信号的handler</span>
	tmp<span class="token punctuation">.</span>sa_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//设置信号的屏蔽码</span>
	tmp<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_ONESHOT <span class="token operator">|</span> SA_NOMASK<span class="token punctuation">;</span>
	tmp<span class="token punctuation">.</span>sa_restorer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> restorer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着取出该信号的旧的处理函数作为返回值返回。然后将上面构建好的<code>sigaction</code>类型的tmp对象放置于进程的<code>sigaction</code>数组的对应位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler<span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-sigaction" tabindex="-1"><a class="header-anchor" href="#sys-sigaction" aria-hidden="true">#</a> sys_sigaction</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span> action<span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span> oldaction<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数是<code>sigaction()</code>的系统调用。</p><p>程序首先对入参signum做校验，其大小必须在区间[1，32]中，并且其值不得为SIGKILL（9）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>signum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> signum <span class="token operator">&gt;</span> <span class="token number">32</span> <span class="token operator">||</span> signum <span class="token operator">==</span> SIGKILL<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来进行设置新的<code>action</code>并且返回了之前设置的<code>oldaction</code>。这里使用到了之前提到的<code>get_new</code>和<code>save_old</code>方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tmp <span class="token operator">=</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">get_new</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> action<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>signum <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>oldaction<span class="token punctuation">)</span>
	<span class="token function">save_old</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> oldaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果设置了<code>SA_NOMASK</code>标志，则代表在信号处理函数执行期间不阻塞其他信号，允许信号在自己的信号句柄中收到信号，令屏蔽码位0，否则设置屏蔽本信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span>
	current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_mask <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-signal" tabindex="-1"><a class="header-anchor" href="#do-signal" aria-hidden="true">#</a> do_signal</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_signal</span><span class="token punctuation">(</span><span class="token keyword">long</span> signr<span class="token punctuation">,</span><span class="token keyword">long</span> eax<span class="token punctuation">,</span> <span class="token keyword">long</span> ebx<span class="token punctuation">,</span> <span class="token keyword">long</span> ecx<span class="token punctuation">,</span> <span class="token keyword">long</span> edx<span class="token punctuation">,</span>
	<span class="token keyword">long</span> fs<span class="token punctuation">,</span> <span class="token keyword">long</span> es<span class="token punctuation">,</span> <span class="token keyword">long</span> ds<span class="token punctuation">,</span>
	<span class="token keyword">long</span> eip<span class="token punctuation">,</span> <span class="token keyword">long</span> cs<span class="token punctuation">,</span> <span class="token keyword">long</span> eflags<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> ss<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数是进程接收到信号执行信号处理方法的主体。其在<strong>ret_from_sys_call</strong>中被调用，即从系统调用返回的过程中被调用。</p><p>在系统调用过程中，内核栈的情况如下图所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/signal/signal_raw.png" alt="do_signal1" tabindex="0" loading="lazy"><figcaption>do_signal1</figcaption></figure><p>在该函数中，首先根据信号的id，取出对应的sigaction结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> sa_handler<span class="token punctuation">;</span>
<span class="token keyword">long</span> old_eip<span class="token operator">=</span>eip<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span> sa <span class="token operator">=</span> current<span class="token operator">-&gt;</span>sigaction <span class="token operator">+</span> signr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> longs<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> tmp_esp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从sigaction结构体中取出sa_handler， 如果该handler的值为1， 代表是SIG_IGN，即忽略该信号， 则直接返回。</p><p>如果sa_handler的值是0，即SIG_DFL，即使用默认的信号处理方式，如果信号是SIGCHILD,则直接返回， 如果不是，则程序直接退出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sa_handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> sa<span class="token operator">-&gt;</span>sa_handler<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sa_handler<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sa_handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>signr<span class="token operator">==</span>SIGCHLD<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>signr<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来， 如果sa_flags含有SA_ONESHOT标记， 代表本次信号处理函数执行之后，就恢复默认处理方式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_ONESHOT<span class="token punctuation">)</span>
	sa<span class="token operator">-&gt;</span>sa_handler <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码就是设置让系统调用返回时去执行信号处理函数。</p><p>首先将eip设置为信号处理函数的地址，当中断处理函数调用结束之后通过iret返回之后， 就会去执行中断处理函数。 同时也会将原来通过INT压栈的一些寄存器的值保存在用户栈中。</p><p><code>*(&amp;eip) = sa_handler</code>就设置了新的eip值，这种做法，如果是c语言中的函数调用是不起作用的，因为在函数调用结束后，会因为esp指针的上移而丢弃掉， 而do_signal是在汇编程序中被调用，因此调用完毕之后，不会丢弃掉这些参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eip<span class="token punctuation">)</span> <span class="token operator">=</span> sa_handler<span class="token punctuation">;</span>
longs <span class="token operator">=</span> <span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//判断是7个参数还是8个参数</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>esp<span class="token punctuation">)</span> <span class="token operator">-=</span> longs<span class="token punctuation">;</span><span class="token comment">//向下移动esp指针</span>
<span class="token function">verify_area</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span>longs<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tmp_esp<span class="token operator">=</span>esp<span class="token punctuation">;</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> sa<span class="token operator">-&gt;</span>sa_restorer<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置回复处理函数</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>signr<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置信号的number</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">put_fs_long</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置block</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>eax<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置原eax</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>ecx<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置ecx</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>edx<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置edx</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>eflags<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置eflags</span>
<span class="token function">put_fs_long</span><span class="token punctuation">(</span>old_eip<span class="token punctuation">,</span>tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置eip</span>
current<span class="token operator">-&gt;</span>blocked <span class="token operator">|=</span> sa<span class="token operator">-&gt;</span>sa_mask<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其最终的效果如下图所示:</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/signal/signal_after.png" alt="do_after" tabindex="0" loading="lazy"><figcaption>do_after</figcaption></figure><p>当信号处理函数执行完毕，通过return返回时，就会去执行sa_restorer处的代码。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/signal/sa_restore.png" alt="sa_restore" tabindex="0" loading="lazy"><figcaption>sa_restore</figcaption></figure><p>下面就将解答之前在sys_signal中抛出的问题，sa_restorer是干什么的？</p><p>sa_restorer实际就是用于<strong>恢复用户栈</strong>，并且让程序<strong>恢复到系统调用之前的上下文</strong>。</p><p>编译器会在编译程序中调用libc库中信号系统调用函数把sa_restorer作为参数传递给sys_signal或者sigaction。</p><p>signal入参没有sa_flag，因此传入__sig_restore</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> __sighandler_t func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> __fooebx <span class="token function">__asm__</span> <span class="token punctuation">(</span><span class="token string">&quot;bx&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> sig<span class="token punctuation">;</span>
	<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;int $0x80&quot;</span><span class="token operator">:</span><span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">:</span>
	<span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span>_NR_signal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>__fooebx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>__sig_restore<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sigaction有sa_flag参数，因此可以sa_flag参数决定传入__sig_restore或者是__masksig_restore。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>sa<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>old<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> __fooebx <span class="token function">__asm__</span> <span class="token punctuation">(</span><span class="token string">&quot;bx&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> sig<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span>
		sa<span class="token operator">-&gt;</span>sa_restorer <span class="token operator">=</span> __sig_restore<span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		sa<span class="token operator">-&gt;</span>sa_restorer <span class="token operator">=</span> __masksig_restore<span class="token punctuation">;</span>
	<span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;int 0x80&quot;</span><span class="token operator">:</span> <span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span>
		<span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">(</span>_NR_sigaction<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>__foxxebx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>sig <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	errno <span class="token operator">=</span> <span class="token operator">-</span>sig<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__sig_restore和__masksig_restore的定义如下所示:</p><p>其二者区别就在于栈中的参数是7个还是8个。</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>.globl __sig_restore
.globl __masksig_restore
# 若没有blocked，则使用这个restorer函数
__sig_restore:
    addl $4, %esp
	popl %eax
	popl %ecx
	popl %edx
	popf
	ret
__masksig_restore:
    addl $4, %esp
	call __ssetmask
	addl $4, %esp
	popl %eax
	popl %ecx
	popl %edx
	popf
	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止， 梳理起来do_signal的处理流程如下：</p><p>ret_from_sys_call-&gt;do_signal-&gt;iret-&gt;handler-&gt;return-&gt;sa_restorer-&gt;return-&gt;origin eip</p><p>如下图所示:</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/signal/do_signal_flow.png" alt="do_signal_flow" tabindex="0" loading="lazy"><figcaption>do_signal_flow</figcaption></figure>`,88),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-kernel-signal.html.vue"]]);export{r as default};
