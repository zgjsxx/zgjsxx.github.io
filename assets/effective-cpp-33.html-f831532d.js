const n=JSON.parse('{"key":"v-32c3ab64","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-33.html","title":"effective c++ 33 避免遮掩继承而来的名称","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 33 避免遮掩继承而来的名称 本节主要分析了在继承中，如果在Derived类中有和Base类中相同名称的方法，那么将遮掩Base类中的方法。 分析 下面这个例子中，Derived::mf1 函数遮掩了Base::mf1和Base::mf1(int), Derived::mf3 函数遮掩了Base::mf3和Base::mf3(double)。 class Base { public: \\tvirtual void mf1() = 0; \\tvirtual void mf1(int) {} \\tvirtual void mf2() {} \\tvoid mf3(); \\tvoid mf3(double); private: \\tint x; }; class Derived : public Base { public: \\tvirtual void mf1() {} \\tvoid mf3() {} \\tvoid mf4(){}; }; int main() { \\tint x{0}; \\tDerived d; \\td.mf1();//调用Derived::mf1 \\t// d.mf1(x);//错误， Derived::mf1遮掩了Base::mf1 \\td.mf2();//调用Base::mf2 \\td.mf3();//调用Derived::mf3 \\t// d.mf3(x);//错误，因为Derived::mf3遮掩了Base::mf3 \\td.mf4();//调用Derived::mf4 }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-33.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 33 避免遮掩继承而来的名称"}],["meta",{"property":"og:description","content":"effective c++ 33 避免遮掩继承而来的名称 本节主要分析了在继承中，如果在Derived类中有和Base类中相同名称的方法，那么将遮掩Base类中的方法。 分析 下面这个例子中，Derived::mf1 函数遮掩了Base::mf1和Base::mf1(int), Derived::mf3 函数遮掩了Base::mf3和Base::mf3(double)。 class Base { public: \\tvirtual void mf1() = 0; \\tvirtual void mf1(int) {} \\tvirtual void mf2() {} \\tvoid mf3(); \\tvoid mf3(double); private: \\tint x; }; class Derived : public Base { public: \\tvirtual void mf1() {} \\tvoid mf3() {} \\tvoid mf4(){}; }; int main() { \\tint x{0}; \\tDerived d; \\td.mf1();//调用Derived::mf1 \\t// d.mf1(x);//错误， Derived::mf1遮掩了Base::mf1 \\td.mf2();//调用Base::mf2 \\td.mf3();//调用Derived::mf3 \\t// d.mf3(x);//错误，因为Derived::mf3遮掩了Base::mf3 \\td.mf4();//调用Derived::mf4 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T06:58:32.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-11T06:58:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 33 避免遮掩继承而来的名称\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T06:58:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788312000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.46,"words":438},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-33.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 33 避免遮掩继承而来的名称</h1>\\n<p>本节主要分析了在继承中，如果在Derived类中有和Base类中相同名称的方法，那么将遮掩Base类中的方法。</p>\\n<h2> 分析</h2>\\n<p>下面这个例子中，<code>Derived::mf1</code> 函数遮掩了<code>Base::mf1</code>和<code>Base::mf1(int)</code>, <code>Derived::mf3</code> 函数遮掩了<code>Base::mf3</code>和<code>Base::mf3(double)</code>。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Base</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf1</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf3</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf3</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Derived</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Base</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf3</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">mf4</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\tDerived d<span class=\\"token punctuation\\">;</span>\\n\\td<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">mf1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用Derived::mf1</span>\\n\\t<span class=\\"token comment\\">// d.mf1(x);//错误， Derived::mf1遮掩了Base::mf1</span>\\n\\td<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">mf2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用Base::mf2</span>\\n\\td<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">mf3</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用Derived::mf3</span>\\n\\t<span class=\\"token comment\\">// d.mf3(x);//错误，因为Derived::mf3遮掩了Base::mf3</span>\\n\\td<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">mf4</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用Derived::mf4</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
