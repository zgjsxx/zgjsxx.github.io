const n=JSON.parse('{"key":"v-e2d6dac2","path":"/posts/Linux/Linux-kernel-linked-list-function.html","title":"kernel中关于链表的宏定义","lang":"zh-CN","frontmatter":{"category":["Linux","Kernel"],"description":"kernel中关于链表的宏定义 list_for_each_entry #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; /* 找到指定的成员在定义的结构中的偏移的位置 */ #define offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER) /* 根据结构体成员的地址，以及结构体成员在结构体中的偏移值计算出结构体变量的地址 * ptr : 结构体成员变量的地址 * type : 结构体的类型定义 * member : 结构体中该成员的定义名称 */ #define container_of(ptr, type, member) ({ \\\\ const typeof(((type *)0)-&gt;member) * __mptr = (ptr); \\\\ (type *)((char *)__mptr - offsetof(type, member)); }) /* 对container_of进行宏的再次定义，作用和container_of一样 */ #define list_entry(ptr, type, member) \\\\ container_of(ptr, type, member) /* 对一个链表中的所有元素进行遍历: * pos : 表示为定义的结构体变量的地址，用来存放每次遍历的结点元素的首地址 * head : 表示要遍历的链表头部 * member : 为该链表成员在结构体中的名称 */ #define list_for_each_entry(pos, head, member) \\\\ for (pos = list_entry((head)-&gt;next, typeof(*pos), member); \\\\ &amp;pos-&gt;member != (head); \\\\ pos = list_entry(pos-&gt;member.next, typeof(*pos), member)) /* 功能和list_for_each_entry相同 * 但是遍历的结点是从head结点开始，而不是从head-&gt;next开始 */ #define yl_list_for_each_entry(pos, head, member) \\\\ for (pos = list_entry((head), typeof(*pos), member); \\\\ &amp;pos-&gt;member != NULL; \\\\ pos = list_entry(pos-&gt;member.next, typeof(*pos), member)) /* 链表连接件的结构体定义 */ struct list_head { struct list_head *next, *prev; }; /* 定义一个student结构体，然后用list_head将这些结构体串起来 */ struct student{ char name[20]; //名字字段 struct list_head list; // 连接件字段 }; /* 程序的入口函数 */ int main(int argc, char *argv[]) { int i; struct student *stu; struct student *p; struct list_head *g_list = NULL; /* 表示链表头部 */ struct list_head *t_list = NULL; /* 表示临时链表元素指针 */ /* 动态分配一块内存区域 */ stu = malloc(sizeof(struct student) * 10); if(!stu) { printf(\\"malloc error!\\\\n\\"); return -1; } /* 对内存区域进行赋值，并将其加入到定义的链表当中 */ for(i = 0; i &lt; 10; i++) { sprintf(stu[i].name, \\"stu-%d\\", i); /* 判断链表是否为空 */ if(!g_list) /* 为空 */ { g_list = &amp;stu[i].list; g_list-&gt;next = NULL; } else /* 不为空 */ { t_list = g_list; while(t_list) /* 对链表进行遍历 */ { if(t_list-&gt;next== NULL) { t_list-&gt;next = &amp;stu[i].list; stu[i].list.next = NULL; } t_list = t_list-&gt;next; } } } i = 0; /* 对链表进行遍历 */ yl_list_for_each_entry(p, g_list, list) { printf(\\"%d : %s\\\\n\\", i, p-&gt;name); i += 1; } return 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/Linux-kernel-linked-list-function.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"kernel中关于链表的宏定义"}],["meta",{"property":"og:description","content":"kernel中关于链表的宏定义 list_for_each_entry #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; /* 找到指定的成员在定义的结构中的偏移的位置 */ #define offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER) /* 根据结构体成员的地址，以及结构体成员在结构体中的偏移值计算出结构体变量的地址 * ptr : 结构体成员变量的地址 * type : 结构体的类型定义 * member : 结构体中该成员的定义名称 */ #define container_of(ptr, type, member) ({ \\\\ const typeof(((type *)0)-&gt;member) * __mptr = (ptr); \\\\ (type *)((char *)__mptr - offsetof(type, member)); }) /* 对container_of进行宏的再次定义，作用和container_of一样 */ #define list_entry(ptr, type, member) \\\\ container_of(ptr, type, member) /* 对一个链表中的所有元素进行遍历: * pos : 表示为定义的结构体变量的地址，用来存放每次遍历的结点元素的首地址 * head : 表示要遍历的链表头部 * member : 为该链表成员在结构体中的名称 */ #define list_for_each_entry(pos, head, member) \\\\ for (pos = list_entry((head)-&gt;next, typeof(*pos), member); \\\\ &amp;pos-&gt;member != (head); \\\\ pos = list_entry(pos-&gt;member.next, typeof(*pos), member)) /* 功能和list_for_each_entry相同 * 但是遍历的结点是从head结点开始，而不是从head-&gt;next开始 */ #define yl_list_for_each_entry(pos, head, member) \\\\ for (pos = list_entry((head), typeof(*pos), member); \\\\ &amp;pos-&gt;member != NULL; \\\\ pos = list_entry(pos-&gt;member.next, typeof(*pos), member)) /* 链表连接件的结构体定义 */ struct list_head { struct list_head *next, *prev; }; /* 定义一个student结构体，然后用list_head将这些结构体串起来 */ struct student{ char name[20]; //名字字段 struct list_head list; // 连接件字段 }; /* 程序的入口函数 */ int main(int argc, char *argv[]) { int i; struct student *stu; struct student *p; struct list_head *g_list = NULL; /* 表示链表头部 */ struct list_head *t_list = NULL; /* 表示临时链表元素指针 */ /* 动态分配一块内存区域 */ stu = malloc(sizeof(struct student) * 10); if(!stu) { printf(\\"malloc error!\\\\n\\"); return -1; } /* 对内存区域进行赋值，并将其加入到定义的链表当中 */ for(i = 0; i &lt; 10; i++) { sprintf(stu[i].name, \\"stu-%d\\", i); /* 判断链表是否为空 */ if(!g_list) /* 为空 */ { g_list = &amp;stu[i].list; g_list-&gt;next = NULL; } else /* 不为空 */ { t_list = g_list; while(t_list) /* 对链表进行遍历 */ { if(t_list-&gt;next== NULL) { t_list-&gt;next = &amp;stu[i].list; stu[i].list.next = NULL; } t_list = t_list-&gt;next; } } } i = 0; /* 对链表进行遍历 */ yl_list_for_each_entry(p, g_list, list) { printf(\\"%d : %s\\\\n\\", i, p-&gt;name); i += 1; } return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-24T15:01:18.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-24T15:01:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kernel中关于链表的宏定义\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-24T15:01:18.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1674572478000,"updatedTime":1674572478000,"contributors":[{"name":"zgjsxx","email":"119160625@qq.com","commits":1}]},"readingTime":{"minutes":1.83,"words":548},"filePathRelative":"posts/Linux/Linux-kernel-linked-list-function.md","localizedDate":"2023年1月24日","excerpt":"<h1> kernel中关于链表的宏定义</h1>\\n<ul>\\n<li>list_for_each_entry</li>\\n</ul>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdlib.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;unistd.h&gt;</span></span>\\n<span class=\\"token comment\\">/* 找到指定的成员在定义的结构中的偏移的位置 */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">offsetof</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>TYPE<span class=\\"token punctuation\\">,</span> MEMBER<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>size_t<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>TYPE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>MEMBER<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token comment\\">/*    根据结构体成员的地址，以及结构体成员在结构体中的偏移值计算出结构体变量的地址 \\n *        ptr    :    结构体成员变量的地址\\n *        type    :    结构体的类型定义\\n *        member    :    结构体中该成员的定义名称\\n */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">container_of</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>            </span><span class=\\"token punctuation\\">\\\\</span>\\n    <span class=\\"token expression\\"><span class=\\"token keyword\\">const</span> <span class=\\"token function\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>member<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> __mptr <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>    </span><span class=\\"token punctuation\\">\\\\</span>\\n    <span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>__mptr <span class=\\"token operator\\">-</span> <span class=\\"token function\\">offsetof</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token comment\\">/* 对container_of进行宏的再次定义，作用和container_of一样 */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">list_entry</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n    <span class=\\"token expression\\"><span class=\\"token function\\">container_of</span><span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token comment\\">/*    对一个链表中的所有元素进行遍历:\\n *        pos      : 表示为定义的结构体变量的地址，用来存放每次遍历的结点元素的首地址\\n *        head    : 表示要遍历的链表头部\\n *        member  : 为该链表成员在结构体中的名称\\n */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">list_for_each_entry</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>pos<span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span>                </span><span class=\\"token punctuation\\">\\\\</span>\\n    <span class=\\"token expression\\"><span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">=</span> <span class=\\"token function\\">list_entry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>head<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>pos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>    </span><span class=\\"token punctuation\\">\\\\</span>\\n         <span class=\\"token expression\\"><span class=\\"token operator\\">&amp;</span>pos<span class=\\"token operator\\">-&gt;</span>member <span class=\\"token operator\\">!=</span> <span class=\\"token punctuation\\">(</span>head<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>     </span><span class=\\"token punctuation\\">\\\\</span>\\n         <span class=\\"token expression\\">pos <span class=\\"token operator\\">=</span> <span class=\\"token function\\">list_entry</span><span class=\\"token punctuation\\">(</span>pos<span class=\\"token operator\\">-&gt;</span>member<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>pos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token comment\\">/*    功能和list_for_each_entry相同\\n *    但是遍历的结点是从head结点开始，而不是从head-&gt;next开始\\n */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">yl_list_for_each_entry</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>pos<span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span>                </span><span class=\\"token punctuation\\">\\\\</span>\\n        <span class=\\"token expression\\"><span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">=</span> <span class=\\"token function\\">list_entry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>head<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>pos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>    </span><span class=\\"token punctuation\\">\\\\</span>\\n             <span class=\\"token expression\\"><span class=\\"token operator\\">&amp;</span>pos<span class=\\"token operator\\">-&gt;</span>member <span class=\\"token operator\\">!=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>    </span><span class=\\"token punctuation\\">\\\\</span>\\n             <span class=\\"token expression\\">pos <span class=\\"token operator\\">=</span> <span class=\\"token function\\">list_entry</span><span class=\\"token punctuation\\">(</span>pos<span class=\\"token operator\\">-&gt;</span>member<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>pos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> member<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token comment\\">/* 链表连接件的结构体定义 */</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">list_head</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">list_head</span> <span class=\\"token operator\\">*</span>next<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>prev<span class=\\"token punctuation\\">;</span>    \\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">/* 定义一个student结构体，然后用list_head将这些结构体串起来 */</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">student</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">char</span> name<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>            <span class=\\"token comment\\">//名字字段</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">list_head</span> list<span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">// 连接件字段</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">/* 程序的入口函数 */</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> argc<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>argv<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">student</span> <span class=\\"token operator\\">*</span>stu<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">student</span> <span class=\\"token operator\\">*</span>p<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">list_head</span> <span class=\\"token operator\\">*</span>g_list <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">/* 表示链表头部 */</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">list_head</span> <span class=\\"token operator\\">*</span>t_list <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">/* 表示临时链表元素指针 */</span>\\n    <span class=\\"token comment\\">/* 动态分配一块内存区域 */</span>\\n    stu <span class=\\"token operator\\">=</span> <span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">student</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>stu<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"malloc error!\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">/* 对内存区域进行赋值，并将其加入到定义的链表当中 */</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">sprintf</span><span class=\\"token punctuation\\">(</span>stu<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"stu-%d\\"</span><span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">/* 判断链表是否为空 */</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>g_list<span class=\\"token punctuation\\">)</span>        <span class=\\"token comment\\">/* 为空 */</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            g_list <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>stu<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>list<span class=\\"token punctuation\\">;</span>\\n            g_list<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>            <span class=\\"token comment\\">/* 不为空 */</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            t_list <span class=\\"token operator\\">=</span> g_list<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>t_list<span class=\\"token punctuation\\">)</span>    <span class=\\"token comment\\">/* 对链表进行遍历 */</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>t_list<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token operator\\">==</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    t_list<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>stu<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>list<span class=\\"token punctuation\\">;</span>\\n                    stu<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>list<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                t_list <span class=\\"token operator\\">=</span> t_list<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">/* 对链表进行遍历 */</span>\\n    <span class=\\"token function\\">yl_list_for_each_entry</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">,</span> g_list<span class=\\"token punctuation\\">,</span> list<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d : %s\\\\n\\"</span><span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> p<span class=\\"token operator\\">-&gt;</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        i <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
