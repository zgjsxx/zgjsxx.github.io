import{_ as s,V as n,W as a,a0 as t}from"./framework-c954d91f.js";const e={},p=t(`<h1 id="linux-0-11-文件系统stat-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统stat-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统stat.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>该模块给应用层提供了获取文件状态信息的接口stat和fstat。 stat是使用文件名进行获取， fstat是使用文件描述符进行获取。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="cp-stat" tabindex="-1"><a class="header-anchor" href="#cp-stat" aria-hidden="true">#</a> cp_stat</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cp_stat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将inode中的文件信息拷贝到stat结构体中。</p><p>首先定义了一些参数， tmp用于从inode中获取文件信息，i用于后续遍历。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">stat</span> tmp<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数首先对入参statbuf对应的内存地址进行校验，检查是否可以写，如果不能写，则进行写时复制。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">verify_area</span><span class="token punctuation">(</span>statbuf<span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span> statbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来就是将inode中的相关信息拷贝到tmp对象中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tmp<span class="token punctuation">.</span>st_dev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">;</span><span class="token comment">//获取文件所在的设备号</span>
tmp<span class="token punctuation">.</span>st_ino <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span><span class="token comment">//获取文件的i节点号</span>
tmp<span class="token punctuation">.</span>st_mode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">;</span><span class="token comment">//获取文件的属性</span>
tmp<span class="token punctuation">.</span>st_nlink <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">;</span><span class="token comment">//获取文件的连接数</span>
tmp<span class="token punctuation">.</span>st_uid <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_uid<span class="token punctuation">;</span><span class="token comment">//获取文件的用户id</span>
tmp<span class="token punctuation">.</span>st_gid <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_gid<span class="token punctuation">;</span><span class="token comment">//获取文件的组id</span>
tmp<span class="token punctuation">.</span>st_rdev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//如果inode是设备类型，i_zone[0]代表设备号</span>
tmp<span class="token punctuation">.</span>st_size <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">;</span><span class="token comment">//文件字节长度</span>
tmp<span class="token punctuation">.</span>st_atime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_atime<span class="token punctuation">;</span><span class="token comment">//文件最后的访问时间</span>
tmp<span class="token punctuation">.</span>st_mtime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mtime<span class="token punctuation">;</span><span class="token comment">//文件最后的修改时间</span>
tmp<span class="token punctuation">.</span>st_ctime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_ctime<span class="token punctuation">;</span><span class="token comment">//i节点最后的修改时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，由于statbuf在用户态，而tmp在内核态，因此需要调用put_fs_byte实现从内核态向用户态拷贝数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> statbuf<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-stat" tabindex="-1"><a class="header-anchor" href="#sys-stat" aria-hidden="true">#</a> sys_stat</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_stat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是stat的系统调用，用于获取文件状态信息。</p><p>首先定义了inode指针，用于后续根据用户名查找inode。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面调用namei函数(fs/namei.c)根据文件名获取inode节点，如果没有找到，则返回-ENOENT，代表<strong>No such file or directory</strong>。如果找到了，则调用cp_stat将数据拷贝到statbuf中，最后使用iput将inode的引用计数减去1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">=</span><span class="token function">namei</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
<span class="token function">cp_stat</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-fstat" tabindex="-1"><a class="header-anchor" href="#sys-fstat" aria-hidden="true">#</a> sys_fstat</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_fstat</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数时fstat的系统调用函数。其根据文件描述符fd查找文件状态信息。</p><p>首先定义了file指针f，和inode指针。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> f<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面对fd进行校验， 如果大于最大值，则返回-EBADF。接着根据fd的值，从进程PCB中的文件数组中查找出对应的inode号。如果查找不到，也同样返回-EBADF。 如果查找到了inode，则调用cp_stat将文件状态信息拷贝到statbuf中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>f<span class="token operator">=</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">=</span>f<span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span>
<span class="token function">cp_stat</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2><h3 id="stat和fstat使用上有什么区别" tabindex="-1"><a class="header-anchor" href="#stat和fstat使用上有什么区别" aria-hidden="true">#</a> stat和fstat使用上有什么区别？</h3><p>stat和fstat使用上的区别在于，stat是从文件名出发得到的文件属性信息，因此实现不需要先打开文件；而fstat函数则从文件描述符出发得到文件属性信息，所以使用fstat函数之前需要先打开文件得到文件描述符。</p>`,32),o=[p];function c(i,l){return n(),a("div",null,o)}const r=s(e,[["render",c],["__file","Linux-0.11-fs-stat.html.vue"]]);export{r as default};
