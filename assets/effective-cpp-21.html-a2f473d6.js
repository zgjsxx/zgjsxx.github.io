const e=JSON.parse('{"key":"v-0b188236","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-21.html","title":"effective c++ 21  必须返回对象时， 别妄想返回其reference","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 21 必须返回对象时， 别妄想返回其reference 本节主要讨论，函数的返回值如果需要返回引用时需要注意的点。下面将通过例子详细分析。 分析 我们有一个Ratinoal的类， 我们现在想要得到两个Ratinoal类的对象相乘的结果。 于是一个新手程序员写出了下面的代码。其返回了一个指向栈上的对象的引用。这个一个非常错误的实现，当operator*函数执行完毕之后， result对象就被析构了，这个时候还返回了该对象的引用。 \\t//Bad code #1 \\tfriend const Rational&amp; operator*(const Rational&amp; lhs, const Rational&amp; rhs) \\t{ \\t\\tRational result(lhs.n * rhs.n, lhs.d * rhs.d); \\t\\treturn result; \\t}","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-21.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 21  必须返回对象时， 别妄想返回其reference"}],["meta",{"property":"og:description","content":"effective c++ 21 必须返回对象时， 别妄想返回其reference 本节主要讨论，函数的返回值如果需要返回引用时需要注意的点。下面将通过例子详细分析。 分析 我们有一个Ratinoal的类， 我们现在想要得到两个Ratinoal类的对象相乘的结果。 于是一个新手程序员写出了下面的代码。其返回了一个指向栈上的对象的引用。这个一个非常错误的实现，当operator*函数执行完毕之后， result对象就被析构了，这个时候还返回了该对象的引用。 \\t//Bad code #1 \\tfriend const Rational&amp; operator*(const Rational&amp; lhs, const Rational&amp; rhs) \\t{ \\t\\tRational result(lhs.n * rhs.n, lhs.d * rhs.d); \\t\\treturn result; \\t}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-14T10:54:07.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-14T10:54:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 21  必须返回对象时， 别妄想返回其reference\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-14T10:54:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684061647000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-21.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 21  必须返回对象时， 别妄想返回其reference</h1>\\n<p>本节主要讨论，函数的返回值如果需要返回引用时需要注意的点。下面将通过例子详细分析。</p>\\n<h2> 分析</h2>\\n<p>我们有一个Ratinoal的类， 我们现在想要得到两个Ratinoal类的对象相乘的结果。</p>\\n<p>于是一个新手程序员写出了下面的代码。其返回了一个指向栈上的对象的引用。这个一个非常错误的实现，当<code>operator*</code>函数执行完毕之后， result对象就被析构了，这个时候还返回了该对象的引用。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>\\t<span class=\\"token comment\\">//Bad code #1</span>\\n\\t<span class=\\"token keyword\\">friend</span> <span class=\\"token keyword\\">const</span> Rational<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Rational<span class=\\"token operator\\">&amp;</span> lhs<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Rational<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tRational <span class=\\"token function\\">result</span><span class=\\"token punctuation\\">(</span>lhs<span class=\\"token punctuation\\">.</span>n <span class=\\"token operator\\">*</span> rhs<span class=\\"token punctuation\\">.</span>n<span class=\\"token punctuation\\">,</span> lhs<span class=\\"token punctuation\\">.</span>d <span class=\\"token operator\\">*</span> rhs<span class=\\"token punctuation\\">.</span>d<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
