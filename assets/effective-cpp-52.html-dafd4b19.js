const e=JSON.parse('{"key":"v-ca496d72","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-52.html","title":"effective c++ 52 写了placement new也要写placement delete","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 52 写了placement new也要写placement delete 本文主要介绍了关于在类中自定义placement new和placement delete需要注意的一些点。该条款已经属于比较进阶的条款，在日常开发中使用频率不高，但是了解该条款也许有助于你去理解一些三方库或者是解一些比较隐匿的bug。 分析 placement new通常是专指指定了位置的new(std::size_t size, void *mem)，用于vector申请capacity剩余的可用内存。 但广义的placement new指的是拥有额外参数的operator new(重载版本)。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-52.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 52 写了placement new也要写placement delete"}],["meta",{"property":"og:description","content":"effective c++ 52 写了placement new也要写placement delete 本文主要介绍了关于在类中自定义placement new和placement delete需要注意的一些点。该条款已经属于比较进阶的条款，在日常开发中使用频率不高，但是了解该条款也许有助于你去理解一些三方库或者是解一些比较隐匿的bug。 分析 placement new通常是专指指定了位置的new(std::size_t size, void *mem)，用于vector申请capacity剩余的可用内存。 但广义的placement new指的是拥有额外参数的operator new(重载版本)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-26T02:51:44.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-26T02:51:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 52 写了placement new也要写placement delete\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-26T02:51:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[{"level":3,"title":"成对的delete","slug":"成对的delete","link":"#成对的delete","children":[]},{"level":3,"title":"名称隐藏","slug":"名称隐藏","link":"#名称隐藏","children":[]},{"level":3,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1685069504000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":4}]},"readingTime":{"minutes":4.59,"words":1377},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-52.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 52 写了placement new也要写placement delete</h1>\\n<p>本文主要介绍了关于在类中自定义placement new和placement delete需要注意的一些点。该条款已经属于比较进阶的条款，在日常开发中使用频率不高，但是了解该条款也许有助于你去理解一些三方库或者是解一些比较隐匿的bug。</p>\\n<h2> 分析</h2>\\n<p><strong>placement new</strong>通常是专指指定了位置的<code>new(std::size_t size, void *mem)</code>，用于vector申请capacity剩余的可用内存。 但广义的<strong>placement new</strong>指的是拥有额外参数的operator new(重载版本)。</p>","autoDesc":true}');export{e as data};
