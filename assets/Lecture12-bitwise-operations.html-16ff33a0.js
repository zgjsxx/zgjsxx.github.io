import{_ as t,V as d,W as e,a0 as a}from"./framework-9a29aaa0.js";const r={},s=a(`<h1 id="第十二讲-按位运算" tabindex="-1"><a class="header-anchor" href="#第十二讲-按位运算" aria-hidden="true">#</a> 第十二讲：按位运算</h1><h2 id="按位运算" tabindex="-1"><a class="header-anchor" href="#按位运算" aria-hidden="true">#</a> 按位运算</h2><p>位运算在汇编级别变得更加重要。我们已经学习了<code>XOR</code>（异或），这里我们将学习其他操作<code>or</code>、<code>and</code>、<code>not</code>、<code>andn</code>（与非），以及位移和旋转操作。除了这些在 C/C++ 按位运算符中具有直接类似物的操作之外，汇编还支持 C/C++ 没有的其他按位操作。最后，<code>test</code>操作是按位比较运算符，用于构建取决于某些位的状态的条件分支。</p><p><strong>位运算：AND、OR、NOT、AND-NOT</strong></p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>not  dest         ; dest = ~dest
and  dest, src    ; dest = dest &amp; src
or   dest, src    ; dest = dest | src
andn dest, src    ; dest = dest &amp; ~src
xor  dest, src    ; dest = dest ^ src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常的限制如下：</p><ul><li>两个操作数必须具有相同的大小，它们不能都在内存中，并且只有源操作数可以是立即数。</li><li>not 可以与寄存器或内存位置一起使用。</li></ul><p>查看这些操作的真值表可能会很有用。</p><ul><li><p>如果 a 为 0，则 ~a 为 1；如果 a 为 1，则 ~a 为 0：</p><table><thead><tr><th>a</th><th>~a</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td></tr></tbody></table></li><li><p>只有当a和b都为1时a和b才为1，否则为0。</p><table><thead><tr><th>a</th><th>b</th><th>a&amp; b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></li><li><p>如果 a 或 b 为 1，则 a | b 为 1；只有当 a 或 b 均为 0 时，a | b 才为 0。</p><table><thead><tr><th>a</th><th>b</th><th>a or b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></li></ul>`,9),i=[s];function n(c,o){return d(),e("div",null,i)}const h=t(r,[["render",n],["__file","Lecture12-bitwise-operations.html.vue"]]);export{h as default};
