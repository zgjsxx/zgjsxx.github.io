const n=JSON.parse('{"key":"v-cdb31eb0","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-51.html","title":"effective c++ 51 编写new和delete时需固守常规","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 51 编写new和delete时需固守常规 分析 new 0 bytes C++ 规定，即使客户要求 0 bytes， operator new 也得返回一个合法指针。如下面 non-member operator new 伪代码： void* operator new(std::size_t size) throw(std::bad_alloc) { using namespace std; if (size == 0) { size = 1; } while (true) { 尝试分配 size bytes; if (分配成功) { return (一个指针，指向分配得来的内存)； } // 分配失败；找出目前的 new-handling 函数 new_handler globalHandler = set_new_handler(0); set_new_handler(globalHandler); if (globalHandler) (*globalHandler)(); else throw std::bad_alloc(); } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-51.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 51 编写new和delete时需固守常规"}],["meta",{"property":"og:description","content":"effective c++ 51 编写new和delete时需固守常规 分析 new 0 bytes C++ 规定，即使客户要求 0 bytes， operator new 也得返回一个合法指针。如下面 non-member operator new 伪代码： void* operator new(std::size_t size) throw(std::bad_alloc) { using namespace std; if (size == 0) { size = 1; } while (true) { 尝试分配 size bytes; if (分配成功) { return (一个指针，指向分配得来的内存)； } // 分配失败；找出目前的 new-handling 函数 new_handler globalHandler = set_new_handler(0); set_new_handler(globalHandler); if (globalHandler) (*globalHandler)(); else throw std::bad_alloc(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T06:23:55.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-17T06:23:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 51 编写new和delete时需固守常规\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T06:23:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684304635000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":2.88,"words":863},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-51.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 51 编写new和delete时需固守常规</h1>\\n<h2> 分析</h2>\\n<p><strong>new 0 bytes</strong></p>\\n<p>C++ 规定，即使客户要求 0 bytes， operator new 也得返回一个合法指针。如下面 non-member operator new 伪代码：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">operator</span> <span class=\\"token keyword\\">new</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>size_t size<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throw</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>bad_alloc<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>size <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        尝试分配 size bytes<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>分配成功<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>一个指针，指向分配得来的内存<span class=\\"token punctuation\\">)</span>；\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 分配失败；找出目前的 new-handling 函数</span>\\n        new_handler globalHandler <span class=\\"token operator\\">=</span> <span class=\\"token function\\">set_new_handler</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">set_new_handler</span><span class=\\"token punctuation\\">(</span>globalHandler<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>globalHandler<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>globalHandler<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">else</span>\\n          <span class=\\"token keyword\\">throw</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">bad_alloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
