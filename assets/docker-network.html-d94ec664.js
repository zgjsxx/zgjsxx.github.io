import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<h1 id="使用veth和bridge搭建容器网络" tabindex="-1"><a class="header-anchor" href="#使用veth和bridge搭建容器网络" aria-hidden="true">#</a> 使用veth和bridge搭建容器网络</h1><p>随着虚拟化技术、容器化技术的发展，我们在工作中会使用到虚拟化网络技术。简单来说，以往的网卡、交换机、路由器，当前可以通过操作系统使用程序来进行模拟。</p><p>通常使用最为广泛的是下面的虚拟设备：</p><table><thead><tr><th>设备</th><th>作用</th></tr></thead><tbody><tr><td>veth</td><td>一对相互连接的网卡，常用于连接两个namespace</td></tr><tr><td>bridge</td><td>相当于一个二层交换机，如果配置了ip地址，则是一个三层交换机</td></tr><tr><td>tun/tap</td><td>虚拟网卡，常用于实现vpn</td></tr></tbody></table><p>在本文搭建容器网络的过程中，主要使用到了veth和bridge。下面将介绍这两种虚拟设备。</p><h2 id="veth和brdige" tabindex="-1"><a class="header-anchor" href="#veth和brdige" aria-hidden="true">#</a> veth和brdige</h2><h3 id="veth" tabindex="-1"><a class="header-anchor" href="#veth" aria-hidden="true">#</a> veth</h3><p>veth pair 全称是 Virtual Ethernet Pair，是一个成对的端口，所有从这对端口一 端进入的数据包都将从另一端出来，反之也是一样。</p><p>引入 veth pair 是为了在不同的 Network Namespace 直接进行通信，利用它可以直接将两个 Network Namespace 连接起来。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/docker-network/veth.png" alt="veth" tabindex="0" loading="lazy"><figcaption>veth</figcaption></figure><p>使用下面的命令可以创建一个veth pair。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> <span class="token operator">&lt;</span>p1-name<span class="token operator">&gt;</span> <span class="token builtin class-name">type</span> veth peer name <span class="token operator">&lt;</span>p2-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="bridge" tabindex="-1"><a class="header-anchor" href="#bridge" aria-hidden="true">#</a> bridge</h3><p>veth pair 打破了 Network Namespace 的限制，实现了不同 Network Namespace 之间的通信。但 veth pair 有一个明显的缺陷，就是只能实现两个网络接口之间的通信。</p><p>如果我们想实现多个网络接口之间的通信，就可以使用下面介绍的网桥（Bridge）技术。</p><p>简单来说，网桥就是把一台机器上的若干个网络接口 “连接” 起来。其结果是，其中一个网口收到的报文会被复制给其他网口并发送出去。以使得网口之间的报文能够互相转发。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/docker-network/bridge.png" alt="bridge" tabindex="0" loading="lazy"><figcaption>bridge</figcaption></figure><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h2><p>在本文中，将创建三个Network namespace，使得这三个namesapce可以实现：</p><ul><li>1.ping通其它namespace</li><li>2.ping通主机</li><li>3.ping通外网</li></ul><p>如果把容器想象成真实的机器，则其网络拓扑图可能是下面这样的：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/docker-network/network.png" alt="docker-network" tabindex="0" loading="lazy"><figcaption>docker-network</figcaption></figure><p>下面便一步一步的去实现。</p><h3 id="步骤1-创建三个network-namespace" tabindex="-1"><a class="header-anchor" href="#步骤1-创建三个network-namespace" aria-hidden="true">#</a> 步骤1：创建三个network namespace</h3><p>linux中的ip命令可以对network namespace进行操作， 例如使用下面的命令就可以创建一个名叫test的network namespace。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token function">add</span> <span class="token operator">&lt;</span>ns<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用下面的命令可以用于查看已经创建的network namespace。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有了上述基础，我们分别创建red/blue/green三个network namespace。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token function">add</span> ns1
<span class="token function">ip</span> netns <span class="token function">add</span> ns2
<span class="token function">ip</span> netns <span class="token function">add</span> ns3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ip netns ls</code>查看namespace</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns ls</span>
ns3
ns2
ns1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个ns都和主机网络一样，有自己的网卡，路由表，ARP表， iptabls等等。</p><p>可以使用下面的命令查看ns内部的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面使用下面的命令查看我们刚刚创建的ns1空间的路由表，网卡和arp缓存。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ns1 中的路由表</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 route -n</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface

<span class="token comment">#ns1 中的网卡， 目前只有lo</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00

<span class="token comment">#ns1 中的arp缓存</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 arp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step2-创建虚拟交换机" tabindex="-1"><a class="header-anchor" href="#step2-创建虚拟交换机" aria-hidden="true">#</a> step2：创建虚拟交换机</h3><p>由于我们需要将3个namespace互相连接，因此我们需要使用bridge进行连接。</p><p>使用下面的命令可以创建一个虚拟交换机。虽然它的type是bridge，但其实是一个二层交换机。当然如果为其添加ip地址,那么其就是一个三层交换机。这里我们暂时不用设置ip地址，当后面实现和主机进行通讯时，再配置。</p><p>创建完毕之后，顺便启动该设备。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> vbridge <span class="token builtin class-name">type</span> bridge 
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev vbridge up 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来要做的是将3个namespace都接入到该vbrdige中。因此我们需要创建3个veth pair。 这里的命令同样是<code>ip link add</code>， 只不过设备的type是veth。</p><p>这里需要注意的是， Linux内核对网络接口的名字长度有限制，不能超过15个字符。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> veth-1 <span class="token builtin class-name">type</span> veth peer name veth-1-br
<span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> veth-2 <span class="token builtin class-name">type</span> veth peer name veth-2-br
<span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> veth-3 <span class="token builtin class-name">type</span> veth peer name veth-3-br
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这些veth-pair，下面要做的是将其安装在合适的地方。</p><ul><li>将veth-1连接到namespace ns1, 另一端veth-1-br连接到vbridge</li><li>将veth-2连接到namespace ns2, 另一端veth-2-br连接到vbridge</li><li>将veth-3连接到namespace ns3, 另一端veth-3-br连接到vbridge</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-1 netns ns1
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-1-br master vbridge
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-2 netns ns2
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-2-br master vbridge
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-3 netns ns3
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-3-br master vbridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用bridge link可以查看目前vbridge上所连接的设备。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># bridge link</span>
<span class="token number">11</span>: veth-1-br@if12: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> master vbridge state disabled priority <span class="token number">32</span> cost <span class="token number">2</span>
<span class="token number">13</span>: veth-2-br@if14: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> master vbridge state disabled priority <span class="token number">32</span> cost <span class="token number">2</span>
<span class="token number">15</span>: veth-3-br@if16: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> master vbridge state disabled priority <span class="token number">32</span> cost <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们需要给veth-1，veth-2，veth-3添加ip地址，ip需要在同一个网段内。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.28.1/24 dev veth-1
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.28.2/24 dev veth-2
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns3 <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.28.3/24 dev veth-3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是将veth启动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-1 up
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev veth-1-br up
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-2 up
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev veth-2-br up
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns3 <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-3 up
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev veth-3-br up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一些系列操作之后，三个namespace就已经都过vbridge互联在了一起，可以通过ping命令来测试三个namepsace的连通性。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ping</span> <span class="token number">192.168</span>.28.2
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ping</span> <span class="token number">192.168</span>.28.3
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ping</span> <span class="token number">192.168</span>.28.3
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ping</span> <span class="token number">192.168</span>.28.3
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns3 <span class="token function">ping</span> <span class="token number">192.168</span>.28.1
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns3 <span class="token function">ping</span> <span class="token number">192.168</span>.28.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是ns1去ping 192.168.28.2的结果，可以看到可以ping通。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ping</span> <span class="token number">192.168</span>.28.2
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 ping 192.168.28.2</span>
PING <span class="token number">192.168</span>.28.2 <span class="token punctuation">(</span><span class="token number">192.168</span>.28.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.059</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.056</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里为止，我们完成了下面的拓扑图。已经实现了容器之间的相互访问。接下来，我们将实现容器和主机网络的相互访问。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/docker-network/network2.png" alt="docker-network" tabindex="0" loading="lazy"><figcaption>docker-network</figcaption></figure><h3 id="step3-实现可以和主机之间通讯" tabindex="-1"><a class="header-anchor" href="#step3-实现可以和主机之间通讯" aria-hidden="true">#</a> step3： 实现可以和主机之间通讯</h3><p>首先尝试在ns1的namespace下直接ping主机，例如我的主机地址是192.168.17.10。从结果可知，目前网络是无法联通的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 ping 192.168.17.10</span>
ping: connect: Network is unreachable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里无法ping通，原因是容器网络和主机网络处在两个网段，因此二层设备无法实现这样的要求。于是我们需要为bridge添加ip地址。使用下面的命令为bridge添加ip地址。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.28.5/24 dev vbridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加完之后，使用<code>route -n</code>查看本机的路由表，可以发现此时192.168.28.0已经有了路由的项，其将被发送给vbridge设备。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0.0</span>.0.0         <span class="token number">192.168</span>.17.2    <span class="token number">0.0</span>.0.0         UG    <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> ens33
<span class="token number">192.168</span>.17.0    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> ens33
<span class="token number">192.168</span>.28.0    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> vbridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，此时宿主机已经可以ping通namespace了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ping 192.168.28.1</span>
PING <span class="token number">192.168</span>.28.1 <span class="token punctuation">(</span><span class="token number">192.168</span>.28.1<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.037</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.099</span> ms
^C
--- <span class="token number">192.168</span>.28.1 <span class="token function">ping</span> statistics ---
<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 1026ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.037</span>/0.068/0.099/0.031 ms
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ping 192.168.28.2</span>
PING <span class="token number">192.168</span>.28.2 <span class="token punctuation">(</span><span class="token number">192.168</span>.28.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.047</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.057</span> ms
^C
--- <span class="token number">192.168</span>.28.2 <span class="token function">ping</span> statistics ---
<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 1008ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.047</span>/0.052/0.057/0.005 ms
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ping 192.168.28.3</span>
PING <span class="token number">192.168</span>.28.3 <span class="token punctuation">(</span><span class="token number">192.168</span>.28.3<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.3: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.094</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.28.3: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.153</span> ms
^C
--- <span class="token number">192.168</span>.28.3 <span class="token function">ping</span> statistics ---
<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 1056ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.094</span>/0.123/0.153/0.029 ms

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过遗憾的是namespace还不能ping通宿主机。</p><p>这是由于创建的三个ns的路由表中还没有默认路由。例如ns1中使用<code>route -n</code>，可以看到目前只有往192.168.28.0/24的路由表。而主机的地址无法匹配上，因此数据包无法发送。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 route -n</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
<span class="token number">192.168</span>.28.0    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> veth-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面要做的就是为3个namespace添加默认路由</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> route <span class="token function">add</span> default via <span class="token number">192.168</span>.28.5

<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> route <span class="token function">add</span> default via <span class="token number">192.168</span>.28.5

<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns3 <span class="token function">ip</span> route <span class="token function">add</span> default via <span class="token number">192.168</span>.28.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过ping命令测试连通性，可以看到现在已经可以ping通主机地址了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 ping 192.168.17.10</span>
PING <span class="token number">192.168</span>.17.10 <span class="token punctuation">(</span><span class="token number">192.168</span>.17.10<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.17.10: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.039</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.17.10: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.105</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里为止，我们完成了下面的拓扑图。已经实现了容器之间的相互访问。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/docker-network/network3.png" alt="docker-network" tabindex="0" loading="lazy"><figcaption>docker-network</figcaption></figure><p>这里还有一个细节需要讨论。从ns1去ping主机时，ns1首先根据查找路由表发现目的网段匹配了默认路由，于是将数据包发送给了veth-1网卡，从而发送到了vbridge上。vbridge本身的ip地址是192.168.28.5，而目的地址是192.168.17.10，与自身不一致。那么这个时候会如何处理呢？</p><p>这里首先会判断目的地址是否是一个<strong>本机地址</strong>。如果不是，则意味着数据包需要往<strong>外部转发</strong>。这里时候就会检查ip_forward参数和本机路由表，决定是否转发和从哪个网卡转发。如果可以转发，则将数据包发送发网卡的<strong>发送队列</strong>上。</p><p>如果是目的地址是一个<strong>本机地址</strong>，则直接将数据包放置到目的地址对应的网卡的<strong>接收队列</strong>上交由内核协议栈处理。</p><p>这里主要讨论了当网卡接收到了目的地址与网卡本身ip地址不同的处理。</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/docker-network/network3_2.png" alt="docker-network" tabindex="0" loading="lazy"><figcaption>docker-network</figcaption></figure><p>下面，为了容器可以访问外网，我们需要将主机设置成路由模式，并为其设置nat映射表。</p><h3 id="step4-namespace实现可以和外网通讯" tabindex="-1"><a class="header-anchor" href="#step4-namespace实现可以和外网通讯" aria-hidden="true">#</a> step4： namespace实现可以和外网通讯</h3><p>目前，创建的namespace还无法ping通外网，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ping</span> <span class="token number">8.8</span>.8.8
PING <span class="token number">8.8</span>.8.8 <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时数据包是可以通过网卡发送出去的，但是由于数据包的源地址是一个内网地址，因此无法回数据包。</p><p>这就需要我们配置nat，使得ns可以通过主机的ip地址发送数据包。</p><p>这里首先需要开机主机的数据包转发功能。可以使用sysctl修改ip_forward的内核参数使得主机可以支持数据包转发。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sysctl</span> net.ipv4.ip_forward
net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">0</span>

<span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span>
net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这之后，通过iptables增加SNAT规则，将源ip为192.168.28.0/24内的数据包的源ip修改为ens33的ip：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> POSTROUTING <span class="token parameter variable">-s</span> <span class="token number">192.168</span>.28.0/24 <span class="token parameter variable">-j</span> MASQUERADE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次ping 8.8.8.8，可以看到现在已经可以ping通了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip netns exec ns1 ping 8.8.8.8</span>
PING <span class="token number">8.8</span>.8.8 <span class="token punctuation">(</span><span class="token number">8.8</span>.8.8<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">8.8</span>.8.8: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">175</span> ms
<span class="token number">64</span> bytes from <span class="token number">8.8</span>.8.8: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">175</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，宿主机已经相当于一个router， 而ens33和bridge则是router的两个接口。</p><p>至此为止，我们实现的网络拓扑图如下所示：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/network/docker-network/network4.png" alt="docker-network" tabindex="0" loading="lazy"><figcaption>docker-network</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文通过创建network namespace，并使用veth和bridge虚拟设备构建出了容器网络的雏形，实现了下面的功能：</p><ul><li>ns之间可以互相访问</li><li>ns与主机之间可以互相访问</li><li>ns访问公网</li></ul><p>这样的实验有助于理解docker网络实现的原理。</p>`,102),i=[t];function l(c,o){return s(),a("div",null,i)}const d=n(p,[["render",l],["__file","docker-network.html.vue"]]);export{d as default};
