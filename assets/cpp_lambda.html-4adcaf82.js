const e=JSON.parse('{"key":"v-5dd68163","path":"/posts/Program_language/C__/cpp_lambda.html","title":"c++中的lambda表达式","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"c++中的lambda表达式 简介 在c++11中引入了Lambda表达式，利用Lambda表达式可以方便的定义和创建匿名函数。 为什么需要匿名函数这种语法呢？我个人觉得主要有以下一些原因： 程序员起名字是个麻烦事，有时候有的函数只在有限的地方调用，希望不通过名字调用。 避免命名冲突(当然避免命名冲突有很多种方法) 丰富c++11的语法类型，就像写作文的同义词一样，同样的事情可以有不同的实现方式，本身就可以丰富代码的多样性。 so， 下面就看看Lambda表达式具体的写法吧。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/C__/cpp_lambda.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++中的lambda表达式"}],["meta",{"property":"og:description","content":"c++中的lambda表达式 简介 在c++11中引入了Lambda表达式，利用Lambda表达式可以方便的定义和创建匿名函数。 为什么需要匿名函数这种语法呢？我个人觉得主要有以下一些原因： 程序员起名字是个麻烦事，有时候有的函数只在有限的地方调用，希望不通过名字调用。 避免命名冲突(当然避免命名冲突有很多种方法) 丰富c++11的语法类型，就像写作文的同义词一样，同样的事情可以有不同的实现方式，本身就可以丰富代码的多样性。 so， 下面就看看Lambda表达式具体的写法吧。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-21T08:50:28.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-21T08:50:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++中的lambda表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-21T08:50:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"声明Lambda表达式","slug":"声明lambda表达式","link":"#声明lambda表达式","children":[]},{"level":2,"title":"捕获外部变量","slug":"捕获外部变量","link":"#捕获外部变量","children":[{"level":3,"title":"值捕获","slug":"值捕获","link":"#值捕获","children":[]}]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1682067028000,"updatedTime":1682067028000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.07,"words":322},"filePathRelative":"posts/Program_language/C++/cpp_lambda.md","localizedDate":"2023年4月21日","excerpt":"<h1> c++中的lambda表达式</h1>\\n<h2> 简介</h2>\\n<p>在c++11中引入了Lambda表达式，利用Lambda表达式可以方便的定义和创建匿名函数。</p>\\n<p>为什么需要匿名函数这种语法呢？我个人觉得主要有以下一些原因：</p>\\n<ul>\\n<li>程序员起名字是个麻烦事，有时候有的函数只在有限的地方调用，希望不通过名字调用。</li>\\n<li>避免命名冲突(当然避免命名冲突有很多种方法)</li>\\n<li>丰富c++11的语法类型，就像写作文的同义词一样，同样的事情可以有不同的实现方式，本身就可以丰富代码的多样性。</li>\\n</ul>\\n<p>so， 下面就看看Lambda表达式具体的写法吧。</p>","autoDesc":true}');export{e as data};
