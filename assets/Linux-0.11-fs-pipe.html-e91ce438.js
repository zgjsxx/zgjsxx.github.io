import{_ as n,V as s,W as a,a0 as p}from"./framework-c954d91f.js";const t={},e=p(`<h1 id="linux-0-11-文件系统pipe-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统pipe-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统pipe.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>在Linux-0.11中提供了<strong>管道这种进程间通讯</strong>的方式。本程序包含了管道文件读写操作函数read_pipe()和write_pipe()。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="read-pipe" tabindex="-1"><a class="header-anchor" href="#read-pipe" aria-hidden="true">#</a> read_pipe</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">read_pipe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是读管道的方法。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-fs/pipe/pipe.png" alt="pipe" tabindex="0" loading="lazy"><figcaption>pipe</figcaption></figure><p>函数的最初定义了一些参数，其中chars为需要复制的字符数，size的作用有两个，在下面的代码中会根据代码介绍，read参数代表已经读取的字符数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> chars<span class="token punctuation">,</span> size<span class="token punctuation">,</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为管道的大小最大只有4k，因此当count的值大于4K时，就涉及到多次读，因此通过一个大的循环，当count值大于0，便循环执行下面的操作。如果管道中的数据长度为0，那么就唤醒等待该管道inode的进程（通常是写pipe的进程）。如果目前没有写管道的进程，意味着当前pipe不可能读到数据，则将当前进程加入到等待该inode的队列中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token function">PIPE_SIZE</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">/* are there any writers? */</span>
            <span class="token keyword">return</span> read<span class="token punctuation">;</span>
        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到这里，意味着管道有数据可读。令chars的值等于管道尾指针到缓冲区末端的字节数。 如果其大于count值，那么令其等于count。如果chars大于管道中含有数据的长度size， 则令chars等于size。接下来令剩下待读的字符数减去chars，令已经读取的字符数read加上chars。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>chars <span class="token operator">=</span> PAGE_SIZE<span class="token operator">-</span><span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span>
    chars <span class="token operator">=</span> count<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> size<span class="token punctuation">)</span>
    chars <span class="token operator">=</span> size<span class="token punctuation">;</span>
count <span class="token operator">-=</span> chars<span class="token punctuation">;</span>
read <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来将size指向原来尾指针的位置，将尾指针向前移动chars，如果超过4k，则返回头重新开始。最后调用put_fs_byte将管道中的数据复制到用户缓冲区中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>size <span class="token operator">=</span> <span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
<span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>PAGE_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span><span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，本次读管道操作结束，唤醒等待该管道的进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> read<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write-pipe" tabindex="-1"><a class="header-anchor" href="#write-pipe" aria-hidden="true">#</a> write_pipe</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">write_pipe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是管道的写操作函数。</p><p>函数的开始定义了一些参数，其中chars是要写入管道的数量，size有多个作用，written是已经写入的字符数量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> chars<span class="token punctuation">,</span> size<span class="token punctuation">,</span> written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为管道的大小最大只有4k，因此当count的值大于4K时，就涉及到多次写，因此通过一个大的循环，当count值大于0，便循环执行下面的操作。如果当前管道已经满，那么便唤醒等待该pipe inode的进程（读进程）。如果当前的inode节点没有其他的读进程，则发送SIGPIPE信号到进程。否则的话，则将当前进程加入sleep队列，直到pipe inode可写。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span>PAGE_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">PIPE_SIZE</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* no readers */</span>
            current<span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGPIPE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> written<span class="token operator">?</span>written<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序执行到这里，代表该管道当前有空间可写。首先获取管道头到缓冲区末端的字节数chars。如果chars大小大于count，则令chars等于count。接下来如果chars大于size值，则令chars等于size。接下来令count值减去chars值，令已写数据written加上chars值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>chars <span class="token operator">=</span> PAGE_SIZE<span class="token operator">-</span><span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span>
    chars <span class="token operator">=</span> count<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> size<span class="token punctuation">)</span>
    chars <span class="token operator">=</span> size<span class="token punctuation">;</span>
count <span class="token operator">-=</span> chars<span class="token punctuation">;</span>
written <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后将size指向头节点，将PIPE_HEAD向前推进chars个字符。最后调用get_fs_byte，从buf拷贝数据到pipe缓冲区中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>size <span class="token operator">=</span> <span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">+=</span> chars<span class="token punctuation">;</span>
<span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>PAGE_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span><span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后唤醒等待该pipe的进程，并返回已写入的字节数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> written<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-pipe" tabindex="-1"><a class="header-anchor" href="#sys-pipe" aria-hidden="true">#</a> sys_pipe</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_pipe</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> fildes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是创建管道pipe函数的系统调用。</p><p>入参fildes是管道的文件描述符，(fildes+0)是读端，(fildes+1)是写端。</p><p>程序的开始，定义了一系列变量。其中，inode用于获取管道类型的inode。f数组用于从文件表中找到两个空位。fd数组是管道的读端和写端。 i和j用于遍历。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来要做的就是从全局文件表file_table中找到两个空位。如果找不到两个空位，就返回-1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>NR_FILE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f_count<span class="token punctuation">)</span>
            <span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span>file_table<span class="token punctuation">)</span><span class="token operator">-&gt;</span>f_count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来从进程的文件表中获取两个空位，用于填充文件描述符数组<code>fd[2]</code>。同样，如果没有两个空位，则返回-1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>NR_OPEN<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span> fd<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i <span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count<span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来便是获取一个空的inode节点用作管道读写的inode。如果没有空的inode节点，则返回-1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">=</span><span class="token function">get_pipe_inode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果管道inode节点申请成功，则对两个文件结构进行初始化。并通过put_fs_long将文件描述符拷贝到入参fildes中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode <span class="token operator">=</span> inode<span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_mode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">/* read */</span>
    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_mode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>		<span class="token comment">/* write */</span>
    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">+</span>fildes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>fildes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,46),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-fs-pipe.html.vue"]]);export{r as default};
