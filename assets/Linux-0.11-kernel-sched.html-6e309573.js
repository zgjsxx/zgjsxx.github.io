import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const t={},p=e(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86schedc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录进程管理sched.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#schedule">schedule</a></li><li><a href="#show_task">show_task</a></li><li><a href="#show_stat">show_stat</a></li><li><a href="#math_state_restore">math_state_restore</a></li><li><a href="#sys_pause">sys_pause</a></li><li><a href="#sleep_on">sleep_on</a></li><li><a href="#interruptible_sleep_on">interruptible_sleep_on</a></li><li><a href="#wake_up">wake_up</a></li><li><a href="#ticks_to_floppy_on">ticks_to_floppy_on</a></li><li><a href="#floppy_on">floppy_on</a></li><li><a href="#floppy_off">floppy_off</a></li><li><a href="#do_floppy_timer">do_floppy_timer</a></li><li><a href="#add_timer">add_timer</a></li><li><a href="#do_timer">do_timer</a></li><li><a href="#sys_alarm">sys_alarm</a></li><li><a href="#sys_getpid">sys_getpid</a></li><li><a href="#sys_getppid">sys_getppid</a></li><li><a href="#sys_getuid">sys_getuid</a></li><li><a href="#sys_geteuid">sys_geteuid</a></li><li><a href="#sys_getgid">sys_getgid</a></li><li><a href="#sys_getegid">sys_getegid</a></li><li><a href="#sys_nice">sys_nice</a></li><li><a href="#sched_init">sched_init</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录进程管理sched-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理sched-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理sched.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>sched.c是内核中有关任务(进程调度管理的程序)，其中包括有关调度的基本函数(sleep_on()、wakeup()、schedule()等)以及一些简单的系统调用函数(比如getpid())。系统时钟中断处理函数do_timer()也被放置在本程序中。另外，为了便于软盘驱动器定时处理的编程，Linux也将有关软盘定时操作的几个函数放到了这里。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="schedule" tabindex="-1"><a class="header-anchor" href="#schedule" aria-hidden="true">#</a> schedule</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>schedule函数的基本功能可以分为两大块， 第一块是<strong>检查task中的报警信息和信号</strong>， 第二块则是<strong>进行任务的调度</strong>。</p><p>在第一块中，首先从任务数组的尾部任务开始，检查alarm是否小于当前系统滴答值，如果小于则代表alarm时间已经到期。将进程的signal中的SIGALARM位置1。</p><p>接着就看如果检查进程的信号中如果处理BLOCK位以外还有别的信号，并且如果任务处于可中断状态，则将任务置为就绪状态。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span>next<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果设置了任务定时的值alarm， 并且已经过期</span>
                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将信号的SIGALARM位置为1</span>
                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token comment">//如果信号位图中除了被阻塞的信号外还有其他信号， 并且任务处于可中断状态</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span> <span class="token comment">//修改任务的状态为就绪态</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二块的代码就是任务调度的核心代码。</p><p>这里会从任务数组的尾部任务开始进行遍历，从所有任务从选取counter值最大的任务作为下一个运行的任务去执行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从最后一个任务开始</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//遍历所有的task， 取出其中counter最大的task</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">--</span>p<span class="token punctuation">)</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">&gt;</span> c<span class="token punctuation">)</span><span class="token comment">//取出所有任务中counter值最大的任务作为下一个任务</span>
			c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token comment">//如果当前没有RUNNING状态的任务的counter可以大于-1，那么则去更新counter的值，counter = counter/2 + priority</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
			<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
					<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>priority<span class="token punctuation">;</span><span class="token comment">//更新counter值 counter = counter/2 + priority</span>
<span class="token punctuation">}</span>
<span class="token comment">//切换任务执行next</span>
<span class="token function">switch_to</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="show-task" tabindex="-1"><a class="header-anchor" href="#show-task" aria-hidden="true">#</a> show_task</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">show_task</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是显示任务序号为nr的进程的pid，进程状态以及内核栈剩余的大小。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">4096</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d: pid=%d, state=%d, &quot;</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时j指向PCB所在内存页的顶部， i指向task_struct结构体的下一个字节。下面这段代码的所用实际就是统计内核栈中空闲大小。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/show_task.png" alt="show_task" tabindex="0" loading="lazy"><figcaption>show_task</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d (of %d) chars free in kernel stack\\n\\r&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="show-stat" tabindex="-1"><a class="header-anchor" href="#show-stat" aria-hidden="true">#</a> show_stat</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">show_stat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数内部调用show_task函数，实际上就是遍历task数组， 调用show_stat函数显示进程相关信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历task数组</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token function">show_task</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用show_task</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-state-restore" tabindex="-1"><a class="header-anchor" href="#math-state-restore" aria-hidden="true">#</a> math_state_restore</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">math_state_restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将当前协处理器内容保存到老协处理器状态数组中，并将当前任务的协处理器内容加载进协处理器。</p><h3 id="sys-pause" tabindex="-1"><a class="header-anchor" href="#sys-pause" aria-hidden="true">#</a> sys_pause</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是pause的系统调用。该函数会将当前任务的状态修改为可中断的状态， 并调用schedule函数去进行进程的调度。</p><p>调用pause函数的进程会进入睡眠状态， 直到收到一个信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span>
<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sleep-on" tabindex="-1"><a class="header-anchor" href="#sleep-on" aria-hidden="true">#</a> sleep_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将当前的task置为<strong>不可中断的等待状态</strong>， 直到被wake_up唤醒再继续执行。入参p是等待任务队列的头指针。通过p指针和tmp变量将等待的任务串在了一起。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/sleep_on.png" alt="sleep_on示意图" tabindex="0" loading="lazy"><figcaption>sleep_on示意图</figcaption></figure><p>该函数首先对一些异常情况进行了处理他， 例如p是空指针。或者当前task是任务0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>

<span class="token comment">// 若指针无效，则退出。（指针所指的对象可以是NULL，但指针本身不会为0)。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 如果当前任务是任务0，则死机(impossible!)。</span>
	<span class="token function">panic</span> <span class="token punctuation">(</span><span class="token string">&quot;task[0] trying to sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着让当前等待任务的头指针指向当前任务。并将当前任务修改为<strong>不可中断的等待状态</strong>。进行调用schedule函数让操作系统切换其他任务执行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span>
<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当程序从schedule()返回继续执行时，说明任务已经被显式的wake_up，如果此时还有其他进程仍然在等待，那么也一同唤醒。</p><p>因为任务都在等待同样的资源， 那么当资源可用的时候， 就可以唤醒所有等待的任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>			<span class="token comment">// 若还存在等待的任务，则也将其置为就绪状态（唤醒）。</span>
	tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interruptible-sleep-on" tabindex="-1"><a class="header-anchor" href="#interruptible-sleep-on" aria-hidden="true">#</a> interruptible_sleep_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">interruptible_sleep_on</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数与sleep_on类似，但是该函数会将任务的状态修改为<strong>可中断的等待状态</strong>， 而sleep_on则是将任务修改为<strong>不可中断的等待状态</strong>。因此通过interruptible_sleep_on而等待的task是可以被信号唤醒的。 而通过sleep_on而等待的task是<strong>不会被信号唤醒的</strong>，只能通过wake_up函数唤醒。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/interruptible_sleep_on.png" alt="interruptible_sleep_on示意图" tabindex="0" loading="lazy"><figcaption>interruptible_sleep_on示意图</figcaption></figure><p>下面这段代码与sleep_on并无太大区别， 只是将进程的状态修改为可中断的等待状态。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span> <span class="token punctuation">(</span><span class="token string">&quot;task[0] trying to sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>
repeat<span class="token operator">:</span>
	current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span>
	<span class="token function">schedule</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于任务是可以被信号唤醒的，因此下面需要判断唤醒的任务是否是等待任务队列的头节点。如果不是则需要等待其他任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> current<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面一句代码有误，应该是*p = tmp，让队列头指针指向其余等待任务，否则在当前任务之前插入 等待队列的任务均被抹掉了</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
	tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wake-up" tabindex="-1"><a class="header-anchor" href="#wake-up" aria-hidden="true">#</a> wake_up</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是唤醒某一个任务。其用于唤醒p指向的等待队列中的任务。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		<span class="token comment">// 置为就绪（可运行）状态。</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ticks-to-floppy-on" tabindex="-1"><a class="header-anchor" href="#ticks-to-floppy-on" aria-hidden="true">#</a> ticks_to_floppy_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ticks_to_floppy_on</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数指定软盘到正常运转状态所需延迟滴答数（时间）。</p><h3 id="floppy-on" tabindex="-1"><a class="header-anchor" href="#floppy-on" aria-hidden="true">#</a> floppy_on</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">floppy_on</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数等待指定软驱马达启动所需时间。</p><h3 id="floppy-off" tabindex="-1"><a class="header-anchor" href="#floppy-off" aria-hidden="true">#</a> floppy_off</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">floppy_off</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭相应的软驱马达停转定时器3s。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>moff_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span>HZ<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="do-floppy-timer" tabindex="-1"><a class="header-anchor" href="#do-floppy-timer" aria-hidden="true">#</a> do_floppy_timer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_floppy_timer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果马达启动定时到则唤醒进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token function">wake_up</span><span class="token punctuation">(</span>i<span class="token operator">+</span>wait_motor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果马达停转定时到期则复位相应马达启动位，并更新数字输出到寄存器。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>moff_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	current_DOR <span class="token operator">&amp;=</span> <span class="token operator">~</span>mask<span class="token punctuation">;</span>
	<span class="token function">outb</span><span class="token punctuation">(</span>current_DOR<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-timer" tabindex="-1"><a class="header-anchor" href="#add-timer" aria-hidden="true">#</a> add_timer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> jiffies<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
\`\`\`、
该函数的作用是设置定时值和相应的处理函数。

如果定时的值小于<span class="token number">0</span>， 那么立即调用处理函数。
\`\`\`c
<span class="token keyword">if</span> <span class="token punctuation">(</span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果定时的值大于0， 那么首先取timer_list数组中寻找一个位置，将该位置上的滴答数设置为jiffies，将该位置上的fn设置为入参fn。并让next_timer指向它。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> timer_list <span class="token punctuation">;</span> p <span class="token operator">&lt;</span> timer_list <span class="token operator">+</span> TIME_REQUESTS <span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-&gt;</span>fn<span class="token punctuation">)</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> timer_list <span class="token operator">+</span> TIME_REQUESTS<span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;No more time requests free&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> next_timer<span class="token punctuation">;</span>
next_timer <span class="token operator">=</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段代码的作用是将刚刚插入链表中的timer移动的合适的位置。</p><p>由于next_timer这个链表上的jiffies是一个相对值，即相对于前面一个timer还有多久到期。因此上面步骤的timer也需要进行转换。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/add_timer.png" alt="timer移动示意图" tabindex="0" loading="lazy"><figcaption>timer移动示意图</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies <span class="token operator">&lt;</span> p<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p<span class="token operator">-&gt;</span>jiffies <span class="token operator">-=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span><span class="token comment">//减去下一个timer的jiffies</span>
	fn <span class="token operator">=</span> p<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span><span class="token comment">//将当前的fn保存给临时变量</span>
	p<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span><span class="token comment">//将当前的fn设置为下一个timer的fn</span>
	p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span><span class="token comment">//将下一个timer的fn设置为临时变量fn</span>
	jiffies <span class="token operator">=</span> p<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span><span class="token comment">//将jiffies保存给一个临时变量</span>
	p<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span><span class="token comment">//将当前的jiffies设置为下一个timer的jiffies</span>
	p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span><span class="token comment">//将下一个timer的jiffies设置为当前的jiffies</span>
	p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	<span class="token comment">//这一步骤实际上将p向后挪动到合适的位置， 并把jiffies转化成相对值。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-timer" tabindex="-1"><a class="header-anchor" href="#do-timer" aria-hidden="true">#</a> do_timer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> cpl<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是时钟中断的处理函数。其在system_call.s中的timer_interrupt函数中被调用。调用层级如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── int 0x20
  └── timer_interrupt
	└── do_timer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数<code>cp</code>表示的是当前的特权级， 0表示时钟中断发生时，当前运行在内核态，3表示时钟中断发生时，当前运行在用户态。</p><p>程序的开始判断扬声器发生次数是否已经到。如果到了，就停止发声。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">extern</span> <span class="token keyword">int</span> beepcount<span class="token punctuation">;</span>               <span class="token comment">// 扬声器发声滴答数</span>
	<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 关闭扬声器。</span>

    <span class="token comment">// 如果发声计数次数到，则关闭发声。(向0x61口发送命令，复位位0和1，位0</span>
    <span class="token comment">// 控制8253计数器2的工作，位1控制扬声器)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>beepcount<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>beepcount<span class="token punctuation">)</span>
			<span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里代码似乎可以简化为</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span>beepcount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">--</span>beepcount<span class="token punctuation">;</span>
	<span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sysbeepstop</code>定义在<code>console.c</code>中，向<code>0x61</code>口发送命令，复位位0和1，即<code>0xFC = 11111100</code>，位0控制8253计数器2的工作，位1控制扬声器)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* disable counter 2 */</span>
	<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码根据<code>cpl</code>的值将进程PCB中的<code>utime</code>和<code>stime</code>进行修改。如果<code>cpl</code>为0，则增加stime(supervisor time)， 如果<code>cpl</code>为3， 则增加<code>utime</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>cpl<span class="token punctuation">)</span>
	current<span class="token operator">-&gt;</span>utime<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	current<span class="token operator">-&gt;</span>stime<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面对定时器的链表进行遍历。 将链表的第一个定时器的滴答数减1。如果滴答数已经等于0， 代表该定时器已经到期，那么需要调用相应的处理程序进行处理。定时器是会在<code>add_timer</code>被创建。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>next_timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	next_timer<span class="token operator">-&gt;</span>jiffies<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>next_timer <span class="token operator">&amp;&amp;</span> next_timer<span class="token operator">-&gt;</span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		fn <span class="token operator">=</span> next_timer<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span>
		next_timer<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		next_timer <span class="token operator">=</span> next_timer<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面代码则是将当前运行的进程的时间片减去1，如果此时进程时间片没有用完，该函数则返回。 如果此时进程时间已经用完，则将时间片设置为0。并且如果此时cpl表明中断发生用户态，那么还将会触发进程的调度。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>current<span class="token operator">-&gt;</span>counter<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
current<span class="token operator">-&gt;</span>counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-alarm" tabindex="-1"><a class="header-anchor" href="#sys-alarm" aria-hidden="true">#</a> sys_alarm</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_alarm</span><span class="token punctuation">(</span><span class="token keyword">long</span> seconds<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于设置<strong>报警值</strong>。</p><p>jiffies是指的是系统开机到目前经历的滴答数。</p><p>current-&gt;alarm的单位也是系统滴答数。</p><p>因此(current-&gt;alarm - jiffies) /100 就代表就是当前的定时器还剩下多少秒。</p><p>而设置alarm值则需要加上系统当前的滴答数据jiffies， 如下图所示:</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/sched/sys_alarm.png" alt="sys_alarm" tabindex="0" loading="lazy"><figcaption>sys_alarm</figcaption></figure><h3 id="sys-getpid" tabindex="-1"><a class="header-anchor" href="#sys-getpid" aria-hidden="true">#</a> sys_getpid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取进程的pid。</p><h3 id="sys-getppid" tabindex="-1"><a class="header-anchor" href="#sys-getppid" aria-hidden="true">#</a> sys_getppid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getppid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取父进程的pid。</p><h3 id="sys-getuid" tabindex="-1"><a class="header-anchor" href="#sys-getuid" aria-hidden="true">#</a> sys_getuid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取用户的uid。</p><h3 id="sys-geteuid" tabindex="-1"><a class="header-anchor" href="#sys-geteuid" aria-hidden="true">#</a> sys_geteuid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_geteuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于获取用户的有效id(euid)。</p><h3 id="sys-getgid" tabindex="-1"><a class="header-anchor" href="#sys-getgid" aria-hidden="true">#</a> sys_getgid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getgid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取组和id号(gid)。</p><h3 id="sys-getegid" tabindex="-1"><a class="header-anchor" href="#sys-getegid" aria-hidden="true">#</a> sys_getegid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_getegid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取有效的组id(egid)</p><h3 id="sys-nice" tabindex="-1"><a class="header-anchor" href="#sys-nice" aria-hidden="true">#</a> sys_nice</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_nice</span><span class="token punctuation">(</span><span class="token keyword">long</span> increment<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是降低进程在调度时的优先级。</p><h3 id="sched-init" tabindex="-1"><a class="header-anchor" href="#sched-init" aria-hidden="true">#</a> sched_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sched_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是初始化进程调度模块。</p><p>首先在gdt表中设置任务0的tss和ldt值。接着对其他任务的tss和ldt进行初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">set_tss_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>tss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set_ldt_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_LDT_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> gdt<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p<span class="token operator">-&gt;</span>a<span class="token operator">=</span>p<span class="token operator">-&gt;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	p<span class="token operator">++</span><span class="token punctuation">;</span>
	p<span class="token operator">-&gt;</span>a<span class="token operator">=</span>p<span class="token operator">-&gt;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	p<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显式地将任务0的tss加载到寄存器tr中， 显式地将任务0的ldt加载到ldtr中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">ltr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lldt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码用于初始化8253定时器。通道0，选择工作方式3，二进制计数方式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* binary, mode 3, LSB/MSB, ch 0 */</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>LATCH <span class="token operator">&amp;</span> <span class="token number">0xff</span> <span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* LSB */</span>
<span class="token function">outb</span><span class="token punctuation">(</span>LATCH <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* MSB */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置时钟中断处理程序的处理函数， 设置系统调用的中断处理函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>timer_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>system_call<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,139),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-kernel-sched.html.vue"]]);export{r as default};
