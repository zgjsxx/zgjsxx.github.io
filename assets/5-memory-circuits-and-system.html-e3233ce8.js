import{_ as t,V as l,W as i,a0 as e,X as a,Y as s}from"./framework-9a29aaa0.js";const n={},r=e('<ul><li><a href="#%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84-%E5%86%85%E5%AD%98">计算机基本架构-内存</a><ul><li><a href="#1%E9%9D%99%E6%80%81%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8-sram">1.静态随机存取存储器 (SRAM)</a></li><li><a href="#%E5%90%8C%E6%AD%A5%E5%8A%A8%E6%80%81%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8sdram">同步动态随机存取存储器（SDRAM）</a></li><li><a href="#eeprom">EEPROM</a></li><li><a href="#flash-memory">Flash memory</a></li><li><a href="#refernce">refernce</a></li></ul></li></ul><h1 id="计算机基本架构-内存" tabindex="-1"><a class="header-anchor" href="#计算机基本架构-内存" aria-hidden="true">#</a> 计算机基本架构-内存</h1><p>先前的章节解释了基本的串行和并行总线结构，以及总线主控器和从设备之间不同形式的数据传输。无论总线架构如何，总线主控器被定义为发起数据传输的逻辑块，而从设备被定义为只能在主控器要求下监听和交换数据的设备。然而，这两个设备都包含某种形式的存储器。在从设备的情况下，这可以是系统存储器或属于外设设备的缓冲存储器。</p><p>根据读取和写入速度、容量和数据的持久性，系统存储器和外设缓冲区可以分为三种不同的形式。如果需要快速的读写时间，则使用静态随机存取存储器 (<code>SRAM</code>)，尽管与其他类型的存储器相比，其单元尺寸相对较大。<code>SRAM</code> 通常用于存储小的临时数据，并且通常连接到系统中的高速并行总线。如果需要大量存储，但可以容忍较慢的读写速度，那么动态随机存取存储器 (<code>DRAM</code>) 应该是主要使用的存储类型。<code>DRAM</code> 仍然连接到高速并行总线，通常以接收或传送数据突发的方式运行。典型的 <code>DRAM</code> 单元比 <code>SRAM</code> 单元小得多，功耗也显著降低。<code>DRAM</code> 的主要缺点是高数据读写延迟、存储控制和数据管理的复杂性。</p>',4),o=a("p",null,[s("数据的永久性存储需要第三种存储器类型，其单元类型由双栅金属氧化物半导体（MOS）晶体管组成。数据被永久性地存储在该设备的浮动栅中，直到被新数据覆写。电可擦可编程只读存储器（"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mi",null,"E"),a("mn",null,"2")]),a("mi",null,"P"),a("mi",null,"R"),a("mi",null,"O"),a("mi",null,"M")]),a("annotation",{encoding:"application/x-tex"},"{E}^{2}PROM")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E")]),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"2")])])])])])])])]),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"PROM")])])]),s("）或闪存记忆体属于这种类型的设备。这种存储器类型的优点是，即使系统断电，它仍然保留存储的数据。然而，与所有其他存储器类型相比，这种存储器速度最慢，并且受到有限的读写周期限制。因此，它的最佳用途是用于存储内建操作系统（"),a("code",null,"BIOS"),s("）的永久数据，特别是在功耗关键的手持设备中。典型的计算系统可以根据使用和应用软件的需要包含一种或全部三种类型的存储器。")],-1),c=e('<p>本章中描述的<code>SDRAM</code>、<code>EEPROM</code>和<code>Flash</code>存储器的基本功能灵感来源于东芝存储器数据表[1-6]。较新的带SPI接口的串行Flash存储器则基于Atmel Flash存储器的数据表[7]。在每种情况下，存储块的功能相较于原始数据表已经被大幅简化（并修改），以提高读者对相关主题的理解。这里的目的是展示每种存储器类型在系统中的操作方式，仅涵盖基本的操作模式，以便训练读者，而不是详细探讨实际数据表的内容。每种存储器的地址、数据和控制时序限制也较数据表进行了简化。这使我们能够轻松地为每种存储器类型设计总线接口。为了简化起见，我们避免了重复端口名称、确切的时序要求和功能细节，这些都可以在实际数据表中找到。读完本章后，建议有兴趣的读者在进行设计任务之前先研究参考数据表。</p><h2 id="_1-静态随机存取存储器-sram" tabindex="-1"><a class="header-anchor" href="#_1-静态随机存取存储器-sram" aria-hidden="true">#</a> 1.静态随机存取存储器 (SRAM)</h2><p>静态随机存取存储器（<code>SRAM</code>）是数字设计中最基础的存储块之一。在各种类型的存储器中，<code>SRAM</code>速度最快。然而，其较大的存储单元尺寸限制了它在多种应用中的使用。</p>',3),h=a("p",null,[s("如图下图所示，典型的"),a("code",null,"SRAM"),s("架构由四个不同的模块组成："),a("strong",null,"SRAM核心"),s("、"),a("strong",null,"地址译码器"),s("、"),a("strong",null,"感应放大器"),s("和"),a("strong",null,"内部SRAM控制器"),s("。存储核心保持即时数据。感应放大器在读取过程中将单元电压放大到完整的逻辑电平。地址译码器根据N位地址生成"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mi",null,"N")])]),a("annotation",{encoding:"application/x-tex"},"{2}^{N}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8413em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord"},"2")]),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8413em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])])])])])])])])])]),s("个字线（Word Lines）。最后，控制器生成在读取或写入周期中所需的自时序脉冲。")],-1),m=e('<figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/computer-base/Fundamentals-of-Computer-Architecture-and-Design/4/SRAM-arhi-with-eight-bit-address-32-bit-data.png" alt="一个典型的有8比特地址和32比特数据位的SRAM架构" tabindex="0" loading="lazy"><figcaption>一个典型的有8比特地址和32比特数据位的SRAM架构</figcaption></figure><p>每个<code>SRAM</code>单元由两个背对背的反相器组成，就像锁存器中使用的那样，并且有两个N沟道金属氧化物半导体（NMOS）传输门晶体管来隔离单元中的现有数据或允许新数据进入单元，如下图所示。当需要将数据写入单元时，<code>WL = 1</code>会打开两个NMOS晶体管，允许来自Bit和Bitbar输入端的真实数据和互补数据同时写入单元。如果我们假设节点A初始为逻辑0，节点B为逻辑1，且WL = 0，那么WL的逻辑电平会关闭两个NMOS晶体管，锁存器将完全与其周围环境隔离。结果是逻辑0电平被保持在单元中。但是，如果<code>WL = 1</code>，Bit节点为1，Bitbar节点为0，那么WL的逻辑电平会打开两个NMOS晶体管，允许Bit和Bitbar上的值覆盖节点A和B上现有的逻辑电平，从而将单元中存储的位从逻辑0更改为逻辑1。</p><h2 id="同步动态随机存取存储器-sdram" tabindex="-1"><a class="header-anchor" href="#同步动态随机存取存储器-sdram" aria-hidden="true">#</a> 同步动态随机存取存储器（SDRAM）</h2><h2 id="eeprom" tabindex="-1"><a class="header-anchor" href="#eeprom" aria-hidden="true">#</a> EEPROM</h2><h2 id="flash-memory" tabindex="-1"><a class="header-anchor" href="#flash-memory" aria-hidden="true">#</a> Flash memory</h2><h2 id="refernce" tabindex="-1"><a class="header-anchor" href="#refernce" aria-hidden="true">#</a> refernce</h2><ol><li>Toshiba datasheet TC59S6416/08/04BFT/BFTL-80, -10 Synchronous Dynamic RAM</li><li>Toshiba datasheet TC58DVM72A1FT00/TC58DVM72F1FT00 128Mbit E2PROM</li><li>Toshiba datasheet TC58256AFT 256Mbit E2PROM</li><li>Toshiba datasheet TC58FVT004/B004FT-85, -10, -12 4MBit CMOS Flash memory</li><li>Toshiba datasheet TC58FVT400/B400F/FT-85, -10, -12 4MBit CMOS Flash memory</li><li>Toshiba datasheet TC58FVT641/B641FT/XB-70, -10 64MBit CMOS Flash memory</li><li>Atmel datasheet AT26DF161 16Mbit serial data Flash memory</li></ol>',7),d=[r,o,c,h,m];function p(u,A){return l(),i("div",null,d)}const g=t(n,[["render",p],["__file","5-memory-circuits-and-system.html.vue"]]);export{g as default};
