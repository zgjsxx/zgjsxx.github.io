import{_ as n,V as s,W as a,a0 as p}from"./framework-c954d91f.js";const e={},t=p(`<h1 id="linux-0-11-文件系统inode-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统inode-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统inode.c详解</h1><h2 id="read-inode" tabindex="-1"><a class="header-anchor" href="#read-inode" aria-hidden="true">#</a> read_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是通过<strong>inode的编号</strong>，在<strong>磁盘上读取inode块</strong>到<strong>内存</strong>。</p><p>回顾一下minix文件系统的分布，如下图所示:</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/minixfs.drawio.png" alt="minix" tabindex="0" loading="lazy"><figcaption>minix</figcaption></figure><p>其中<strong>引导块</strong>为1个block，<strong>超级块</strong>为1个block，<strong>inode位图</strong>的大小在<strong>超级块</strong>中定义，<strong>逻辑块位图</strong>的大小在超级块中定义。跳过这些块，就可以来到inode节点块的起点。</p><p>那么inode节点会在哪个block中呢？</p><p>inode节点的序号从0开始， 但是0号是个保留号， 实际存储并不会存0号inode， 因此inode的实际起始位置是1。</p><p>因此序号为n的inode，在磁盘上的逻辑块号为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>block = 1 + 1 + s_imap_blocks(inode位图大小) + s_zmap_blocks(逻辑块位图大小) + (n - 1)/每个磁盘块存储的inode数量。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找到了inode所在的逻辑块号， 计算inode在该块中的下标， 则通过:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>index = (n - 1) % 每个磁盘块存储的inode数量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>到此， 给定一个inode号，就可以从磁盘上找到对应的inode节点。</p><p>通过上面的解释，很容易理解下面的代码。</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>if (!(sb=get_super(inode-&gt;i_dev)))//获取超级块的内容
    panic(&quot;trying to read inode without dev&quot;);
block = 2 + sb-&gt;s_imap_blocks + sb-&gt;s_zmap_blocks +
    (inode-&gt;i_num-1)/INODES_PER_BLOCK;//获取inode所在的逻辑块
if (!(bh=bread(inode-&gt;i_dev,block)))//读取该逻辑块的内容
    panic(&quot;unable to read i-node block&quot;);
*(struct d_inode *)inode =
    ((struct d_inode *)bh-&gt;b_data)
        [(inode-&gt;i_num-1)%INODES_PER_BLOCK];//将该inode读取到内存中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="write-inode" tabindex="-1"><a class="header-anchor" href="#write-inode" aria-hidden="true">#</a> write_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将inode的内容回写到磁盘。</p><p>该函数在搜索inode节点的方法上和read_inode相同。</p><p>有所区别的是该函数是修改一个inode的值， 因此在找到inode节点后需要进行赋值， 并将buffer块标记为脏页，以回写到磁盘上。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>INODES_PER_BLOCK<span class="token punctuation">]</span> <span class="token operator">=</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span>inode<span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//磁盘也标记为脏页</span>
inode<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//inode的脏数据标记为0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iget" tabindex="-1"><a class="header-anchor" href="#iget" aria-hidden="true">#</a> iget</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">iget</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用主要是通过设备号和inode的序号获取对应的inode节点。</p><p>需要注意的是，如果一个硬盘上装有<strong>多个文件系统</strong>，需要处理<strong>一个inode节点是另一个文件系统挂载点</strong>的情况。</p><p>该段代码主要是遍历inode表，查找是否存在这样的inode， 这个inode的设备号和入参的设备号相同， inode的节点号和入参的节点号相同。如果查到了， 则将该inode的引用计数增加1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>inode <span class="token operator">&lt;</span> NR_INODE<span class="token operator">+</span>inode_table<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">!=</span> dev <span class="token operator">||</span> inode<span class="token operator">-&gt;</span>i_num <span class="token operator">!=</span> nr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//遍历inode表， 查找inode</span>
        inode<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待该inode节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">!=</span> dev <span class="token operator">||</span> inode<span class="token operator">-&gt;</span>i_num <span class="token operator">!=</span> nr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inode <span class="token operator">=</span> inode_table<span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    inode<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//引用计数增加1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果i节点是某个文件系统的安装点， 则在<strong>超级块</strong>的表中搜索即可搜索到。 若找到了相应的超级块， 则将该i节点写盘。再从<strong>安装此i节点的文件系统上</strong>的超级块上取设备号，并令i节点为1。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/inode_iget.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><p>判断inode节点是否是其他文件系统挂载点的代码如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//该inode是一个挂载节点</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_SUPER <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>super_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_imount<span class="token operator">==</span>inode<span class="token punctuation">)</span><span class="token comment">//在超级块中查找到</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> NR_SUPER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Mounted inode hasn&#39;t got sb\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>empty<span class="token punctuation">)</span>
            <span class="token function">iput</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> inode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将该inode的引用计数减1</span>
    dev <span class="token operator">=</span> super_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_dev<span class="token punctuation">;</span><span class="token comment">//设备号设置为超级块中的设备号</span>
    nr <span class="token operator">=</span> ROOT_INO<span class="token punctuation">;</span><span class="token comment">//inode节点号设置为1号</span>
    inode <span class="token operator">=</span> inode_table<span class="token punctuation">;</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iput" tabindex="-1"><a class="header-anchor" href="#iput" aria-hidden="true">#</a> iput</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">iput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是放回一个i节点。 该函数主要用于将i节点的引用计数递减1。</p><p>首先判断<strong>i节点的有效性</strong>:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待inode解锁</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span> <span class="token comment">//如果引用计数为0， 则inode是空闲的， 内核要求放回是有问题的。</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;iput: trying to free free inode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是对<strong>管道节点</strong>的处理:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒等待该管道节点的进程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span><span class="token comment">//引用计数减1</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">free_page</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将管道节点的内存释放， 对于管道节点inode-&gt;i_size存放着内存页的地址。</span>
    inode<span class="token operator">-&gt;</span>i_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_pipe<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是一个<strong>设备节点</strong>，则刷新该设备:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sync_dev</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一段是执行引用计数减1的操作：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>repeat<span class="token operator">:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//引用计数大于1， 直接减1后返回</span>
    inode<span class="token operator">-&gt;</span>i_count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果连接数为0， 则该文件已经被删除</span>
    <span class="token function">truncate</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dirt<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果该inode为脏数据, 则写回磁盘</span>
    <span class="token function">write_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* we can sleep - so do again */</span>
    <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
inode<span class="token operator">-&gt;</span>i_count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//引用计数减1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-empty-inode" tabindex="-1"><a class="header-anchor" href="#get-empty-inode" aria-hidden="true">#</a> get_empty_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_empty_inode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是从空闲的inode表中获取一个空闲的i节点项。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/get_empty_inode.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><h2 id="bmap" tabindex="-1"><a class="header-anchor" href="#bmap" aria-hidden="true">#</a> _bmap</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_bmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">,</span><span class="token keyword">int</span> create<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是映射文件数据块到盘块的处理操作。</p><p>需要注意的是入参中的<strong>block不是指硬盘的逻辑块， 而是指文件的数据块的序号</strong>。 该block指的是文件的第block个1k的数据块。</p><p>inode的寻址主要分为直接寻址，一次间接块的寻址， 二次间接块的寻址三种。如下图所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/inode_search_address.png" alt="inode" tabindex="0" loading="lazy"><figcaption>inode</figcaption></figure><p>如果block号小于7， 则直接寻址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            inode<span class="token operator">-&gt;</span>i_ctime<span class="token operator">=</span>CURRENT_TIME<span class="token punctuation">;</span> <span class="token comment">//设置change time</span>
            inode<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//设置该inode块已经被修改，是一个脏数据</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果block号大于7， 小于等于7 + 512， 则通过一次间接块寻址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>block <span class="token operator">-=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token operator">&lt;</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//建立一次间接块</span>
            inode<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            inode<span class="token operator">-&gt;</span>i_ctime<span class="token operator">=</span>CURRENT_TIME<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>i<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
            bh<span class="token operator">-&gt;</span>b_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果block号大于7 + 512 ， 小于等于7 + 512 + 512 * 512， 则通过二次间接块寻址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>block <span class="token operator">-=</span> <span class="token number">512</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inode<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        inode<span class="token operator">-&gt;</span>i_ctime<span class="token operator">=</span>CURRENT_TIME<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">[</span>block<span class="token operator">&gt;&gt;</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>block<span class="token operator">&gt;&gt;</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        bh<span class="token operator">-&gt;</span>b_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">[</span>block<span class="token operator">&amp;</span><span class="token number">511</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>block<span class="token operator">&amp;</span><span class="token number">511</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        bh<span class="token operator">-&gt;</span>b_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-block" tabindex="-1"><a class="header-anchor" href="#create-block" aria-hidden="true">#</a> create_block</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">create_block</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>create block底层调用了_bmap函数，去磁盘上申请一个逻辑块， 并与inode关联， 通过返回该逻辑块的盘块号。</p><h2 id="bmap-1" tabindex="-1"><a class="header-anchor" href="#bmap-1" aria-hidden="true">#</a> bmap</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是通过文件数据块的块号返回其磁盘上的逻辑块号。底层也是通过_bmap函数实现。</p><h2 id="sync-inodes" tabindex="-1"><a class="header-anchor" href="#sync-inodes" aria-hidden="true">#</a> sync_inodes</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sync_inodes</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将inode表中的脏的数据刷到磁盘上。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>inode <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>inode_table<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_INODE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>inode<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待该inode解锁</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span><span class="token comment">//如果inode已经被修改， 并且不是管道节点</span>
        <span class="token function">write_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将该inode写盘</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="invalidate-inodes" tabindex="-1"><a class="header-anchor" href="#invalidate-inodes" aria-hidden="true">#</a> invalidate_inodes</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">invalidate_inodes</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>释放设备dev在内存i节点表中的所有i节点。</p><p>该函数的作用就是遍历inode数组， 如果inode数组的某一项的i_dev等于dev的时候， 将该inode的i_dev和i_dirt置为0。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/invalidate_inodes.png" alt="minix" tabindex="0" loading="lazy"><figcaption>minix</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>inode <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>inode_table<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_INODE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>inode<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果该inode已经被加锁，则等待该inode解锁</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span> <span class="token comment">//如果引用不为0， 则打印出错信息</span>
            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;inode in use on removed disk\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//将设备号置为0, 即释放该inode</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-pipe-inode" tabindex="-1"><a class="header-anchor" href="#get-pipe-inode" aria-hidden="true">#</a> get_pipe_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_pipe_inode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是获取<strong>管道节点</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">get_empty_inode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//从inode表中获取一个空闲的inode</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_size<span class="token operator">=</span><span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//从内存中获取一个空的页,赋值给inode的i_size变量</span>
    inode<span class="token operator">-&gt;</span>i_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
inode<span class="token operator">-&gt;</span>i_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>	<span class="token comment">/* sum of readers/writers */</span>
<span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//复位管道的头尾指针</span>
inode<span class="token operator">-&gt;</span>i_pipe <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lock-inode" tabindex="-1"><a class="header-anchor" href="#lock-inode" aria-hidden="true">#</a> lock_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">lock_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是<strong>锁定某个inode节点</strong>。</p><p>该函数的代码较为简单，下面直接通过注释进行解释。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_lock<span class="token punctuation">)</span>
    <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果该inode被加锁， 就将当前进程状态修改为TASK_UNINTERRUPTIBLE， 切换其他进程运行</span>
inode<span class="token operator">-&gt;</span>i_lock<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//将该inode的锁定状态修改为1</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wait-on-inode" tabindex="-1"><a class="header-anchor" href="#wait-on-inode" aria-hidden="true">#</a> wait_on_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">wait_on_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是<strong>等待指定的inode节点解锁</strong>。</p><p>该函数的代码较为简单，下面直接通过注释进行解释。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关中断</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_lock<span class="token punctuation">)</span> 
    <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果该inode被加锁， 就将当前进程状态修改为TASK_UNINTERRUPTIBLE， 切换其他进程运行</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unlock-inode" tabindex="-1"><a class="header-anchor" href="#unlock-inode" aria-hidden="true">#</a> unlock_inode</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是对<strong>指定inode解锁</strong>。</p><p>该函数的代码较为简单，下面直接通过注释进行解释。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>inode<span class="token operator">-&gt;</span>i_lock<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//将该inode的锁定状态修改为0.</span>
<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒等待该inode的进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,94),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Linux-0.11-inode.html.vue"]]);export{r as default};
