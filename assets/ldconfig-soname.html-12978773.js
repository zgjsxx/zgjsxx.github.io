import{_ as a,V as e,W as l,X as n,Y as i,$ as o,a0 as t,F as p}from"./framework-9a29aaa0.js";const c={},r=t(`<h1 id="linux中的so-name与动态库的版本" tabindex="-1"><a class="header-anchor" href="#linux中的so-name与动态库的版本" aria-hidden="true">#</a> Linux中的SO-NAME与动态库的版本</h1><p>由于动态库有着诸多优点，其在程序中的运用非常广泛。现代的系统中一般存在大量的动态库。如何组织管理好这些动态库是一个非常重要的问题。Linux系统对于共享库的管理有一套很成熟的体系，这对于开发者而言进行程序的维护升级带来了方便。本文将对于Linux系统对于动态库的管理体系进行介绍。</p><h1 id="共享库的兼容性问题" tabindex="-1"><a class="header-anchor" href="#共享库的兼容性问题" aria-hidden="true">#</a> 共享库的兼容性问题</h1><p>对于一个库而言，开发者会不停地更新共享库的版本，修复一些问题，增加库的功能以及对性能的改进等等。由于共享库的特性，应用程序的共享库和应用程序本身可以独立开发和更新。例如Hello_World程序依赖于一个动态库libhello.so。当libhello.so的开发者开发出新的版本后，理论上只需要使用新的libhello.so去替换旧的版本就可以。</p><p>但是现实中确远比这个复杂的多。因为动态库的改动可能包含增加/删除/修改三种类型。因此动态库的更新总体可以划分为两大类：</p><ul><li>兼容更新。 动态库的更新只是在前一个版本的基础上增加了一些内容。原有的接口都保持不变。</li><li>不兼容更新。动态库修改了原有的接口或者删除了一些接口，使用该库的接口的程序可能不能正常运行。</li></ul><p>这里的兼容性是指ABI（application binary interface）层面, 即二进制接口层面的兼容性。</p><p>对于一个c程序而言，兼容性可以被更加细分为下表中的内容：</p><table><thead><tr><th>更改类型</th><th>兼容性</th></tr></thead><tbody><tr><td>往动态库libhello.so中添加一个导出符号hello2</td><td>兼容</td></tr><tr><td>删除动态库libfoo.so中的原有导出符号hello</td><td>不兼容</td></tr><tr><td>将libhello.so给一个导出方法添加了一个参数， 例如从hello(int a)变成了hello(int a, int b)</td><td>不兼容</td></tr><tr><td>删除了一个导出函数的一个参数， 例如从hello(int a， int b)变成了hello(int a)</td><td>不兼容</td></tr><tr><td>修改了一个结构体的类型(长度，内容，成员类型)， 而该接口体在导出函数的接口定义上或者全局变量上，例如hello(struct World)接口， 给World结构体添加了一个新的成员</td><td>不兼容</td></tr><tr><td>修改一个导出函数中的内部bug，优化性能等等，但是没有修改接口定义，功能，行为等等</td><td>兼容</td></tr><tr><td>修改一个导出函数中的内部bug，优化性能等等，同时修改了接口定义，功能，行为等等</td><td>不兼容</td></tr></tbody></table><p>对于c++而言， ABI的兼容性问题更为严重一些。C++在语法上支持一些高级特性，例如模板、多重继承等。这些特性对于ABI的兼容性而言简直是一种灾难。</p><h1 id="动态库的版本" tabindex="-1"><a class="header-anchor" href="#动态库的版本" aria-hidden="true">#</a> 动态库的版本</h1><p>因为动态库存在着兼容性问题，一种解决版本就是引入版本号以对动态库进行管理。</p><p>Linux中经典的动态库的命名规则如下所示：</p><p>libname.so.x.y.z</p><p>最前面使用lib，中间是库的名字和后缀&quot;.so&quot;,最后面跟着的是三个数字组成的版本号。&quot;x&quot;代表主版本号， &quot;y&quot;代表次版本号， &quot;z&quot;表示发布版本号。三个版本号的含义不一样。</p><p><strong>主版本号</strong>表示库的重大升级，不同主版本号的库之间是不兼容的。依赖于旧的主版本号的程序需要改动相应的部分，并且重新编译，才可以使用新的共享库中运行。</p><p><strong>次版本号</strong>表示库的增量升级，即增加一些新的接口符号，且保持原来的符号不变。</p><p><strong>发布版本号</strong>表示库的一些错误、性能的改进等，并不添加任何新的接口，也不对接口进行修改。</p><h1 id="so-name" tabindex="-1"><a class="header-anchor" href="#so-name" aria-hidden="true">#</a> SO_NAME</h1><p>从动态库版本的定义可以得知，不同的主版本号之间的动态库是完全不兼容的，而主版本号相同的动态库之间是可以做到兼容的。</p><p>那么对于一个应用程序来讲，只要不被连接到其他主版本号的动态库，就是没有问题的。例如Hello_World程序记录了libhello.so.2的版本信息，那么其运行时就不会被链接到libhello.so.1或者libhello.so.3。</p><p>SO_NAME便是这样的一个机制。SO_NAME就是去掉次版本号和发布版本号，只保留主版本号的一个版本信息。例如libhello.so.3.81.1，其SO_NAME就是libhello.so.3。并且Linux会为每个动态库所在的目录创建一个跟&quot;SO-NAME&quot;相同名字并指向动态库的软链接。这个软连接会指向目录中主版本号相同， 次版本号和发布版本号最新的动态库。</p><p>例如目录中有libhello.so.2.56.1 和libhello.so.2.61.1, 两个动态库， 那么libhello.so.2将会指向libhello.so.2.61.1。</p><h1 id="so-name的实践" tabindex="-1"><a class="header-anchor" href="#so-name的实践" aria-hidden="true">#</a> SO_NAME的实践</h1><p>创建一个目录，构建如下的一些文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># tree</span>
<span class="token builtin class-name">.</span>
├── hello.c
├── hello.h
├── main.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.h内容如下所示：</p><div class="language-h line-numbers-mode" data-ext="h"><pre class="language-h"><code>#ifndef _TEST_H_
#define _TEST_H_
void hello();
#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.c内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.c的内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译上述模块，生成动态库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-o</span> hello.o <span class="token parameter variable">-c</span> hello.c
gcc <span class="token parameter variable">-shared</span> -Wl,-soname,libhello.so.0 <span class="token parameter variable">-o</span> libhello.so.0.0.0 hello.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用readelf命令查看出此时libhello.so.0.0.0已经被打上了SONANE。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># readelf -d libhello.so.0.0.0 |grep SONAME</span>
 0x000000000000000e <span class="token punctuation">(</span>SONAME<span class="token punctuation">)</span>             Library soname: <span class="token punctuation">[</span>libhello.so.0<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>链接时，使用使用-l去加载一个动态库，例如-lxxx 将会去寻找名叫libxxx.so的动态库。</p><p>于是我们创建一个链接，使得libhello.so指向libhello.so.0。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ln</span> <span class="token parameter variable">-s</span> libhello.so.0.0.0  libhello.so.0
<span class="token function">ln</span> <span class="token parameter variable">-s</span> libhello.so.0 libhello.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，编译和链接main方法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> main.o main.c
gcc -L. <span class="token parameter variable">-o</span> main main.o <span class="token parameter variable">-lhello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样之后，main程序中的NEEDED中就包含了动态库libhello.so的SO-NAME libhello.so.0。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># readelf -d main |grep NEEDED</span>
 0x0000000000000001 <span class="token punctuation">(</span>NEEDED<span class="token punctuation">)</span>             Shared library: <span class="token punctuation">[</span>libhello.so.0<span class="token punctuation">]</span>
 0x0000000000000001 <span class="token punctuation">(</span>NEEDED<span class="token punctuation">)</span>             Shared library: <span class="token punctuation">[</span>libc.so.6<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就保证了main在运行会会去加载soname是libhello.so.0的动态库。</p><p>不过这个时候， main是无法被执行的。因为运行时，系统不知道要去哪里寻找libhello.so.0。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># ./main</span>
./main: error <span class="token keyword">while</span> loading shared libraries: libhello.so.0: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory
<span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># ldd main</span>
        linux-vdso.so.1 <span class="token punctuation">(</span>0x00007ffff5764000<span class="token punctuation">)</span>
        libhello.so.0 <span class="token operator">=</span><span class="token operator">&gt;</span> not found
        libc.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libc.so.6 <span class="token punctuation">(</span>0x00007fd00fa00000<span class="token punctuation">)</span>
        /lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007fd00fcb3000<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要系统可以找到libhello.so.0， 有下面几个方法。</p><ul><li>LD_LIBRARY_PATH</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/home/xx/hellopath:<span class="token variable">$LD_LIBRARY_PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里/home/xx/hellopath是共享库的路径。虽然改变LD_LIBRARY_PATH能达到目的，但是不推荐使用，因为这是一个全局的变量，其他应用程序可能受此影响，导致各种库的覆盖问题。如果要清楚这个全局变量，使用命令unset LD_LIBRARY_PATH。</p><ul><li>rpath</li></ul><p>在编译应用程序时，利用rpath指定加载路径。 gcc -L. -Wl,-rpath=/home/xx/hellopath -o main main.o -lhello 这样，虽然避免了各种路径找不到的问题，但是也失去了灵活性。因为库的路径被定死了。</p><ul><li>改变ld.so.conf</li></ul><p>将路径添加到此文件，然后使用ldconfig更新加载程序的cache。 可以使用命令ldconfig -p查看当前所有库的soname-&gt;real name的对应关系信息</p><p>最后说一下，应用程序在编译链接和运行加载时，库的搜索路径的先后顺序。</p><p><strong>编译链接时，查找顺序</strong></p><ul><li>/usr/local/lib</li><li>/usr/lib</li><li>用-L指定的路径，按命令行里面的顺序依次查找</li></ul><p><strong>运行加载时的顺序</strong>：</p><ul><li>可执行程序指定的的DT_RPATH</li><li>LD_LIBRARY_PATH. 但是如果使用了setuid/setgid，由于安全因素，此路径将被忽略.</li><li>可执行程序指定的的DT_RUNPATH. 但是如果使用了setuid/setgid，由于安全因素，此路径将被忽略</li><li>/etc/ld/so/cache. 如果链接时指定了&#39;-z nodeflib&#39;，此路径将被忽略.</li><li>/lib. 如果链接时指定了&#39;-z nodeflib&#39;，此路径将被忽略</li><li>/usr/lib. 如果链接时指定了&#39;-z nodeflib&#39;，此路径将被忽略</li></ul><p>修改接口内部的内容，不增加接口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># tree</span>
<span class="token builtin class-name">.</span>
├── hello.c
├── hello.h
├── main.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.h内容如下所示：</p><div class="language-h line-numbers-mode" data-ext="h"><pre class="language-h"><code>#ifndef _TEST_H_
#define _TEST_H_
void hello();
#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.c内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.c的内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-o</span> hello.o <span class="token parameter variable">-c</span> hello.c
gcc <span class="token parameter variable">-shared</span> -Wl,-soname,libhello.so.0 <span class="token parameter variable">-o</span> libhello.so.0.0.1 hello.o
ldconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候看到此时，在执行完ldconfig之后，libhello.so.0 自动指向了 libhello.so.0.0.1。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>total <span class="token number">80</span>
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">147</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:44 hello.c
-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">55</span> Feb  <span class="token number">7</span> <span class="token number">14</span>:52 hello.h
-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">1632</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:45 hello.o
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">13</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:29 libhello.so -<span class="token operator">&gt;</span> libhello.so.0
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">17</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:45 libhello.so.0 -<span class="token operator">&gt;</span> libhello.so.0.0.1
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">16304</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:28 libhello.so.0.0.0
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">16304</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:45 libhello.so.0.0.1
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">25840</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:33 main
-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">75</span> Feb  <span class="token number">7</span> <span class="token number">14</span>:56 main.c
-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">1368</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:33 main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增接口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># tree</span>
<span class="token builtin class-name">.</span>
├── hello.c
├── hello.h
├── main.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.h内容如下所示：</p><div class="language-h line-numbers-mode" data-ext="h"><pre class="language-h"><code>#ifndef _TEST_H_
#define _TEST_H_
void hello();
void hello2();
#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.c内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.c的内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-o</span> hello.o <span class="token parameter variable">-c</span> hello.c
gcc <span class="token parameter variable">-shared</span> -Wl,-soname,libhello.so.0 <span class="token parameter variable">-o</span> libhello.so.0.1.0 hello.o
ldconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候看到此时，在执行完ldconfig之后，libhello.so.0 自动指向了 libhello.so.0.0.1。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">96</span>
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">257</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:54 hello.c
-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">70</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:54 hello.h
-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">1848</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:55 hello.o
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">13</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:29 libhello.so -<span class="token operator">&gt;</span> libhello.so.0
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">17</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:55 libhello.so.0 -<span class="token operator">&gt;</span> libhello.so.0.1.0
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">16304</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:28 libhello.so.0.0.0
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">16304</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:45 libhello.so.0.0.1
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">16336</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:55 libhello.so.0.1.0
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">25840</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:33 main
-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">75</span> Feb  <span class="token number">7</span> <span class="token number">14</span>:56 main.c
-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">1368</span> Feb  <span class="token number">7</span> <span class="token number">15</span>:33 main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改原有接口的形参， ABI不兼容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test1<span class="token punctuation">]</span><span class="token comment"># tree</span>
<span class="token builtin class-name">.</span>
├── hello.c
├── hello.h
├── main.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.h内容如下所示：</p><div class="language-h line-numbers-mode" data-ext="h"><pre class="language-h"><code>#ifndef _TEST_H_
#define _TEST_H_
void hello(int i);
void hello2();
#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.c内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a lib for HelloWorld\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.c的内容如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-o</span> hello.o <span class="token parameter variable">-c</span> hello.c
gcc <span class="token parameter variable">-shared</span> -Wl,-soname,libhello.so.1 <span class="token parameter variable">-o</span> libhello.so.1.0.0 hello.o
ldconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90),d={href:"https://lovewubo.github.io/shared_library",target:"_blank",rel:"noopener noreferrer"};function u(v,b){const s=p("ExternalLinkIcon");return e(),l("div",null,[r,n("p",null,[n("a",d,[i("https://lovewubo.github.io/shared_library"),o(s)])])])}const k=a(c,[["render",u],["__file","ldconfig-soname.html.vue"]]);export{k as default};
