import{_ as p,V as e,W as o,X as n,Y as s,$ as c,a0 as a,F as l}from"./framework-9a29aaa0.js";const i={},u=a(`<h1 id="深入了解glibc的互斥锁" tabindex="-1"><a class="header-anchor" href="#深入了解glibc的互斥锁" aria-hidden="true">#</a> 深入了解glibc的互斥锁</h1><p>互斥锁是<strong>多线程</strong>同步时常用的手段，使用互斥锁可以保护对<strong>共享资源</strong>的操作。<strong>共享资源</strong>也被称为<strong>临界区</strong>，当一个线程对一个临界区加锁后，其他线程就不能进入该临界区，直到持有临界区锁的线程释放该锁。</p><p>本文以glibc中mutex的实现为例，讲解其背后的实现原理。</p><h2 id="glibc-mutex类型" tabindex="-1"><a class="header-anchor" href="#glibc-mutex类型" aria-hidden="true">#</a> glibc mutex类型</h2><p>glibc的互斥锁的类型名称为<strong>pthread_mutex_t</strong>，其结构可以用下面的结构体表示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> __lock<span class="token punctuation">;</span>
    <span class="token keyword">int</span> __count<span class="token punctuation">;</span>
    <span class="token keyword">int</span> __owner<span class="token punctuation">;</span>
    <span class="token keyword">int</span> __nusers<span class="token punctuation">;</span>
    <span class="token keyword">int</span> __kind<span class="token punctuation">;</span>
    <span class="token comment">// other ignore</span>
<span class="token punctuation">}</span> <span class="token class-name">pthread_mutex_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li>__lock表示<strong>当前mutex的状态</strong>，0表示没有被加锁，1表示mutex已经被加锁，2表示mutex被某个线程持有并且有另外的线程在等待它的释放。</li><li>__count表示<strong>mutex被加锁的次数</strong>，对于不可重入锁，该值为0或者1，对于可重入锁，count可以大于1。</li><li>__owner用来记录<strong>持有当前mutex的线程id</strong>。</li><li>__nusers用于记录<strong>多少个线程持有该互斥锁</strong>，一般来说该值只能是0或者1，但是对于读写锁，多个读线程可以共同持有锁，因此nusers通常用于读写锁的场景下。</li><li>__kind表示<strong>锁的类型</strong>。</li></ul><p>pthread_mutex_t锁可以是如下的类型:</p><ul><li>PTHREAD_MUTEX_TIMED_NP： <strong>普通锁</strong>，当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁。这种锁策略保证了资源分配的公平性。当锁unlock时，会唤醒等待队列中的一个线程。</li><li>PTHREAD_MUTEX_RECURSIVE_NP: <strong>可重入锁</strong>，如果线程没有获得该mutex的情况下，争用该锁，那么与PTHREAD_MUTEX_TIMED_NP一样。如果一个线程已经获取锁，其可以再次获取锁，并通过多次unlock解锁。</li><li>PTHREAD_MUTEX_ERRORCHECK_NP: <strong>检错锁</strong>，如果同一个线程请求同一个锁，则返回EDEADLK，而不是死锁，其他点和PTHREAD_MUTEX_TIMED_NP相同。</li><li>PTHREAD_MUTEX_ADAPTIVE_NP: <strong>自适应锁</strong>，此锁在多核处理器下首先进行自旋获取锁，如果自旋次数超过配置的最大次数，则也会陷入内核态挂起。</li></ul><h2 id="mutex的加锁过程" tabindex="-1"><a class="header-anchor" href="#mutex的加锁过程" aria-hidden="true">#</a> mutex的加锁过程</h2>`,11),k={href:"http://mirror.keystealth.org/gnu/libc/glibc-2.34.tar.gz%E3%80%82",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>本文主要侧重于讲解互斥锁<strong>从用户态到内核态</strong>的加锁过程，而不同类型锁的实现细节，本文不重点讨论。后续将在其他文章中做探讨。</p><p>下面就以最简单的类型<strong>PTHREAD_MUTEX_TIMED_NP</strong>来跟踪加锁过程，从___pthread_mutex_lock开始看起，其定义在pthread_mutex_lock.c中。</p><p>如下所示，P<strong>THREAD_MUTEX_TIMED_NP</strong>的锁会调用<strong>lll_mutex_lock_optimized</strong>方法进行加锁，如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>PTHREAD_MUTEX_KIND_MASK_NP
				 <span class="token operator">|</span> PTHREAD_MUTEX_ELISION_FLAGS_NP<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">__pthread_mutex_lock_full</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_likely</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> PTHREAD_MUTEX_TIMED_NP<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">FORCE_ELISION</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token keyword">goto</span> elision<span class="token punctuation">)</span><span class="token punctuation">;</span>
    simple<span class="token operator">:</span>
      <span class="token comment">/* Normal mutex.  */</span>
      <span class="token function">LLL_MUTEX_LOCK_OPTIMIZED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">assert</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>lll_mutex_lock_optimized</strong>也定义在<code>nptl/pthread_mutex_lock.c</code>文件中，从注释了解到，这是为单线程进行的优化，如果是单线程，则直接将mutex的__lock的值修改为1（因为不存在竞争），如果不是单线程，则调用lll_lock方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LLL_MUTEX_LOCK</span></span>
<span class="token comment">/* lll_lock with single-thread optimization.  */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">lll_mutex_lock_optimized</span> <span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* The single-threaded optimization is only valid for private
     mutexes.  For process-shared mutexes, the mutex could be in a
     shared mapping, so synchronization with another process is needed
     even without any threads.  If the lock is already marked as
     acquired, POSIX requires that pthread_mutex_lock deadlocks for
     normal mutexes, so skip the optimization in that case as
     well.  */</span>
  <span class="token keyword">int</span> private <span class="token operator">=</span> <span class="token function">PTHREAD_MUTEX_PSHARED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>private <span class="token operator">==</span> LLL_PRIVATE <span class="token operator">&amp;&amp;</span> SINGLE_THREAD_P <span class="token operator">&amp;&amp;</span> mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">lll_lock</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">LLL_MUTEX_LOCK</span><span class="token expression"><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>						</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">lll_lock</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock<span class="token punctuation">,</span> <span class="token function">PTHREAD_MUTEX_PSHARED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>lll_lock</strong>定义在<code>sysdeps/nptl/lowlevellock.h</code>文件中，又会调用到**__lll_lock<strong>方法，由于存在竞争，因此在</strong>__lll_lock<strong>方法中使用了</strong>CAS方法**尝试对mutex的__lock值进行修改。</p><p>CAS是compare-and-swap的含义，其是原子变量的实现的基础，其伪代码如下所示，即当内存mem出的值如果等于old_value，则将其替换为new_value，这个过程是原子的，底层由CMPXCHG指令保证。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">CAS</span><span class="token punctuation">(</span>T<span class="token operator">*</span> mem<span class="token punctuation">,</span> T new_value<span class="token punctuation">,</span> T old_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>mem <span class="token operator">==</span> old_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>mem <span class="token operator">=</span> new_value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__lll_lock中的<strong>atomic_compare_and_exchange_bool_acq</strong>就是上述所说的CAS方法，如果futex = 0，则尝试将其修改为1，表示加锁成功, 如果futex &gt;= 1,则会调用**__lll_lock_wait_private<strong>或者</strong>__lll_lock_wait**。注意这里的futex其实就是mutex结构体中的__lock。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__lll_lock</span><span class="token expression"><span class="token punctuation">(</span>futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span>                                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                                                               </span><span class="token punctuation">\\</span>
   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>                                                                   </span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span>__futex <span class="token operator">=</span> <span class="token punctuation">(</span>futex<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            </span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>__glibc_unlikely                                               </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token punctuation">(</span><span class="token function">atomic_compare_and_exchange_bool_acq</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token punctuation">{</span>                                                                </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span> <span class="token punctuation">(</span>private<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>private<span class="token punctuation">)</span> <span class="token operator">==</span> LLL_PRIVATE<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
           <span class="token expression"><span class="token function">__lll_lock_wait_private</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">)</span><span class="token punctuation">;</span>                           </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token keyword">else</span>                                                           </span><span class="token punctuation">\\</span>
           <span class="token expression"><span class="token function">__lll_lock_wait</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>                          </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token punctuation">}</span>                                                                </span><span class="token punctuation">\\</span>
   <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lll_lock</span><span class="token expression"><span class="token punctuation">(</span>futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span>	</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">__lll_lock</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>futex<span class="token punctuation">)</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__lll_lock_wait_private和__lll_lock_wait是类似的，这里首先会调用<strong>atomic_exchange_acquire</strong>将futex的旧值和2进行交换，返回值是futex的<strong>旧值</strong>。</p><p>因此如果其<strong>返回值不为0</strong>，代表当前锁还是<strong>加锁</strong>状态，可能需要进入内核态等待(调用futex_wait)。如果其返回0，则代表，当前锁已经被释放，加锁成功，退出循环。</p><p>注意futex值修改为2的目的是为了提高<strong>pthread_mutex_unlock</strong>的效率。在<strong>pthread_mutex_unlock</strong>中，会调用atomic_exchange_rel()无条件的把mutex-&gt;__lock的值更新为0，并且检查mutex-&gt;__lock的原始值，如果原始值为0或者1，表示没有竞争发生，自然也就没有必要调用futex系统调用，浪费时间。只有检查到mutex-&gt;__lock的值大于1的时候，才需要<strong>调用futex系统调用</strong>，唤醒等待该锁上的线程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span>
<span class="token function">__lll_lock_wait_private</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>futex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>futex<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> futex<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">atomic_exchange_acquire</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    futex<span class="token operator">:</span>
      <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>lll_lock_wait_private<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> futex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">futex_wait</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> LLL_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Wait if *futex == 2.  */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__lll_lock_wait_private<span class="token punctuation">)</span>

<span class="token keyword">void</span>
<span class="token function">__lll_lock_wait</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>futex<span class="token punctuation">,</span> <span class="token keyword">int</span> private<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>futex<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> futex<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">atomic_exchange_acquire</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    futex<span class="token operator">:</span>
      <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>lll_lock_wait<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> futex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">futex_wait</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Wait if *futex == 2.  */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__lll_lock_wait_private和__lll_lock_wait调用了futex_wait，该函数相对简单，其内部将会调用lll_futex_timed_wait方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __always_inline <span class="token keyword">int</span>
<span class="token function">futex_wait</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>futex_word<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> private<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token function">lll_futex_timed_wait</span> <span class="token punctuation">(</span>futex_word<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EAGAIN<span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EINTR<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>err<span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token operator">-</span>ETIMEDOUT<span class="token operator">:</span> <span class="token comment">/* Cannot have happened as we provided no timeout.  */</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EFAULT<span class="token operator">:</span> <span class="token comment">/* Must have been caused by a glibc or application bug.  */</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EINVAL<span class="token operator">:</span> <span class="token comment">/* Either due to wrong alignment or due to the timeout not
		     being normalized.  Must have been caused by a glibc or
		     application bug.  */</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>ENOSYS<span class="token operator">:</span> <span class="token comment">/* Must have been caused by a glibc bug.  */</span>
    <span class="token comment">/* No other errors are documented at this time.  */</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">futex_fatal_error</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lll_futex_timed_wait方法其实是对sys_futex系统调用的封装，其最终将调用sys_futex方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">lll_futex_timed_wait</span><span class="token expression"><span class="token punctuation">(</span>futexp<span class="token punctuation">,</span> val<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> private<span class="token punctuation">)</span>     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">lll_futex_syscall</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> futexp<span class="token punctuation">,</span>                                 </span><span class="token punctuation">\\</span>
		     <span class="token expression"><span class="token function">__lll_private_flag</span> <span class="token punctuation">(</span>FUTEX_WAIT<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">,</span>  </span><span class="token punctuation">\\</span>
		     <span class="token expression">val<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">lll_futex_syscall</span><span class="token expression"><span class="token punctuation">(</span>nargs<span class="token punctuation">,</span> futexp<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>                                                                    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">int</span> __ret <span class="token operator">=</span> <span class="token function">INTERNAL_SYSCALL</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> nargs<span class="token punctuation">,</span> futexp<span class="token punctuation">,</span> op<span class="token punctuation">,</span> 	</span><span class="token punctuation">\\</span>
				       <span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">INTERNAL_SYSCALL_ERROR_P</span> <span class="token punctuation">(</span>__ret<span class="token punctuation">)</span><span class="token punctuation">)</span>         	</span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token operator">?</span> <span class="token operator">-</span><span class="token function">INTERNAL_SYSCALL_ERRNO</span> <span class="token punctuation">(</span>__ret<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     	</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_futex</span> <span class="token expression"><span class="token number">202</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">INTERNAL_SYSCALL</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">INTERNAL_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression">internal_syscall</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">nr</span> <span class="token punctuation">(</span><span class="token function">SYS_ify</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">SYS_ify</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYS_ify</span><span class="token expression"><span class="token punctuation">(</span>syscall_name<span class="token punctuation">)</span>	__NR_</span><span class="token punctuation">##</span><span class="token expression">syscall_name</span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">internal_syscall4</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">internal_syscall4</span><span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">,</span> arg4<span class="token punctuation">)</span>		</span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>									</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> resultvar<span class="token punctuation">;</span>					</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> __arg4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> __arg3<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> __arg2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> __arg1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> _a4<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;r10&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg4<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> _a3<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdx&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg3<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> _a2<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rsi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg2<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> _a1<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg1<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span>							</span><span class="token punctuation">\\</span>
    <span class="token string">&quot;syscall\\n\\t&quot;</span>							<span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;=a&quot;</span> <span class="token expression"><span class="token punctuation">(</span>resultvar<span class="token punctuation">)</span>							</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;0&quot;</span> <span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a1<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a2<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a3<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a4<span class="token punctuation">)</span>		</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;memory&quot;</span><span class="token expression"><span class="token punctuation">,</span> REGISTERS_CLOBBERED_BY_SYSCALL<span class="token punctuation">)</span><span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span> resultvar<span class="token punctuation">;</span>						</span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sys_futex的函数原型如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_futex</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>uaddr<span class="token punctuation">,</span> <span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其作用是原子性的检查<strong>uaddr</strong>中计数器的值是否为<strong>val</strong>,如果是则让进程休眠，直到FUTEX_WAKE或者超时(time-out)。也就是把进程挂到uaddr相对应的等待队列上去。</p><p>这里实际上就是检查mutex的**__lock<strong>是否等于</strong>2**。</p><ul><li>如果不等于2，意味着，锁可能已经被释放，不需要将线程添加到sleep队列，sys_futex直接返回，重新尝试加锁。</li><li>如果等于2，则意味着用户态到内核段的这段时间内，锁的值没有发生变化，于是将线程添加到sleep队列，等待其他线程释放锁。</li></ul><p>glibc的mutex的加锁是用户态的原子操作和内核态sys_futex共同作用的结果，上述过程可以用下面这张流程图来概括：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/application-dev/mutex/glibc-mutex1.png" alt="glic-mutex" tabindex="0" loading="lazy"><figcaption>glic-mutex</figcaption></figure><h2 id="mutex的解锁过程" tabindex="-1"><a class="header-anchor" href="#mutex的解锁过程" aria-hidden="true">#</a> mutex的解锁过程</h2><p>同样从最简单的PTHREAD_MUTEX_TIMED_NP看起，其调用了lll_mutex_unlock_optimized方法进行unlock。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> PTHREAD_MUTEX_TIMED_NP<span class="token punctuation">)</span>
      <span class="token operator">==</span> PTHREAD_MUTEX_TIMED_NP<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* Always reset the owner field.  */</span>
    normal<span class="token operator">:</span>
      mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>decr<span class="token punctuation">)</span>
	<span class="token comment">/* One less user.  */</span>
	<span class="token operator">--</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__nusers<span class="token punctuation">;</span>

      <span class="token comment">/* Unlock.  */</span>
      <span class="token function">lll_mutex_unlock_optimized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>mutex_release<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lll_mutex_unlock_optimized是对单线程解锁进行优化的函数。如果是单线程，意味着没有竞争，则可以直接将锁的值__lock修改为0。如果是多线程，则调用lll_unlock方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">lll_mutex_unlock_optimized</span> <span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* The single-threaded optimization is only valid for private
     mutexes.  For process-shared mutexes, the mutex could be in a
     shared mapping, so synchronization with another process is needed
     even without any threads.  */</span>
  <span class="token keyword">int</span> private <span class="token operator">=</span> <span class="token function">PTHREAD_MUTEX_PSHARED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>private <span class="token operator">==</span> LLL_PRIVATE <span class="token operator">&amp;&amp;</span> SINGLE_THREAD_P<span class="token punctuation">)</span>
    mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">lll_unlock</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lll_unlock定义在<code>sysdeps/nptl/lowlevellock.h</code>中。这里调用atomic_exchange_rel原子性地将__futex与0进行交换，并将原始值存放在__oldval中。</p><p>如果__oldval小于等于1，意味着没有竞争，不需要唤醒其他线程。如果__oldval大于1，则意味着需要唤醒其他线程，这样就会调用__lll_lock_wake_private或__lll_lock_wake进行线程唤醒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__lll_unlock</span><span class="token expression"><span class="token punctuation">(</span>futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span>					</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>								</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>									</span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span>__futex <span class="token operator">=</span> <span class="token punctuation">(</span>futex<span class="token punctuation">)</span><span class="token punctuation">;</span>						</span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">int</span> __private <span class="token operator">=</span> <span class="token punctuation">(</span>private<span class="token punctuation">)</span><span class="token punctuation">;</span>						</span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">int</span> __oldval <span class="token operator">=</span> <span class="token function">atomic_exchange_rel</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>__oldval <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token punctuation">{</span>								</span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span> <span class="token punctuation">(</span>private<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>private<span class="token punctuation">)</span> <span class="token operator">==</span> LLL_PRIVATE<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
           <span class="token expression"><span class="token function">__lll_lock_wake_private</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">)</span><span class="token punctuation">;</span>                           </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token keyword">else</span>                                                           </span><span class="token punctuation">\\</span>
           <span class="token expression"><span class="token function">__lll_lock_wake</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">,</span> __private<span class="token punctuation">)</span><span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token punctuation">}</span>								</span><span class="token punctuation">\\</span>
   <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lll_unlock</span><span class="token expression"><span class="token punctuation">(</span>futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span>	</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">__lll_unlock</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>futex<span class="token punctuation">)</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span></span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__lll_lock_wake_private和__lll_lock_wake是相似的方法，其都将调用lll_futex_wake。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span>
<span class="token function">__lll_lock_wake_private</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>futex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">lll_futex_wake</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> LLL_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__lll_lock_wake_private<span class="token punctuation">)</span>

<span class="token keyword">void</span>
<span class="token function">__lll_lock_wake</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>futex<span class="token punctuation">,</span> <span class="token keyword">int</span> private<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">lll_futex_wake</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lll_futex_wake实际上也是对sys_futex系统调用的封装，其将传入FUTEX_WAKE参数以唤醒一个线程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Wake up up to NR waiters on FUTEXP.  */</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">lll_futex_wake</span><span class="token expression"><span class="token punctuation">(</span>futexp<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> private<span class="token punctuation">)</span>                             </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">lll_futex_syscall</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> futexp<span class="token punctuation">,</span>                                         </span><span class="token punctuation">\\</span>
		     <span class="token expression"><span class="token function">__lll_private_flag</span> <span class="token punctuation">(</span>FUTEX_WAKE<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">,</span> nr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">lll_futex_syscall</span><span class="token expression"><span class="token punctuation">(</span>nargs<span class="token punctuation">,</span> futexp<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>                                                                    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">int</span> __ret <span class="token operator">=</span> <span class="token function">INTERNAL_SYSCALL</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> nargs<span class="token punctuation">,</span> futexp<span class="token punctuation">,</span> op<span class="token punctuation">,</span> 	</span><span class="token punctuation">\\</span>
				       <span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">INTERNAL_SYSCALL_ERROR_P</span> <span class="token punctuation">(</span>__ret<span class="token punctuation">)</span><span class="token punctuation">)</span>         	</span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token operator">?</span> <span class="token operator">-</span><span class="token function">INTERNAL_SYSCALL_ERRNO</span> <span class="token punctuation">(</span>__ret<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     	</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">internal_syscall4</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">internal_syscall4</span><span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">,</span> arg4<span class="token punctuation">)</span>		</span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>									</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> resultvar<span class="token punctuation">;</span>					</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> __arg4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> __arg3<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> __arg2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> __arg1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> _a4<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;r10&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg4<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> _a3<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdx&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg3<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> _a2<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rsi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg2<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> _a1<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg1<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span>							</span><span class="token punctuation">\\</span>
    <span class="token string">&quot;syscall\\n\\t&quot;</span>							<span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;=a&quot;</span> <span class="token expression"><span class="token punctuation">(</span>resultvar<span class="token punctuation">)</span>							</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;0&quot;</span> <span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a1<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a2<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a3<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a4<span class="token punctuation">)</span>		</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;memory&quot;</span><span class="token expression"><span class="token punctuation">,</span> REGISTERS_CLOBBERED_BY_SYSCALL<span class="token punctuation">)</span><span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span> resultvar<span class="token punctuation">;</span>						</span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="glibc不同属性的mutex的实现" tabindex="-1"><a class="header-anchor" href="#glibc不同属性的mutex的实现" aria-hidden="true">#</a> glibc不同属性的mutex的实现</h2><p>上面的章节主要聚焦在PTHREAD_MUTEX_TIMED_NP的实现,下面将对不同属性的mutex的实现进行讲解。</p><h3 id="pthread-mutex-timed-np" tabindex="-1"><a class="header-anchor" href="#pthread-mutex-timed-np" aria-hidden="true">#</a> PTHREAD_MUTEX_TIMED_NP</h3><p>PTHREAD_MUTEX_TIMED_NP在上面已经有了大幅章节进行讲解，这里再回顾一下，其行为相对简单，直接调用LLL_MUTEX_LOCK_OPTIMIZED去竞争锁</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_likely</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> PTHREAD_MUTEX_TIMED_NP<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">FORCE_ELISION</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token keyword">goto</span> elision<span class="token punctuation">)</span><span class="token punctuation">;</span>
simple<span class="token operator">:</span>
    <span class="token comment">/* Normal mutex.  */</span>
    <span class="token function">LLL_MUTEX_LOCK_OPTIMIZED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pthread-mutex-recursive-np" tabindex="-1"><a class="header-anchor" href="#pthread-mutex-recursive-np" aria-hidden="true">#</a> PTHREAD_MUTEX_RECURSIVE_NP</h3><p>可重入锁意味着同一个线程可以对互斥锁加锁多次。下面是源码的实现部分。首先获取了线程的id，判断锁的owner的线程id和当前线程的id是否相等，如果相等则将锁的count值加1。如果锁的owner的线程id和当前线程的id不相等，则使用LLL_MUTEX_LOCK_OPTIMIZED进行加锁（这里就和普通锁一样了）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">PTHREAD_MUTEX_TYPE</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>
			     <span class="token operator">==</span> PTHREAD_MUTEX_RECURSIVE_NP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Recursive mutex.  */</span>
        <span class="token class-name">pid_t</span> id <span class="token operator">=</span> <span class="token function">THREAD_GETMEM</span> <span class="token punctuation">(</span>THREAD_SELF<span class="token punctuation">,</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Check whether we already hold the mutex.  */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">==</span> id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* Just bump the counter.  */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">/* Overflow of the counter.  */</span>
            <span class="token keyword">return</span> EAGAIN<span class="token punctuation">;</span>

            <span class="token operator">++</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__count<span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">LLL_MUTEX_LOCK_OPTIMIZED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assert</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pthread-mutex-adaptive-np" tabindex="-1"><a class="header-anchor" href="#pthread-mutex-adaptive-np" aria-hidden="true">#</a> PTHREAD_MUTEX_ADAPTIVE_NP</h3><p>自适应锁在没有加锁成功时，会进行自旋，当自旋超过一定次数时，将调用LLL_MUTEX_LOCK尝试加锁，加锁失败将睡眠。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">PTHREAD_MUTEX_TYPE</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>
			  <span class="token operator">==</span> PTHREAD_MUTEX_ADAPTIVE_NP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LLL_MUTEX_TRYLOCK</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	  <span class="token keyword">int</span> max_cnt <span class="token operator">=</span> <span class="token function">MIN</span> <span class="token punctuation">(</span><span class="token function">max_adaptive_count</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			     mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__spins <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token keyword">do</span>
	    <span class="token punctuation">{</span>
	      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token operator">++</span> <span class="token operator">&gt;=</span> max_cnt<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		  <span class="token function">LLL_MUTEX_LOCK</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
		  <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	      <span class="token function">atomic_spin_nop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
	  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">LLL_MUTEX_TRYLOCK</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__spins <span class="token operator">+=</span> <span class="token punctuation">(</span>cnt <span class="token operator">-</span> mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__spins<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
      <span class="token function">assert</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pthread-mutex-errorcheck-np" tabindex="-1"><a class="header-anchor" href="#pthread-mutex-errorcheck-np" aria-hidden="true">#</a> PTHREAD_MUTEX_ERRORCHECK_NP</h3><p>检错锁的作用是避免同一个线程对同一个互斥锁加锁多次导致死锁。这里就是获取了锁的owner的线程id，并于当前的线程id进行对比，如果相等，则返回EDEADLK错误。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
      pid_t id <span class="token operator">=</span> <span class="token function">THREAD_GETMEM</span> <span class="token punctuation">(</span>THREAD_SELF<span class="token punctuation">,</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">PTHREAD_MUTEX_TYPE</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token operator">==</span> PTHREAD_MUTEX_ERRORCHECK_NP<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* Check whether we already hold the mutex.  */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> EDEADLK<span class="token punctuation">;</span>
      <span class="token keyword">goto</span> simple<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文从glic源码去分析了互斥锁的底层实现原理，其实现包含了用户态到内核态的过程，利用了CAS技术和sys_futex系统调用。互斥锁也有多种属性，构成了普通锁/可重入锁/检错锁/自适应锁等类型，每种类型都有其各自的特性，开发时，需要结合场景选择合适的属性。</p>`,54);function d(v,_){const t=l("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("本文使用的源码是glibc-2.34版本，"),n("a",k,[s("http://mirror.keystealth.org/gnu/libc/glibc-2.34.tar.gz。"),c(t)])]),r])}const b=p(i,[["render",d],["__file","linux-glibc-mutex.html.vue"]]);export{b as default};
