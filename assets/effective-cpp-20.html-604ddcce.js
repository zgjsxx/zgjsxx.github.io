const n=JSON.parse('{"key":"v-0e823374","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-20.html","title":"effective c++ 20 传引用代替传值","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 20 传引用代替传值 本节，作者开始讨论引用。我们知道c语言已经有了指针，通过指针我们也就可以修改变量本身，而不是修改变量的副本（传值）， 那么在c++中又搞出来个引用， 那么其是不是有点重复？ 分析 我们知道在函数的传参中，如果传递的是指针， 那么就不可避免的要进行取地址和解引用，如下面的这段代码所示，就需要使用\\"&amp;\\"和\\"*\\"。这就可给我们的代码增加了一定的复杂性。其实c++引入引用也就是为了简化这种写法。 #include &lt;iostream&gt; void print(int* a) { *a = 4; std::cout &lt;&lt; *a &lt;&lt; std::endl; } int main() { int a = 3; print(&amp;a); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-20.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 20 传引用代替传值"}],["meta",{"property":"og:description","content":"effective c++ 20 传引用代替传值 本节，作者开始讨论引用。我们知道c语言已经有了指针，通过指针我们也就可以修改变量本身，而不是修改变量的副本（传值）， 那么在c++中又搞出来个引用， 那么其是不是有点重复？ 分析 我们知道在函数的传参中，如果传递的是指针， 那么就不可避免的要进行取地址和解引用，如下面的这段代码所示，就需要使用\\"&amp;\\"和\\"*\\"。这就可给我们的代码增加了一定的复杂性。其实c++引入引用也就是为了简化这种写法。 #include &lt;iostream&gt; void print(int* a) { *a = 4; std::cout &lt;&lt; *a &lt;&lt; std::endl; } int main() { int a = 3; print(&amp;a); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-22T03:11:33.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-22T03:11:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 20 传引用代替传值\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-22T03:11:33.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684725093000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":2.98,"words":893},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-20.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 20 传引用代替传值</h1>\\n<p>本节，作者开始讨论引用。我们知道c语言已经有了指针，通过指针我们也就可以修改变量本身，而不是修改变量的副本（传值）， 那么在c++中又搞出来个引用， 那么其是不是有点重复？</p>\\n<h2> 分析</h2>\\n<p>我们知道在函数的传参中，如果传递的是指针， 那么就不可避免的要进行取地址和解引用，如下面的这段代码所示，就需要使用\\"&amp;\\"和\\"*\\"。这就可给我们的代码增加了一定的复杂性。其实c++引入引用也就是为了简化这种写法。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> a<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token operator\\">*</span>a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>a <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
