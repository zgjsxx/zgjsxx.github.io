import{_ as n,V as s,W as a,a0 as p}from"./framework-9a29aaa0.js";const e={},t=p(`<h1 id="effective-c-29-为异常安全而努力是值得的" tabindex="-1"><a class="header-anchor" href="#effective-c-29-为异常安全而努力是值得的" aria-hidden="true">#</a> effective c++ 29 为异常安全而努力是值得的</h1><p>本节主要阐述了面对异常我们该做的事情。用数据库进行类比，数据库中有事务的概念，即要么都执行成功，要么都不执行。类比于异常，当异常发生时，我们最好要恢复到调用之前的状态。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>下面先看一个经典的错误案例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> pm<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//锁定pm所指的互斥器</span>
<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> pm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将互斥器解锁</span>

<span class="token keyword">class</span> <span class="token class-name">PrettyMenu</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">changeBackground</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> imgSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//取得互斥器</span>
        <span class="token keyword">delete</span> bgImage<span class="token punctuation">;</span> <span class="token comment">//删除旧图片</span>
        <span class="token operator">++</span>imageChanges<span class="token punctuation">;</span> <span class="token comment">//修改图像更改次数</span>
        bgImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//安装新的背景图片</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放互斥器</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Mutex mutex<span class="token punctuation">;</span>     <span class="token comment">//互斥器</span>
    Image<span class="token operator">*</span> bgImage<span class="token punctuation">;</span>  <span class="token comment">//目前使用的背景图片</span>
    <span class="token keyword">int</span> imageChanges<span class="token punctuation">;</span><span class="token comment">//图片被修改的次数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的changeBackground()成员函数不是&quot;异常安全的&quot;。 因为异常安全的函数应该有以下两种特性：</p><ul><li>1.不泄露任何资源：上述的代码如果new Image()操作导致异常，那么就永远不会调用unlock，那么互斥器将永远被锁住。因此该成员函数没有保证这一点</li><li>2.不允许数据破坏：如果new Image()操作导致异常，那么bgImage已经被删除了，而且imageChanges数量也被累加了，所以资源被改变了。但是该函数没有保证这一点</li></ul><p>我们知道了存在的问题。那么下面就谈论我们该如何解决这些问题。</p><p>首先看<strong>解决资源泄露</strong>的问题。</p><p>这个问题很容易解决，在条款13中讨论了如何以对象管理资源，条款14也介绍了自己设计一个名为Lock的类来管理互斥器，定义如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//初始化对象时锁住互斥器，对象释放时自动解除互斥器</span>
<span class="token keyword">class</span> <span class="token class-name">Lock</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">//获得资源</span>
    <span class="token keyword">explicit</span> <span class="token function">Lock</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> pm<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">mutexPtr</span><span class="token punctuation">(</span>pm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">lock</span><span class="token punctuation">(</span>mutexPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">//释放资源</span>
    <span class="token operator">~</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">unlock</span><span class="token punctuation">(</span>mutexPtr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Mutex <span class="token operator">*</span>mutexPtr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//重写修改PrettyMenu的成员函数</span>
<span class="token keyword">void</span> <span class="token class-name">PrettyMenu</span><span class="token double-colon punctuation">::</span><span class="token function">changeBackground</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> imgSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Lock <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将互斥器封装在类中进行管理</span>
    <span class="token keyword">delete</span> bgImage<span class="token punctuation">;</span> <span class="token comment">//删除旧图片</span>
    <span class="token operator">++</span>imageChanges<span class="token punctuation">;</span> <span class="token comment">//修改图像更改次数</span>
    bgImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//安装新的背景图片</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们RAII设计模式很好的解决资源泄漏的问题。</p><p>下面看如何<strong>解决数据破坏</strong>的问题。</p><p>上面介绍了资源泄漏的一般解决办法，现在来关注一下数据破坏的问题。在此之前我们先定义一些术语：</p><ul><li>1.基本承诺：如果异常被抛出，程序内的任何事物都应该保持在有效状态</li><li>2.强烈保证：如果程序抛出异常，程序状态不应该保证。调用这样的函数应该保证：如果函数成功就是完全成功；如果函数执行失败，程序会恢复到&quot;调用函数之前&quot;的状态</li><li>3.不抛掷保证：承诺绝不抛出异常，因为它们总是能够完成它们原先承诺的功能。</li></ul><p>C++提供两种异常说明：</p><ul><li>throw</li><li>noexcept</li></ul><p>虽然可以使用上面两种异常说明来显式说明函数不会抛出异常，但是如果函数抛出了异常还是允许的。</p><p>异常安全的代码必须提供上述三种保证之一，如果不是这样，那么代码就不是<strong>异常安全</strong>的。</p><p>对于<code>changeBackground()</code>函数而言，为了保证数据不被破坏，可以更改为下面的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">PrettyMenu</span> <span class="token punctuation">{</span>
<span class="token comment">//...</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span> bgImage<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//重写修改PrettyMenu的成员函数</span>
<span class="token keyword">void</span> <span class="token class-name">PrettyMenu</span><span class="token double-colon punctuation">::</span><span class="token function">changeBackground</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> imgSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Lock <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bgImage<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">++</span>imageChanges<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中我们使用智能指针来管理Image对象。重新排序changeBackground()函数内的语句顺序，使得更换图像之后才累加imageChanges 在changeBackground()函数内部不需要手动删除delete旧图像了，因为已经由智能指针自动管理删除了（在reset的内部被调用）。</p><p>通过上面的案例，我们知道了我们的代码需要做到是<strong>异常安全</strong>的。是不是听着很耳熟，更常听到的是<strong>线程安全的代码</strong>，这里又多了一个，哈哈。</p><p>那么异常安全有没有什么套路？</p><p>这里将介绍一个异常安全的套路： copy-and-sway。</p><p>copy and swap策略的原则是：为你打算修改的对象（原件）做一份副本，然后在副本身上做修改：</p><p>如果在副本的身上修改抛出了异常，那么原对象未改变状态。如果在副本的身上修改未抛出异常，那么就将修改过的副本与原对象进行置换（swap） pimpl idiom手法：</p><p>看下面的例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//将bgImage和imageChanges从PrettyMenu独立出来，封装到一个结构中</span>
<span class="token keyword">struct</span> <span class="token class-name">PMImpl</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>tr1<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span> bgImage<span class="token punctuation">;</span>
    <span class="token keyword">int</span> imageChanges
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">PrettyMenu</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>tr1<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>PMImpl<span class="token operator">&gt;</span> pImpl<span class="token punctuation">;</span> <span class="token comment">//创建一个该结构</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们重新修改changeBackground()函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">PrettyMenu</span><span class="token double-colon punctuation">::</span><span class="token function">changeBackground</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> imgSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span> <span class="token comment">//见条款25</span>

    Lock <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">//以pImpl为原件，创建一个副本，然后在副本上做修改</span>
    std<span class="token double-colon punctuation">::</span>tr1<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>PMImpl<span class="token operator">&gt;</span> <span class="token function">pNew</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">PMImpl</span><span class="token punctuation">(</span><span class="token operator">*</span>pImpl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pNew<span class="token operator">-&gt;</span>bgImage<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pNew<span class="token operator">-&gt;</span>imageChanges<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token comment">//如果上面副本的修改没有抛出异常，那么交换副本与原件</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>pImpl<span class="token punctuation">,</span> pNew<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知道确保对副本的修改没有异常之后，开始交换副本和原件。</p><p>这便是异常安全代码的一个固定套路，但是也要根据场景具体问题具体分析。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>异常安全函数，即便发生异常也不会泄露资源或者运行任何数据结构败坏。这样的函数区分为三种可能的保证: 基本型、强烈型、不抛异常型。</li><li>强烈保证往往能够以copy-and-swap实现，但强烈保证并非对所有函数都可实现或者具备现实意义。</li><li>函数提供的异常安全保证通常最高值等于其所调用之各个函数的异常安全保证中的最弱者。</li></ul>`,35),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","effective-cpp-29.html.vue"]]);export{k as default};
