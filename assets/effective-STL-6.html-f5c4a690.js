import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const e={},p=t(`<h1 id="effective-stl-06-警惕c-最令人恼怒的解析" tabindex="-1"><a class="header-anchor" href="#effective-stl-06-警惕c-最令人恼怒的解析" aria-hidden="true">#</a> effective STL-06 警惕C++最令人恼怒的解析</h1><p>假设有一个int文件，将这些int拷贝到一个list中</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ifstream <span class="token function">dataFile</span><span class="token punctuation">(</span><span class="token string">&quot;ints.dat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">istream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>dataFile<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">istream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//list&lt;int&gt; 是类型，声明名为data的函数</span>
<span class="token comment">//不要在参数内递临时构建对象再来传入，而是先构建，再传入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决办法是在数据声明中从使用匿名istream_iterator对象后退一步，仅仅给迭代器名字</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ifstream <span class="token function">dataFile</span><span class="token punctuation">(</span><span class="token string">&quot;ints.dat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dataBegin</span><span class="token punctuation">(</span>dataFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> dataEnd<span class="token punctuation">;</span><span class="token comment">//不能加括号，否则又是函数声明了</span>
list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">data</span><span class="token punctuation">(</span>dataBegin<span class="token punctuation">,</span> dataEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","effective-STL-6.html.vue"]]);export{u as default};
