const e=JSON.parse('{"key":"v-1d2b7397","path":"/posts/Program_language/cpp/cpp_virtual_destructor_with_override.html","title":"c++小技巧之为析构函数增加override签名","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"c++小技巧之为析构函数增加override签名 在有继承和多态的使用场景下，如果父类的析构函数没有添加virtual签名，那么在使用delete删除对象时，就不会调用父类的析构函数，这可能就会造成一些资源泄露。 例如下面的例子，当使用Base* b = new Derived();创建对象时，delete该对象不会调用Base类的析构函数。 注意，这个问题仅限于继承+多态组合的情况。如果你使用Derived *d = new Derived();创建对象，delete该对象时不会有问题。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_virtual_destructor_with_override.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++小技巧之为析构函数增加override签名"}],["meta",{"property":"og:description","content":"c++小技巧之为析构函数增加override签名 在有继承和多态的使用场景下，如果父类的析构函数没有添加virtual签名，那么在使用delete删除对象时，就不会调用父类的析构函数，这可能就会造成一些资源泄露。 例如下面的例子，当使用Base* b = new Derived();创建对象时，delete该对象不会调用Base类的析构函数。 注意，这个问题仅限于继承+多态组合的情况。如果你使用Derived *d = new Derived();创建对象，delete该对象时不会有问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-27T02:58:56.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-27T02:58:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++小技巧之为析构函数增加override签名\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-27T02:58:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1687834736000,"updatedTime":1687834736000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.25,"words":376},"filePathRelative":"posts/Program_language/cpp/cpp_virtual_destructor_with_override.md","localizedDate":"2023年6月27日","excerpt":"<h1> c++小技巧之为析构函数增加override签名</h1>\\n<p>在有<strong>继承</strong>和<strong>多态</strong>的使用场景下，如果父类的析构函数没有添加virtual签名，那么在使用delete删除对象时，就不会调用父类的析构函数，这可能就会造成一些资源泄露。</p>\\n<p>例如下面的例子，当使用<code>Base* b = new Derived();</code>创建对象时，delete该对象不会调用Base类的析构函数。</p>\\n<p>注意，这个问题仅限于继承+多态组合的情况。如果你使用<code>Derived *d = new Derived();</code>创建对象，delete该对象时不会有问题。</p>","autoDesc":true}');export{e as data};
