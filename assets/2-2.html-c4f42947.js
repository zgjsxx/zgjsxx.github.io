import{_ as t,V as s,W as l,X as e,Y as n}from"./framework-9a29aaa0.js";const o={},_=e("ul",null,[e("li",null,[e("a",{href:"#d%E9%94%81%E5%AD%98%E5%99%A8%E7%9A%84%E6%97%B6%E5%BA%8F"},"D锁存器的时序")])],-1),c=e("h1",{id:"d锁存器的时序",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#d锁存器的时序","aria-hidden":"true"},"#"),n(" D锁存器的时序")],-1),d=e("p",null,"逻辑系统中的时序由流水线结构维护。流水线由组合逻辑块与内存元素限定而成，如图2.3所示。流水线的主要目的是在同一时钟周期内处理多个数据包，并最大化数据吞吐量。",-1),a=e("p",null,"为了说明流水线的概念，图2.3展示的流水线结构中使用了锁存器作为内存元素。在每个锁存器的边界处，数据在时钟的高电平和低电平从一个组合逻辑传播到下一个组合逻辑。",-1),r=e("p",null,"图2.3底部显示了一个数据传输的时序图，该数据传输涉及一组从D1到D3的数据包在IN端口。第一个数据包D10在时钟的高电平阶段（1H周期）在节点A处保持其原始值。然后，D10通过T1阶段传播，并在时钟下降沿之前以修改后的形式D11安定在节点B处。类似地，节点C处的D11在时钟的低电平阶段保持其值，而其处理后的形式D12通过T2阶段传播，并在时钟上升沿之前到达节点D。这些数据在T3阶段进一步处理，并在时钟下降沿时转换为D13，于Cycle 2L周期时在OUT端口处可用。",-1),i=e("p",null,"同样地，接下来的两个数据包，D20和D30，也在随后的负时钟沿边沿被送入流水线。这两个数据都通过组合逻辑阶段T1、T2和T3传播，并分别在Cycle 3L和Cycle 4L的时钟下降沿时在OUT端口处可用。",-1),h=e("p",null,"根据图2.3中的时序图，所有三个数据包的总执行时间为四个时钟周期。如果我们在节点A和节点F之间移除所有的锁存器边界，并等待所有三个数据包D1、D2和D3通过三个组合逻辑阶段T1、T2和T3的总和处理，总执行时间将为3 x 1.5 = 4.5个时钟周期，因为每个组合逻辑阶段需要半个时钟周期来处理数据。因此，流水线技术可以优势地用于在更短的时间内处理数据并增加数据吞吐量。",-1),D=[_,c,d,a,r,i,h];function u(T,f){return s(),l("div",null,D)}const E=t(o,[["render",u],["__file","2-2.html.vue"]]);export{E as default};
