const n=JSON.parse('{"key":"v-2f59fa26","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-31.html","title":"effective c++ 31 文件间的编译依存关系降低至最低","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 31 文件间的编译依存关系降低至最低 本文中介绍了两种接口与实现分离的两种方法。本文的实用性非常强，本文介绍的pImpl方法在实际项目中使用频率非常高。 Handle classes(pImpl设计) 常见的pImpl代码格式如下所示： 由于满足了封装性，所以Impl中的数据可以是public的，因此可以使用struct来声明Impl。 #include &lt;string&gt; #include &lt;iostream&gt; #include &lt;memory&gt; struct Address { public: \\tAddress(std::string address):address_(address){} public: \\tstd::string getAddress() const{ \\t\\treturn address_; \\t} private: \\tstd::string address_; }; struct Date { public: \\tDate(std::string date):date_(date){} public: \\tstd::string getDate() const{ \\t\\treturn date_; \\t} private: \\tstd::string date_; }; class Person { public: \\tPerson(); \\tPerson(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr); \\tstd::string name() const; \\tstd::string birthDate() const; \\tstd::string address() const; private: \\t// ptr to implementation (Item13) \\tstruct Impl; \\tstd::shared_ptr&lt;Impl&gt; pImpl; }; struct Person::Impl { \\tImpl(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr); \\tstd::string name() const{return theName;} \\tstd::string birthDate() const{ return theBirthDate.getDate();}; \\tstd::string address() const{return theAddress.getAddress();}; \\tstd::string theName;\\t// implementation detail \\tDate theBirthDate;\\t\\t// implementation detail \\tAddress theAddress;\\t\\t// implementation detail\\t }; Person::Impl::Impl(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr) : \\ttheName(name), theBirthDate(birthday), theAddress(addr) { } Person::Person(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr) : \\tpImpl(new Impl(name, birthday, addr)) { } std::string Person::name() const { \\treturn pImpl-&gt;name(); } std::string Person::birthDate() const { \\treturn pImpl-&gt;birthDate(); } std::string Person::address() const { \\treturn pImpl-&gt;address(); } int main() { \\tDate d(\\"2022-9-10\\"); \\tAddress addr(\\"nanjing\\"); \\tPerson p(\\"zhangsan\\", d, addr); \\tstd::cout &lt;&lt; p.name() &lt;&lt; \\" \\" &lt;&lt; p.birthDate() &lt;&lt; \\" \\" &lt;&lt; p.address() &lt;&lt; std::endl; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-31.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 31 文件间的编译依存关系降低至最低"}],["meta",{"property":"og:description","content":"effective c++ 31 文件间的编译依存关系降低至最低 本文中介绍了两种接口与实现分离的两种方法。本文的实用性非常强，本文介绍的pImpl方法在实际项目中使用频率非常高。 Handle classes(pImpl设计) 常见的pImpl代码格式如下所示： 由于满足了封装性，所以Impl中的数据可以是public的，因此可以使用struct来声明Impl。 #include &lt;string&gt; #include &lt;iostream&gt; #include &lt;memory&gt; struct Address { public: \\tAddress(std::string address):address_(address){} public: \\tstd::string getAddress() const{ \\t\\treturn address_; \\t} private: \\tstd::string address_; }; struct Date { public: \\tDate(std::string date):date_(date){} public: \\tstd::string getDate() const{ \\t\\treturn date_; \\t} private: \\tstd::string date_; }; class Person { public: \\tPerson(); \\tPerson(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr); \\tstd::string name() const; \\tstd::string birthDate() const; \\tstd::string address() const; private: \\t// ptr to implementation (Item13) \\tstruct Impl; \\tstd::shared_ptr&lt;Impl&gt; pImpl; }; struct Person::Impl { \\tImpl(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr); \\tstd::string name() const{return theName;} \\tstd::string birthDate() const{ return theBirthDate.getDate();}; \\tstd::string address() const{return theAddress.getAddress();}; \\tstd::string theName;\\t// implementation detail \\tDate theBirthDate;\\t\\t// implementation detail \\tAddress theAddress;\\t\\t// implementation detail\\t }; Person::Impl::Impl(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr) : \\ttheName(name), theBirthDate(birthday), theAddress(addr) { } Person::Person(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr) : \\tpImpl(new Impl(name, birthday, addr)) { } std::string Person::name() const { \\treturn pImpl-&gt;name(); } std::string Person::birthDate() const { \\treturn pImpl-&gt;birthDate(); } std::string Person::address() const { \\treturn pImpl-&gt;address(); } int main() { \\tDate d(\\"2022-9-10\\"); \\tAddress addr(\\"nanjing\\"); \\tPerson p(\\"zhangsan\\", d, addr); \\tstd::cout &lt;&lt; p.name() &lt;&lt; \\" \\" &lt;&lt; p.birthDate() &lt;&lt; \\" \\" &lt;&lt; p.address() &lt;&lt; std::endl; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-23T02:23:31.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-23T02:23:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 31 文件间的编译依存关系降低至最低\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-23T02:23:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Handle classes(pImpl设计)","slug":"handle-classes-pimpl设计","link":"#handle-classes-pimpl设计","children":[]},{"level":2,"title":"Interface classes","slug":"interface-classes","link":"#interface-classes","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684808611000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":2.13,"words":639},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-31.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 31 文件间的编译依存关系降低至最低</h1>\\n<p>本文中介绍了两种接口与实现分离的两种方法。本文的实用性非常强，本文介绍的pImpl方法在实际项目中使用频率非常高。</p>\\n<h2> Handle classes(pImpl设计)</h2>\\n<p>常见的pImpl代码格式如下所示：</p>\\n<p>由于满足了封装性，所以Impl中的数据可以是public的，因此可以使用struct来声明Impl。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;memory&gt;</span></span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Address</span> \\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Address</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>string address<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">address_</span><span class=\\"token punctuation\\">(</span>address<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">getAddress</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> address_<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string address_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Date</span> \\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Date</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>string date<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">date_</span><span class=\\"token punctuation\\">(</span>date<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">getDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> date_<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string date_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&amp;</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> birthday<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Address<span class=\\"token operator\\">&amp;</span> addr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">birthDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">address</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// ptr to implementation (Item13)</span>\\n\\t<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Impl</span><span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>shared_ptr<span class=\\"token operator\\">&lt;</span>Impl<span class=\\"token operator\\">&gt;</span> pImpl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Person</span><span class=\\"token operator\\">:</span><span class=\\"token base-clause\\"><span class=\\"token operator\\">:</span><span class=\\"token class-name\\">Impl</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">Impl</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&amp;</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> birthday<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Address<span class=\\"token operator\\">&amp;</span> addr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">return</span> theName<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">birthDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">return</span> theBirthDate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">address</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">return</span> theAddress<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAddress</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string theName<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">// implementation detail</span>\\n\\tDate theBirthDate<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// implementation detail</span>\\n\\tAddress theAddress<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// implementation detail\\t</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nPerson<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token class-name\\">Impl</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">Impl</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&amp;</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> birthday<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Address<span class=\\"token operator\\">&amp;</span> addr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">theName</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">theBirthDate</span><span class=\\"token punctuation\\">(</span>birthday<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">theAddress</span><span class=\\"token punctuation\\">(</span>addr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token class-name\\">Person</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&amp;</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Date<span class=\\"token operator\\">&amp;</span> birthday<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Address<span class=\\"token operator\\">&amp;</span> addr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">pImpl</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Impl</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">,</span> birthday<span class=\\"token punctuation\\">,</span> addr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token class-name\\">Person</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> pImpl<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\nstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token class-name\\">Person</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">birthDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> pImpl<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">birthDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\nstd<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token class-name\\">Person</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">address</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> pImpl<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">address</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\tDate <span class=\\"token function\\">d</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"2022-9-10\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tAddress <span class=\\"token function\\">addr</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"nanjing\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tPerson <span class=\\"token function\\">p</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"zhangsan\\"</span><span class=\\"token punctuation\\">,</span> d<span class=\\"token punctuation\\">,</span> addr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">birthDate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">address</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
