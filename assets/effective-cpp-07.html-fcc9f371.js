const n=JSON.parse('{"key":"v-1860aaef","path":"/posts/Program_language/cpp/effective-cpp-07.html","title":"effective c++ 07 多态基类析构函数需要声明为virtual的","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 07 多态基类析构函数需要声明为virtual的 本章节主要讲解了c++中涉及多态时的一个很容易犯错误的点。也是面试题常问的点。 分析 涉及多态时，Base类需要在析构函数上加上virtual。 #include &lt;iostream&gt; #include &lt;memory&gt; class Base { public: \\tBase() {} \\tvirtual ~Base() {std::cout &lt;&lt; \\"~Base\\" &lt;&lt; std::endl;} }; class Derived : public Base { public: \\tDerived(){}; \\t~Derived(){std::cout &lt;&lt; \\"~Derived\\" &lt;&lt; std::endl;} }; int main() { \\t{ \\t\\tBase* b = new Derived(); \\t\\tdelete b; \\t} \\t{ \\t\\tDerived* b = new Derived(); \\t\\tdelete b;\\t\\t \\t} }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp-07.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 07 多态基类析构函数需要声明为virtual的"}],["meta",{"property":"og:description","content":"effective c++ 07 多态基类析构函数需要声明为virtual的 本章节主要讲解了c++中涉及多态时的一个很容易犯错误的点。也是面试题常问的点。 分析 涉及多态时，Base类需要在析构函数上加上virtual。 #include &lt;iostream&gt; #include &lt;memory&gt; class Base { public: \\tBase() {} \\tvirtual ~Base() {std::cout &lt;&lt; \\"~Base\\" &lt;&lt; std::endl;} }; class Derived : public Base { public: \\tDerived(){}; \\t~Derived(){std::cout &lt;&lt; \\"~Derived\\" &lt;&lt; std::endl;} }; int main() { \\t{ \\t\\tBase* b = new Derived(); \\t\\tdelete b; \\t} \\t{ \\t\\tDerived* b = new Derived(); \\t\\tdelete b;\\t\\t \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T02:41:59.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-11T02:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 07 多态基类析构函数需要声明为virtual的\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T02:41:59.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683471645000,"updatedTime":1683772919000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":0.69,"words":207},"filePathRelative":"posts/Program_language/cpp/effective-cpp-07.md","localizedDate":"2023年5月7日","excerpt":"<h1> effective c++ 07 多态基类析构函数需要声明为virtual的</h1>\\n<p>本章节主要讲解了c++中涉及多态时的一个很容易犯错误的点。也是面试题常问的点。</p>\\n<h2> 分析</h2>\\n<p>涉及多态时，Base类需要在析构函数上加上virtual。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;memory&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Base</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token operator\\">~</span><span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"~Base\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Derived</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Base</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Derived</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token operator\\">~</span><span class=\\"token function\\">Derived</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"~Derived\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tBase<span class=\\"token operator\\">*</span> b <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Derived</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">delete</span> b<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tDerived<span class=\\"token operator\\">*</span> b <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Derived</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">delete</span> b<span class=\\"token punctuation\\">;</span>\\t\\t\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
