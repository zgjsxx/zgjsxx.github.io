const n=JSON.parse(`{"key":"v-0314921b","path":"/posts/Linux/why-invalid-pointor-cause-crash.html","title":"为什么野指针会导致进程crash?","lang":"zh-CN","frontmatter":{"title":"为什么野指针会导致进程crash?","category":["Linux"],"description":"为什么野指针会导致进程crash SIGSEGV： SIG 是信号名的通用前缀， SEGV 是segmentation violation，也就是存储器区段错误。 free较大的内存块后,再试图访问该内存 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; int main () { char* a = NULL; a = (char*)malloc(130*1024); a[0] = 'a'; printf (\\"%c\\\\n\\", a[0]); free(a); printf (\\"%c\\\\n\\", a[0]); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/why-invalid-pointor-cause-crash.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"为什么野指针会导致进程crash?"}],["meta",{"property":"og:description","content":"为什么野指针会导致进程crash SIGSEGV： SIG 是信号名的通用前缀， SEGV 是segmentation violation，也就是存储器区段错误。 free较大的内存块后,再试图访问该内存 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; int main () { char* a = NULL; a = (char*)malloc(130*1024); a[0] = 'a'; printf (\\"%c\\\\n\\", a[0]); free(a); printf (\\"%c\\\\n\\", a[0]); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-16T06:55:02.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-16T06:55:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么野指针会导致进程crash?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-16T06:55:02.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1673852102000,"updatedTime":1673852102000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.75,"words":226},"filePathRelative":"posts/Linux/why-invalid-pointor-cause-crash.md","localizedDate":"2023年1月16日","excerpt":"<h1> 为什么野指针会导致进程crash</h1>\\n<p>SIGSEGV： SIG 是信号名的通用前缀， SEGV 是segmentation violation，也就是存储器区段错误。</p>\\n<p><strong>free较大的内存块后,再试图访问该内存</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdlib.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;unistd.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> a <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span>\\n    a <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">130</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'a'</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">printf</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%c\\\\n\\"</span><span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">printf</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%c\\\\n\\"</span><span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
