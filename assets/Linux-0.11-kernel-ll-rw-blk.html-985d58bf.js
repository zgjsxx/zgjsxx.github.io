import{_ as t,V as p,W as o,X as n,Y as s,$ as c,a0 as a,F as l}from"./framework-c954d91f.js";const i={},u=a(`<h1 id="linux-0-11-kernel目录ll-rw-blk-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录ll-rw-blk-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录ll_rw_blk.c详解</h1><h2 id="lock-buffer" tabindex="-1"><a class="header-anchor" href="#lock-buffer" aria-hidden="true">#</a> lock_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">lock_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是锁定指定的缓冲块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span><span class="token comment">//如果缓冲区已被锁定就睡眠，一直到缓冲区解锁</span>
    <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bh<span class="token operator">-&gt;</span>b_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_lock<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//立即锁定缓冲区</span>
<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unlock-buffer" tabindex="-1"><a class="header-anchor" href="#unlock-buffer" aria-hidden="true">#</a> unlock_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是解锁指定的缓冲块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span><span class="token comment">//如果该缓冲区没有加锁，则打印出错信息</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;ll_rw_block.c: buffer not locked\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//对缓冲区解锁</span>
<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bh<span class="token operator">-&gt;</span>b_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒等待该缓冲区的任务。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-request" tabindex="-1"><a class="header-anchor" href="#add-request" aria-hidden="true">#</a> add_request</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add_request</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blk_dev_struct</span> <span class="token operator">*</span> dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将块设备读写请求插入到电梯队列中。</p><p>如果当前设备的请求为空，就将入参中的请求作为设备电梯队列的头节点。并且立即调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> dev<span class="token operator">-&gt;</span>current_request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dev<span class="token operator">-&gt;</span>current_request <span class="token operator">=</span> req<span class="token punctuation">;</span>
    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>request_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IN_ORDER</span><span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd<span class="token operator">&lt;</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd<span class="token operator">==</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">&amp;&amp;</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">==</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">&amp;&amp;</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sector <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码是比较难懂的，可以使用if-else来帮助理解</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">inorder</span><span class="token punctuation">(</span>request <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> request <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>cmd <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>cmd<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>cmd <span class="token operator">==</span> s2<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>dev <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>dev<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>dev <span class="token operator">==</span> s2<span class="token punctuation">.</span>dev<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>sector <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>sector<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//s1.sector &gt; s2.sector</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//s1.dev &gt; s2.dev</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//s1.cmd &gt; s2.cmd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>展开上面的if-else结构逻辑就清晰了很多，IN_ORDER实际上就是一次对操作类型，设备号， 扇区号作比较， 并且操作类型优先级大于设备号，设备号优先级大于扇区号。</p><p>对于操作类型而言，读操作优先级大于写操作。对于设备号而言，设备号小的设备优先级大于设备号大的设备的优先级。对于扇区而言，扇区序号小的扇区优先级高于扇区序号大的扇区。</p>`,19),r={href:"https://blog.csdn.net/suppercoder/article/details/19619777",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="make-request" tabindex="-1"><a class="header-anchor" href="#make-request" aria-hidden="true">#</a> make_request</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">make_request</span><span class="token punctuation">(</span><span class="token keyword">int</span> major<span class="token punctuation">,</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是创建请求项并插入请求队列中。</p><p>首先判断命令是否READA或者是WRITEA。READA代表预读取，WRITEA代表预写入。 所以当命令是预读取或者是预写入，如果bh块被锁，那么就放弃，直接返回。如果bh块没有被锁，那么就当作普通的READ和WRITE。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> req<span class="token punctuation">;</span>
	<span class="token keyword">int</span> rw_ahead<span class="token punctuation">;</span>

<span class="token comment">/* WRITEA/READA is special case - it is not really needed, so if the */</span>
<span class="token comment">/* buffer is locked, we just forget about it, else it&#39;s a normal read */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rw_ahead <span class="token operator">=</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READA <span class="token operator">||</span> rw <span class="token operator">==</span> WRITEA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READA<span class="token punctuation">)</span>
			rw <span class="token operator">=</span> READ<span class="token punctuation">;</span>
		<span class="token keyword">else</span>
			rw <span class="token operator">=</span> WRITE<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果命令不是读或者写，那么就是一个致命错误，直接通过panic抛出错误。对命令校验之后，就去锁定该数据块。如果命令是写操作，但是该数据块并没有脏数据，则没有必要去写块设备，就可以对bh块进行解锁。除此以外，如果命令是读操作，但是该bh块中的内容已经是最新的，也没有必要去读块设备，就可以对bh块进行解锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>rw<span class="token operator">!=</span>READ <span class="token operator">&amp;&amp;</span> rw<span class="token operator">!=</span>WRITE<span class="token punctuation">)</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Bad block dev command, must be R/W/RA/WA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lock_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rw <span class="token operator">==</span> WRITE <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_dirt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READ <span class="token operator">&amp;&amp;</span> bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">unlock_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面需要从request数组中寻找一个位置来创建该请求。对于读请求而言，将会从数组的尾部开始搜索。对于写请求而言，将会从数组的2/3处开始搜索。 如果找到了位置，那么就开始进行创建，如果没有找到位置，就sleep_on进行等待。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READ<span class="token punctuation">)</span>
		req <span class="token operator">=</span> request<span class="token operator">+</span>NR_REQUEST<span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		req <span class="token operator">=</span> request<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>NR_REQUEST<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* find an empty request */</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>req <span class="token operator">&gt;=</span> request<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>dev<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token comment">/* if none found, sleep on new requests: check for rw_ahead */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>req <span class="token operator">&lt;</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>rw_ahead<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">unlock_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_for_request<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当找到该位置时，就在该位置上进行构建请求。构建完之后，调用add_request插入到电梯队列中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* fill up the request-info, and add it to the queue */</span>
	req<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>cmd <span class="token operator">=</span> rw<span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>errors<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>sector <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_blocknr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>nr_sectors <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>buffer <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>waiting <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>bh <span class="token operator">=</span> bh<span class="token punctuation">;</span>
	req<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">add_request</span><span class="token punctuation">(</span>major<span class="token operator">+</span>blk_dev<span class="token punctuation">,</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ll-rw-block" tabindex="-1"><a class="header-anchor" href="#ll-rw-block" aria-hidden="true">#</a> ll_rw_block</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ll_rw_block</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是读写数据块。</p><p>下面一段代码用于对bh块对应的设备做相应的校验。如果主设备号不存在，或者该设备对应的请求操作函数不存在，就显示出错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>major<span class="token operator">=</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> NR_BLK_DEV <span class="token operator">||</span>
<span class="token operator">!</span><span class="token punctuation">(</span>blk_dev<span class="token punctuation">[</span>major<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to read nonexistent block-device\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果校验没有问题就调用make_request建立块设备读写请求。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">make_request</span><span class="token punctuation">(</span>major<span class="token punctuation">,</span>rw<span class="token punctuation">,</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="blk-dev-init" tabindex="-1"><a class="header-anchor" href="#blk-dev-init" aria-hidden="true">#</a> blk_dev_init</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">blk_dev_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是初始化块设备。</p><p>遍历request数组，对request数组中每一项的dev设置为-1， 对next指针设置为NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_REQUEST <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dev <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    request<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function d(v,m){const e=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("参考: "),n("a",r,[s("https://blog.csdn.net/suppercoder/article/details/19619777"),c(e)])]),k])}const g=t(i,[["render",d],["__file","Linux-0.11-kernel-ll-rw-blk.html.vue"]]);export{g as default};
