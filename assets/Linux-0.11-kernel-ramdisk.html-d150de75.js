import{_ as n,V as s,W as a,a0 as t}from"./framework-9a29aaa0.js";const p={},e=t(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86ramdiskc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录进程管理ramdisk.c详解</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#rd_init">rd_init</a></li><li><a href="#do_rd_request">do_rd_request</a></li><li><a href="#rd_load">rd_load</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录进程管理ramdisk-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录进程管理ramdisk-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录进程管理ramdisk.c详解</h1><p>ramdisk.c是内存虚拟盘的驱动程序。虚拟盘设备是一种利用物理内存来模拟实际磁盘存储数据的方式。其目的是提高对磁盘数据的读写操作速度。除了占用一些宝贵的内存资源外，其主要缺点是一旦系统崩溃或关闭，虚拟盘中的所有数据将全部消失。因此虚拟盘中通常存放一些系统命令等常用工具程序或临时数据，而非重要的输入文档。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="rd-init" tabindex="-1"><a class="header-anchor" href="#rd-init" aria-hidden="true">#</a> rd_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">rd_init</span><span class="token punctuation">(</span><span class="token keyword">long</span> mem_start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法的作用是返回内存虚拟盘ramdisk所需要的内存量。</p><p>首先设置设备的<code>request_fn</code>为<code>do_rd_request</code>。进而设置了虚拟判断起始地址和长度。参数在main.c中传递。对于16M系统，起始地址是4MB。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn <span class="token operator">=</span> DEVICE_REQUEST<span class="token punctuation">;</span>
	rd_start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> mem_start<span class="token punctuation">;</span>
	rd_length <span class="token operator">=</span> length<span class="token punctuation">;</span>
	cp <span class="token operator">=</span> rd_start<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来将虚拟盘的区域进行清零。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-rd-request" tabindex="-1"><a class="header-anchor" href="#do-rd-request" aria-hidden="true">#</a> do_rd_request</h3><h3 id="rd-load" tabindex="-1"><a class="header-anchor" href="#rd-load" aria-hidden="true">#</a> rd_load</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rd_load</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是尝试把根文件系统加载到虚拟盘中。其调用关系如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── sys_setup
  └── rd_load
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在编译Linux-0.11内核源代码时，在配置文件中定义了RAMDISK的大小值，则内核代码在引导并初始化RAMDISK区域后就会首先尝试检测启动盘上的第256磁盘块，开始处是否存在一个根文件系统。</p><p>首先，检查系统中是否存在虚拟盘，如果<code>rd_length</code>长度为0，则返回。如果根文件系统不是软盘，则也退出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rd_length<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Ram disk: %d bytes, starting at 0x%x\\n&quot;</span><span class="token punctuation">,</span> rd_length<span class="token punctuation">,</span>
		<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> rd_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来读根文件系统的基本参数。即读软盘块256+1，256和256+2。 这里block+1指定的是超级块。检查其魔数是否是期望的，如果不是，则代表软盘上没有跟文件系统。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>block<span class="token punctuation">,</span>block<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Disk error while looking for ramdisk!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>s_magic <span class="token operator">!=</span> SUPER_MAGIC<span class="token punctuation">)</span>
		<span class="token comment">/* No ram disk image present, assume normal floppy boot */</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们试图把整个根文件系统读入到内存虚拟盘中。对于一个文件系统而言，其超级块结构的<code>s_nzones</code>字段中保存者总逻辑块数。一个逻辑块中含有的数据块由字段<code>s_log_zone_size</code>指定。</p><p>这里主要判断文件系统中的数据块总数是否大于内存虚拟盘所能容纳的块数的情况，如果是，则不能执行加载操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	nblocks <span class="token operator">=</span> s<span class="token punctuation">.</span>s_nzones <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>s_log_zone_size<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>nblocks <span class="token operator">&gt;</span> <span class="token punctuation">(</span>rd_length <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Ram disk image too big!  (%d blocks, %d avail)\\n&quot;</span><span class="token punctuation">,</span> 
			nblocks<span class="token punctuation">,</span> rd_length <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果虚拟盘可以容纳的下文件系统的总的数据块。则循环将磁盘上的跟文件系统映像文件加载到虚拟盘上。</p><p>如果需要加载的盘块数大于2块，则使用<code>breada</code>进行预读取。这里的读取过程并不复杂，就是一个循环的过程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	cp <span class="token operator">=</span> rd_start<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>nblocks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nblocks <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> 
			bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span> block<span class="token punctuation">,</span> block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> block<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span>
			bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;I/O error on block %d, aborting load\\n&quot;</span><span class="token punctuation">,</span> 
				block<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\010\\010\\010\\010\\010%4dk&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		cp <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">;</span>
		block<span class="token operator">++</span><span class="token punctuation">;</span>
		nblocks<span class="token operator">--</span><span class="token punctuation">;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这里打印时用到了退格<code>\\010</code>，因为前面的打印中使用了占位符<code>0000k</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Loading %d bytes into ram disk... 0000k&quot;</span><span class="token punctuation">,</span> 
		nblocks <span class="token operator">&lt;&lt;</span> BLOCK_SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\010\\010\\010\\010\\010%4dk&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当boot盘中从256盘块开始的整个根文件系统加载完毕之后，我们显示done，并将目前的根文件系统设备号修改为<code>0x0101</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\010\\010\\010\\010\\010done \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ROOT_DEV<span class="token operator">=</span><span class="token number">0x0101</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,31),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-kernel-ramdisk.html.vue"]]);export{r as default};
