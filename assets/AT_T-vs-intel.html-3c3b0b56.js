import{_ as e,V as a,W as d,a0 as i}from"./framework-9a29aaa0.js";const s={},l=i(`<ul><li><a href="#att%E5%92%8Cintel%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">AT&amp;T和Intel汇编语法有什么不同</a><ul><li><a href="#%E5%8E%9F%E6%93%8D%E4%BD%9C%E6%95%B0%E5%92%8C%E7%9B%AE%E7%9A%84%E6%93%8D%E4%BD%9C%E6%95%B0%E7%9A%84%E9%A1%BA%E5%BA%8F">原操作数和目的操作数的顺序</a></li><li><a href="#%E6%B3%A8%E9%87%8A%E8%AF%AD%E5%8F%A5%E4%B8%8D%E5%90%8C">注释语句不同</a></li><li><a href="#%E7%AB%8B%E5%8D%B3%E6%95%B0%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C">立即数写法不同</a></li><li><a href="#%E5%8F%96%E5%9D%80%E6%96%B9%E5%BC%8F%E4%B8%8D%E5%90%8C">取址方式不同</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E5%90%8E%E7%BC%80">命令后缀</a></li></ul></li></ul><h1 id="at-t和intel汇编语法有什么不同" tabindex="-1"><a class="header-anchor" href="#at-t和intel汇编语法有什么不同" aria-hidden="true">#</a> AT&amp;T和Intel汇编语法有什么不同</h1><h2 id="原操作数和目的操作数的顺序" tabindex="-1"><a class="header-anchor" href="#原操作数和目的操作数的顺序" aria-hidden="true">#</a> 原操作数和目的操作数的顺序</h2><p>Intel语法先写目标操作数，再写源操作数，AT&amp;T语法先写源操作数，再写目标操作数。</p><p>Intel：</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>mov ebp, esp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>AT&amp;T:</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>mov %esp, %ebp 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="注释语句不同" tabindex="-1"><a class="header-anchor" href="#注释语句不同" aria-hidden="true">#</a> 注释语句不同</h2><p>Intel：</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>mov ebp, esp ;mov
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>AT&amp;T:</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>movl %esp, %ebp //mov 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="立即数写法不同" tabindex="-1"><a class="header-anchor" href="#立即数写法不同" aria-hidden="true">#</a> 立即数写法不同</h2><p>Intel：</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>mov ebp, 0x100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>AT&amp;T:</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>movl $0x100, %ebp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="取址方式不同" tabindex="-1"><a class="header-anchor" href="#取址方式不同" aria-hidden="true">#</a> 取址方式不同</h2><table><thead><tr><th>Intel</th><th>AT&amp;T</th></tr></thead><tbody><tr><td>[base + reg * scale + displacement]</td><td>displacement(base, index, scale)</td></tr></tbody></table><p>Intel:</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>mov eax, [0100]
mov eax, [ESI]
mov eax, [EBP-8]
mov eax, [EBX*4+0100]
mov eax, [EDX+EBX*4+8]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AT&amp;T:</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>movl           0x0100, %eax
movl           (%esi), %eax
movl         -8(%ebp), %eax
movl  0x0100(,%ebx,4), %eax
movl 0x8(%edx,%ebx,4), %eax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命令后缀" tabindex="-1"><a class="header-anchor" href="#命令后缀" aria-hidden="true">#</a> 命令后缀</h2><p>AT&amp;T语法中命令存在后缀，后缀可以表示操作数的大小。&quot;l&quot;代表long，即4个字节， &quot;w&quot;代表word， 2个字节， &quot;b&quot;代表字节。</p><p>Intel语法中有类似的符号，byte ptr代表一个字节， word ptr代表一个字， dword ptr代表双字。</p><p>下面是详细的例子：</p><table><thead><tr><th>Intel</th><th>AT&amp;T</th></tr></thead><tbody><tr><td>mov al,bl<br>mov ax，bx<br> mov eax，ebx<br>mov eax， dword ptr [ebx]</td><td>movb %bl， %al<br>movw %bx， %ax<br>movl %ebx， %eax<br>movl (%ebx), %eax</td></tr></tbody></table>`,29),n=[l];function r(t,m){return a(),d("div",null,n)}const c=e(s,[["render",r],["__file","AT_T-vs-intel.html.vue"]]);export{c as default};
