import{_ as s,V as n,W as a,a0 as e}from"./framework-9a29aaa0.js";const p={},t=e(`<h1 id="深入了解got-plt和动态链接" tabindex="-1"><a class="header-anchor" href="#深入了解got-plt和动态链接" aria-hidden="true">#</a> 深入了解GOT,PLT和动态链接</h1><p>我们使用一个简单的例子来了解动态链接库的链接过程，以及在这个过程中使用到的GOT和PLT的作用是什么。</p><h2 id="文件准备" tabindex="-1"><a class="header-anchor" href="#文件准备" aria-hidden="true">#</a> 文件准备</h2><p>代码结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@localhost test]# tree .
.
├── main.c
└── symbol.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>symbol.c的内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// symbol.c</span>
<span class="token keyword">int</span> my_var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下脚本进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span> <span class="token parameter variable">-masm</span><span class="token operator">=</span>intel <span class="token parameter variable">-shared</span> <span class="token parameter variable">-fPIC</span> symbol.c <span class="token parameter variable">-o</span> libsymbol.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果编译不成功，使用如下命令安装32位的版本的c/c++库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> glibc-devel.i686
yum <span class="token function">install</span> libstdc++-devel.i686
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个文件是main.c, 调用该动态链接库，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// main.c</span>
<span class="token keyword">int</span> var <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> my_var<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    a <span class="token operator">=</span> var<span class="token punctuation">;</span>
    b <span class="token operator">=</span> my_var<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">my_func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用下面的代码进行编译。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 位置相关</span>
gcc <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span> <span class="token parameter variable">-masm</span><span class="token operator">=</span>intel -L. <span class="token parameter variable">-lsymbol</span> -no-pie -fno-pic main.c libsymbol.so <span class="token parameter variable">-o</span> main
<span class="token comment"># 位置无关</span>
gcc <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span> <span class="token parameter variable">-masm</span><span class="token operator">=</span>intel -L. <span class="token parameter variable">-lsymbol</span> main.c libsymbol.so <span class="token parameter variable">-o</span> main_pi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当目录中生成了main、main_pi、libsymbol.so时，准备工作结束。</p><h2 id="动态链接分析" tabindex="-1"><a class="header-anchor" href="#动态链接分析" aria-hidden="true">#</a> 动态链接分析</h2><p>我们使用<code>readelf -S main |egrep &#39;.plt|.got&#39;</code>查看可执行文件中的plt和got相关的段。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Nr<span class="token punctuation">]</span> Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> .plt              PROGBITS        080483d0 0003d0 000030 04  AX  <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">16</span>
<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> .got              PROGBITS        08049ff4 000ff4 00000c 04  WA  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">4</span>
<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> .got.plt          PROGBITS        0804a000 001000 000014 04  WA  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要对.got.plt的地址<strong>0804a000</strong>有个印象。</p><p>进入gdb调用该程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disass main
Dump of assembler code <span class="token keyword">for</span> <span class="token keyword">function</span> main:
   0x0804853d <span class="token operator">&lt;</span>+<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:     lea    0x4<span class="token punctuation">(</span>%esp<span class="token punctuation">)</span>,%ecx
   0x08048541 <span class="token operator">&lt;</span>+<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>:     and    <span class="token variable">$0xfffffff0</span>,%esp
   0x08048544 <span class="token operator">&lt;</span>+<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:     pushl  -0x4<span class="token punctuation">(</span>%ecx<span class="token punctuation">)</span>
   0x08048547 <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:    push   %ebp
   0x08048548 <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>:    mov    %esp,%ebp
   0x0804854a <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>:    push   %ecx
   0x0804854b <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>:    sub    <span class="token variable">$0x14</span>,%esp
   0x0804854e <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:    mov    0x804a018,%eax
   0x08048553 <span class="token operator">&lt;</span>+2<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>:    mov    %eax,-0xc<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
   0x08048556 <span class="token operator">&lt;</span>+2<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>:    mov    0x804a01c,%eax
   0x0804855b <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:    mov    %eax,-0x10<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
   0x0804855e <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>:    sub    <span class="token variable">$0x8</span>,%esp
   0x08048561 <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:    pushl  -0x10<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
   0x08048564 <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>:    pushl  -0xc<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
   0x08048567 <span class="token operator">&lt;</span>+4<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>:    call   0x80483e0 <span class="token operator">&lt;</span>my_func@plt<span class="token operator">&gt;</span>
   0x0804856c <span class="token operator">&lt;</span>+4<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:    <span class="token function">add</span>    <span class="token variable">$0x10</span>,%esp
   0x0804856f <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:    mov    -0x4<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%ecx
   0x08048572 <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>:    leave
   0x08048573 <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>:    lea    -0x4<span class="token punctuation">(</span>%ecx<span class="token punctuation">)</span>,%esp
   0x08048576 <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:    ret
End of assembler dump.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在<code>call 0x80483e0 &lt;my_func@plt&gt;</code>这一句上下一个断点。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b *0x08048567
Breakpoint <span class="token number">1</span> at 0x8048567: <span class="token function">file</span> main.c, line <span class="token number">9</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用run运行程序到断点处。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> r
Starting program: /home/work/cpp_proj/test/main
Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-164.el8.i686

Breakpoint <span class="token number">1</span>, 0x08048567 <span class="token keyword">in</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> at main.c:9
<span class="token number">9</span>           <span class="token builtin class-name">return</span> my_func<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看一下main，确实停在了断点处：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disass main
Dump of assembler code <span class="token keyword">for</span> <span class="token keyword">function</span> main:
   0x0804853d <span class="token operator">&lt;</span>+<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:     lea    0x4<span class="token punctuation">(</span>%esp<span class="token punctuation">)</span>,%ecx
   0x08048541 <span class="token operator">&lt;</span>+<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>:     and    <span class="token variable">$0xfffffff0</span>,%esp
   0x08048544 <span class="token operator">&lt;</span>+<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:     pushl  -0x4<span class="token punctuation">(</span>%ecx<span class="token punctuation">)</span>
   0x08048547 <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:    push   %ebp
   0x08048548 <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>:    mov    %esp,%ebp
   0x0804854a <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>:    push   %ecx
   0x0804854b <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>:    sub    <span class="token variable">$0x14</span>,%esp
   0x0804854e <span class="token operator">&lt;</span>+1<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:    mov    0x804a018,%eax
   0x08048553 <span class="token operator">&lt;</span>+2<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>:    mov    %eax,-0xc<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
   0x08048556 <span class="token operator">&lt;</span>+2<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>:    mov    0x804a01c,%eax
   0x0804855b <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:    mov    %eax,-0x10<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
   0x0804855e <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>:    sub    <span class="token variable">$0x8</span>,%esp
   0x08048561 <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:    pushl  -0x10<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
   0x08048564 <span class="token operator">&lt;</span>+3<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>:    pushl  -0xc<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>
<span class="token operator">=</span><span class="token operator">&gt;</span> 0x08048567 <span class="token operator">&lt;</span>+4<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>:    call   0x80483e0 <span class="token operator">&lt;</span>my_func@plt<span class="token operator">&gt;</span>
   0x0804856c <span class="token operator">&lt;</span>+4<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:    <span class="token function">add</span>    <span class="token variable">$0x10</span>,%esp
   0x0804856f <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:    mov    -0x4<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%ecx
   0x08048572 <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>:    leave
   0x08048573 <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>:    lea    -0x4<span class="token punctuation">(</span>%ecx<span class="token punctuation">)</span>,%esp
   0x08048576 <span class="token operator">&lt;</span>+5<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:    ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用单步，进入my_func@plt中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> si
0x080483e0 <span class="token keyword">in</span> my_func@plt <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看my_func@plt的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/3i <span class="token variable">$pc</span>
<span class="token operator">=</span><span class="token operator">&gt;</span> 0x80483e0 <span class="token operator">&lt;</span>my_func@plt<span class="token operator">&gt;</span>:     jmp    *0x804a00c
   0x80483e6 <span class="token operator">&lt;</span>my_func@plt+<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:   push   <span class="token variable">$0x0</span>
   0x80483eb <span class="token operator">&lt;</span>my_func@plt+1<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>:  jmp    0x80483d0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一步是一个地址跳转，我们查看一下0x804a00c的内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/4xw 0x804a00c
0x804a00c <span class="token operator">&lt;</span>my_func@got.plt<span class="token operator">&gt;</span>:    0x080483e6      0xf7e2a0f0      0x00000000      0x0000000a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现0x804a00c处的内容是0x080483e6，即<code>jmp *0x804a00c</code>的下一行，即跳转到下一行执行。</p><p>接着是执行<code>push $0x0</code>，接着又跳转到0x80483d0执行。</p><p>我们查看<code>jmp 0x80483d0</code>处的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/2i 0x80483d0
   0x80483d0:   pushl  0x804a004
   0x80483d6:   jmp    *0x804a008
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到后面会跳转到0x804a008处执行，在这之前我们提到过0x804a000是.got.plt的地址。</p><p>.plt.got表项前三个位置, 分别是:</p><ul><li>got[0]: 本ELF动态段(.dynamic段)的装载地址</li><li>got1: 本ELF的link_map数据结构描述符地址</li><li>got2: _dl_runtime_resolve函数的地址</li></ul><p>0x804a004则是调用该函数的参数, 且值为got1, 即本ELF的link_map的地址。</p><p>0x804a008正好是第三项got2, 即_dl_runtime_resolve函数的地址。</p><p>因此<code>jmp *0x804a008</code>作用是跳转到_dl_runtime_resolve执行加载。</p><p>下面我们打印一下，验证一下分析。首先0x804a008处存储的是0xf7fe5090。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/4xw 0x804a000
0x804a000:      0x08049f04      0xf7ffd9a0      0xf7fe5090      0x080483e6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>打印0xf7fe5090处的内容，确实是进入了_dl_runtime_resolve中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/12i 0xf7fe5090
   0xf7fe5090 <span class="token operator">&lt;</span>_dl_runtime_resolve<span class="token operator">&gt;</span>:    endbr32
   0xf7fe5094 <span class="token operator">&lt;</span>_dl_runtime_resolve+<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>:  push   %eax
   0xf7fe5095 <span class="token operator">&lt;</span>_dl_runtime_resolve+<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>:  push   %ecx
   0xf7fe5096 <span class="token operator">&lt;</span>_dl_runtime_resolve+<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:  push   %edx
   0xf7fe5097 <span class="token operator">&lt;</span>_dl_runtime_resolve+<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>:  mov    0x10<span class="token punctuation">(</span>%esp<span class="token punctuation">)</span>,%edx
   0xf7fe509b <span class="token operator">&lt;</span>_dl_runtime_resolve+1<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>: mov    0xc<span class="token punctuation">(</span>%esp<span class="token punctuation">)</span>,%eax
   0xf7fe509f <span class="token operator">&lt;</span>_dl_runtime_resolve+1<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>: call   0xf7fdec10 <span class="token operator">&lt;</span>_dl_fixup<span class="token operator">&gt;</span>
   0xf7fe50a4 <span class="token operator">&lt;</span>_dl_runtime_resolve+2<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>: pop    %edx
   0xf7fe50a5 <span class="token operator">&lt;</span>_dl_runtime_resolve+2<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>: mov    <span class="token punctuation">(</span>%esp<span class="token punctuation">)</span>,%ecx
   0xf7fe50a8 <span class="token operator">&lt;</span>_dl_runtime_resolve+2<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>: mov    %eax,<span class="token punctuation">(</span>%esp<span class="token punctuation">)</span>
   0xf7fe50ab <span class="token operator">&lt;</span>_dl_runtime_resolve+2<span class="token operator"><span class="token file-descriptor important">7</span>&gt;</span>: mov    0x4<span class="token punctuation">(</span>%esp<span class="token punctuation">)</span>,%eax
   0xf7fe50af <span class="token operator">&lt;</span>_dl_runtime_resolve+3<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>: ret    <span class="token variable">$0xc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_dl_runtime_resolve实际上做了两件事:</p><ul><li>解析出my_func的地址并将值填入.got.plt中</li><li>跳转执行真正的my_func函数.</li></ul><p>验证前后过程，确实将0x804a00c处的值修改成了my_func的值。</p><p>我们可以在<code>0x80483d6: jmp *0x804a008</code>语句上下一个断点，打印0x804a00c前后的值的变化，可以看到确实发生了变化。可以看到, 在_dl_runtime_resolve之前, 0x804a00c地址的值为0x080483e6,即下一条指令。而运行之后, 该地址的值变为0xf7fb845d, 正是my_func的加载地址!</p><p>也就是说, my_func函数的地址是在第一次调用时, 才通过连接器动态解析并加载到.got.plt中的. 而这个过程, 也称之为<strong>延时加载</strong>或者<strong>惰性加载</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/xw 0x804a00c
0x804a00c <span class="token operator">&lt;</span>my_func@got.plt<span class="token operator">&gt;</span>:    0x080483e6
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/xw 0x804a00c
0x804a00c <span class="token operator">&lt;</span>my_func@got.plt<span class="token operator">&gt;</span>:    0xf7fb845d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后打印一下0xf7fb845d的值，看看是不是my_func。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/4i 0xf7fb845d
   0xf7fb845d <span class="token operator">&lt;</span>my_func<span class="token operator">&gt;</span>:        push   %ebp
   0xf7fb845e <span class="token operator">&lt;</span>my_func+<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>:      mov    %esp,%ebp
   0xf7fb8460 <span class="token operator">&lt;</span>my_func+<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>:      call   0xf7fb8474 <span class="token operator">&lt;</span>__x86.get_pc_thunk.ax<span class="token operator">&gt;</span>
   0xf7fb8465 <span class="token operator">&lt;</span>my_func+<span class="token operator"><span class="token file-descriptor important">8</span>&gt;</span>:      <span class="token function">add</span>    <span class="token variable">$0x1b9b</span>,%eax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个过程可以参考下图，对于my_func第一次执行和后续执行，行为是不一样的。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/compile/got_plt/got_plt.png" alt="动态链接的过程" tabindex="0" loading="lazy"><figcaption>动态链接的过程</figcaption></figure><p>这个过程是不是似曾相识，通常我们在写后台的接口时，当查询完数据后，通常会将数据以插入到redis中，以便下一次访问时可以快速访问到。这里也是这样的机制。</p><p>而对于.plt段，就类似于一个后台查询接口，对于.got段,就类似于数据库，对于.plt.got段，就类似于redis缓存。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>动态库的加载过程相比于静态库是非常复杂的，其中使用到了.got，.plt和.plt.got段。对于这三个段，可以将其与我们熟悉的CRUD接口进行类比，.plt段，就类似于一个后台查询接口，.got段,就类似于数据库， plt.got段，就类似于redis缓存，是给.plt段查询做的缓存。</p>`,62),o=[t];function l(i,c){return n(),a("div",null,o)}const d=s(p,[["render",l],["__file","got_plt.html.vue"]]);export{d as default};
