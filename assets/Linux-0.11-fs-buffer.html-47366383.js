import{_ as n,V as s,W as a,a0 as e}from"./framework-c954d91f.js";const p={},t=e(`<h1 id="linux-0-11-文件系统buffer-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统buffer-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统buffer.c详解</h1><h2 id="buffer-init" tabindex="-1"><a class="header-anchor" href="#buffer-init" aria-hidden="true">#</a> buffer_init</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">buffer_init</span><span class="token punctuation">(</span><span class="token keyword">long</span> buffer_end<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用主要是<strong>初始化磁盘的高速缓冲区</strong>。</p><p>刚开始使用h指针指向了start_buffer的位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> h <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>start_buffer定义为end的位置，即内存中system模块的结束的位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> start_buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>end<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过这个步骤之后h实际上指向了内核高速缓冲区的低地址。</p><p>接下来使用了b指针指向了内核告诉缓冲区的高地址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>buffer_end <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>
  b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> buffer_end<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里根据buffer_end的值的不同，决定了b的指向。</p><p>在main.c文件中给定了buffer_end的大小定义:</p><ul><li>内存大小&gt;12Mb，buffer_end=4Mb</li><li>6Mb&lt;内存大小&lt;=12Mb，buffer_end=2Mb</li><li>如果内存大小&lt;=6Mb，buffer_end=1Mb</li></ul><p>知道了buffer_end的值，那么很容易通过条件语句得到b的值。</p><p>那么为什么要对buffer_end的值进行讨论呢？</p><p>这主要是因为物理内存中640K-1M的区域内存放了显存和BIOS ROM，因此当buffer_end=1M， 高速缓冲区是一块， 如果buffer_end&gt;1M， 那么高速缓冲区是两块， 这个点通过下面这张图可以清晰的了解到。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/buffer/buffer_init.png" alt="buffer_init" tabindex="0" loading="lazy"><figcaption>buffer_init</figcaption></figure><p>经过上述步骤。 h指针(头指针)指向了高速缓冲区的起点， b指针(数据块指针)指向了高速缓冲区的终点。</p><p>buffer_init接下来要做的就是对这些高速缓冲区进行初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>b <span class="token operator">-=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  h<span class="token operator">-&gt;</span>b_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_wait <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> b<span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
  h<span class="token operator">++</span><span class="token punctuation">;</span>
  NR_BUFFERS<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0x100000</span><span class="token punctuation">)</span>
    b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0xA0000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让每一个buffer_header节点使用b_data指针指向一个数据块block(1k)。然后h指针加1，b指针减1。如此往复，直到h和b指针指向的区别相交。</p><p>这些buffer_header用一个双向链表进行串联。</p><p>需要注意的是， 当内存大于6Mb时， 高速缓冲区有两块， 当b指针在移动时，如果<strong>移动到了1Mb的地址</strong>时，也就是到了显存和BIOS ROM的高地址边界时， 需要跳过它，直接来到640Kb的地址。也就是下面这两行代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0x100000</span><span class="token punctuation">)</span>
  b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0xA0000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>h指针和b指针移动进行初始化的效果如下图所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/buffer/buffer_init2.png" alt="buffer_init" tabindex="0" loading="lazy"><figcaption>buffer_init</figcaption></figure><p>最后这段代码， 将free_list指向了第一个buffer_header块。然后让首尾两个buffer_header相接， 形成完整的双向链表。 最后的话，将高速哈希表中的每一行初始化为NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>free_list <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span>
free_list<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> h<span class="token punctuation">;</span>
h<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> free_list<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_HASH<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  hash_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的free_list翻译为自由链表， 实际意思就是所有的高速缓冲区构成的双向链表， 在下面的函数中的将经常出现。</p><h2 id="find-buffer" tabindex="-1"><a class="header-anchor" href="#find-buffer" aria-hidden="true">#</a> find_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">find_buffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是从<strong>哈希链表</strong>中按照<strong>设备号和逻辑块号</strong>去查询对应的缓冲区块。</p><p>首先根据设备号和块号查找到哈希数组的下标，找到下标对应的bh， 遍历该bh通过b_next连接起来的链表， 看该链表中是否有匹配的。如下图所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/buffer/find_buffer.png" alt="find_buffer" tabindex="0" loading="lazy"><figcaption>find_buffer</figcaption></figure><p>这个过程的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span> <span class="token punctuation">;</span> tmp <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> tmp <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>b_next<span class="token punctuation">)</span><span class="token comment">//计算哈希值， 遍历该哈希桶上的链表</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>b_dev<span class="token operator">==</span>dev <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">-&gt;</span>b_blocknr<span class="token operator">==</span>block<span class="token punctuation">)</span>  <span class="token comment">//如果设备号和块号相同， 代表找到了， 返回bh块</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-hash-table" tabindex="-1"><a class="header-anchor" href="#get-hash-table" aria-hidden="true">#</a> get_hash_table</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">get_hash_table</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是从<strong>哈希链表</strong>中找到指定的bh块。其内部调用了find_buffer函数， 内部增加了如果<strong>bh块被其他进程占用情况</strong>的处理。</p><p>入参中的block指的是<strong>磁盘的盘块号</strong>。</p><p>从下面的代码可以看出， 首先调用了find_buffer函数寻找执行的bh块， 如果没有找到， 就直接返回，暗示<strong>可能要再去自由链表上去搜索</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">find_buffer</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果找到了bh块，就是看这个块是否有其他进程加锁，如果没有就将引用计数加1。如果有的话就等待锁的释放。注意等待过程中，该bh块可能被修改，因此wake up之后需要重新判断该块的设备号与块号是否相等。如果在等待过程中，该bh块没有被修改， 就直接返回。 如果被修改了，那么则需要重新寻找。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bh<span class="token operator">-&gt;</span>b_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">==</span> dev <span class="token operator">&amp;&amp;</span> bh<span class="token operator">-&gt;</span>b_blocknr <span class="token operator">==</span> block<span class="token punctuation">)</span>
  <span class="token keyword">return</span> bh<span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//该block在等待中被修改。 减少其引用计数， 进入下一次循环，重新寻找符合要求的bh块。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getblk" tabindex="-1"><a class="header-anchor" href="#getblk" aria-hidden="true">#</a> getblk</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">getblk</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是从<strong>哈希链表</strong>和<strong>自由链表</strong>两个地方寻找可用的bh块。</p><p>该函数先从哈希链表中寻找指定的bh块。如果找到了就直接返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">get_hash_table</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> bh<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当从哈希表中没有找到对应的bh块时， 就需要去自由链表中查找一个<strong>品质</strong>最好的块。品质是根据bh块的<strong>b_dirt属性</strong>和<strong>b_lock属性</strong>去计算的。 在遍历过程中， 会查看某个块是否引用计数为0, 为0则放入备选项， 然后继续遍历， 如果后续找到了更<strong>品质</strong>的块， 就更新该备选项。遍历结束之后就找到了最佳的bh块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>b_count<span class="token punctuation">)</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh <span class="token operator">||</span> <span class="token function">BADNESS</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">BADNESS</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bh <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">BADNESS</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token comment">/* and repeat until we find something good */</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">)</span> <span class="token operator">!=</span> free_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这个过程， 仍然没有找到可用的bh块， 代表现在高速缓冲区很繁忙，则需要等待。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果经过上述步骤找到了一个<strong>最佳品质</strong>的bh块之后，如果该块有锁，则等待锁的释放， 如果没有锁， 但是有脏数据， 就将脏数据写盘。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_count<span class="token punctuation">)</span>
  <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dirt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">sync_dev</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_count<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果该block已经被添加到哈希链表中， 则需要重新寻找。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find_buffer</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，终于找到了可用的bh块，将其初始化，并且插入到哈希链表中，这里实际上实现了一个<strong>LRU缓存</strong>。有关<strong>remove_from_queues</strong>和<strong>insert_into_queues</strong>将在对应的函数讲解中详解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bh<span class="token operator">-&gt;</span>b_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_dirt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_uptodate<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">remove_from_queues</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_dev<span class="token operator">=</span>dev<span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_blocknr<span class="token operator">=</span>block<span class="token punctuation">;</span>
<span class="token function">insert_into_queues</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="remove-from-queues" tabindex="-1"><a class="header-anchor" href="#remove-from-queues" aria-hidden="true">#</a> remove_from_queues</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">remove_from_queues</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将buffer_header(简称bh)从空闲链表和哈希队列中移除。</p><p>下面这段代码作用是将bh从哈希队列中移除。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_next<span class="token punctuation">)</span>
  bh<span class="token operator">-&gt;</span>b_next<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_prev<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_prev<span class="token punctuation">)</span>
  bh<span class="token operator">-&gt;</span>b_prev<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span>bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span> <span class="token operator">==</span> bh<span class="token punctuation">)</span>
  <span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span>bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span> <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段代码作用是将bh从自由链表中移除。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_prev_free<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Free block list corrupted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_prev_free<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_next_free<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_prev_free<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>free_list <span class="token operator">==</span> bh<span class="token punctuation">)</span>
  free_list <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="insert-into-queues" tabindex="-1"><a class="header-anchor" href="#insert-into-queues" aria-hidden="true">#</a> insert_into_queues</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert_into_queues</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是将bh插入到空闲链表的尾部，并通入哈希函数插入到指定的哈希队列中。</p><p>下面这段代码的作用就是将bh插入到双向链表的尾部</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bh<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> free_list<span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> free_list<span class="token operator">-&gt;</span>b_prev_free<span class="token punctuation">;</span>
free_list<span class="token operator">-&gt;</span>b_prev_free<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> bh<span class="token punctuation">;</span>
free_list<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> bh<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段代码就是将bh插入到哈希表的首部。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bh<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">)</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span>bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span>bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span> <span class="token operator">=</span> bh<span class="token punctuation">;</span>
bh<span class="token operator">-&gt;</span>b_next<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> bh<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="brelse" tabindex="-1"><a class="header-anchor" href="#brelse" aria-hidden="true">#</a> brelse</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">brelse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> buf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是释放一个bh块。</p><p>将该块的引用计数减1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>buf<span class="token operator">-&gt;</span>b_count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to free free buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bread" tabindex="-1"><a class="header-anchor" href="#bread" aria-hidden="true">#</a> bread</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是用于去<strong>指定的设备上读取相应的块</strong>。</p><p>首先调用getblk在高速缓冲区中找到一个bh块， 随后调用磁盘读写函数ll_rw_block向磁盘设别发出读请求， 将磁盘内容读取到bh块中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bread: getblk returned NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span>
  <span class="token keyword">return</span> bh<span class="token punctuation">;</span>
<span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span><span class="token comment">//如果缓冲区已经更新， 则直接返回</span>
  <span class="token keyword">return</span> bh<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bread-page" tabindex="-1"><a class="header-anchor" href="#bread-page" aria-hidden="true">#</a> bread_page</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">bread_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> address<span class="token punctuation">,</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是用于去指定的设备上<strong>读取4个逻辑块</strong>到内存中， 也就是读取<strong>4k磁盘内容</strong>到<strong>一个内存页</strong>中。</p><p>该函数分为两个过程， 第一个过程是将磁盘数据块拷贝到bh块中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span>
        <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
    bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个过程是将bh块中的内容拷贝到指定的内存中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>address <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span>
      <span class="token function">COPYBLK</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="breada" tabindex="-1"><a class="header-anchor" href="#breada" aria-hidden="true">#</a> breada</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">breada</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>breada函数是bread函数的拓展，如果只传递一个块号， 那么就是bread。 如果传递多个块号，就会读取多个逻辑块的值到高速缓存。</p><p>这个函数使用了<strong>可变参数列表</strong>， 但是其功能与bread类似， 不再赘述。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>va_list args<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>

<span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bread: getblk returned NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span>
  <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>first<span class="token operator">=</span><span class="token function">va_arg</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tmp<span class="token operator">=</span><span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span>
      <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READA<span class="token punctuation">,</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmp<span class="token operator">-&gt;</span>b_count<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span>
  <span class="token keyword">return</span> bh<span class="token punctuation">;</span>
<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wait-on-buffer" tabindex="-1"><a class="header-anchor" href="#wait-on-buffer" aria-hidden="true">#</a> wait_on_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是如果一个bh块被加锁， 那么将等待该bh块解锁。</p><h2 id="sys-sync" tabindex="-1"><a class="header-anchor" href="#sys-sync" aria-hidden="true">#</a> sys_sync</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_sync</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将所有高速缓冲bh块的脏数据写盘。</p><p>首先将inode_table表中修改的节点刷新到高速缓冲区的bh块中，</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>

<span class="token function">sync_inodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着对所有的bh块进行循环，将其中有脏数据的bh块调用ll_rw_block发送写磁盘命令，将数据写到磁盘设备中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_BUFFERS <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>bh<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dirt<span class="token punctuation">)</span>
    <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>WRITE<span class="token punctuation">,</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sync-dev" tabindex="-1"><a class="header-anchor" href="#sync-dev" aria-hidden="true">#</a> sync_dev</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sync_dev</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将所有高速缓冲中某个设别的bh块的脏数据写盘。</p><p>该函数总体与sync_sys类似，只不过在其中增加了dev号的判断。</p><h2 id="invalidate-buffer" tabindex="-1"><a class="header-anchor" href="#invalidate-buffer" aria-hidden="true">#</a> invalidate_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">inline</span> <span class="token function">invalidate_buffers</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是将所有某个设备的bh块中的b_uptodate和b_dirt置为0。</p><h2 id="check-disk-change" tabindex="-1"><a class="header-anchor" href="#check-disk-change" aria-hidden="true">#</a> check_disk_change</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">check_disk_change</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是检查磁盘是否已经更换。 如果已经更换， 就要对更新高速缓冲区的状态。</p>`,116),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-fs-buffer.html.vue"]]);export{r as default};
