const n=JSON.parse('{"key":"v-3096a586","path":"/posts/Linux/application-dev/Linux-glibc-sem.html","title":"深入了解glibc的信号量","lang":"zh-CN","frontmatter":{"category":["Linux"],"description":"深入了解glibc的信号量 源码分析 static int __new_sem_wait_fast (struct new_sem *sem, int definitive_result) { #if __HAVE_64B_ATOMICS uint64_t d = atomic_load_relaxed (&amp;sem-&gt;data); do { if ((d &amp; SEM_VALUE_MASK) == 0) break; if (atomic_compare_exchange_weak_acquire (&amp;sem-&gt;data, &amp;d, d - 1)) return 0; } while (definitive_result); return -1; #else unsigned int v = atomic_load_relaxed (&amp;sem-&gt;value); do { if ((v &gt;&gt; SEM_VALUE_SHIFT) == 0) break; if (atomic_compare_exchange_weak_acquire (&amp;sem-&gt;value, &amp;v, v - (1 &lt;&lt; SEM_VALUE_SHIFT))) return 0; } while (definitive_result); return -1; #endif }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/application-dev/Linux-glibc-sem.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"深入了解glibc的信号量"}],["meta",{"property":"og:description","content":"深入了解glibc的信号量 源码分析 static int __new_sem_wait_fast (struct new_sem *sem, int definitive_result) { #if __HAVE_64B_ATOMICS uint64_t d = atomic_load_relaxed (&amp;sem-&gt;data); do { if ((d &amp; SEM_VALUE_MASK) == 0) break; if (atomic_compare_exchange_weak_acquire (&amp;sem-&gt;data, &amp;d, d - 1)) return 0; } while (definitive_result); return -1; #else unsigned int v = atomic_load_relaxed (&amp;sem-&gt;value); do { if ((v &gt;&gt; SEM_VALUE_SHIFT) == 0) break; if (atomic_compare_exchange_weak_acquire (&amp;sem-&gt;value, &amp;v, v - (1 &lt;&lt; SEM_VALUE_SHIFT))) return 0; } while (definitive_result); return -1; #endif }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-06T06:10:02.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-06T06:10:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入了解glibc的信号量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-06T06:10:02.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[]}],"git":{"createdTime":1688623802000,"updatedTime":1688623802000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.16,"words":348},"filePathRelative":"posts/Linux/application-dev/Linux-glibc-sem.md","localizedDate":"2023年7月6日","excerpt":"<h1> 深入了解glibc的信号量</h1>\\n<h2> 源码分析</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span>\\n<span class=\\"token function\\">__new_sem_wait_fast</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">new_sem</span> <span class=\\"token operator\\">*</span>sem<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> definitive_result<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__HAVE_64B_ATOMICS</span></span>\\n    <span class=\\"token class-name\\">uint64_t</span> d <span class=\\"token operator\\">=</span> <span class=\\"token function\\">atomic_load_relaxed</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>sem<span class=\\"token operator\\">-&gt;</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">do</span>\\n        <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>d <span class=\\"token operator\\">&amp;</span> SEM_VALUE_MASK<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">atomic_compare_exchange_weak_acquire</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>sem<span class=\\"token operator\\">-&gt;</span>data<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>d<span class=\\"token punctuation\\">,</span> d <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>definitive_result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">else</span></span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">int</span> v <span class=\\"token operator\\">=</span> <span class=\\"token function\\">atomic_load_relaxed</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>sem<span class=\\"token operator\\">-&gt;</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">do</span>\\n        <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>v <span class=\\"token operator\\">&gt;&gt;</span> SEM_VALUE_SHIFT<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">atomic_compare_exchange_weak_acquire</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>sem<span class=\\"token operator\\">-&gt;</span>value<span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token operator\\">&amp;</span>v<span class=\\"token punctuation\\">,</span> v <span class=\\"token operator\\">-</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span> <span class=\\"token operator\\">&lt;&lt;</span> SEM_VALUE_SHIFT<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>definitive_result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
