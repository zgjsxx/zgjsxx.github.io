const n=JSON.parse('{"key":"v-6cc87082","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-46.html","title":"effective c++ 46 需要类型转换时请为模板定义非成员函数","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 46 需要类型转换时请为模板定义非成员函数 本节是在模板中出现所有参数都需要隐式类型转换时的要点，也是friend关键字的非常规的用法，了解即可，使用到的概率并不大，因为平常我们都不建议进行隐式转换。 分析 看下面的例子，oneHalf * 2，我们希望将一个int类型的参数隐式转化成一个Rational&lt;int&gt;的类型。当operator*没有friend修饰时是不能通过编译的。 template&lt;typename T&gt; class Rational { public: \\tRational(const T&amp; numerator = 0, const T&amp; denominator = 1) : n(numerator), d(denominator) \\t{ \\t} \\tconst T numerator() const { return n; } \\tconst T denominator() const { return d; } \\tfriend const Rational operator*(const Rational&amp; lhs, const Rational&amp; rhs) \\t{ \\t\\treturn Rational(lhs.numerator() * rhs.numerator(), lhs.denominator() * rhs.denominator()); \\t} private: \\tT n, d; }; int main() { \\tRational&lt;int&gt; oneHalf(1, 2); \\tRational&lt;int&gt; result = oneHalf * 2; \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-46.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 46 需要类型转换时请为模板定义非成员函数"}],["meta",{"property":"og:description","content":"effective c++ 46 需要类型转换时请为模板定义非成员函数 本节是在模板中出现所有参数都需要隐式类型转换时的要点，也是friend关键字的非常规的用法，了解即可，使用到的概率并不大，因为平常我们都不建议进行隐式转换。 分析 看下面的例子，oneHalf * 2，我们希望将一个int类型的参数隐式转化成一个Rational&lt;int&gt;的类型。当operator*没有friend修饰时是不能通过编译的。 template&lt;typename T&gt; class Rational { public: \\tRational(const T&amp; numerator = 0, const T&amp; denominator = 1) : n(numerator), d(denominator) \\t{ \\t} \\tconst T numerator() const { return n; } \\tconst T denominator() const { return d; } \\tfriend const Rational operator*(const Rational&amp; lhs, const Rational&amp; rhs) \\t{ \\t\\treturn Rational(lhs.numerator() * rhs.numerator(), lhs.denominator() * rhs.denominator()); \\t} private: \\tT n, d; }; int main() { \\tRational&lt;int&gt; oneHalf(1, 2); \\tRational&lt;int&gt; result = oneHalf * 2; \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T05:55:28.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-17T05:55:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 46 需要类型转换时请为模板定义非成员函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T05:55:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684302928000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":0.97,"words":292},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-46.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 46 需要类型转换时请为模板定义非成员函数</h1>\\n<p>本节是在模板中出现所有参数都需要隐式类型转换时的要点，也是friend关键字的非常规的用法，了解即可，使用到的概率并不大，因为平常我们都不建议进行隐式转换。</p>\\n<h2> 分析</h2>\\n<p>看下面的例子，<code>oneHalf * 2</code>，我们希望将一个int类型的参数隐式转化成一个<code>Rational&lt;int&gt;</code>的类型。当<code>operator*</code>没有friend修饰时是不能通过编译的。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">T</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Rational</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Rational</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> T<span class=\\"token operator\\">&amp;</span> numerator <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> T<span class=\\"token operator\\">&amp;</span> denominator <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">n</span><span class=\\"token punctuation\\">(</span>numerator<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">d</span><span class=\\"token punctuation\\">(</span>denominator<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">const</span> T <span class=\\"token function\\">numerator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">return</span> n<span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">const</span> T <span class=\\"token function\\">denominator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">return</span> d<span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">friend</span> <span class=\\"token keyword\\">const</span> Rational <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Rational<span class=\\"token operator\\">&amp;</span> lhs<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Rational<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">Rational</span><span class=\\"token punctuation\\">(</span>lhs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">numerator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> rhs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">numerator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> lhs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">denominator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> rhs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">denominator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\tT n<span class=\\"token punctuation\\">,</span> d<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\tRational<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">oneHalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tRational<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> result <span class=\\"token operator\\">=</span> oneHalf <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
