import{_ as p,V as t,W as o,X as n,Y as a,$ as e,a0 as l,F as c}from"./framework-9a29aaa0.js";const i={},r=l(`<h1 id="valgrind" tabindex="-1"><a class="header-anchor" href="#valgrind" aria-hidden="true">#</a> Valgrind</h1><h2 id="_1-什么是valgrind-如何运行valgrind" tabindex="-1"><a class="header-anchor" href="#_1-什么是valgrind-如何运行valgrind" aria-hidden="true">#</a> 1.什么是Valgrind? 如何运行Valgrind</h2><p>Valgrind是一个用于检测内存问题的工具，尤其擅长处理<strong>内存泄漏</strong>问题和非法内存访问的问题。<strong>内存泄漏</strong>是指通过申请内存的方法(例如malloc)申请了内存确没有使用释放内存的方法(例如free)释放内存而导致的问题。非法的内存访问可能会引起程序的段错误(Segmentaion fault)。 Valgrind工具可以有效的帮助你分析出问题的产生的原因。</p><p>注意：</p><ul><li>为了使得Valgrind可以给出具体详细的信息，你需要在编译c程序时添加-g的选项。</li></ul><p>Valgrind使用非常简单，你只需要在原本需要执行的可执行程序的前面加上Valgrind就可以。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./a.out
valgrind ./a.out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假设你的代码没有任何内存的问题或者内存泄漏， Valgrind将打印出类似于下面的内容。如果你的代码存在一些问题，将会在下面的输出中增加一些问题的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> Memcheck, a memory error detector
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2002</span>-2017, and GNU GPL’d, by Julian Seward et al.
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> Using Valgrind-3.14.0 and LibVEX<span class="token punctuation">;</span> rerun with <span class="token parameter variable">-h</span> <span class="token keyword">for</span> copyright info
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> Command: ./a.out
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> HEAP SUMMARY:
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> <span class="token keyword">in</span> use at exit: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> total heap usage: <span class="token number">1</span> allocs, <span class="token number">1</span> frees, <span class="token number">4</span> bytes allocated
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> All heap blocks were freed -- no leaks are possible
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> For counts of detected and suppressed errors, rerun with: <span class="token parameter variable">-v</span>
<span class="token operator">==</span><span class="token number">30173</span><span class="token operator">==</span> ERROR SUMMARY: <span class="token number">0</span> errors from <span class="token number">0</span> contexts <span class="token punctuation">(</span>suppressed: <span class="token number">0</span> from <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的输出的内容中，最重要的便是<strong>HEAP SUMMARY</strong>和<strong>ERROR SUMMARY</strong>。</p><p>如果你的程序没有任何问题，在<strong>HEAP SUMMARY</strong>你就会看见 in use at exit: 0 bytes in 0 blocks。在<strong>ERROR SUMMARY</strong>， 你就会看见0 errors from 0 contexts (suppressed: 0 from 0)。</p><h2 id="_2-何时应该需要使用valgrind" tabindex="-1"><a class="header-anchor" href="#_2-何时应该需要使用valgrind" aria-hidden="true">#</a> 2.何时应该需要使用Valgrind</h2><p>需要在下面的场景下使用Valgrind:</p><ul><li>你的程序在运行时发生了未定义的行为，例如运行程序多次，得到的结果每次都不相同，且不是符合预期的。</li><li>你的程序产生了段错误。</li><li>运行 C 可执行文件后，您会看到诡异的内存输出。</li><li>你的程序不允许有memory leak或者非法访问。</li></ul><p>在工作中，应该尽可能的使用Valgrind对代码进行检查，因为人人都有可能犯一些低级错误。</p><h2 id="_3-调用堆栈" tabindex="-1"><a class="header-anchor" href="#_3-调用堆栈" aria-hidden="true">#</a> 3.调用堆栈</h2><p>Valgrind给出的一个重要信息就是调用堆栈(Backtrace)。调用堆栈会按照调用顺序打印出出错时一系列函数的名称。下面通过一个简单的例子来理解其工作原理。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">2797</span><span class="token operator">==</span> at 0x400555: f1 <span class="token punctuation">(</span>example_file.c:7<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">2797</span><span class="token operator">==</span> by 0x400572: f2 <span class="token punctuation">(</span>example_file.c:12<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">9892</span><span class="token operator">==</span> by 0x40053E: main <span class="token punctuation">(</span>main_file.c:4<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个调用堆栈告诉我们：</p><ul><li>错误发生在example_file.c的第7行，这个错误发生在f1方法中。</li><li>f1方法在example_file.c的第12行被调用，这个调用发生在f2方法中。</li><li>f2方法在main_file.c的第4行被调用，这个调用发生在main方法中。</li></ul><p>注意调用堆栈的底部一定是main方法，因此c程序的入口都是main。</p><p>接下来将通过实际的例子来详解的解析Valgrind程序所检测到错误的含义。</p><h2 id="_4-使用valgrind修复内存泄漏" tabindex="-1"><a class="header-anchor" href="#_4-使用valgrind修复内存泄漏" aria-hidden="true">#</a> 4.使用Valgrind修复内存泄漏</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ip<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>internal <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>internal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译上面的程序使用Valgrind运行，你会获得下面的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> HEAP SUMMARY:
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> <span class="token keyword">in</span> use at exit: <span class="token number">4</span> bytes <span class="token keyword">in</span> <span class="token number">1</span> blocks
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> total heap usage: <span class="token number">1</span> allocs, <span class="token number">0</span> frees, <span class="token number">4</span> bytes allocated
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> LEAK SUMMARY:
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> definitely lost: <span class="token number">4</span> bytes <span class="token keyword">in</span> <span class="token number">1</span> blocks
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> indirectly lost: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> possibly lost: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> still reachable: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> suppressed: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">14132</span><span class="token operator">==</span> Rerun with --leak-check<span class="token operator">=</span>full to see details of leaked memory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出中，可以非常明显的看出我们产生了一个内存泄漏。我们产生了4个byte的内存泄漏，因为我们使用malloc申请了一个int大小的内存，但是之后指向该内存的指针丢失了，产生了泄漏。 按照输出中最后一行的建议<code>. valgrind --leak-check=full ./a.out</code>， 你可以获取更加详细的堆栈。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">3601</span><span class="token operator">==</span> <span class="token number">4</span> bytes <span class="token keyword">in</span> <span class="token number">1</span> blocks are definitely lost <span class="token keyword">in</span> loss record <span class="token number">1</span> of <span class="token number">1</span>
<span class="token operator">==</span><span class="token number">3601</span><span class="token operator">==</span> at 0x4C29E63: malloc <span class="token punctuation">(</span>vg_replace_malloc.c:309<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">3601</span><span class="token operator">==</span> by 0x40053E: f1 <span class="token punctuation">(</span>example_file.c:4<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">3601</span><span class="token operator">==</span> by 0x400572: f2 <span class="token punctuation">(</span>example_file.c:12<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">3601</span><span class="token operator">==</span> by 0x400590: main <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这个堆栈信息，我们知道：</p><ul><li>我们申请了4个byte大小的memory，用于存储一个int类型的变量。</li><li>malloc方法申请了4个byte的内存， 在我们代码中的第一行进行的调用。</li><li>f1是被f2进行的调用。</li></ul><p>回顾我们的代码，在f1中申请了4个byte的内存，并将指向该内存的指针进行返回。再看看f2函数，f2方法忘记将该内存进行free。这便是一个内存泄漏问题。</p><h2 id="_5-使用valgrind修复非法内存方法" tabindex="-1"><a class="header-anchor" href="#_5-使用valgrind修复非法内存方法" aria-hidden="true">#</a> 5.使用Valgrind修复非法内存方法</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ip<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>internal <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> internal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> internal<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>internal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> left <span class="token operator">+</span> right <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译运行上面的代码，使用Valgrind运行，将会得到下面的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> Invalid <span class="token builtin class-name">read</span> of size <span class="token number">4</span>
<span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> at 0x4005C6: f2 <span class="token punctuation">(</span>example_file.c:14<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> by 0x4005FE: main <span class="token punctuation">(</span>example_file.c:21<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> Address 0x5205048 is <span class="token number">4</span> bytes after a block of size <span class="token number">4</span> alloc&#39;d
<span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> at 0x4C29F73: malloc <span class="token punctuation">(</span>vg_replace_malloc.c:309<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> by 0x40058E: f1 <span class="token punctuation">(</span>example_file.c:4<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> by 0x4005B4: f2 <span class="token punctuation">(</span>example_file.c:11<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">12751</span><span class="token operator">==</span> by 0x4005FE: main <span class="token punctuation">(</span>example_file.c:21<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把错误信息划分为两部分，第一部分是前三行，第二部分是后面几行。</p><p>首先看前三行。错误的信息是&quot;Invalid read of size 4&quot;， 即我们正在读一个4个byte大小的内存。此外，它告诉了我们出错的位置在example_file.c的第14行。</p><p>错误信息的后半部分提供了一些额外的有效信息。它告诉我们要读取的位置在我们申请的内存块的末尾处后面的4个字节。这意味着我们正在读取的位置超过了我们申请的内存的大小。</p><p>回顾我们的代码，我们看的这些错误信息正确的指出了问题，我们非法的访问了<code>internal[2]</code>。我们只申请了一个int的大小的内存，并没有申请一个int数组。 因此<code>internal[2]</code>的方法是非法的。</p><h2 id="_6-非法free" tabindex="-1"><a class="header-anchor" href="#_6-非法free" aria-hidden="true">#</a> 6.非法free</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ip<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>internal <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>internal<span class="token punctuation">;</span>

    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">*</span>internal<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>result2 <span class="token operator">=</span> <span class="token operator">&amp;</span>result<span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>internal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译运行上面的代码，使用Valgrind运行，将会得到下面的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> Invalid free<span class="token punctuation">(</span><span class="token punctuation">)</span> / delete / delete<span class="token punctuation">[</span><span class="token punctuation">]</span> / realloc<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> at 0x4C2B06D: <span class="token function">free</span> <span class="token punctuation">(</span>vg_replace_malloc.c:540<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x4005E9: f2 <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x40060C: main <span class="token punctuation">(</span>example_file.c:25<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> Address 0x5205040 is <span class="token number">0</span> bytes inside a block of size <span class="token number">4</span> free’d
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> at 0x4C2B06D: <span class="token function">free</span> <span class="token punctuation">(</span>vg_replace_malloc.c:540<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x4005DD: f2 <span class="token punctuation">(</span>example_file.c:17<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x40060C: main <span class="token punctuation">(</span>example_file.c:25<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> Block was alloc’d at
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> at 0x4C29F73: malloc <span class="token punctuation">(</span>vg_replace_malloc.c:309<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x40058E: f1 <span class="token punctuation">(</span>example_file.c:4<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x4005B4: f2 <span class="token punctuation">(</span>example_file.c:11<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x40060C: main <span class="token punctuation">(</span>example_file.c:25<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> Invalid free<span class="token punctuation">(</span><span class="token punctuation">)</span> / delete / delete<span class="token punctuation">[</span><span class="token punctuation">]</span> / realloc<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> at 0x4C2B06D: <span class="token function">free</span> <span class="token punctuation">(</span>vg_replace_malloc.c:540<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x4005F5: f2 <span class="token punctuation">(</span>example_file.c:19<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x40060C: main <span class="token punctuation">(</span>example_file.c:25<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> Address 0x1ffefff474 is on thread <span class="token number">1</span>’s stack
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> <span class="token keyword">in</span> frame <span class="token comment">#1, created by f2 (example_file.c:10)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的输出内容比较多，我们一部分一部分的来看。</p><p>第一个error告诉我们第18行的调用是非法的。其详细的信息是&quot;0 bytes inside a block of size 4 free’d&quot;。说的直白一点，这句话的含义是我们尝试free同一个指针两次。</p><p>什么时候进行的第一次free，在下面的输出中也可以轻易的找到。可以看到第一次free的位置在程序的第17行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> at 0x4C2B06D: <span class="token function">free</span> <span class="token punctuation">(</span>vg_replace_malloc.c:540<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x4005DD: f2 <span class="token punctuation">(</span>example_file.c:17<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">31964</span><span class="token operator">==</span> by 0x40060C: main <span class="token punctuation">(</span>example_file.c:25<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-未进行初始化" tabindex="-1"><a class="header-anchor" href="#_7-未进行初始化" aria-hidden="true">#</a> 7.未进行初始化</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token number">2</span> <span class="token number">3</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">4</span> <span class="token keyword">int</span> <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">5</span> <span class="token number">6</span>
<span class="token keyword">return</span> ip<span class="token punctuation">;</span>
<span class="token number">67</span> <span class="token punctuation">}</span>
<span class="token number">8</span> <span class="token number">9</span>
<span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">10</span> <span class="token keyword">int</span> <span class="token operator">*</span>internal <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span> <span class="token keyword">int</span> other <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token number">12</span>
<span class="token number">13</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>internal <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">14</span> other <span class="token operator">=</span> <span class="token operator">*</span>internal<span class="token punctuation">;</span>
<span class="token number">15</span> <span class="token punctuation">}</span>
<span class="token number">16</span>
<span class="token number">17</span> <span class="token function">free</span><span class="token punctuation">(</span>internal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>
<span class="token number">19</span> <span class="token keyword">return</span> other<span class="token punctuation">;</span>
<span class="token number">20</span> <span class="token punctuation">}</span>
<span class="token number">21</span>
<span class="token number">22</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">23</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">24</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token number">25</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> Conditional jump or move depends on uninitialised value<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> at 0x4005BF: f2 <span class="token punctuation">(</span>example_file.c:13<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> by 0x4005EC: main <span class="token punctuation">(</span>example_file.c:23<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> Syscall param exit_group<span class="token punctuation">(</span>status<span class="token punctuation">)</span> contains uninitialised byte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> at 0x4EFCC09: _Exit <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> by 0x4E70CAA: __run_exit_handlers <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> by 0x4E70D36: <span class="token builtin class-name">exit</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">27751</span><span class="token operator">==</span> by 0x4E5955B: <span class="token punctuation">(</span>below main<span class="token punctuation">)</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-错误的权限" tabindex="-1"><a class="header-anchor" href="#_8-错误的权限" aria-hidden="true">#</a> 8.错误的权限</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> <span class="token number">5</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">6</span> <span class="token keyword">char</span> <span class="token operator">*</span>sp <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token number">7</span> <span class="token keyword">return</span> sp<span class="token punctuation">;</span>
<span class="token number">8</span> <span class="token punctuation">}</span>
<span class="token number">9</span>
<span class="token number">10</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">11</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Received String: %s\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">13</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ’C’<span class="token punctuation">;</span>
<span class="token number">14</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Changed String: %s\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">15</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">16</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-处理很长的valgrind输出" tabindex="-1"><a class="header-anchor" href="#_9-处理很长的valgrind输出" aria-hidden="true">#</a> 9.处理很长的Valgrind输出</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Memcheck, a memory error detector
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2002</span>-2017, and GNU GPL’d, by Julian Seward et al.
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Using Valgrind-3.15.0 and LibVEX<span class="token punctuation">;</span> rerun with <span class="token parameter variable">-h</span> <span class="token keyword">for</span> copyright info
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Command: ./a.out
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
Inner <span class="token keyword">function</span> called with value <span class="token number">10</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Invalid <span class="token function">write</span> of size <span class="token number">4</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4005E7: inner_fn <span class="token punctuation">(</span>example_file.c:14<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Address 0x5205044 is <span class="token number">0</span> bytes after a block of size <span class="token number">4</span> alloc’d
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4C29F73: malloc <span class="token punctuation">(</span>vg_replace_malloc.c:309<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40058E: f1 <span class="token punctuation">(</span>example_file.c:5<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400644: main <span class="token punctuation">(</span>example_file.c:22<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Invalid <span class="token builtin class-name">read</span> of size <span class="token number">4</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x400605: inner_fn <span class="token punctuation">(</span>example_file.c:16<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token assign-left variable">9</span><span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Address 0x5205044 is <span class="token number">0</span> bytes after a block of size <span class="token number">4</span> alloc’d
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4C29F73: malloc <span class="token punctuation">(</span>vg_replace_malloc.c:309<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40058E: f1 <span class="token punctuation">(</span>example_file.c:5<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400644: main <span class="token punctuation">(</span>example_file.c:22<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Conditional jump or move depends on uninitialised value<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4E81C5E: vfprintf <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E8A4A8: <span class="token builtin class-name">printf</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4005BC: inner_fn <span class="token punctuation">(</span>example_file.c:10<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400629: inner_fn <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Use of uninitialised value of size <span class="token number">8</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4E7F32B: _itoa_word <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E835B0: vfprintf <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E8A4A8: <span class="token builtin class-name">printf</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4005BC: inner_fn <span class="token punctuation">(</span>example_file.c:10<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400629: inner_fn <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Conditional jump or move depends on uninitialised value<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4E7F335: _itoa_word <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E835B0: vfprintf <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E8A4A8: <span class="token builtin class-name">printf</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4005BC: inner_fn <span class="token punctuation">(</span>example_file.c:10<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400629: inner_fn <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Conditional jump or move depends on uninitialised value<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4E835FF: vfprintf <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E8A4A8: <span class="token builtin class-name">printf</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4005BC: inner_fn <span class="token punctuation">(</span>example_file.c:10<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400629: inner_fn <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Conditional jump or move depends on uninitialised value<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4E81D2B: vfprintf <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E8A4A8: <span class="token builtin class-name">printf</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4005BC: inner_fn <span class="token punctuation">(</span>example_file.c:10<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400629: inner_fn <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Conditional jump or move depends on uninitialised value<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4E81DAE: vfprintf <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E8A4A8: <span class="token builtin class-name">printf</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4005BC: inner_fn <span class="token punctuation">(</span>example_file.c:10<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400629: inner_fn <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token assign-left variable">10</span><span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
Inner <span class="token keyword">function</span> called with value <span class="token parameter variable">-4</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Conditional jump or move depends on uninitialised value<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4005C6: inner_fn <span class="token punctuation">(</span>example_file.c:11<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x400629: inner_fn <span class="token punctuation">(</span>example_file.c:18<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x40065E: main <span class="token punctuation">(</span>example_file.c:24<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Syscall param exit_group<span class="token punctuation">(</span>status<span class="token punctuation">)</span> contains uninitialised byte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> at 0x4EFCC09: _Exit <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E70CAA: __run_exit_handlers <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E70D36: <span class="token builtin class-name">exit</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> by 0x4E5955B: <span class="token punctuation">(</span>below main<span class="token punctuation">)</span> <span class="token punctuation">(</span>in /usr/lib64/libc-2.17.so<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> HEAP SUMMARY:
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> <span class="token keyword">in</span> use at exit: <span class="token number">8</span> bytes <span class="token keyword">in</span> <span class="token number">2</span> blocks
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> total heap usage: <span class="token number">2</span> allocs, <span class="token number">0</span> frees, <span class="token number">8</span> bytes allocated
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> LEAK SUMMARY:
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> definitely lost: <span class="token number">8</span> bytes <span class="token keyword">in</span> <span class="token number">2</span> blocks
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> indirectly lost: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> possibly lost: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> still reachable: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> suppressed: <span class="token number">0</span> bytes <span class="token keyword">in</span> <span class="token number">0</span> blocks
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Rerun with --leak-check<span class="token operator">=</span>full to see details of leaked memory
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> Use --track-origins<span class="token operator">=</span>yes to see where uninitialised values come from
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> For lists of detected and suppressed errors, rerun with: <span class="token parameter variable">-s</span>
<span class="token operator">==</span><span class="token number">4892</span><span class="token operator">==</span> ERROR SUMMARY: <span class="token number">10</span> errors from <span class="token number">10</span> contexts <span class="token punctuation">(</span>suppressed: <span class="token number">0</span> from <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54),u={href:"https://www.cs.cmu.edu/~15122/handouts/gts/valgrind.pdf",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.cs.cmu.edu/~15122/handouts.shtml",target:"_blank",rel:"noopener noreferrer"};function d(b,m){const s=c("ExternalLinkIcon");return t(),o("div",null,[r,n("p",null,[n("a",u,[a("https://www.cs.cmu.edu/~15122/handouts/gts/valgrind.pdf"),e(s)]),n("a",k,[a("https://www.cs.cmu.edu/~15122/handouts.shtml"),e(s)])])])}const f=p(i,[["render",d],["__file","linux-valgrind.html.vue"]]);export{f as default};
