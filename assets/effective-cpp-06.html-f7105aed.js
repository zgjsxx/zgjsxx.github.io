const e=JSON.parse('{"key":"v-cda0f904","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-06.html","title":"effective c++ 06 不自动生成的函数，就明确拒绝","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 06 不自动生成的函数，就明确拒绝 分析 方法1:将成员函数声明为private并不予实现 下面是一个例子，这个例子如果进行赋值编译将不会通过。 class HomeForSale { public: \\tHomeForSale() {} private: \\tHomeForSale(const HomeForSale&amp;); \\tHomeForSale&amp; operator=(const HomeForSale&amp;); }; int main() { HomeForSale h1; HomeForSale h2 = h1; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-06.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 06 不自动生成的函数，就明确拒绝"}],["meta",{"property":"og:description","content":"effective c++ 06 不自动生成的函数，就明确拒绝 分析 方法1:将成员函数声明为private并不予实现 下面是一个例子，这个例子如果进行赋值编译将不会通过。 class HomeForSale { public: \\tHomeForSale() {} private: \\tHomeForSale(const HomeForSale&amp;); \\tHomeForSale&amp; operator=(const HomeForSale&amp;); }; int main() { HomeForSale h1; HomeForSale h2 = h1; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T06:58:32.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-11T06:58:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 06 不自动生成的函数，就明确拒绝\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T06:58:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"方法1:将成员函数声明为private并不予实现","slug":"方法1-将成员函数声明为private并不予实现","link":"#方法1-将成员函数声明为private并不予实现","children":[]},{"level":2,"title":"方法2：继承Uncopyable","slug":"方法2-继承uncopyable","link":"#方法2-继承uncopyable","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788312000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.63,"words":190},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-06.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 06 不自动生成的函数，就明确拒绝</h1>\\n<h2> 分析</h2>\\n<h2> 方法1:将成员函数声明为private并不予实现</h2>\\n<p>下面是一个例子，这个例子如果进行赋值编译将不会通过。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">HomeForSale</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">HomeForSale</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">HomeForSale</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> HomeForSale<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tHomeForSale<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> HomeForSale<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    HomeForSale h1<span class=\\"token punctuation\\">;</span>\\n    HomeForSale h2 <span class=\\"token operator\\">=</span> h1<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
