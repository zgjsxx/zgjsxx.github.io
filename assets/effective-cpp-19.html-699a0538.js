import{_ as e,V as t,W as i,a0 as l}from"./framework-9a29aaa0.js";const a={},c=l('<h1 id="effective-c-19-设置class犹如设计type" tabindex="-1"><a class="header-anchor" href="#effective-c-19-设置class犹如设计type" aria-hidden="true">#</a> effective c++ 19 设置class犹如设计type</h1><p>哎，该讲也是一个非常宽泛的话题。需要程序员在工作中不断积累。作者在本节中也没有举任何的例子，本节的话题实在太大， 本人的建议就是去多看看优秀的开源项目， 看看别人是如何设计类的，看的多了自然就会有进步。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>当你需要设计一个新的type时，你可以思考下面的一些问题。</p><ul><li>新type的对象应该如何被创建和销毁</li><li>对象的初始化和对象的复制应该有什么样的差别。</li><li>新type的对象如果被passed by value，意味着什么?</li><li>什么时新type的&quot;合法值&quot;。</li><li>你的新type需要配合某个继承体系吗?</li><li>你的新type需要什么样的转换?</li><li>什么样的操作符和函数对此新type而言是合理的?</li><li>什么样的标准函数应该驳回?</li><li>什么是新type的&quot;未声明接口&quot;?</li><li>你的新type有多么一般化?</li><li>你真的需要一个新type吗?</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>Class的设计就是type的设计。在定义一个新的type之前，请确定你已经考虑过本条款覆盖的所讨论的主题。</li></ul>',7),s=[c];function p(r,d){return t(),i("div",null,s)}const n=e(a,[["render",p],["__file","effective-cpp-19.html.vue"]]);export{n as default};
