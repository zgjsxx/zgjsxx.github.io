import{_ as n,V as s,W as a,a0 as t}from"./framework-c954d91f.js";const p={},e=t(`<h1 id="linux-0-11-文件系统namei-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统namei-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统namei.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="permission" tabindex="-1"><a class="header-anchor" href="#permission" aria-hidden="true">#</a> permission</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">permission</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span><span class="token keyword">int</span> mask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查进程操作文件inode的权限。</p><table><thead><tr><th>mask的值</th><th>含义</th></tr></thead><tbody><tr><td>mask = 4</td><td>检查进程是否有权限读该inode</td></tr><tr><td>mask = 2</td><td>检查进程是否有权限写该inode</td></tr><tr><td>mask = 1</td><td>检查进程是否有权限执行该inode</td></tr><tr><td>mask = 5</td><td>检查进程是否有权限读和执行该inode</td></tr><tr><td>mask = 3</td><td>检查进程是否有权限写和执行该inode</td></tr><tr><td>mask = 6</td><td>检查进程是否有权限读和写该inode</td></tr><tr><td>mask = 7</td><td>检查进程是否有权限读写和执行该inode</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> mode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">;</span>

<span class="token comment">/* special case: not even root can read/write a deleted file */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>euid<span class="token operator">==</span>inode<span class="token operator">-&gt;</span>i_uid<span class="token punctuation">)</span>
		mode <span class="token operator">&gt;&gt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>egid<span class="token operator">==</span>inode<span class="token operator">-&gt;</span>i_gid<span class="token punctuation">)</span>
		mode <span class="token operator">&gt;&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> mask <span class="token operator">&amp;</span> <span class="token number">0007</span><span class="token punctuation">)</span> <span class="token operator">==</span> mask<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//访问权限和掩码相同，或者是超级用户</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于比较name的和de-&gt;name的前len个字符是否相等。(注意name处于用户空间)</p><p>首先对参数进行校验。如果目录项指针de为空， 或者de中的inode节点指针为空，或者长度len大于文件名的最大长度，则直接返回0。</p><p>接下来是对目录项中文件名的长度进行校验，如果其长度大于len，则<code>de-&gt;name[len]</code>的值不为NULL。在这种情况下，直接返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">register</span> <span class="token keyword">int</span> same <span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>de <span class="token operator">||</span> <span class="token operator">!</span>de<span class="token operator">-&gt;</span>inode <span class="token operator">||</span> len <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> NAME_LEN <span class="token operator">&amp;&amp;</span> de<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过一段汇编实现字符串指定长度的比较。</p><p>其中，esi指向name，edi指向de-&gt;name, ecx的值为len， 将eax的值赋值给same。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;cld\\n\\t&quot;</span><span class="token comment">//清方向位</span>
	<span class="token string">&quot;fs ; repe ; cmpsb\\n\\t&quot;</span><span class="token comment">//用户空间 执行循环比较 while(ecx--) esi++ == edi++</span>
	<span class="token string">&quot;setz %%al&quot;</span><span class="token comment">//如果结果一样，则设置al = 1</span>
	<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span>
	<span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;D&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> de<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span> <span class="token punctuation">(</span>len<span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> same<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，下面这行汇编较难理解，</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>fs <span class="token punctuation">;</span> repe <span class="token punctuation">;</span> cmpsb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>cmpsb指令用于比较ds:esi和es:edi指向的一个字节的内容。 而加上了前缀repe之后，就代表重复执行cmpsb指令，直到ecx等于0，或者ds:esi和es:edi的值不等。 但是由于name在用户空间，因此还需要加上fs前缀，使得被操作数修改为fs:esi。</p><h3 id="find-entry" tabindex="-1"><a class="header-anchor" href="#find-entry" aria-hidden="true">#</a> find_entry</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span><span class="token operator">*</span> dir<span class="token punctuation">,</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> namelen<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token operator">*</span> res_dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假设现在有一个路径/home/work/test.txt，dir指向的是/home，name指向的是work/test.txt，namelen=4， 那么该函数将会找到/home/work对应的dir_entry(dir_entry中包含了inode号和目录名字)。</p><p>刚开始定义了一些参数，并对一些参数的有效性进行了校验。 如果定义了宏NO_TRUNCATE， 如果长度超长，就直接返回NULL。如果没有定义该宏， 长度超长，则进行截断。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> entries<span class="token punctuation">;</span>
	<span class="token keyword">int</span> block<span class="token punctuation">,</span>i<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">NO_TRUNCATE</span></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span>
		namelen <span class="token operator">=</span> NAME_LEN<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来取出当前的目录中有多少个目录项。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>entries <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>res_dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来对一些特别的场景进行处理。</p><p>首先，假设一个进程的根目录是<code>/home/work</code>,但是目前访问的地址是<code>/home/work/..</code>, 这种情况是不被允许的，因此这里会将<code>/home/work/..</code>处理成<code>/home/work/.</code>。</p><p>另外，如果该目录的i节点号等于1，说明是文件系统的根inode节点。则取出文件系统的超级块，查看该文件系统被安装到了哪个inode节点上，如果该节点是存在的，那么会将(*dir)指向安装的inode节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* check for &#39;..&#39;, as we might have to do some &quot;magic&quot; for it */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>namelen<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">&#39;.&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">/* &#39;..&#39; in a pseudo-root results in a faked &#39;.&#39; (just change namelen) */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token operator">==</span> current<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span>
			namelen<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_num <span class="token operator">==</span> ROOT_INO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">/* &#39;..&#39; over a mount-point results in &#39;dir&#39; being exchanged for the mounted
   directory-inode. NOTE! We set mounted, so that we can iput the new dir */</span>
			sb<span class="token operator">=</span><span class="token function">get_super</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">iput</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">=</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">;</span>
				<span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着取出dir对应的inode节点对应的数据块的内容(dir目录下的文件)。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来便进行遍历所有的目录项的内容，比较de-&gt;name和name 相同的项。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>de <span class="token operator">&gt;=</span> BLOCK_SIZE<span class="token operator">+</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
		bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> <span class="token function">bmap</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">,</span>i<span class="token operator">/</span>DIR_ENTRIES_PER_BLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			i <span class="token operator">+=</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>namelen<span class="token punctuation">,</span>name<span class="token punctuation">,</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">*</span>res_dir <span class="token operator">=</span> de<span class="token punctuation">;</span>
		<span class="token keyword">return</span> bh<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	de<span class="token operator">++</span><span class="token punctuation">;</span>
	i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-entry" tabindex="-1"><a class="header-anchor" href="#add-entry" aria-hidden="true">#</a> add_entry</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">add_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> namelen<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token operator">*</span> res_dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数用于向指定的目录添加一个目录项。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> block<span class="token punctuation">,</span>i<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>

	<span class="token operator">*</span>res_dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">NO_TRUNCATE</span></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span>
		namelen <span class="token operator">=</span> NAME_LEN<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> dir<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>de <span class="token operator">&gt;=</span> BLOCK_SIZE<span class="token operator">+</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
			bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
			block <span class="token operator">=</span> <span class="token function">create_block</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>i<span class="token operator">/</span>DIR_ENTRIES_PER_BLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				i <span class="token operator">+=</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">;</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> dir<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			de<span class="token operator">-&gt;</span>inode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
			dir<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			dir<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			dir<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>de<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			dir<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NAME_LEN <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
				de<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>namelen<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
			bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token operator">*</span>res_dir <span class="token operator">=</span> de<span class="token punctuation">;</span>
			<span class="token keyword">return</span> bh<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		de<span class="token operator">++</span><span class="token punctuation">;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-dir" tabindex="-1"><a class="header-anchor" href="#get-dir" aria-hidden="true">#</a> get_dir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_dir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是搜寻最下层的目录的inode号。</p><p>例如pathname是/home/work/test.txt，那么get_dir将返回/home/work目录的inode。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> c<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> thisname<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
<span class="token keyword">int</span> namelen<span class="token punctuation">,</span>inr<span class="token punctuation">,</span>idev<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>root <span class="token operator">||</span> <span class="token operator">!</span>current<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;No root inode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>pwd <span class="token operator">||</span> <span class="token operator">!</span>current<span class="token operator">-&gt;</span>pwd<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;No cwd inode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	inode <span class="token operator">=</span> current<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
	pathname<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	inode <span class="token operator">=</span> current<span class="token operator">-&gt;</span>pwd<span class="token punctuation">;</span>
<span class="token keyword">else</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>	<span class="token comment">/* empty name is bad */</span>
inode<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	thisname <span class="token operator">=</span> pathname<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>MAY_EXEC<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>namelen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>pathname<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">!=</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namelen<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token comment">/* nothing */</span> <span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span>
		<span class="token keyword">return</span> inode<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token punctuation">,</span>thisname<span class="token punctuation">,</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	inr <span class="token operator">=</span> de<span class="token operator">-&gt;</span>inode<span class="token punctuation">;</span>
	idev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">;</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">iget</span><span class="token punctuation">(</span>idev<span class="token punctuation">,</span>inr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dir-namei" tabindex="-1"><a class="header-anchor" href="#dir-namei" aria-hidden="true">#</a> dir_namei</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span>
	<span class="token keyword">int</span> <span class="token operator">*</span> namelen<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是返回指定路径(pathname)所在目录的i节点， 并返回其上层目录的名称。</p><p>例如：pathname = /home/work/test.txt， dir_namei将返回目录<code>/home/work</code>的i节点，同时设置name = &quot;test.txt&quot;, namelen = 8。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> c<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">get_dir</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
basename <span class="token operator">=</span> pathname<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>pathname<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span>
		basename<span class="token operator">=</span>pathname<span class="token punctuation">;</span>
<span class="token operator">*</span>namelen <span class="token operator">=</span> pathname<span class="token operator">-</span>basename<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">*</span>name <span class="token operator">=</span> basename<span class="token punctuation">;</span>
<span class="token keyword">return</span> dir<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="namei" tabindex="-1"><a class="header-anchor" href="#namei" aria-hidden="true">#</a> namei</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据路径名字获取文件的inode节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span>
<span class="token keyword">int</span> inr<span class="token punctuation">,</span>dev<span class="token punctuation">,</span>namelen<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span><span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span>			<span class="token comment">/* special case: &#39;/usr/&#39; etc */</span>
	<span class="token keyword">return</span> dir<span class="token punctuation">;</span>
bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span>basename<span class="token punctuation">,</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
inr <span class="token operator">=</span> de<span class="token operator">-&gt;</span>inode<span class="token punctuation">;</span>
dev <span class="token operator">=</span> dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">;</span>
<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
dir<span class="token operator">=</span><span class="token function">iget</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>inr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	dir<span class="token operator">-&gt;</span>i_atime<span class="token operator">=</span>CURRENT_TIME<span class="token punctuation">;</span>
	dir<span class="token operator">-&gt;</span>i_dirt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> dir<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="open-namei" tabindex="-1"><a class="header-anchor" href="#open-namei" aria-hidden="true">#</a> open_namei</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">open_namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span><span class="token operator">*</span> res_inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数作用是根据文件路径pathname打开一个文件，找到其inode。是open函数使用的namei函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span>
<span class="token keyword">int</span> inr<span class="token punctuation">,</span>dev<span class="token punctuation">,</span>namelen<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_TRUNC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_ACCMODE<span class="token punctuation">)</span><span class="token punctuation">)</span>
	flag <span class="token operator">|=</span> O_WRONLY<span class="token punctuation">;</span>
mode <span class="token operator">&amp;=</span> <span class="token number">0777</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>umask<span class="token punctuation">;</span>
mode <span class="token operator">|=</span> I_REGULAR<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span><span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-mknod" tabindex="-1"><a class="header-anchor" href="#sys-mknod" aria-hidden="true">#</a> sys_mknod</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_mknod</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是创建一个设备特殊文件或者普通文件节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span>
	<span class="token keyword">int</span> namelen<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果不是超级用户，返回出错</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//检查权限</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span>basename<span class="token punctuation">,</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查是否已经存在</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	inode <span class="token operator">=</span> <span class="token function">new_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//否则创建一个i节点</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">S_ISCHR</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
		inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dev<span class="token punctuation">;</span>  <span class="token comment">//i_zone存放设备号</span>
	inode<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span>
	inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	bh <span class="token operator">=</span> <span class="token function">add_entry</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>basename<span class="token punctuation">,</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加到目录下</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span>
	bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-mkdir" tabindex="-1"><a class="header-anchor" href="#sys-mkdir" aria-hidden="true">#</a> sys_mkdir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="empty-dir" tabindex="-1"><a class="header-anchor" href="#empty-dir" aria-hidden="true">#</a> empty_dir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">empty_dir</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-rmdir" tabindex="-1"><a class="header-anchor" href="#sys-rmdir" aria-hidden="true">#</a> sys_rmdir</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-unlink" tabindex="-1"><a class="header-anchor" href="#sys-unlink" aria-hidden="true">#</a> sys_unlink</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-link" tabindex="-1"><a class="header-anchor" href="#sys-link" aria-hidden="true">#</a> sys_link</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> oldname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> newname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> oldinode<span class="token punctuation">,</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span>
	<span class="token keyword">int</span> namelen<span class="token punctuation">;</span>

	oldinode<span class="token operator">=</span><span class="token function">namei</span><span class="token punctuation">(</span>oldname<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldinode<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>oldinode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>newname<span class="token punctuation">,</span><span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>basename<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev <span class="token operator">!=</span> oldinode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EXDEV<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span>basename<span class="token punctuation">,</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	bh <span class="token operator">=</span> <span class="token function">add_entry</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>basename<span class="token punctuation">,</span>namelen<span class="token punctuation">,</span><span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> oldinode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span>
	bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
	oldinode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">++</span><span class="token punctuation">;</span>
	oldinode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span>
	oldinode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,74),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-fs-namei.html.vue"]]);export{r as default};
