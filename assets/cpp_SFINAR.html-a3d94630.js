import{_ as o,V as p,W as c,X as s,Y as n,$ as t,a0 as e,F as l}from"./framework-9a29aaa0.js";const r={},i=e(`<h1 id="c-模板之sfinae规则" tabindex="-1"><a class="header-anchor" href="#c-模板之sfinae规则" aria-hidden="true">#</a> C++模板之SFINAE规则</h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>SFINAE是Substitution Failure Is Not An Error的缩写，翻译过来的意思是替换失败并不是一个错误。</p><p><strong>SFINAE</strong>是<strong>模板元编程</strong>中常见的一种技巧，如果模板实例化后的某个模板函数（模板类）对该调用无效，那么将继续寻找其他重载决议，而不是引发一个编译错误。</p><p>因此一句话概括SFINAE，就是模板匹配过程中会尝试各个模板，直到所有模板都匹配失败，才会认为是真正的错误。</p><p>这个点是c++模板匹配的一个规则，通常情况下，使用该规则，我们可以判断某个类是否有否定义了内嵌类型。下面通过例子来进行讲解。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>下面的这个例子便是在编译过程中检验T是否有一个<code>T::iterator_category</code>的类型定义。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">has_iterator_category</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">two</span> <span class="token punctuation">{</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token keyword">char</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">C</span><span class="token operator">&gt;</span>
    <span class="token keyword">static</span> two<span class="token operator">&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">C</span><span class="token double-colon punctuation">::</span>iterator_category<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token operator">&gt;</span>
    <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">test</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">input_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">output_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">forward_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">input_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">bidirectional_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">forward_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">random_access_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">bidirectional_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token class-name">ListIterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">typedef</span> forward_iterator_tag iterator_category<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> has_iterator_category<span class="token operator">&lt;</span>ListIterator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">//true</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> has_iterator_category<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">//false</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>true
false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11),u={href:"https://godbolt.org/z/6GG9YWjWq",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/Alinshans/MyTinySTL",target:"_blank",rel:"noopener noreferrer"},d=e("<p>iterator_traits 只能萃取符合MyTinySTL设计的迭代器, MyTinySTL的迭代器中都会内置定义iterator_category这个类型，这个类型就代表了迭代的类型。因此iterator_traits想要萃取出迭代器类型，必须要确保迭代器有这个类型，于是就使用了SFINAE实现了这个点。</p><p>has_iterator_category有两个test函数，第一个test函数<code>static two&amp; test(typename C::iterator_category*)</code>，其要求模板T拥有iterator_category的嵌套类型，如果满足将返回two类型的值。第二个test函数<code>test(...)</code>接受任意类型的参数，这是一个default匹配，第一个test匹配不上时，将匹配该函数，该函数返回char类型的值。</p><p>当我们传入ListIterator类型进入has_iterator_category，<code>has_iterator_category&lt;ListIterator&gt;</code>将匹配第一个test函数，其value就是true。</p><p>当我们传入int类型进入has_iterator_category，<code>has_iterator_category&lt;int&gt;</code>将匹配第二个test函数，其value就是false。</p>",4);function v(m,_){const a=l("ExternalLinkIcon");return p(),c("div",null,[i,s("p",null,[s("a",u,[n("have a try"),t(a)])]),s("p",null,[n("上面的这个例子实际上取自于"),s("a",k,[n("MyTinySTL"),t(a)]),n("中关于iterator_traits的实现。")]),d])}const b=o(r,[["render",v],["__file","cpp_SFINAR.html.vue"]]);export{b as default};
