const n=JSON.parse(`{"key":"v-4f5301fd","path":"/posts/Program_language/cpp/cpp_cpp20_atomic_wait.html","title":"c++20实用小特性之原子变量的wait/signal","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++"],"description":"c++20实用小特性之原子变量的wait/signal These functions are guaranteed to return only if value has changed, even if the underlying implementation unblocks spuriously. 仅当值发生更改时，这些函数才保证返回，即使底层实现虚假地解除阻塞 也就是说原子变量的wait在应用层可以确保不会虚假唤醒， 这就可以避免条件变量那样的循环测试条件。 #include &lt;atomic&gt; #include &lt;chrono&gt; #include &lt;future&gt; #include &lt;iostream&gt; #include &lt;thread&gt; using namespace std::literals; int main() { std::atomic&lt;bool&gt; all_tasks_completed{false}; std::atomic&lt;unsigned&gt; completion_count{}; std::future&lt;void&gt; task_futures[16]; std::atomic&lt;unsigned&gt; outstanding_task_count{16}; // Spawn several tasks which take different amounts of // time, then decrement the outstanding task count. for (std::future&lt;void&gt;&amp; task_future : task_futures) { task_future = std::async([&amp;] { // This sleep represents doing real work... std::this_thread::sleep_for(2000ms); ++completion_count; --outstanding_task_count; // When the task count falls to zero, notify // the waiter (main thread in this case). if (outstanding_task_count.load() == 0) { all_tasks_completed = true; all_tasks_completed.notify_one(); } }); } all_tasks_completed.wait(false); std::cout &lt;&lt; \\"Tasks completed = \\" &lt;&lt; completion_count.load() &lt;&lt; '\\\\n'; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_cpp20_atomic_wait.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++20实用小特性之原子变量的wait/signal"}],["meta",{"property":"og:description","content":"c++20实用小特性之原子变量的wait/signal These functions are guaranteed to return only if value has changed, even if the underlying implementation unblocks spuriously. 仅当值发生更改时，这些函数才保证返回，即使底层实现虚假地解除阻塞 也就是说原子变量的wait在应用层可以确保不会虚假唤醒， 这就可以避免条件变量那样的循环测试条件。 #include &lt;atomic&gt; #include &lt;chrono&gt; #include &lt;future&gt; #include &lt;iostream&gt; #include &lt;thread&gt; using namespace std::literals; int main() { std::atomic&lt;bool&gt; all_tasks_completed{false}; std::atomic&lt;unsigned&gt; completion_count{}; std::future&lt;void&gt; task_futures[16]; std::atomic&lt;unsigned&gt; outstanding_task_count{16}; // Spawn several tasks which take different amounts of // time, then decrement the outstanding task count. for (std::future&lt;void&gt;&amp; task_future : task_futures) { task_future = std::async([&amp;] { // This sleep represents doing real work... std::this_thread::sleep_for(2000ms); ++completion_count; --outstanding_task_count; // When the task count falls to zero, notify // the waiter (main thread in this case). if (outstanding_task_count.load() == 0) { all_tasks_completed = true; all_tasks_completed.notify_one(); } }); } all_tasks_completed.wait(false); std::cout &lt;&lt; \\"Tasks completed = \\" &lt;&lt; completion_count.load() &lt;&lt; '\\\\n'; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-15T06:52:40.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2023-08-15T06:52:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++20实用小特性之原子变量的wait/signal\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-15T06:52:40.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1692082360000,"updatedTime":1692082360000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.8,"words":239},"filePathRelative":"posts/Program_language/cpp/cpp_cpp20_atomic_wait.md","localizedDate":"2023年8月15日","excerpt":"<h1> c++20实用小特性之原子变量的wait/signal</h1>\\n<blockquote>\\n<p>These functions are guaranteed to return only if value has changed, even if the underlying implementation unblocks spuriously.</p>\\n</blockquote>\\n<p>仅当值发生更改时，这些函数才保证返回，即使底层实现虚假地解除阻塞</p>\\n<p>也就是说原子变量的wait在应用层可以确保不会虚假唤醒， 这就可以避免条件变量那样的循环测试条件。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;atomic&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;chrono&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;future&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;thread&gt;</span></span>\\n\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token double-colon punctuation\\">::</span>literals<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>atomic<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">bool</span><span class=\\"token operator\\">&gt;</span> all_tasks_completed<span class=\\"token punctuation\\">{</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>atomic<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">unsigned</span><span class=\\"token operator\\">&gt;</span> completion_count<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>future<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">&gt;</span> task_futures<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">16</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>atomic<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">unsigned</span><span class=\\"token operator\\">&gt;</span> outstanding_task_count<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">16</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// Spawn several tasks which take different amounts of</span>\\n    <span class=\\"token comment\\">// time, then decrement the outstanding task count.</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>future<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> task_future <span class=\\"token operator\\">:</span> task_futures<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        task_future <span class=\\"token operator\\">=</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">async</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// This sleep represents doing real work...</span>\\n            std<span class=\\"token double-colon punctuation\\">::</span>this_thread<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">sleep_for</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2000</span>ms<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token operator\\">++</span>completion_count<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token operator\\">--</span>outstanding_task_count<span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token comment\\">// When the task count falls to zero, notify</span>\\n            <span class=\\"token comment\\">// the waiter (main thread in this case).</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>outstanding_task_count<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                all_tasks_completed <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                all_tasks_completed<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">notify_one</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    all_tasks_completed<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">wait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Tasks completed = \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> completion_count<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
