const t=JSON.parse('{"key":"v-56669b17","path":"/posts/design-pattern/bridge.html","title":"桥接模式","lang":"zh-CN","frontmatter":{"category":["设计模式"],"tag":["设计模式"],"description":"桥接模式 问答题：假设有一个GUI库，GUI库需要运行在windows/linux/mac上，现在需要设计一个button类，该button有click和draw两个方法，怎么使用桥接模式进行设计？ 假设我们正在设计一个GUI库，并需要实现一个Button组件。我们希望Button可以在不同的平台（如Windows、MacOS、Linux）上运行，并且可以支持不同的外观和行为（如经典风格、现代风格）。这正是桥接模式的典型应用场景。 1.设计思路 我们可以将Button的抽象部分与其具体实现分离开来，使得Button的逻辑（例如，点击事件）和外观（例如，按钮的绘制方式）可以独立变化。为此，我们需要两个层次的类结构：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/design-pattern/bridge.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"桥接模式"}],["meta",{"property":"og:description","content":"桥接模式 问答题：假设有一个GUI库，GUI库需要运行在windows/linux/mac上，现在需要设计一个button类，该button有click和draw两个方法，怎么使用桥接模式进行设计？ 假设我们正在设计一个GUI库，并需要实现一个Button组件。我们希望Button可以在不同的平台（如Windows、MacOS、Linux）上运行，并且可以支持不同的外观和行为（如经典风格、现代风格）。这正是桥接模式的典型应用场景。 1.设计思路 我们可以将Button的抽象部分与其具体实现分离开来，使得Button的逻辑（例如，点击事件）和外观（例如，按钮的绘制方式）可以独立变化。为此，我们需要两个层次的类结构："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-14T05:28:14.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-08-14T05:28:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"桥接模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-14T05:28:14.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"问答题：假设有一个GUI库，GUI库需要运行在windows/linux/mac上，现在需要设计一个button类，该button有click和draw两个方法，怎么使用桥接模式进行设计？","slug":"问答题-假设有一个gui库-gui库需要运行在windows-linux-mac上-现在需要设计一个button类-该button有click和draw两个方法-怎么使用桥接模式进行设计","link":"#问答题-假设有一个gui库-gui库需要运行在windows-linux-mac上-现在需要设计一个button类-该button有click和draw两个方法-怎么使用桥接模式进行设计","children":[]}],"git":{"createdTime":1723613294000,"updatedTime":1723613294000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":4.07,"words":1222},"filePathRelative":"posts/design-pattern/bridge.md","localizedDate":"2024年8月14日","excerpt":"<h1> 桥接模式</h1>\\n<h2> 问答题：假设有一个GUI库，GUI库需要运行在windows/linux/mac上，现在需要设计一个button类，该button有click和draw两个方法，怎么使用桥接模式进行设计？</h2>\\n<p>假设我们正在设计一个GUI库，并需要实现一个Button组件。我们希望Button可以在不同的平台（如Windows、MacOS、Linux）上运行，并且可以支持不同的外观和行为（如经典风格、现代风格）。这正是桥接模式的典型应用场景。</p>\\n<p><strong>1.设计思路</strong></p>\\n<p>我们可以将Button的抽象部分与其具体实现分离开来，使得Button的逻辑（例如，点击事件）和外观（例如，按钮的绘制方式）可以独立变化。为此，我们需要两个层次的类结构：</p>","autoDesc":true}');export{t as data};
