import{_ as n,V as s,W as a,a0 as p}from"./framework-9a29aaa0.js";const t={},e=p(`<ul><li><a href="#linux-011-kernel%E7%9B%AE%E5%BD%95exitc%E8%AF%A6%E8%A7%A3">Linux-0.11 kernel目录exit.c详解</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B">模块简介</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3">函数详解</a><ul><li><a href="#release">release</a></li><li><a href="#send_sig">send_sig</a></li><li><a href="#kill_session">kill_session</a></li><li><a href="#sys_kill">sys_kill</a></li><li><a href="#tell_father">tell_father</a></li><li><a href="#do_exit">do_exit</a></li><li><a href="#sys_exit">sys_exit</a></li><li><a href="#sys_waitpid">sys_waitpid</a></li></ul></li></ul></li></ul><h1 id="linux-0-11-kernel目录exit-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录exit-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录exit.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>该程序主要描述了进程(任务)终止和退出的有关处理内容。主要包含：</p><ul><li>进程释放</li><li>会话(进程组)终止</li><li>程序退出处理函数</li><li>杀死进程/终止进程/挂起进程等系统调用</li></ul><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="release" tabindex="-1"><a class="header-anchor" href="#release" aria-hidden="true">#</a> release</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是去释放进程在任务数组中占用的位置，并且将进程的描述符PCB占用的内存进行释放。其调用关系如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── sys_waitpid
  └── release

├── do_exit
  └── tell_father
    └── release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>release代码如下所示，比较简单，直接看注释即可理解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token comment">//如果p为空指针什么也不做</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_TASKS <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//找到了对应的数组项</span>
        task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//将该项置空</span>
        <span class="token function">free_page</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放该内存页</span>
        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重新进行调用</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to release non-existent task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="send-sig" tabindex="-1"><a class="header-anchor" href="#send-sig" aria-hidden="true">#</a> send_sig</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">send_sig</span><span class="token punctuation">(</span><span class="token keyword">long</span> sig<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> priv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是向进程的传递一个信号。</p><p>首先对信号的数值大小做一个校验。合法范围是[1，32]</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> sig<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> sig<span class="token operator">&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着判断发送信号的进程的有效用户和待接受信号的进程的有效用户是否相等，并判断是否是超级用户， 如果二者满足其一， 就可以设置待接受进程的信号位。否则就可以报权限错误。</p><p>设置信号的过程很简单，<code>p-&gt;signal |= (1&lt;&lt;(sig-1));</code>， 即将进程PCB中signal变量的队医你个信号位写1即可。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>priv <span class="token operator">||</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>euid<span class="token operator">==</span>p<span class="token operator">-&gt;</span>euid<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  p<span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kill-session" tabindex="-1"><a class="header-anchor" href="#kill-session" aria-hidden="true">#</a> kill_session</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kill_session</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是向所有和当前进程的session相同的其他进程发送SIGHUP信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> NR_TASKS <span class="token operator">+</span> task<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>session <span class="token operator">==</span> current<span class="token operator">-&gt;</span>session<span class="token punctuation">)</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGHUP<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-kill" tabindex="-1"><a class="header-anchor" href="#sys-kill" aria-hidden="true">#</a> sys_kill</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法是系统调用<code>kill()</code>的实现，可用于向任何进程或进程组发送任何信号。不要被<code>kill</code>的名字误解，其并非只是杀死进程。</p><p>根据pid的值不同，有kill有不同的行为，概括如下：</p><ul><li><ol><li>pid大于零时，pid是信号欲送往的进程的标识。</li></ol></li><li><ol start="2"><li>pid等于零时，信号将送往所有与调用kill()的那个进程属同一个使用组的进程。</li></ol></li><li><ol start="3"><li>pid等于-1时，信号将送往所有调用进程有权给其发送信号的进程，除了进程1(init)。</li></ol></li><li><ol start="4"><li>pid小于-1时，信号将送往以-pid为组标识的进程。</li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> NR_TASKS <span class="token operator">+</span> task<span class="token punctuation">;</span>
<span class="token keyword">int</span> err<span class="token punctuation">,</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">==</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">==</span> <span class="token operator">-</span>pid<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tell-father" tabindex="-1"><a class="header-anchor" href="#tell-father" aria-hidden="true">#</a> tell_father</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tell_father</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于向父进程发送SIGCHLD信号。</p><p>这里在处理时，如果父进程已先行终止，则子进程应该被进程1收容。Linux-0.11中如果没有找到父进程则自己释放。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>pid <span class="token operator">!=</span> pid<span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
<span class="token comment">/* if we don&#39;t find any fathers, we just release ourselves */</span>
<span class="token comment">/* This is not really OK. Must change it to make father 1 */</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;BAD BAD - no father found\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">release</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-exit" tabindex="-1"><a class="header-anchor" href="#do-exit" aria-hidden="true">#</a> do_exit</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token keyword">long</span> code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>do_exit</code>是系统调用<code>exit</code>的入口方法，其用于退出处理程序。</p><p>其调用关系如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── sys_exit
  └── do_exit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的开始首先是释放当前进程<strong>代码段</strong>和<strong>数据段</strong>的内存页。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后遍历进程表，如果当前进程有子进程，那么将子进程的父进程设置为1号进程(init进程)。如果该子进程已经处于僵死(ZOMBIE)状态，则向进程1发送子进程终止的信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_TASKS <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>father <span class="token operator">==</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>father <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_ZOMBIE<span class="token punctuation">)</span>
      <span class="token comment">/* assumption task[1] is always init */</span>
      <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来关闭当前进程打开着的所有文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_OPEN <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token function">sys_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对当前进程的工作目录pwd，根目录root以及执行程序文件的i节点进行同步操作，放回各个i节点并分别置空(释放)。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>pwd<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>executable<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前进程是会话头领(leader)进程并且其有控制终端，则释放该终端。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>leader <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>tty <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		tty_table<span class="token punctuation">[</span>current<span class="token operator">-&gt;</span>tty<span class="token punctuation">]</span><span class="token punctuation">.</span>pgrp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前进程上次使用过协处理器，则将<code>last_task_used_math</code>置空。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span>
		last_task_used_math <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前进程是leader进程，则终止该会话的所有相关进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>leader<span class="token punctuation">)</span>
		<span class="token function">kill_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将当前进程置为僵死状态，表明当前进程已经释放了资源，并保存退出码。通知父进程（当前进程的父进程），向其发送 SIGCHLD 信号，告知子进程已经停止或终止。最后，调用调度函数 schedule()，重新调度进程运行，让父进程处理僵死状态的其他善后事宜。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_ZOMBIE<span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token comment">// 通知父进程，也即向父进程发送信号SIGCHLD - 子进程将停止或终止。</span>
	<span class="token function">tell_father</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 重新调度进程运行，以让父进程处理僵死其他的善后事宜。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-exit" tabindex="-1"><a class="header-anchor" href="#sys-exit" aria-hidden="true">#</a> sys_exit</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_exit</span> <span class="token punctuation">(</span><span class="token keyword">int</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的内部调用了<code>do_exit</code>函数实现进程的退出。</p><h3 id="sys-waitpid" tabindex="-1"><a class="header-anchor" href="#sys-waitpid" aria-hidden="true">#</a> sys_waitpid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_waitpid</span> <span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>stat_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是<code>waitpid</code>函数的系统调用，其作用是挂起当前进程，直到进程号等于入参pid的子进程退出。</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>pid &lt; -1</td><td>等待进程组号为pid绝对值的任何子进程</td></tr><tr><td>pid = -1</td><td>等待任何子进程，此时的waitpid()函数就退化成了普通的wait()函数</td></tr><tr><td>pid = 0</td><td>等待进程组号与目前进程相同的任何子进程，也就是说任何和调用waitpid()函数的进程在同一个进程组的进程</td></tr><tr><td>pid &gt; 0</td><td>等待进程号为pid的子进程</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>p <span class="token operator">||</span> <span class="token operator">*</span>p <span class="token operator">==</span> current<span class="token punctuation">)</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>father <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span><span class="token comment">//如果当前项不是当前进程的子进程</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pid <span class="token operator">!=</span> pid<span class="token punctuation">)</span><span class="token comment">//不是要寻找的子进程</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token comment">//属于同一个进程组</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> <span class="token operator">-</span>pid<span class="token punctuation">)</span><span class="token comment">//进程组号等于pid的绝对值</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果前3个对pid的判断都不符合，则表示当前进程正在等待其任何子进程，也即<code>pid=-1</code>的情况，此时所选择到的进程p或者是其进程号等于指定pid，或者是当前进程组中的任何子进程，或者 是进程号等于指定pid绝对值的子进程，或者是任何子进程(此时指定的pid等于-1)。接下来根据这个子进程p所处的状态来处理。</p><p>这里的判断包含两种场景，一种是进程状态是<code>TASK_STOPPED</code>， 一种是进程状态是<code>TASK_ZOMBIE</code>。</p><p>对于<code>TASK_STOPPED</code>：</p><p>子进程p处于停止状态时，如果此时WUNTRACED标志没有置位，表示程序无须立刻返回，于是继续扫描处理其他进程。如果<code>WUNTRACED</code>置位，则把状态信息<code>0x7f</code>放入<code>*stat_addr</code>，并立刻返回子进程号<code>pid</code>。这里<code>0x7f</code>表示的返回状态是<code>wifstopped（）</code>宏为真。</p><p>对于<code>TASK_ZOMBIE</code>：</p><p>如果子进程p处于僵死状态，则首先把它在用户态和内核态运行的时间分别累计到当前进程(父进程)中，然后取出子进程的pid和退出码，并释放该子进程。最后返回子进程的退出码和pid。</p><p>通常情况下，父进程会继续运行而不等待子进程的终止。但是，当父进程调用类似 <code>waitpid()</code> 的系统调用来等待子进程时，父进程需要知道子进程的状态，包括子进程消耗的 CPU 时间。因此，在子进程终止后，其 CPU 时间会被记录下来，以供父进程查询。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>		<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>

			<span class="token keyword">case</span> TASK_STOPPED<span class="token operator">:</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>options <span class="token operator">&amp;</span> WUNTRACED<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token keyword">continue</span><span class="token punctuation">;</span>
				<span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token number">0x7f</span><span class="token punctuation">,</span>stat_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span>

			<span class="token keyword">case</span> TASK_ZOMBIE<span class="token operator">:</span>
				current<span class="token operator">-&gt;</span>cutime <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>utime<span class="token punctuation">;</span>
				current<span class="token operator">-&gt;</span>cstime <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>stime<span class="token punctuation">;</span>
				flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span>                   <span class="token comment">// 临时保存子进程pid</span>
				code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>exit_code<span class="token punctuation">;</span>             <span class="token comment">// 取子进程的退出码</span>
				<span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 释放该子进程</span>
				<span class="token function">put_fs_long</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>stat_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 置状态信息为退出码值</span>
				<span class="token keyword">return</span> flag<span class="token punctuation">;</span>                        <span class="token comment">// 返回子进程的pid</span>
            <span class="token comment">// 如果这个子进程p的状态既不是停止也不是僵死，那么就置flag=1,表示找到过一个符合</span>
            <span class="token comment">// 要求的子进程，但是它处于运行态或睡眠态。</span>
			<span class="token keyword">default</span><span class="token operator">:</span>
				flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-kernel-exit.html.vue"]]);export{r as default};
