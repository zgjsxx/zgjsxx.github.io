const n=JSON.parse(`{"key":"v-71887a40","path":"/posts/Program_language/cpp/cpp_cpp17_small_feature.html","title":"c++17的新增的小的特性","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++"],"description":"c++17的新增的小的特性 std::any std::any是一种动态类型，可以动态指向不同的数据类型。 #include &lt;any&gt; #include &lt;iostream&gt; int main() { std::cout &lt;&lt; std::boolalpha; // any type std::any a = 1; std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\\\\n'; a = 3.14; std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;double&gt;(a) &lt;&lt; '\\\\n'; a = true; std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;bool&gt;(a) &lt;&lt; '\\\\n'; // bad cast try { a = 1; std::cout &lt;&lt; std::any_cast&lt;float&gt;(a) &lt;&lt; '\\\\n'; } catch (const std::bad_any_cast&amp; e) { std::cout &lt;&lt; e.what() &lt;&lt; '\\\\n'; } // has value a = 2; if (a.has_value()) std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\\\\n'; // reset a.reset(); if (!a.has_value()) std::cout &lt;&lt; \\"no value\\\\n\\"; // pointer to contained data a = 3; int* i = std::any_cast&lt;int&gt;(&amp;a); std::cout &lt;&lt; *i &lt;&lt; '\\\\n'; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_cpp17_small_feature.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++17的新增的小的特性"}],["meta",{"property":"og:description","content":"c++17的新增的小的特性 std::any std::any是一种动态类型，可以动态指向不同的数据类型。 #include &lt;any&gt; #include &lt;iostream&gt; int main() { std::cout &lt;&lt; std::boolalpha; // any type std::any a = 1; std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\\\\n'; a = 3.14; std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;double&gt;(a) &lt;&lt; '\\\\n'; a = true; std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;bool&gt;(a) &lt;&lt; '\\\\n'; // bad cast try { a = 1; std::cout &lt;&lt; std::any_cast&lt;float&gt;(a) &lt;&lt; '\\\\n'; } catch (const std::bad_any_cast&amp; e) { std::cout &lt;&lt; e.what() &lt;&lt; '\\\\n'; } // has value a = 2; if (a.has_value()) std::cout &lt;&lt; a.type().name() &lt;&lt; \\": \\" &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\\\\n'; // reset a.reset(); if (!a.has_value()) std::cout &lt;&lt; \\"no value\\\\n\\"; // pointer to contained data a = 3; int* i = std::any_cast&lt;int&gt;(&amp;a); std::cout &lt;&lt; *i &lt;&lt; '\\\\n'; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-14T08:39:26.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2023-06-14T08:39:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++17的新增的小的特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-14T08:39:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"std::any","slug":"std-any","link":"#std-any","children":[]},{"level":2,"title":"std::optional","slug":"std-optional","link":"#std-optional","children":[]}],"git":{"createdTime":1686215997000,"updatedTime":1686731966000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":1.02,"words":307},"filePathRelative":"posts/Program_language/cpp/cpp_cpp17_small_feature.md","localizedDate":"2023年6月8日","excerpt":"<h1> c++17的新增的小的特性</h1>\\n<h2> std::any</h2>\\n<p>std::any是一种动态类型，可以动态指向不同的数据类型。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;any&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n \\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>boolalpha<span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// any type</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>any a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">type</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\": \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token generic-function\\"><span class=\\"token function\\">any_cast</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n    a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.14</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">type</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\": \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token generic-function\\"><span class=\\"token function\\">any_cast</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">double</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n    a <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">type</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\": \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token generic-function\\"><span class=\\"token function\\">any_cast</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">bool</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// bad cast</span>\\n    <span class=\\"token keyword\\">try</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token generic-function\\"><span class=\\"token function\\">any_cast</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">float</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> std<span class=\\"token double-colon punctuation\\">::</span>bad_any_cast<span class=\\"token operator\\">&amp;</span> e<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">what</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n \\n    <span class=\\"token comment\\">// has value</span>\\n    a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">has_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">type</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\": \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token generic-function\\"><span class=\\"token function\\">any_cast</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// reset</span>\\n    a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">reset</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">has_value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"no value\\\\n\\"</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token comment\\">// pointer to contained data</span>\\n    a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> i <span class=\\"token operator\\">=</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token generic-function\\"><span class=\\"token function\\">any_cast</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>i <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
