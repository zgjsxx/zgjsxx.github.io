const n=JSON.parse('{"key":"v-42231037","path":"/posts/Program_language/cpp/effective-STL/effective-STL-41.html","title":"effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective STL读书笔记"],"description":"effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因 #include &lt;vector&gt; #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;functional&gt; class AddObj { public: AddObj(int a, int b):a_(a), b_(b){ } public: void add() const { std::cout &lt;&lt; \\"a + b = \\" &lt;&lt; a_ + b_ &lt;&lt; std::endl; } private: int a_{0}; int b_{0}; }; int main() { std::vector&lt;AddObj&gt; addObjVec{ {1 , 2}, {2 , 3}, {3 , 4}, {5 , 8}, {7 , 9} }; for_each(addObjVec.cbegin(), addObjVec.cend(), std::mem_fn(&amp;AddObj::add)); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-STL/effective-STL-41.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因"}],["meta",{"property":"og:description","content":"effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因 #include &lt;vector&gt; #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;functional&gt; class AddObj { public: AddObj(int a, int b):a_(a), b_(b){ } public: void add() const { std::cout &lt;&lt; \\"a + b = \\" &lt;&lt; a_ + b_ &lt;&lt; std::endl; } private: int a_{0}; int b_{0}; }; int main() { std::vector&lt;AddObj&gt; addObjVec{ {1 , 2}, {2 , 3}, {3 , 4}, {5 , 8}, {7 , 9} }; for_each(addObjVec.cbegin(), addObjVec.cend(), std::mem_fn(&amp;AddObj::add)); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-30T02:56:45.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective STL读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-30T02:56:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-30T02:56:45.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1685415405000,"updatedTime":1685415405000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.62,"words":185},"filePathRelative":"posts/Program_language/cpp/effective-STL/effective-STL-41.md","localizedDate":"2023年5月30日","excerpt":"<h1> effective STL-41 了解使用ptr_fun， mem_fun和mem_fun_ref的原因</h1>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;algorithm&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;functional&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">AddObj</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">AddObj</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">a_</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">b_</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"a + b = \\"</span> <span class=\\"token operator\\">&lt;&lt;</span>  a_ <span class=\\"token operator\\">+</span> b_  <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> a_<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> b_<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token operator\\">&lt;</span>AddObj<span class=\\"token operator\\">&gt;</span>  addObjVec<span class=\\"token punctuation\\">{</span>  <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n                                <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">2</span> <span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n                                <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">3</span> <span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n                                <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">5</span> <span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n                                <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">7</span> <span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">9</span><span class=\\"token punctuation\\">}</span>\\n                            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">for_each</span><span class=\\"token punctuation\\">(</span>addObjVec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">cbegin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> addObjVec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">cend</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">mem_fn</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>AddObj<span class=\\"token double-colon punctuation\\">::</span>add<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
