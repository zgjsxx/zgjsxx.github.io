const e=JSON.parse('{"key":"v-ca5a5eb8","path":"/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture2-digital-circuits.html","title":"第二讲：数字电路","lang":"zh-CN","frontmatter":{"category":["汇编语言"],"description":"第二讲：数字电路 数字电路 CPU 由一组复杂的数字电路实现。数字电路是由逻辑门构建的（逻辑门又是使用晶体管构建的）。在数字电路设计中，在数字电路设计中，我们展示逻辑信号（开/关值）如何从输入流经逻辑门到输出。如果有电流流过逻辑信号，则逻辑信号为高（开）；如果没有电流（或电流非常小），则逻辑信号为低（关）。 逻辑门的基本类型有： 非门(NOT)：单输入、单输出门，反转其输入。如果输入为高电平，则输出为低电平，反之亦然。 非(NOT) 在 C/C++ 中运算符是~。这个符号是按位非，与逻辑非(!)不同。 与门(AND)：双输入、单输出门：当且仅当两个输入均为高电平时，输出为高电平，否则为低电平。 AND-gate AND 的 C/C++ 运算符是 &amp;（这是按位与，与 &amp;&amp; 逻辑与 不同）。 或门(OR)：双输入、单输出门：如果其中一个或两个输入都为高电平，则输出为高电平，否则（如果两个输入均为低电平）输出为低电平。 OR-gate C/C++ 中与运算符是 | （这又是按位或，不同于逻辑或 ||） 异或门(XOR)：双输入，单输出门。如果其中一个输入为高电平但不是两个输入都是高电平，则输出为高电平。否则，当两个输入都为高电平或者两个输入都是低电平，则输出为低电平。实际上，如果输入不同(一高一低)，则输出为高，如果输入相同，则输出为低。 XOR-gate C/C++中代表异或的运算符是^（这个是按位异或， 没有逻辑上的异或)。 注意^不是求幂运算符，C/C++中没有求幂的运算符。 与非门(NAND)：输出端带有非门的与门。也就是说，如果两个输入都为高电平，则输出为低电平，否则为高电平。 NAND-gate C/C++没有直接的与非运算符。可以使用&amp;和~组合起来起到相同的效果。 或非(NOR)：在或门的输出端带有一个非门。如果两个输入均为低电平，则输出为高电平，否则为低电平。 NOR-gate C/C++没有直接的或非运算符。可以使用|和~组合起来起到相同的效果。 同或(XNOR)：输出端带有非门的异或门。如果两个输入相同（均为低电平或均为高电平），则输出为高电平，否则为低电平。 XNOR-gate C/C++没有直接的同或运算符。可以使用^和~组合起来起到相同的效果。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/Assembly_language/fullerton_CSci241/Lecture2-digital-circuits.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"第二讲：数字电路"}],["meta",{"property":"og:description","content":"第二讲：数字电路 数字电路 CPU 由一组复杂的数字电路实现。数字电路是由逻辑门构建的（逻辑门又是使用晶体管构建的）。在数字电路设计中，在数字电路设计中，我们展示逻辑信号（开/关值）如何从输入流经逻辑门到输出。如果有电流流过逻辑信号，则逻辑信号为高（开）；如果没有电流（或电流非常小），则逻辑信号为低（关）。 逻辑门的基本类型有： 非门(NOT)：单输入、单输出门，反转其输入。如果输入为高电平，则输出为低电平，反之亦然。 非(NOT) 在 C/C++ 中运算符是~。这个符号是按位非，与逻辑非(!)不同。 与门(AND)：双输入、单输出门：当且仅当两个输入均为高电平时，输出为高电平，否则为低电平。 AND-gate AND 的 C/C++ 运算符是 &amp;（这是按位与，与 &amp;&amp; 逻辑与 不同）。 或门(OR)：双输入、单输出门：如果其中一个或两个输入都为高电平，则输出为高电平，否则（如果两个输入均为低电平）输出为低电平。 OR-gate C/C++ 中与运算符是 | （这又是按位或，不同于逻辑或 ||） 异或门(XOR)：双输入，单输出门。如果其中一个输入为高电平但不是两个输入都是高电平，则输出为高电平。否则，当两个输入都为高电平或者两个输入都是低电平，则输出为低电平。实际上，如果输入不同(一高一低)，则输出为高，如果输入相同，则输出为低。 XOR-gate C/C++中代表异或的运算符是^（这个是按位异或， 没有逻辑上的异或)。 注意^不是求幂运算符，C/C++中没有求幂的运算符。 与非门(NAND)：输出端带有非门的与门。也就是说，如果两个输入都为高电平，则输出为低电平，否则为高电平。 NAND-gate C/C++没有直接的与非运算符。可以使用&amp;和~组合起来起到相同的效果。 或非(NOR)：在或门的输出端带有一个非门。如果两个输入均为低电平，则输出为高电平，否则为低电平。 NOR-gate C/C++没有直接的或非运算符。可以使用|和~组合起来起到相同的效果。 同或(XNOR)：输出端带有非门的异或门。如果两个输入相同（均为低电平或均为高电平），则输出为高电平，否则为低电平。 XNOR-gate C/C++没有直接的同或运算符。可以使用^和~组合起来起到相同的效果。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-26T06:32:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-26T06:32:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第二讲：数字电路\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-26T06:32:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"数字电路","slug":"数字电路","link":"#数字电路","children":[]},{"level":2,"title":"硬件电路","slug":"硬件电路","link":"#硬件电路","children":[]},{"level":2,"title":"逻辑电路的问题","slug":"逻辑电路的问题","link":"#逻辑电路的问题","children":[]}],"git":{"createdTime":1708675788000,"updatedTime":1708929136000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":8.5,"words":2550},"filePathRelative":"posts/Program_language/Assembly_language/fullerton_CSci241/Lecture2-digital-circuits.md","localizedDate":"2024年2月23日","excerpt":"<h1> 第二讲：数字电路</h1>\\n<h2> 数字电路</h2>\\n<p>CPU 由一组复杂的数字电路实现。数字电路是由逻辑门构建的（逻辑门又是使用晶体管构建的）。在数字电路设计中，在数字电路设计中，我们展示逻辑信号（开/关值）如何从输入流经逻辑门到输出。如果有电流流过逻辑信号，则逻辑信号为高（开）；如果没有电流（或电流非常小），则逻辑信号为低（关）。</p>\\n<p>逻辑门的基本类型有：</p>\\n<ul>\\n<li>\\n<p>非门(NOT)：单输入、单输出门，反转其输入。如果输入为高电平，则输出为低电平，反之亦然。\\n<img src=\\"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/NOT-gate.png\\" alt=\\"NOT-gate\\" loading=\\"lazy\\"></p>\\n<p>非(NOT) 在 C/C++ 中运算符是<code>~</code>。这个符号是按位非，与逻辑非(<code>!</code>)不同。</p>\\n</li>\\n<li>\\n<p>与门(AND)：双输入、单输出门：当且仅当两个输入均为高电平时，输出为高电平，否则为低电平。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/AND-gate.png\\" alt=\\"AND-gate\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>AND-gate</figcaption></figure>\\n<p>AND 的 C/C++ 运算符是 &amp;（这是按位与，与 &amp;&amp; 逻辑与 不同）。</p>\\n</li>\\n<li>\\n<p>或门(OR)：双输入、单输出门：如果其中一个或两个输入都为高电平，则输出为高电平，否则（如果两个输入均为低电平）输出为低电平。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/OR-gate.png\\" alt=\\"OR-gate\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>OR-gate</figcaption></figure>\\n<p>C/C++ 中与运算符是 | （这又是按位或，不同于逻辑或 ||）</p>\\n</li>\\n<li>\\n<p>异或门(XOR)：双输入，单输出门。如果其中一个输入为高电平但不是两个输入都是高电平，则输出为高电平。否则，当两个输入都为高电平或者两个输入都是低电平，则输出为低电平。实际上，如果输入不同(一高一低)，则输出为高，如果输入相同，则输出为低。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/XOR-gate.png\\" alt=\\"XOR-gate\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>XOR-gate</figcaption></figure>\\n<p>C/C++中代表异或的运算符是<code>^</code>（这个是按位异或， 没有逻辑上的异或)。 注意<code>^</code>不是求幂运算符，C/C++中没有求幂的运算符。</p>\\n</li>\\n<li>\\n<p>与非门(NAND)：输出端带有非门的与门。也就是说，如果两个输入都为高电平，则输出为低电平，否则为高电平。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/NAND-gate.png\\" alt=\\"NAND-gate\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>NAND-gate</figcaption></figure>\\n<p>C/C++没有直接的与非运算符。可以使用<code>&amp;</code>和<code>~</code>组合起来起到相同的效果。</p>\\n</li>\\n<li>\\n<p>或非(NOR)：在或门的输出端带有一个非门。如果两个输入均为低电平，则输出为高电平，否则为低电平。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/NOR-gate.png\\" alt=\\"NOR-gate\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>NOR-gate</figcaption></figure>\\n<p>C/C++没有直接的或非运算符。可以使用<code>|</code>和<code>~</code>组合起来起到相同的效果。</p>\\n</li>\\n<li>\\n<p>同或(XNOR)：输出端带有非门的异或门。如果两个输入相同（均为低电平或均为高电平），则输出为高电平，否则为低电平。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/language/assembly/fullerton_CSci241/lecture1/XNOR-gate.png\\" alt=\\"XNOR-gate\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>XNOR-gate</figcaption></figure>\\n<p>C/C++没有直接的同或运算符。可以使用<code>^</code>和<code>~</code>组合起来起到相同的效果。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
