import{_ as i,V as t,W as l,X as s,Y as e,Z as r,a1 as a,F as d}from"./framework-d934f75f.js";const o={},c=a(`<h1 id="如何配置git-使其支持多用户" tabindex="-1"><a class="header-anchor" href="#如何配置git-使其支持多用户" aria-hidden="true">#</a> 如何配置git，使其支持多用户？</h1><p>在多数时候， 我们使用git进行操作时，只需要在本地配置一个用户的ssh key，就可以完成基本的pull/push操作。如果现在我有两个github的账号，并需要在一台电脑中操作其中的repo，有没有什么较好的办法呢？</p><p>下面就将详解其配置过程。</p><h2 id="清除全局用户配置" tabindex="-1"><a class="header-anchor" href="#清除全局用户配置" aria-hidden="true">#</a> 清除全局用户配置</h2><p>该步骤是必须的， 在本地设置多账户之后， 就不再使用全局的用户名和email了， 因此需要先unset掉global的用户名和邮箱。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.email
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成每个用户的密钥对" tabindex="-1"><a class="header-anchor" href="#生成每个用户的密钥对" aria-hidden="true">#</a> 生成每个用户的密钥对</h2><p>我们这里以创建test1用户和test2用户为例， 演示操作过程。</p><p>这里， 我们首先查看.ssh目录,由于之前已经配置过test1用户， 因此该目录下已经有了test1用户的ssh公钥和私钥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span>  ~/.ssh/
id_rsa   
id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们生成test2用户的ssh key:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;test2@qq.com&quot;</span>
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>~/.ssh/id_rsa<span class="token punctuation">)</span>:<span class="token punctuation">(</span>这里填写一个自定义的名字<span class="token punctuation">)</span>
~/.ssh/id_rsa_second
Enter passphrase<span class="token punctuation">(</span>empty <span class="token keyword">for</span> on passphrase<span class="token punctuation">)</span>:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就在.ssh目录下生成了对应的ssh密钥。其中.pub文件就是私钥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span>  ~/.ssh/
id_rsa   id_rsa_second 
id_rsa.pub   id_rsa_second.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在github-web-console中添加ssh-keys" tabindex="-1"><a class="header-anchor" href="#在github-web-console中添加ssh-keys" aria-hidden="true">#</a> 在github Web console中添加SSH Keys</h2><p>将上一步骤中生成的id_rsa.pub 和 id_rsa_second.pub文件中的内容，分别加入对应账户的github的SSH Keys中， 如下图所示：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/git_ssh_key.png" alt="git ssh key" tabindex="0" loading="lazy"><figcaption>git ssh key</figcaption></figure><h2 id="管理密钥" tabindex="-1"><a class="header-anchor" href="#管理密钥" aria-hidden="true">#</a> 管理密钥</h2><p>管理密钥的目的是让git知道一个repo去什么地方去查找它的ssh key。</p><p>该步骤需要在~/.ssh目录下创建一个config文件，文件格式如下所示：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa

Host user2.github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该文件各字段的含义如下所示：</p><p><strong>Host</strong> : 主机别名</p><p><strong>HostName</strong>: 服务器真实地址</p><p><strong>IdentityFile</strong>: 私钥文件路径</p><p><strong>User</strong> : 用户名，这里User均填写git</p><p>下面测试我们配置的项目是否正确。</p><p>测试命令格式为 <code>ssh -T user@Host</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@user2.github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果输出了下面的语句，代表你的配置已经成功了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Hi test2<span class="token operator">!</span> You&#39;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="克隆仓库进行push" tabindex="-1"><a class="header-anchor" href="#克隆仓库进行push" aria-hidden="true">#</a> 克隆仓库进行push</h2><p>在配置完毕之后， 当我们使用git clone 命令时需要做一些修改。</p><p>在不需要配置多账户时， 我们clone一个仓库通常使用下面的命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:your_account/your_proj.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而如果你仍然使用这样的格式clone时，在push时会失败。</p><p>我们需要修改clone命令为如下格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@user2.github.com:your_account/your_proj.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为什么要这样修改呢？</p><p>我们看下面这张图：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/git_ssh_key2.png" alt="git ssh key" tabindex="0" loading="lazy"><figcaption>git ssh key</figcaption></figure>`,42),u={href:"http://user2.github.com",target:"_blank",rel:"noopener noreferrer"},p=s("code",null,"git clone git@github.com:your_account/your_proj.git",-1),h=a(`<p>最后需要注意的是， 如果有配置多用户这个需求时， 那么在执行git commit时， 设置用户名和邮箱不能使用全局账户。</p><p>应使用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git config user.name &quot;You Name&quot;
git config user.email name@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而不能使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git config --global user.name &quot;You Name&quot;
git config --global user.email name@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>使用git配置多用户，主要需要注意以下几点：</p><ul><li>需要在本地分别生成各用户的ssh密钥</li><li>需要为所有的用户配置密钥路径文件config</li><li>git clone时地址需要修改， 如果是已经clone下来的仓库， 需要修改remote地址</li><li>不能使用global配置用户名和邮箱</li></ul>`,8);function g(b,m){const n=d("ExternalLinkIcon");return t(),l("div",null,[c,s("p",null,[e("在我们修改了Host之后,git会通过该host去~/.ssh/config文件中寻找对应的私钥文件地址，回忆我们刚刚在config配置了test2的Host为"),s("strong",null,[s("a",u,[e("user2.github.com"),r(n)])]),e(",因此当git clone的地址修改之后， git就可以顺利地找到该repo所需要的ssh key。如果仍然用"),p,e("那么git将会使用~/.ssh/config中配置的一个ssh key， 这样会导致push时失败。")]),h])}const k=i(o,[["render",g],["__file","how-to-configure-git-with-multiple-user.html.vue"]]);export{k as default};
