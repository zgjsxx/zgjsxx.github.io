import{_ as n,V as s,W as a,a0 as p}from"./framework-9a29aaa0.js";const e={},t=p(`<h1 id="四选一多路选择器" tabindex="-1"><a class="header-anchor" href="#四选一多路选择器" aria-hidden="true">#</a> 四选一多路选择器</h1><p>1.使用assign 语句实现</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">mux4_1</span><span class="token punctuation">(</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d0<span class="token punctuation">,</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>sel<span class="token punctuation">,</span>
<span class="token keyword">output</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>mux_out
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assign</span> mux_out <span class="token operator">=</span> <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">&#39;b00</span><span class="token punctuation">)</span> <span class="token operator">?</span> d3<span class="token punctuation">:</span>
                 <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">&#39;b01</span><span class="token punctuation">)</span> <span class="token operator">?</span> d2<span class="token punctuation">:</span>
                 <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">&#39;b10</span><span class="token punctuation">)</span> <span class="token operator">?</span> d1<span class="token punctuation">:</span>
                 d0<span class="token punctuation">;</span>
                 
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.使用if-else实现</p><p>注意, wire不能通过if-else的方式处理，因此首先需要赋给一个register, 再将该register连线至输出。</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">mux4_1</span><span class="token punctuation">(</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d0<span class="token punctuation">,</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>sel<span class="token punctuation">,</span>
<span class="token keyword">output</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>mux_out
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> x<span class="token punctuation">;</span>
<span class="token important">always @</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token function">if</span><span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">2&#39;b11</span><span class="token punctuation">)</span> x <span class="token operator">=</span> d0<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">2&#39;b10</span><span class="token punctuation">)</span> x <span class="token operator">=</span> d1<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">2&#39;b01</span><span class="token punctuation">)</span> x <span class="token operator">=</span> d2<span class="token punctuation">;</span>
    <span class="token keyword">else</span> x <span class="token operator">=</span> d3<span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">assign</span> mux_out <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[t];function c(l,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","4-1multiplexer.html.vue"]]);export{r as default};
