const e=JSON.parse('{"key":"v-50fccc12","path":"/posts/Program_language/cpp/cpp20/cpp_cpp20_range.html","title":"c++20 ranges","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++"],"description":"c++20 ranges c++20四大特性为coroutine， module，concept和range。本文将对range进行探索。 什么是range 首先看看range的定义， range其实是一个concept，concept用于对模板的参数进行一定的约束，而range的约束就是要求ranges::begin(t)和ranges::end(t)可以被正常的解析。 template&lt; class T &gt; concept range = requires( T&amp; t ) { ranges::begin(t); // equality-preserving for forward iterators ranges::end (t); };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp20/cpp_cpp20_range.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"c++20 ranges"}],["meta",{"property":"og:description","content":"c++20 ranges c++20四大特性为coroutine， module，concept和range。本文将对range进行探索。 什么是range 首先看看range的定义， range其实是一个concept，concept用于对模板的参数进行一定的约束，而range的约束就是要求ranges::begin(t)和ranges::end(t)可以被正常的解析。 template&lt; class T &gt; concept range = requires( T&amp; t ) { ranges::begin(t); // equality-preserving for forward iterators ranges::end (t); };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T08:12:39.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2024-02-27T08:12:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++20 ranges\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-27T08:12:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是range","slug":"什么是range","link":"#什么是range","children":[]},{"level":2,"title":"range可以用来干什么？","slug":"range可以用来干什么","link":"#range可以用来干什么","children":[{"level":3,"title":"使用ranges::sort简化排序的写法","slug":"使用ranges-sort简化排序的写法","link":"#使用ranges-sort简化排序的写法","children":[]},{"level":3,"title":"结合ranges::view简化反向，过滤，取值等操作","slug":"结合ranges-view简化反向-过滤-取值等操作","link":"#结合ranges-view简化反向-过滤-取值等操作","children":[]}]},{"level":2,"title":"如何定义自己的range？","slug":"如何定义自己的range","link":"#如何定义自己的range","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1709021559000,"updatedTime":1709021559000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":4.29,"words":1286},"filePathRelative":"posts/Program_language/cpp/cpp20/cpp_cpp20_range.md","localizedDate":"2024年2月27日","excerpt":"<h1> c++20 ranges</h1>\\n<p>c++20四大特性为coroutine， module，concept和range。本文将对range进行探索。</p>\\n<h2> 什么是range</h2>\\n<p>首先看看range的定义， range其实是一个concept，concept用于对模板的参数进行一定的约束，而range的约束就是要求<code>ranges::begin(t)</code>和<code>ranges::end(t)</code>可以被正常的解析。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">T</span> <span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">concept</span> <span class=\\"token class-name\\">range</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">requires</span><span class=\\"token punctuation\\">(</span> T<span class=\\"token operator\\">&amp;</span> t <span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    ranges<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// equality-preserving for forward iterators</span>\\n    ranges<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">end</span>  <span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
