import{_ as t,V as p,W as e,X as n,Y as s,$ as o,a0 as c,F as i}from"./framework-9a29aaa0.js";const l={},u=c(`<h1 id="linux-0-11-kernel目录hd-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录hd-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录hd.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>在讲解hd.c的函数之前，需要先介绍一些宏定义，inb, inb_p, outb, outb_p。</p><p><strong>inb</strong>宏的作用是去IO端口读取一个byte的数据。</p><p>在内嵌汇编中， <code>:&quot;d&quot; (port))</code>是输入，将port值写入了edx。 <code>:&quot;=a&quot; (_v)</code>是输出，即将AL的值写入_v中。</p><p>而汇编指令<code>inb %%dx,%%al</code>的作用是从端口dx中读取一个字节放入al中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">inb</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _v<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
<span class="token expression">__asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span></span><span class="token string">&quot;inb %%dx,%%al&quot;</span></span>
		<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>_v<span class="token punctuation">)</span>
		<span class="token operator">:</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \\
_v<span class="token punctuation">;</span> \\
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>inb_p</strong>宏的作用也是去IO端口读取一个字节的数据，但是其使用两个jmp 1f进行延迟。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">inb_p</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _v<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
<span class="token expression">__asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span></span><span class="token string">&quot;inb %%dx,%%al\\n&quot;</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;1:\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
    <span class="token string">&quot;1:&quot;</span></span>
	<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>_v<span class="token punctuation">)</span>
	<span class="token operator">:</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \\
_v<span class="token punctuation">;</span> \\
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>outb</strong>宏的作用是向IO端口写入一个字节的数据。 将value写入al中，将port写入edx中，最后使用汇编指令outb向port写入数据内容。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">outb</span><span class="token expression"><span class="token punctuation">(</span>value<span class="token punctuation">,</span>port<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token function">__asm__</span> <span class="token punctuation">(</span></span><span class="token string">&quot;outb %%al,%%dx&quot;</span></span>
			<span class="token operator">:</span>
			<span class="token operator">:</span><span class="token string">&quot;a&quot;</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>outb_p</strong>宏的作用与outb作用类似，只不过使用了jmp进行延时。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">outb_p</span><span class="token expression"><span class="token punctuation">(</span>value<span class="token punctuation">,</span>port<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token function">__asm__</span> <span class="token punctuation">(</span></span><span class="token string">&quot;outb %%al,%%dx\\n&quot;</span> <span class="token punctuation">\\</span>
		<span class="token string">&quot;\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
		<span class="token string">&quot;1:\\tjmp 1f\\n&quot;</span> <span class="token punctuation">\\</span>
		<span class="token string">&quot;1:&quot;</span></span>
		<span class="token operator">:</span>
		<span class="token operator">:</span><span class="token string">&quot;a&quot;</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="sys-setup" tabindex="-1"><a class="header-anchor" href="#sys-setup" aria-hidden="true">#</a> sys_setup</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_setup</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> BIOS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数在main.c文件中的init方法中被调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> pid<span class="token punctuation">,</span>i<span class="token punctuation">;</span>
	<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>drive_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从调用关系可以得出， 入参BIOS指针指向drive_info。</p><p>该方法的最先定义了一些变量，其中利用static变量callable控制该方法只会被调用一次。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> callable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span>drive<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmos_disks<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">partition</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callable<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
callable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来如果定义了HD_TYPE，则一次去BIOS内存地址出去读取数据拷贝到hd_info变量中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HD_TYPE</span></span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>drive<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> drive<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token punctuation">;</span> drive<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> BIOS<span class="token punctuation">;</span><span class="token comment">//柱面数</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//磁头数</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>wpcom <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写前预补偿柱面号</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>ctl <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制字节</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>lzone <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//磁头着陆区柱面号</span>
		hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>sect <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每磁道扇区数</span>
		BIOS <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">)</span>
		NR_HD<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//磁盘数</span>
	<span class="token keyword">else</span>
		NR_HD<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来设置硬盘分区数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_HD <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token operator">*</span>
				hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token operator">*</span>hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NR_HD=0， 两个硬盘都不是AT控制器兼容的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cmos_disks <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>cmos_disks <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span>
		NR_HD <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		NR_HD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	NR_HD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果NR_HD=0，则将两个硬盘的结构全部清零。如果NR_HD=1，则将第二块硬盘结构清零。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> NR_HD <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是获取硬盘的分区表信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>drive<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> drive<span class="token operator">&lt;</span>NR_HD <span class="token punctuation">;</span> drive<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token number">0x300</span> <span class="token operator">+</span> drive<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//300 305是设别号</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read partition table of drive %d\\n\\r&quot;</span><span class="token punctuation">,</span>
			drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0x55</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>
		bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">511</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0xAA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//硬盘标志位0xAA55</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Bad partition table on drive %d\\n\\r&quot;</span><span class="token punctuation">,</span>drive<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	p <span class="token operator">=</span> <span class="token number">0x1BE</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> p<span class="token operator">-&gt;</span>start_sect<span class="token punctuation">;</span>
		hd<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> p<span class="token operator">-&gt;</span>nr_sects<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后将加载虚拟盘和挂载根文件系统。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>NR_HD<span class="token punctuation">)</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Partition table%s ok.\\n\\r&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>NR_HD<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">&quot;s&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">rd_load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载虚拟盘</span>
<span class="token function">mount_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//挂载根文件系统。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controller-ready" tabindex="-1"><a class="header-anchor" href="#controller-ready" aria-hidden="true">#</a> controller_ready</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">controller_ready</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用就是循环等待硬盘控制器就绪。</p><p>硬盘控制器状态寄存器端口是0x1f7, 从该端口中读取一个字节的数据，并检查其最高位是否为0，如果为0，就代表已经就绪，如果为1， 则代表尚未就绪。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> retries<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>retries <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查状态寄存器busy位（第7位）</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>retries<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="win-result" tabindex="-1"><a class="header-anchor" href="#win-result" aria-hidden="true">#</a> win_result</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">win_result</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是检查硬盘执行命令后的结果。0为正常， 1为错误。</p><p>首先使用inb_p去读取HD_STATUS的值，如果控制器忙， 读写错误或命令执行错误， 则返回1。如果没有错误，则返回0.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出硬盘控制器的状态信息。</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BUSY_STAT <span class="token operator">|</span> READY_STAT <span class="token operator">|</span> WRERR_STAT <span class="token operator">|</span> SEEK_STAT <span class="token operator">|</span> ERR_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">==</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* ok */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> i<span class="token operator">=</span><span class="token function">inb</span><span class="token punctuation">(</span>HD_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果ERR_STAT置位</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hd-out" tabindex="-1"><a class="header-anchor" href="#hd-out" aria-hidden="true">#</a> hd_out</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hd_out</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> drive<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nsect<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> sect<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cyl<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>
		<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>intr_addr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的作用是向硬盘控制器发送命令。</p><p>该函数的开头对参数进行校验，如果不合法则抛出内核错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">register</span> <span class="token keyword">int</span> port <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;dx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义局部变量，并放入寄存器dx中。</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>drive<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">||</span> head<span class="token operator">&gt;</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment">//驱动器号大于1(驱动器号只能是0或者1)， 磁头号大于15.</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to write bad sector&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">controller_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//控制器没有准备好</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;HD controller not ready&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就要对一些IO端口进行写数据，首先我们先了解一下这些端口。</p><table><thead><tr><th>端口</th><th>名称</th><th>读操作</th><th>写操作</th></tr></thead><tbody><tr><td>0x1f0</td><td>HD_DATA</td><td>数据寄存器</td><td></td></tr><tr><td>0x1f1</td><td>HD_ERROR</td><td>错误寄存器</td><td></td></tr><tr><td>0x1f2</td><td>HD_NSECTOR</td><td>扇区数寄存器 总扇区数</td><td></td></tr><tr><td>0x1f3</td><td>HD_SECTOR</td><td>扇区号寄存器 起始扇区</td><td></td></tr><tr><td>0x1f4</td><td>HD_LCYL</td><td>柱面号寄存器 柱面号低字节</td><td></td></tr><tr><td>0x1f5</td><td>HD_HCYL</td><td>柱面号寄存器 柱面号高字节</td><td></td></tr><tr><td>0x1f6</td><td>HD_CURRENT</td><td>磁头寄存器 磁头号</td><td></td></tr><tr><td>0x1f7</td><td>HD_STATUS</td><td>主状态寄存器</td><td>命令寄存器</td></tr><tr><td>0x3f6</td><td>HD_CMD</td><td></td><td>硬盘控制寄存器</td></tr><tr><td>0x3f7</td><td></td><td>数字输入寄存器</td><td></td></tr></tbody></table><p>hd_out接下来的过程就是向这些端口依次写入数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>do_hd <span class="token operator">=</span> intr_addr<span class="token punctuation">;</span> <span class="token comment">// do_hd 函数指针将在硬盘中断程序中被调用</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>ctl<span class="token punctuation">,</span>HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向控制寄存器(0x3f6)输出控制字节</span>
port<span class="token operator">=</span>HD_DATA<span class="token punctuation">;</span>  <span class="token comment">//置dx 为数据寄存器端口(0x1f0)</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>wpcom<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0x1f1</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>nsect<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//参数：读/写扇区总数 0x1f2</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>sect<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//参数：起始扇区 0x1f3</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>cyl<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//参数：柱面号低8 位  0x1f4</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span>cyl<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数：柱面号高8 位  0x1f5</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token operator">|</span><span class="token punctuation">(</span>drive<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>head<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//参数：驱动器号+磁头号 0x1f6</span>
<span class="token function">outb</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//命令：硬盘控制命令 0x1f7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="drive-busy" tabindex="-1"><a class="header-anchor" href="#drive-busy" aria-hidden="true">#</a> drive_busy</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">drive_busy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是<strong>等待硬盘就绪</strong>。</p><p>该函数循环检查硬盘的状态寄存器的忙标志位。如果busy位复位，则返回0。如果没有复位，则返回1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环读取硬盘的主状态寄存器HD_STATUS，等待就绪位</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BUSY_STAT<span class="token operator">|</span>READY_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span>
i <span class="token operator">&amp;=</span> BUSY_STAT <span class="token operator">|</span> READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD controller times out\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印等待超时</span>
<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reset-controller" tabindex="-1"><a class="header-anchor" href="#reset-controller" aria-hidden="true">#</a> reset_controller</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reset_controller</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于重新校正硬盘控制器。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>	i<span class="token punctuation">;</span>

<span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向硬盘控制寄存器端口发送复位控制</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">nop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环等待一段时间</span>
<span class="token function">outb</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ctl <span class="token operator">&amp;</span> <span class="token number">0x0f</span> <span class="token punctuation">,</span>HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送正常的控制字节</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">drive_busy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//检查控制器是否还是处于忙的状态</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD-controller still busy\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>HD_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD-controller reset failed: %02x\\n\\r&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reset-hd" tabindex="-1"><a class="header-anchor" href="#reset-hd" aria-hidden="true">#</a> reset_hd</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reset_hd</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是复位硬盘。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">reset_controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//复位硬盘控制器</span>
<span class="token function">hd_out</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
	hd_info<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">,</span>WIN_SPECIFY<span class="token punctuation">,</span><span class="token operator">&amp;</span>recal_intr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送硬盘控制命令， recal_intr是硬盘中断处理函数中调用的函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unexpected-hd-interrupt" tabindex="-1"><a class="header-anchor" href="#unexpected-hd-interrupt" aria-hidden="true">#</a> unexpected_hd_interrupt</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">unexpected_hd_interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数仅仅用于在出现意外硬盘中断的时候打印一行日志。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected HD interrupt\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="bad-rw-intr" tabindex="-1"><a class="header-anchor" href="#bad-rw-intr" aria-hidden="true">#</a> bad_rw_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是读写硬盘失败的处理函数。如果读写扇区出错次数大于等于7次时，结束当前请求项，并唤醒等待该请求的进程。</p><p>如果读写扇区的时候，出错次数超过了3次，则对硬盘控制器进行复位。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;=</span> MAX_ERRORS<span class="token punctuation">)</span>
	<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;</span> MAX_ERRORS<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
	reset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-intr" tabindex="-1"><a class="header-anchor" href="#read-intr" aria-hidden="true">#</a> read_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是磁盘的<strong>读中断调用函数</strong>。</p><p>硬盘的中断处理函数是hd_interrupt，这个是在hd_init函数中设置的。当硬盘中断发生的时候，将调用do_hd指向的函数， 而do_hd则是在do_hd_request函数中通过hd_out进行设置的。</p><p>因此当do_hd_request要去读扇区时，就会设置do_hd为read_intr，这样当硬盘中断到来时，就会调用read_intr进行处理。器处理流程如下图所示：</p><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/blog/Linux/kernel/Linux-0.11/Linux-0.11-kernel/block/read_intr_flow.png" alt="read_intr" tabindex="0" loading="lazy"><figcaption>read_intr</figcaption></figure><p>首先检查硬盘控制器是否返回错误信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将HD_DATA端口依次读取256个字（512字节）到buffer中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">port_read</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着对请求中的一些标记进行修改。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清除出错次数</span>
CURRENT<span class="token operator">-&gt;</span>buffer <span class="token operator">+=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment">//调整buffer指针</span>
CURRENT<span class="token operator">-&gt;</span>sector<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//起始扇区+1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>CURRENT<span class="token operator">-&gt;</span>nr_sectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  do_hd <span class="token operator">=</span> <span class="token operator">&amp;</span>read_intr<span class="token punctuation">;</span><span class="token comment">//尚有数据还未读完，因此设置下一次的中断处理函数还是read_intr</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再次调用do_hd_request去处理其他硬盘请求项</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write-intr" tabindex="-1"><a class="header-anchor" href="#write-intr" aria-hidden="true">#</a> write_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是磁盘的写中断调用函数。</p><p>首先检查硬盘控制器是否返回错误信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>CURRENT<span class="token operator">-&gt;</span>nr_sectors<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果还有扇区要写</span>
    CURRENT<span class="token operator">-&gt;</span>sector<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//当前请求扇区号+1</span>
    CURRENT<span class="token operator">-&gt;</span>buffer <span class="token operator">+=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment">//当前请求缓冲区指针增加512</span>
    do_hd <span class="token operator">=</span> <span class="token operator">&amp;</span>write_intr<span class="token punctuation">;</span> <span class="token comment">//设置函数指针位write_intr</span>
    <span class="token function">port_write</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向数据端口写256字（512字节）</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recal-intr" tabindex="-1"><a class="header-anchor" href="#recal-intr" aria-hidden="true">#</a> recal_intr</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recal_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是重新复位中断调用函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-hd-request" tabindex="-1"><a class="header-anchor" href="#do-hd-request" aria-hidden="true">#</a> do_hd_request</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是硬盘设备的读写函数。</p><p>首先对读写请求进行校验。如果请求队列中没有硬盘的读写任务，则退出。</p><p>请求的起始扇区+至少读写2扇区(1K)不能大于磁盘分区的最后一个扇区。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>block<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&gt;</span> hd<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> block<span class="token punctuation">,</span>dev<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> sec<span class="token punctuation">,</span>head<span class="token punctuation">,</span>cyl<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> nsect<span class="token punctuation">;</span>

INIT_REQUEST<span class="token punctuation">;</span>
dev <span class="token operator">=</span> <span class="token function">MINOR</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
block <span class="token operator">=</span> CURRENT<span class="token operator">-&gt;</span>sector<span class="token punctuation">;</span><span class="token comment">//请求的起始扇区</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token operator">*</span>NR_HD <span class="token operator">||</span> block<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&gt;</span> hd<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是本函数的一个难点，将绝对的块号转换为磁盘的(柱面C， 磁头H ，扇区S)。</p><p>其中， block与(C，H，S)的换算公式如下所示:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>block=C*总磁头数*每磁道扇区数+H*每磁道扇区数+S
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看出前两项都是每磁道扇区数的倍数， 因此使用block除以每磁道扇区数，其余数就是扇区号S， 其商如下所示:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>block <span class="token operator">=</span> block<span class="token operator">/</span>每磁道扇区数 <span class="token operator">=</span> C<span class="token operator">*</span>总磁头数 <span class="token operator">+</span> H
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用除数除以总磁头数， 那么其余数就是H， 商就是C。</p><p>下面看代码， 输入eax = block， edx = 0， <code>divl %4</code>中的%4就是<code>hd_info[dev].sect</code>， 代表每磁道扇区数，结果将余数赋值给变量sec， 商赋值给block。 这与我们上面的步骤是一致的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;divl %4&quot;</span>
		<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;=d&quot;</span> <span class="token punctuation">(</span>sec<span class="token punctuation">)</span>
		<span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来输入edx = block， eax = 0， <code>divl %4</code>中的%4就是hd_info[dev].head， 代表系统中的总磁头数，结果将余数赋值给head， 商赋值给cyl，这与我们的分析也一致。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;divl %4&quot;</span>
	<span class="token operator">:</span><span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>cyl<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;=d&quot;</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span>
	<span class="token operator">:</span><span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果此时的复位标志是1， 那么就调用reset_hd进行硬盘的复位。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	reset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	recalibrate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">reset_hd</span><span class="token punctuation">(</span>CURRENT_DEV<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果此时重新校正标志是置位的， 则首先复位该标志， 然后向硬盘控制器发送重新校正的命令。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>recalibrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	recalibrate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>hd_info<span class="token punctuation">[</span>CURRENT_DEV<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>
		WIN_RESTORE<span class="token punctuation">,</span><span class="token operator">&amp;</span>recal_intr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是写请求</span>
	<span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>nsect<span class="token punctuation">,</span>sec<span class="token punctuation">,</span>head<span class="token punctuation">,</span>cyl<span class="token punctuation">,</span>WIN_WRITE<span class="token punctuation">,</span><span class="token operator">&amp;</span>write_intr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向控制器发送写请求</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token operator">&amp;</span>DRQ_STAT<span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环等待</span>
		<span class="token comment">/* nothing */</span> <span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">port_write</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> READ<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果是读请求</span>
	<span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>nsect<span class="token punctuation">,</span>sec<span class="token punctuation">,</span>head<span class="token punctuation">,</span>cyl<span class="token punctuation">,</span>WIN_READ<span class="token punctuation">,</span><span class="token operator">&amp;</span>read_intr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unknown hd-command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hd-init" tabindex="-1"><a class="header-anchor" href="#hd-init" aria-hidden="true">#</a> hd_init</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hd_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于硬盘系统的初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn <span class="token operator">=</span> DEVICE_REQUEST<span class="token punctuation">;</span><span class="token comment">//设置硬盘的请求处理方法</span>
<span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>hd_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置硬盘的中断，中断号是0x2E（46）</span>
<span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xfb</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许从片发出中断</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xbf</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许硬盘的中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>outb_p(inb_p(0x21)&amp;0xfb,0x21)</code>:</p><p>0x21是主片命令字OCW1的端口地址， 0xfb = 11111011， 即将主片IR2的位置复位， 主片的IR2用于级联从片, 因此该语句的作用是<strong>允许从片发出中断</strong>。</p><p><code>outb(inb_p(0xA1)&amp;0xbf,0xA1)</code>:</p><p>0xA1是从片命令字OCW1的端口地址，0xbf = 10111111, 即将从片IR6的位置复位，从片的IR6用于接受硬盘的中断，因此该语句的作用是<strong>允许硬盘的中断</strong>。</p><p>因此以上两句的作用就是<strong>允许了来自硬盘的中断</strong>。</p>`,127),r={href:"https://blog.csdn.net/longintchar/article/details/79439466",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=i("ExternalLinkIcon");return p(),e("div",null,[u,n("p",null,[s("有关更多8259A中断控制器， 可以阅读 "),n("a",r,[s("详解8259A"),o(a)])])])}const b=t(l,[["render",d],["__file","Linux-0.11-kernel-hd.html.vue"]]);export{b as default};
