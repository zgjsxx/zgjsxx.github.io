const e=JSON.parse('{"key":"v-74e4f8b8","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-11.html","title":"effective c++ 11 operator= 处理自我赋值","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 11 operator= 处理自我赋值 我们知道复制构造函数和赋值运算符的区别是赋值构造函数用于创建一个新的对象，而赋值运算符用于给一个已经存在的对象重新赋值。 因此赋值运算符就可能存在把自己赋值给自己的情况，本节就是专门讨论这个场景的。 分析 本文介绍了三种办法来处理这个问题，其实作者后续不仅仅讨论了自我赋值的问题，还讨论了赋值运算符的异常安全问题。 第一种方法比较简单，既然operator=可能存在自我赋值的场景，那么我们便在进入赋值运算符的函数内部首先做一个\\"证同测试\\"。如果是同一个对象，就直接返回。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-11.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 11 operator= 处理自我赋值"}],["meta",{"property":"og:description","content":"effective c++ 11 operator= 处理自我赋值 我们知道复制构造函数和赋值运算符的区别是赋值构造函数用于创建一个新的对象，而赋值运算符用于给一个已经存在的对象重新赋值。 因此赋值运算符就可能存在把自己赋值给自己的情况，本节就是专门讨论这个场景的。 分析 本文介绍了三种办法来处理这个问题，其实作者后续不仅仅讨论了自我赋值的问题，还讨论了赋值运算符的异常安全问题。 第一种方法比较简单，既然operator=可能存在自我赋值的场景，那么我们便在进入赋值运算符的函数内部首先做一个\\"证同测试\\"。如果是同一个对象，就直接返回。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-13T08:15:55.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-13T08:15:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 11 operator= 处理自我赋值\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-13T08:15:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683965755000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":2.37,"words":710},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-11.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 11 operator= 处理自我赋值</h1>\\n<p>我们知道复制构造函数和赋值运算符的区别是赋值构造函数用于创建一个新的对象，而赋值运算符用于给一个已经存在的对象重新赋值。</p>\\n<p>因此赋值运算符就可能存在把自己赋值给自己的情况，本节就是专门讨论这个场景的。</p>\\n<h2> 分析</h2>\\n<p>本文介绍了三种办法来处理这个问题，其实作者后续不仅仅讨论了自我赋值的问题，还讨论了赋值运算符的<strong>异常安全问题</strong>。</p>\\n<p>第一种方法比较简单，既然operator=可能存在自我赋值的场景，那么我们便在进入赋值运算符的函数内部首先做一个\\"证同测试\\"。如果是同一个对象，就直接返回。</p>","autoDesc":true}');export{e as data};
