const n=JSON.parse('{"key":"v-73d8f183","path":"/posts/Program_language/cpp/cpp17/cpp17_variant.html","title":"std::variant","lang":"zh-CN","frontmatter":{"description":"std::variant 需要一个求解某个类型在可变参数类型中的位置。 #include &lt;stdexcept&gt; #include &lt;vector&gt; #include &lt;cstring&gt; #include &lt;utility&gt; // For std::forward #include &lt;type_traits&gt; // For std::is_same, std::remove_reference //Position&lt;Ts...&gt; 从 Ts... 找到 T类型的下标 template&lt;int id, typename U, typename T, typename ...Ts&gt; struct Position { constexpr static int pos = std::is_same&lt;U, T&gt;::value ? id : Position&lt;id + 1, U, Ts...&gt;::pos; }; template&lt;int id, typename U, typename T&gt; struct Position&lt;id, U, T&gt; { constexpr static int pos = id; }; template&lt;typename ...Ts&gt; class A { public: template&lt;typename T&gt; int get_index(){ return Position&lt;0, T, Ts...&gt;::pos; } }; int main(){ A&lt;int, float, double, std::string&gt; a; std::cout &lt;&lt; a.get_index&lt;std::string&gt;() &lt;&lt; std::endl; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp17/cpp17_variant.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"std::variant"}],["meta",{"property":"og:description","content":"std::variant 需要一个求解某个类型在可变参数类型中的位置。 #include &lt;stdexcept&gt; #include &lt;vector&gt; #include &lt;cstring&gt; #include &lt;utility&gt; // For std::forward #include &lt;type_traits&gt; // For std::is_same, std::remove_reference //Position&lt;Ts...&gt; 从 Ts... 找到 T类型的下标 template&lt;int id, typename U, typename T, typename ...Ts&gt; struct Position { constexpr static int pos = std::is_same&lt;U, T&gt;::value ? id : Position&lt;id + 1, U, Ts...&gt;::pos; }; template&lt;int id, typename U, typename T&gt; struct Position&lt;id, U, T&gt; { constexpr static int pos = id; }; template&lt;typename ...Ts&gt; class A { public: template&lt;typename T&gt; int get_index(){ return Position&lt;0, T, Ts...&gt;::pos; } }; int main(){ A&lt;int, float, double, std::string&gt; a; std::cout &lt;&lt; a.get_index&lt;std::string&gt;() &lt;&lt; std::endl; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T05:37:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-08T05:37:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"std::variant\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T05:37:52.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712554672000,"updatedTime":1712554672000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.44,"words":131},"filePathRelative":"posts/Program_language/cpp/cpp17/cpp17_variant.md","localizedDate":"2024年4月8日","excerpt":"<h1> std::variant</h1>\\n<p>需要一个求解某个类型在可变参数类型中的位置。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdexcept&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;cstring&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;utility&gt;</span> <span class=\\"token comment\\">// For std::forward</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;type_traits&gt;</span> <span class=\\"token comment\\">// For std::is_same, std::remove_reference</span></span>\\n\\n\\n<span class=\\"token comment\\">//Position&lt;Ts...&gt; 从 Ts... 找到 T类型的下标</span>\\n<span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span> id<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">U</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>Ts<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Position</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">constexpr</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> pos <span class=\\"token operator\\">=</span> std<span class=\\"token double-colon punctuation\\">::</span>is_same<span class=\\"token operator\\">&lt;</span>U<span class=\\"token punctuation\\">,</span> T<span class=\\"token operator\\">&gt;</span><span class=\\"token double-colon punctuation\\">::</span>value <span class=\\"token operator\\">?</span> id <span class=\\"token operator\\">:</span> Position<span class=\\"token operator\\">&lt;</span>id <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> U<span class=\\"token punctuation\\">,</span> Ts<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token operator\\">&gt;</span><span class=\\"token double-colon punctuation\\">::</span>pos<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span> id<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">U</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">T</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Position</span><span class=\\"token operator\\">&lt;</span>id<span class=\\"token punctuation\\">,</span> U<span class=\\"token punctuation\\">,</span> T<span class=\\"token operator\\">&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">constexpr</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> pos <span class=\\"token operator\\">=</span> id<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>Ts<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">A</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">template</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">T</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">get_index</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> Position<span class=\\"token operator\\">&lt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> T<span class=\\"token punctuation\\">,</span> Ts<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token operator\\">&gt;</span><span class=\\"token double-colon punctuation\\">::</span>pos<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\nA<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">float</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span><span class=\\"token punctuation\\">,</span> std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&gt;</span> a<span class=\\"token punctuation\\">;</span>\\nstd<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token generic-function\\"><span class=\\"token function\\">get_index</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span>std<span class=\\"token double-colon punctuation\\">::</span>string<span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
