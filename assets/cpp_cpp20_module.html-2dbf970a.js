import{_ as e,V as p,W as o,X as n,Y as s,$ as t,a0 as l,F as c}from"./framework-9a29aaa0.js";const i={},d=l(`<h1 id="c-20-module的理解" tabindex="-1"><a class="header-anchor" href="#c-20-module的理解" aria-hidden="true">#</a> c++20 module的理解</h1><p>在c++20之前，在一个模块中(.cpp)想要获取别的模块的声明， 就需要使用<code>#include</code>去包含其他模块的头文件。 c++20引入了module关键字，使得c++拥有了类似于java和python的包管理机制，本文就来讲解一下module这个语法糖。</p><h2 id="include头文件与module方式的对比" tabindex="-1"><a class="header-anchor" href="#include头文件与module方式的对比" aria-hidden="true">#</a> include头文件与module方式的对比</h2><p><code>#include</code>头文件有下面这些负面影响：</p><ul><li>低效：头文件的本职工作是提供前置声明，而提供前置声明的方式采用了文本拷贝，文本拷贝过程不带有语法分析，会一股脑将需要的、不需要的声明全部拷贝到源文件中。</li><li>传递性：最底层的头文件中宏、变量等实体的可见性，可以通过中间头文件“透传”给最上层的头文件，这种透传会带来很多麻烦。</li><li>降低编译速度：加入 a.h 被三个模块包含，则 a 会被展开三次、编译三次。</li><li>顺序相关：程序的行为受头文件的包含顺影响，也受是否包含某一个头文件影响，在 C++ 中尤为严重（重载）。</li><li>不确定性：同一个头文件在不同的源文件中可能表现出不同的行为，导致这些不同的原因，可能源自源文件（比如该源文件包含的其他头文件、该源文件中定义的宏等），也可能源自编译选项。</li></ul><p>而module模块机制则有以下一些优势：</p><ul><li>无需重复编译：一个模块的所有接口文件、实现文件，作为一个翻译单元，一次编译后生成 pcm，之后遇到 Import 该模块的代码，编译器会从 pcm 中寻找函数声明等信息，该特性会极大加快 C++ 代码的编译速度。</li><li>隔离性更好：模块内 Import 的内容，不会泄漏到模块外部，除非显式使用 export Import 声明。</li><li>顺序无关：Import 多个模块，无需关心这些模块间的顺序。</li><li>减少冗余与不一致：小的模块可以直接在单个 cppm 文件中完成实体的导出、定义，但大的模块依然会把声明、实现拆分到不同文件。</li><li>子模块、Module Partition 等机制让大模块、超大模块的组织方式更加灵活。</li><li>全局模块段、Module Map 制使得 Module 与老旧的头文件交互成为可能。</li></ul><h2 id="c-20-module-的-helloworld" tabindex="-1"><a class="header-anchor" href="#c-20-module-的-helloworld" aria-hidden="true">#</a> c++20 module 的 Helloworld</h2><p>下面的例子是所有程序员都爱写的helloworld。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//g++ -std=c++20 -fmodules-ts -xc++-system-header iostream</span>
<span class="token comment">//g++ main.cpp -o main -std=c++20 -fmodules-ts</span>
<span class="token keyword">import</span> <span class="token module"><span class="token string">&lt;iostream&gt;</span></span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, World&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是想跑通这个helloworld并不简单，系统库iostream的module并不会自动生成，而需要我们使用生成。</p><p>可以使用下面的命令生成iostream的module：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g++ <span class="token parameter variable">-std</span><span class="token operator">=</span>c++20 -fmodules-ts -xc++-system-header iostream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个操作会在当前目录下生成一个gcm.cache目录，其目录结构如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tree gcm.cache/
gcm.cache/
└── usr
    └── include
        └── c++
            └── <span class="token number">11</span>
                └── iostream.gcm

<span class="token number">4</span> directories, <span class="token number">1</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，在编译main.cpp 时需要添加-fmodules-ts的flag，即使用下面的编译语句：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>g<span class="token operator">++</span> main<span class="token punctuation">.</span>cpp <span class="token operator">-</span>o main <span class="token operator">-</span>std<span class="token operator">=</span>c<span class="token operator">++</span><span class="token number">20</span> <span class="token operator">-</span>fmodules<span class="token operator">-</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过这样的操作之后，可以成功的编译，并打印Hello, World。</p><h2 id="c-20-module管理" tabindex="-1"><a class="header-anchor" href="#c-20-module管理" aria-hidden="true">#</a> c++20 module管理</h2><p>为了支持module， c++20 引入了三个关键字export/import/module。下面一一解读。</p><h3 id="export关键字" tabindex="-1"><a class="header-anchor" href="#export关键字" aria-hidden="true">#</a> export关键字</h3><p><strong>export关键字</strong>用于声明一个module名和标记内容的导出性。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">export</span><span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token keyword">module</span> <span class="token keyword">module</span><span class="token operator">-</span>name <span class="token keyword">module</span><span class="token operator">-</span><span class="token function">partition</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token function">attr</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token punctuation">;</span>	<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>	
<span class="token keyword">export</span> <span class="token function">declaration</span>	<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>	
<span class="token keyword">export</span> <span class="token punctuation">{</span> declaration<span class="token operator">-</span><span class="token function">seq</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语句1声明了一个模块的名字，标记当前是一个Module单元。</p><p>语句2和语句3声明内容是可以导出的，即外部可以见的。</p><p>例如下面的例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">A</span><span class="token punctuation">;</span> <span class="token comment">// （1）declares the primary module interface unit for named module &#39;A&#39; </span>
 
<span class="token comment">// hello() will be visible by translations units importing &#39;A&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> （<span class="token number">2</span>）
 
<span class="token comment">// world() will NOT be visible.</span>
<span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> （<span class="token number">3</span>）
 
<span class="token comment">// Both one() and zero() will be visible.</span>
<span class="token keyword">export</span>  <span class="token comment">//(4)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// Exporting namespaces also works: hi::english() and hi::french() will be visible.</span>
<span class="token keyword">export</span> <span class="token keyword">namespace</span> hi <span class="token comment">//(5)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">english</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;Hi!&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">french</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;Salut!&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语句1声明了一个模块的名字，关于module前面加不加export的区别，将在module关键字中讲解。</p><p>语句2声明hello函数是可以导出的。</p><p>语句3没有export，代表其是不可以导出的。</p><p>语句4同时导出了两个函数。</p><p>语句5导出了整个namespace。</p><h3 id="import关键字" tabindex="-1"><a class="header-anchor" href="#import关键字" aria-hidden="true">#</a> import关键字</h3><p><strong>import关键字</strong>用于导入一个module。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">export</span><span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token keyword">import</span> <span class="token keyword">module</span><span class="token operator">-</span>name <span class="token function">attr</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token punctuation">;</span>		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果导入的模块仅仅希望在当前编译单元可见，则不要加上export， 否则需要加上export。</p><p>在下面的例子，在A.cpp中，声明了module A，在moduleA中，hello函数是可以导出的。</p><p>在B.cpp文件中，声明了module B，在module B中，导入了module A，并使得moduleA中的内容对外可见，也声明world函数是可以导出的。</p><p>在main.cpp中，import了B模块，因为B模块中的world是可以导出的，同时由于B模块引入的A模块时使用了export，因此main方法可以调用hello和world方法。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/////// A.cpp (primary module interface unit of &#39;A&#39;)</span>
<span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">A</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 
<span class="token comment">/////// B.cpp (primary module interface unit of &#39;B&#39;)</span>
<span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">B</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">import</span> <span class="token module">A</span><span class="token punctuation">;</span><span class="token comment">//A is visible for other compile unit</span>
 
<span class="token keyword">export</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 
<span class="token comment">/////// main.cpp (not a module unit)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">import</span> <span class="token module">B</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="module关键字" tabindex="-1"><a class="header-anchor" href="#module关键字" aria-hidden="true">#</a> module关键字</h3><p><code>module</code>用于声明一个模块，其前方也可以带上<code>export</code>。下面将具体讲解module的用法。</p><p><strong>module可以用于声明一个模块</strong></p><p><code>export module</code>代表纯接口或者是接口和实现在一起， 单独只有module代表纯实现。可以通过下面的例子去理解二者的区别：</p><ul><li>module接口和实现单元在一起：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//Hello.cpp</span>
<span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">Hello</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//main.cpp</span>
<span class="token comment">//g++ -fmodules-ts -std=c++20 Hello.cpp  main.cpp</span>
<span class="token keyword">import</span> <span class="token module">Hello</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>module接口声明单元和接口实现单元分开：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//Hello.cpp</span>
<span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">Hello</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意Hello_Impl.cpp中的hello是不能添加export的，<code>export</code>只出现在有<code>export module</code>的接口声明单元中，而下面的是接口实现单元。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//Hello_Impl.cpp</span>
<span class="token keyword">module</span> <span class="token module">Hello</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//g++ -fmodules-ts -std=c++20 Hello.cpp Hello_Impl.cpp  main.cpp</span>
<span class="token keyword">import</span> <span class="token module">Hello</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>module可以用于声明全局模块片段(global module fragement)</strong></p><p><code>module；</code>语句之后可以跟一些预处理指令，例如<code>#include</code>，<code>#define</code>等。</p><p>其存在的原因可以通过下面的例子说明：</p><p>对于第一种采用<code>#include</code>方式的头文件包括，尽管_UNICODE宏可以改变头文件windows.h中的条件编译，但该头文中的所有的可导出符号(exportable symbol)都会附加到相应导入模块(importing module)空间(既具有模块链接(module linkage))。</p><p>而对于第二种采用import指令的头文件单元导入方式，<code>_UNICODE</code>宏不能影响头文件windows.h的条件编译。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// legency include preprocessor directive</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_UNICODE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// \`header-unit import\` preprocessor directive</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_UNICODE</span></span>
<span class="token keyword">import</span> <span class="token module"><span class="token string">&lt;windows.h&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个完整的例子，<code>module;</code>和<code>export module A</code>之间的内容就是global module fragement。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/////// A.cpp (primary module interface unit of &#39;A&#39;)</span>
<span class="token keyword">module</span><span class="token punctuation">;</span>
 
<span class="token comment">// Defining _POSIX_C_SOURCE adds functions to standard headers,</span>
<span class="token comment">// according to the POSIX standard.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_POSIX_C_SOURCE</span> <span class="token expression"><span class="token number">200809L</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
 
<span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">A</span><span class="token punctuation">;</span>
 
<span class="token keyword">import</span> <span class="token module"><span class="token string">&lt;ctime&gt;</span></span><span class="token punctuation">;</span>
 
<span class="token comment">// Only for demonstration (bad source of randomness).</span>
<span class="token comment">// Use C++ &lt;random&gt; instead.</span>
<span class="token keyword">export</span> <span class="token keyword">double</span> <span class="token function">weak_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>timespec ts<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">timespec_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ts<span class="token punctuation">,</span> TIME_UTC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// from &lt;ctime&gt;</span>
 
    <span class="token comment">// Provided in &lt;stdlib.h&gt; according to the POSIX standard.</span>
    <span class="token function">srand48</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span>tv_nsec<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// drand48() returns a random number between 0 and 1.</span>
    <span class="token keyword">return</span> <span class="token function">drand48</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">/////// main.cpp (not a module unit)</span>
<span class="token keyword">import</span> <span class="token module"><span class="token string">&lt;iostream&gt;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token module">A</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Random value between 0 and 1: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">weak_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>module 分区</strong></p><p>module可以定义分区，例如定义一个<code>module A</code>， 再定义一个<code>module A:B</code>和<code>module A:C</code>，<code>A:C</code>和<code>A:B</code>同隶属于<code>module A</code>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">///////  A.cpp   </span>
<span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">A</span><span class="token punctuation">;</span>     <span class="token comment">// primary module interface unit</span>
 
<span class="token keyword">export</span> <span class="token keyword">import</span> <span class="token module"><span class="token operator">:</span>B</span><span class="token punctuation">;</span>    <span class="token comment">// Hello() is visible when importing &#39;A&#39;.</span>
<span class="token keyword">import</span> <span class="token module"><span class="token operator">:</span>C</span><span class="token punctuation">;</span>           <span class="token comment">// WorldImpl() is now visible only for &#39;A.cpp&#39;.</span>
<span class="token comment">// export import :C; // ERROR: Cannot export a module implementation unit.</span>
 
<span class="token comment">// World() is visible by any translation unit importing &#39;A&#39;.</span>
<span class="token keyword">export</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">World</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">WorldImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/////// A-B.cpp </span>
<span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">A<span class="token operator">:</span>B</span><span class="token punctuation">;</span> <span class="token comment">// partition module interface unit</span>
 
<span class="token comment">// Hello() is visible by any translation unit importing &#39;A&#39;.</span>
<span class="token keyword">export</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/////// A-C.cpp </span>
<span class="token keyword">module</span> <span class="token module">A<span class="token operator">:</span>C</span><span class="token punctuation">;</span> <span class="token comment">// partition module implementation unit</span>
 
<span class="token comment">// WorldImpl() is visible by any module unit of &#39;A&#39; importing &#39;:C&#39;.</span>
<span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> <span class="token function">WorldImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/////// main.cpp </span>
<span class="token comment">// g++ -fmodules-ts -std=c++20 A-B.cpp A-C.cpp A.cpp main.cpp</span>
<span class="token keyword">import</span> <span class="token module">A</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token module"><span class="token string">&lt;iostream&gt;</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">World</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// WorldImpl(); // ERROR: WorldImpl() is not visible.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>module : private</strong></p>`,68),u={href:"https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Modules.html%E3%80%82",target:"_blank",rel:"noopener noreferrer"},r=n("blockquote",null,[n("p",null,"Private Module Fragment The Private Module Fragment is recognized, but an error is emitted.")],-1),k=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),m=n("ul",null,[n("li",null,"c++20中开始支持module机制，新增加了module/import/export三个关键字，类似于java和python语言的包管理机制，旨在取缔头文件包含方式。目前主流的编译器并没有完全支持module中的所有内容，对于新项目而言可以尝试使用，老项目想要使用将带来一些额外的工作量。")],-1);function v(b,g){const a=c("ExternalLinkIcon");return p(),o("div",null,[d,n("p",null,[s("从gcc的官方说明中得知，该点还没有被实现，"),n("a",u,[s("https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Modules.html。"),t(a)])]),r,k,m])}const w=e(i,[["render",v],["__file","cpp_cpp20_module.html.vue"]]);export{w as default};
