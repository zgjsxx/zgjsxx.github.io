const n=JSON.parse('{"key":"v-717b477a","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-12.html","title":"effective c++ 12 复制对象时勿忘其每一个成分","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 12 复制对象时勿忘其每一个成分 本文也是主要讲解的是赋值构造函数需要复制应该复制的每一个成分，这里面最容易忘记复制的就是基类的成分。 分析 本例主要强调在自定义复制构造函数和赋值运算符时一定要检查是否复制了所需要的元素。尤其是派生类中不能忘记复制基类的成分。 下面便是一个例子，其中的派生类中处理了复制基类的成分。 #include &lt;string&gt; #include &lt;iostream&gt; class Base { public: \\tBase(int b) : b_(b) {} \\tBase(const Base&amp; rhs); \\tBase&amp; operator=(const Base&amp; rhs); public: int getB() const{ return b_; } private: \\tint b_; }; Base::Base(const Base&amp; rhs) : \\tb_(rhs.b_) { } Base&amp; Base::operator=(const Base&amp; rhs) { \\tb_ = rhs.b_; \\treturn *this; } class Derived : public Base { public: \\tDerived(int d, int b) : d_(d), Base(b) \\t{} \\tDerived(const Derived&amp; rhs); \\tDerived&amp; operator=(const Derived&amp; rhs); public: void printVal() const { std::cout &lt;&lt; \\"d_ = \\" &lt;&lt; d_ &lt;&lt; \\", b_ = \\" &lt;&lt; getB() &lt;&lt; std::endl; } private: \\tint d_; }; Derived::Derived(const Derived&amp; rhs): d_(rhs.d_), Base(rhs) { } Derived&amp; Derived::operator=(const Derived&amp; rhs) { \\td_ = rhs.d_; Base::operator=(rhs); \\treturn *this; } int main() { Derived d1(1,2); d1.printVal(); Derived d2(d1); d2.printVal(); Derived d3(2,3); d3.printVal(); d3 = d1; d3.printVal(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-12.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 12 复制对象时勿忘其每一个成分"}],["meta",{"property":"og:description","content":"effective c++ 12 复制对象时勿忘其每一个成分 本文也是主要讲解的是赋值构造函数需要复制应该复制的每一个成分，这里面最容易忘记复制的就是基类的成分。 分析 本例主要强调在自定义复制构造函数和赋值运算符时一定要检查是否复制了所需要的元素。尤其是派生类中不能忘记复制基类的成分。 下面便是一个例子，其中的派生类中处理了复制基类的成分。 #include &lt;string&gt; #include &lt;iostream&gt; class Base { public: \\tBase(int b) : b_(b) {} \\tBase(const Base&amp; rhs); \\tBase&amp; operator=(const Base&amp; rhs); public: int getB() const{ return b_; } private: \\tint b_; }; Base::Base(const Base&amp; rhs) : \\tb_(rhs.b_) { } Base&amp; Base::operator=(const Base&amp; rhs) { \\tb_ = rhs.b_; \\treturn *this; } class Derived : public Base { public: \\tDerived(int d, int b) : d_(d), Base(b) \\t{} \\tDerived(const Derived&amp; rhs); \\tDerived&amp; operator=(const Derived&amp; rhs); public: void printVal() const { std::cout &lt;&lt; \\"d_ = \\" &lt;&lt; d_ &lt;&lt; \\", b_ = \\" &lt;&lt; getB() &lt;&lt; std::endl; } private: \\tint d_; }; Derived::Derived(const Derived&amp; rhs): d_(rhs.d_), Base(rhs) { } Derived&amp; Derived::operator=(const Derived&amp; rhs) { \\td_ = rhs.d_; Base::operator=(rhs); \\treturn *this; } int main() { Derived d1(1,2); d1.printVal(); Derived d2(d1); d2.printVal(); Derived d3(2,3); d3.printVal(); d3 = d1; d3.printVal(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-13T13:26:57.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-13T13:26:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 12 复制对象时勿忘其每一个成分\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-13T13:26:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683984417000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":4}]},"readingTime":{"minutes":1.22,"words":367},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-12.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 12 复制对象时勿忘其每一个成分</h1>\\n<p>本文也是主要讲解的是赋值构造函数需要复制应该复制的每一个成分，这里面最容易忘记复制的就是基类的成分。</p>\\n<h2> 分析</h2>\\n<p>本例主要强调在自定义复制构造函数和赋值运算符时一定要检查是否复制了所需要的元素。尤其是派生类中不能忘记复制基类的成分。</p>\\n<p>下面便是一个例子，其中的派生类中处理了复制基类的成分。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Base</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">b_</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Base<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tBase<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Base<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getB</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> b_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">int</span> b_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token class-name\\">Base</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Base<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">b_</span><span class=\\"token punctuation\\">(</span>rhs<span class=\\"token punctuation\\">.</span>b_<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n\\nBase<span class=\\"token operator\\">&amp;</span> Base<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Base<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\n\\tb_ <span class=\\"token operator\\">=</span> rhs<span class=\\"token punctuation\\">.</span>b_<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Derived</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Base</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token function\\">Derived</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> d<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">d_</span><span class=\\"token punctuation\\">(</span>d<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token function\\">Derived</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Derived<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tDerived<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Derived<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">printVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"d_ = \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> d_ <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\", b_ = \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">getB</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">int</span> d_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token class-name\\">Derived</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">Derived</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Derived<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">d_</span><span class=\\"token punctuation\\">(</span>rhs<span class=\\"token punctuation\\">.</span>d_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span>rhs<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n\\nDerived<span class=\\"token operator\\">&amp;</span> Derived<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Derived<span class=\\"token operator\\">&amp;</span> rhs<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\td_ <span class=\\"token operator\\">=</span> rhs<span class=\\"token punctuation\\">.</span>d_<span class=\\"token punctuation\\">;</span>\\n    Base<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>rhs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Derived <span class=\\"token function\\">d1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    d1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Derived <span class=\\"token function\\">d2</span><span class=\\"token punctuation\\">(</span>d1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    d2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Derived <span class=\\"token function\\">d3</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    d3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    d3 <span class=\\"token operator\\">=</span> d1<span class=\\"token punctuation\\">;</span>\\n    d3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
