const e=JSON.parse('{"key":"v-71e6fa5f","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-49.html","title":"effective c++ 49 了解new-handler的行为","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 49 了解new-handler的行为 我们在编写代码时，经常会使用new来创建对象。如果内存不够了，new会是怎样的行为？ 默认的行为是，new将抛出一个异常。然而有时候我们不希望这样的默认行为，这个时候我们就需要new-handler。 本章节主要探讨了如何自定义new-handler。 分析 new-handler的介绍 作者在item-51节从给出了::operator new的一个伪代码，这个伪代码就比较清晰地显示了new-handler是何时被调用的。从下面的伪代码中我们也可以看到，new-handler如果被设置了，它将被循环调用。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-49.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 49 了解new-handler的行为"}],["meta",{"property":"og:description","content":"effective c++ 49 了解new-handler的行为 我们在编写代码时，经常会使用new来创建对象。如果内存不够了，new会是怎样的行为？ 默认的行为是，new将抛出一个异常。然而有时候我们不希望这样的默认行为，这个时候我们就需要new-handler。 本章节主要探讨了如何自定义new-handler。 分析 new-handler的介绍 作者在item-51节从给出了::operator new的一个伪代码，这个伪代码就比较清晰地显示了new-handler是何时被调用的。从下面的伪代码中我们也可以看到，new-handler如果被设置了，它将被循环调用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:59:58.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:59:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 49 了解new-handler的行为\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T09:59:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[{"level":3,"title":"new-handler的介绍","slug":"new-handler的介绍","link":"#new-handler的介绍","children":[]},{"level":3,"title":"new-handler的例子","slug":"new-handler的例子","link":"#new-handler的例子","children":[]},{"level":3,"title":"new-handler的设计原则","slug":"new-handler的设计原则","link":"#new-handler的设计原则","children":[]},{"level":3,"title":"为某个类设计new-handler","slug":"为某个类设计new-handler","link":"#为某个类设计new-handler","children":[]},{"level":3,"title":"为某个类设计new-handler（更通用的做法）","slug":"为某个类设计new-handler-更通用的做法","link":"#为某个类设计new-handler-更通用的做法","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684317598000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":5}]},"readingTime":{"minutes":4.87,"words":1461},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-49.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 49 了解new-handler的行为</h1>\\n<p>我们在编写代码时，经常会使用new来创建对象。如果内存不够了，new会是怎样的行为？</p>\\n<p>默认的行为是，new将抛出一个异常。然而有时候我们不希望这样的默认行为，这个时候我们就需要new-handler。</p>\\n<p>本章节主要探讨了如何自定义new-handler。</p>\\n<h2> 分析</h2>\\n<h3> new-handler的介绍</h3>\\n<p>作者在item-51节从给出了<code>::operator new</code>的一个伪代码，这个伪代码就比较清晰地显示了new-handler是何时被调用的。从下面的伪代码中我们也可以看到，new-handler如果被设置了，它将被循环调用。</p>","autoDesc":true}');export{e as data};
