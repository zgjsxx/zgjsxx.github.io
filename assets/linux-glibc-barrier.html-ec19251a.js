import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const t={},p=e(`<h1 id="深入理解glibc-barrier的实现原理" tabindex="-1"><a class="header-anchor" href="#深入理解glibc-barrier的实现原理" aria-hidden="true">#</a> 深入理解glibc barrier的实现原理</h1><h2 id="pthread-barrier-t的结构" tabindex="-1"><a class="header-anchor" href="#pthread-barrier-t的结构" aria-hidden="true">#</a> pthread_barrier_t的结构</h2><p>pthread_barrier_t的结构定义在<code>sysdepsnptlbitspthreadtypes.h</code>中，是一个联合体。联合中有两个字段，第一个字段是char类型的数组。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">union</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> __size<span class="token punctuation">[</span>__SIZEOF_PTHREAD_BARRIER_T<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> <span class="token keyword">int</span> __align<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">pthread_barrier_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个char数组各bit的定义在另一个结构体<strong>pthread_barrier</strong>中，定义在<code>sysdeps/nptl/internaltypes.h</code>。</p><p>这个才是barrier的真实定义，其有用5个字段。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pthread_barrier</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> current_round<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">int</span> shared<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个字段的含义如下所示：</p><ul><li><p>in：已经抵达barrier的线程数量。</p></li><li><p>current_round:当前这轮的基数。由于barrier是可以重复使用的，例如一个屏障可以允许2个线程通过，当这个2个线程达到该屏障之后，该屏障可以继续工作，重复使用。</p></li><li><p>count：需要抵达barrier的线程数量</p></li><li><p>shared: 是否可以被share</p></li><li><p>out: 输出值</p></li></ul><h2 id="pthread-barrier-wait源码分析" tabindex="-1"><a class="header-anchor" href="#pthread-barrier-wait源码分析" aria-hidden="true">#</a> pthread_barrier_wait源码分析</h2><p>首先,<code>pthread_barrier_wait</code>函数将进入屏障的线程数字段(bar-&gt;in)加1，变量i存储的就是加1后的值。注意这里使用的是acq_rel的内存序，因为下面将要根据i进行if-else判断，这里不能乱序。</p><p>除此以外，count值也读取了进来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">struct</span> <span class="token class-name">pthread_barrier</span> <span class="token operator">*</span>bar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pthread_barrier</span> <span class="token operator">*</span><span class="token punctuation">)</span> barrier<span class="token punctuation">;</span>

  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

 reset_restart<span class="token operator">:</span>

  i <span class="token operator">=</span> <span class="token function">atomic_fetch_add_acq_rel</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>in<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">/* These loads are after the fetch_add so that we&#39;re less likely to first
     pull in the cache line as shared.  */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">=</span> bar<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这一段是用于处理IN值超过最大限制的场景。因为barrier是可以重复使用的，比如设置count为2，则可以第一轮限制2个线程通过， 第二轮还可以限制2个线程通过，一次类推。这个过程中，<code>bar-&gt;in</code>字段是不断递增的，因此可能存在溢出的场景。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> max_in_before_reset <span class="token operator">=</span> BARRIER_IN_THRESHOLD
				   <span class="token operator">-</span> BARRIER_IN_THRESHOLD <span class="token operator">%</span> count<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> max_in_before_reset<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> max_in_before_reset<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">futex_wait_simple</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>in<span class="token punctuation">,</span> i<span class="token punctuation">,</span> bar<span class="token operator">-&gt;</span>shared<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">goto</span> reset_restart<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面读取当前这一轮的基础，如果<code>i &gt; cr + count</code>，意味着已经有足够多的线程抵达了barrier，该线程不用wait，且需要将之前的waiter唤醒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">unsigned</span> cr <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>current_round<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cr <span class="token operator">+</span> count <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> newcr <span class="token operator">=</span> i <span class="token operator">-</span> i <span class="token operator">%</span> count<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_compare_exchange_weak_release</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>current_round<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cr<span class="token punctuation">,</span>
						newcr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cr <span class="token operator">=</span> newcr<span class="token punctuation">;</span>
            <span class="token function">futex_wake</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>current_round<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> bar<span class="token operator">-&gt;</span>shared<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> cr<span class="token punctuation">)</span>
                <span class="token keyword">goto</span> ready_to_leave<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段就代表还没有足够的线程进入barrier，因此调用futex_wait进行等待。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> cr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">futex_wait_simple</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>current_round<span class="token punctuation">,</span> cr<span class="token punctuation">,</span> bar<span class="token operator">-&gt;</span>shared<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cr <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>current_round<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的最后，要处理以下之前提到的&quot;溢出&quot;问题。当out值达到了阈值，则将current_round，out和in都置0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    o <span class="token operator">=</span> <span class="token function">atomic_fetch_add_release</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>out<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> max_in_before_reset<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">atomic_thread_fence_acquire</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">atomic_store_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>current_round<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">atomic_store_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>out<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> shared <span class="token operator">=</span> bar<span class="token operator">-&gt;</span>shared<span class="token punctuation">;</span>
        <span class="token function">atomic_store_release</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>in<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">futex_wake</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>bar<span class="token operator">-&gt;</span>in<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> shared<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gdb观察条件变量的内部值的变化" tabindex="-1"><a class="header-anchor" href="#gdb观察条件变量的内部值的变化" aria-hidden="true">#</a> gdb观察条件变量的内部值的变化</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//g++ test.cpp -g</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

<span class="token class-name">pthread_mutex_t</span> numlock<span class="token punctuation">;</span>
<span class="token class-name">pthread_barrier_t</span> b<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">pthread_barrier</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> current_round<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">int</span> shared<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

pthread_barrier <span class="token operator">*</span>b_real <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>numlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>numlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread enter wait point\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_barrier_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">pthread_t</span> t1<span class="token punctuation">,</span>t2<span class="token punctuation">;</span>
    <span class="token function">pthread_barrier_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化屏障</span>
    b_real <span class="token operator">=</span> <span class="token punctuation">(</span>pthread_barrier <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>numlock<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>handle<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>handle<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在pthread_barrier_wait方法上下一个断点，在代码中是30行，运行代码，然后打印b_real的值。</p><p>目前还没有线程进入barrier，因此in=0。当前还是属于第一轮，因此current_round = 0。count在程序中设置，因此其值为2。程序并没有设置进程间共享的属性，因此shared = 0。</p><p>目前还没有完成一轮，因此out = 0。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test4<span class="token punctuation">]</span><span class="token comment"># gdb a.out  -q</span>
Reading symbols from a.out<span class="token punctuation">..</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">30</span>
Breakpoint <span class="token number">1</span> at 0x401219: <span class="token function">file</span> test.cpp, line <span class="token number">30</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> r
Starting program: /home/work/cpp_proj/test4/a.out
<span class="token punctuation">[</span>Thread debugging using libthread_db enabled<span class="token punctuation">]</span>
Using <span class="token function">host</span> libthread_db library <span class="token string">&quot;/lib64/libthread_db.so.1&quot;</span><span class="token builtin class-name">.</span>
<span class="token punctuation">[</span>New Thread 0x7ffff77ff640 <span class="token punctuation">(</span>LWP <span class="token number">151331</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>New Thread 0x7ffff6ffe640 <span class="token punctuation">(</span>LWP <span class="token number">151332</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">in</span> <span class="token operator">=</span> <span class="token number">0</span>
thread enter <span class="token function">wait</span> point
<span class="token punctuation">[</span>Switching to Thread 0x7ffff77ff640 <span class="token punctuation">(</span>LWP <span class="token number">151331</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

Thread <span class="token number">2</span> <span class="token string">&quot;a.out&quot;</span> hit Breakpoint <span class="token number">1</span>, handle <span class="token punctuation">(</span>data<span class="token operator">=</span>0x0<span class="token punctuation">)</span> at test.cpp:30
<span class="token number">30</span>              pthread_barrier_wait<span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
Missing separate debuginfos, use: dnf debuginfo-install glibc-2.34-60.el9.x86_64 libgcc-11.3.1-4.3.el9.x86_64 libstdc++-11.3.1-4.3.el9.x86_64
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p *b_real
<span class="token variable">$1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>in <span class="token operator">=</span> <span class="token number">0</span>, current_round <span class="token operator">=</span> <span class="token number">0</span>, count <span class="token operator">=</span> <span class="token number">2</span>, shared <span class="token operator">=</span> <span class="token number">0</span>, out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","linux-glibc-barrier.html.vue"]]);export{u as default};
