const a=JSON.parse('{"key":"v-362d5ca2","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-35.html","title":"effective c++ 35 考虑virtual函数以外的其他选择","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 35 考虑virtual函数以外的其他选择 在本节中，作者给出了一些可以替代调用virtual函数的方法。下面就一一进行介绍。 分析 1.考虑NVI的实现方式(模板方法设计模式) 父类和子类都调用healthValue同一接口，但是返回值不同。这是一种public非virtual函数调用virtual函数的实现多态的方法。 #include &lt;iostream&gt; class GameCharacter { public: \\t// derived classes do not redefine this \\tint healthValue() const \\t{ \\t\\tint retVal = doHealthValue(); \\t\\treturn retVal; \\t} private: \\t// derived classes may redefine this \\t// default algorithm for calc health \\tvirtual int doHealthValue() const \\t{ \\t\\treturn 0; \\t} }; class MyCoolCharacter : public GameCharacter { private: \\tint doHealthValue() const \\t{ \\t\\treturn 17; \\t} }; class MyRichCharacter : public GameCharacter { private: \\tint doHealthValue() const \\t{ \\t\\treturn 100; \\t} }; int main() { GameCharacter* gameCharacter = new MyCoolCharacter(); std::cout &lt;&lt; gameCharacter-&gt;healthValue() &lt;&lt; std::endl; GameCharacter* gameCharacter2 = new MyRichCharacter(); std::cout &lt;&lt; gameCharacter2-&gt;healthValue() &lt;&lt; std::endl; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-35.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 35 考虑virtual函数以外的其他选择"}],["meta",{"property":"og:description","content":"effective c++ 35 考虑virtual函数以外的其他选择 在本节中，作者给出了一些可以替代调用virtual函数的方法。下面就一一进行介绍。 分析 1.考虑NVI的实现方式(模板方法设计模式) 父类和子类都调用healthValue同一接口，但是返回值不同。这是一种public非virtual函数调用virtual函数的实现多态的方法。 #include &lt;iostream&gt; class GameCharacter { public: \\t// derived classes do not redefine this \\tint healthValue() const \\t{ \\t\\tint retVal = doHealthValue(); \\t\\treturn retVal; \\t} private: \\t// derived classes may redefine this \\t// default algorithm for calc health \\tvirtual int doHealthValue() const \\t{ \\t\\treturn 0; \\t} }; class MyCoolCharacter : public GameCharacter { private: \\tint doHealthValue() const \\t{ \\t\\treturn 17; \\t} }; class MyRichCharacter : public GameCharacter { private: \\tint doHealthValue() const \\t{ \\t\\treturn 100; \\t} }; int main() { GameCharacter* gameCharacter = new MyCoolCharacter(); std::cout &lt;&lt; gameCharacter-&gt;healthValue() &lt;&lt; std::endl; GameCharacter* gameCharacter2 = new MyRichCharacter(); std::cout &lt;&lt; gameCharacter2-&gt;healthValue() &lt;&lt; std::endl; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-19T02:29:40.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-19T02:29:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 35 考虑virtual函数以外的其他选择\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-19T02:29:40.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684463380000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":7}]},"readingTime":{"minutes":3.37,"words":1010},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-35.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 35 考虑virtual函数以外的其他选择</h1>\\n<p>在本节中，作者给出了一些可以替代调用virtual函数的方法。下面就一一进行介绍。</p>\\n<h2> 分析</h2>\\n<p><strong>1.考虑NVI的实现方式(模板方法设计模式)</strong></p>\\n<p>父类和子类都调用healthValue同一接口，但是返回值不同。这是一种public非virtual函数调用virtual函数的实现多态的方法。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">GameCharacter</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// derived classes do not redefine this</span>\\n\\t<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">healthValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">int</span> retVal <span class=\\"token operator\\">=</span> <span class=\\"token function\\">doHealthValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> retVal<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// derived classes may redefine this</span>\\n\\t<span class=\\"token comment\\">// default algorithm for calc health</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">doHealthValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyCoolCharacter</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">GameCharacter</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">doHealthValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">17</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyRichCharacter</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">GameCharacter</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">doHealthValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    GameCharacter<span class=\\"token operator\\">*</span> gameCharacter <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">MyCoolCharacter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> gameCharacter<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">healthValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>      \\n\\n    GameCharacter<span class=\\"token operator\\">*</span> gameCharacter2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">MyRichCharacter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> gameCharacter2<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">healthValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>      \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
