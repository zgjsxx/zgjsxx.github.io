const e=JSON.parse('{"key":"v-3ba2891b","path":"/posts/open_source_project/MyTinySTL/stack.html","title":"stack","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","MyTinySTL"],"description":"stack stack实现概述 下面的代码是stack的类数据部分的定义，其是一个类模板。 template &lt;class T, class Container = mystl::deque&lt;T&gt;&gt; class stack { public: typedef Container container_type; // 使用底层容器的型别 typedef typename Container::value_type value_type; typedef typename Container::size_type size_type; typedef typename Container::reference reference; typedef typename Container::const_reference const_reference; static_assert(std::is_same&lt;T, value_type&gt;::value, \\"the value_type of Container should be same with T\\"); private: container_type c_; // 用底层容器表现 stack","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/open_source_project/MyTinySTL/stack.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"stack"}],["meta",{"property":"og:description","content":"stack stack实现概述 下面的代码是stack的类数据部分的定义，其是一个类模板。 template &lt;class T, class Container = mystl::deque&lt;T&gt;&gt; class stack { public: typedef Container container_type; // 使用底层容器的型别 typedef typename Container::value_type value_type; typedef typename Container::size_type size_type; typedef typename Container::reference reference; typedef typename Container::const_reference const_reference; static_assert(std::is_same&lt;T, value_type&gt;::value, \\"the value_type of Container should be same with T\\"); private: container_type c_; // 用底层容器表现 stack"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-22T04:10:38.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"MyTinySTL"}],["meta",{"property":"article:modified_time","content":"2023-05-22T04:10:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"stack\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-22T04:10:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"stack实现概述","slug":"stack实现概述","link":"#stack实现概述","children":[]}],"git":{"createdTime":1684728638000,"updatedTime":1684728638000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.35,"words":104},"filePathRelative":"posts/open_source_project/MyTinySTL/stack.md","localizedDate":"2023年5月22日","excerpt":"<h1> stack</h1>\\n<h2> stack实现概述</h2>\\n<p>下面的代码是stack的类数据部分的定义，其是一个类模板。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Container</span> <span class=\\"token operator\\">=</span> mystl<span class=\\"token double-colon punctuation\\">::</span>deque<span class=\\"token operator\\">&lt;</span>T<span class=\\"token operator\\">&gt;&gt;</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">stack</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">typedef</span> Container                           container_type<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 使用底层容器的型别</span>\\n    <span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">Container</span><span class=\\"token double-colon punctuation\\">::</span>value_type      value_type<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">Container</span><span class=\\"token double-colon punctuation\\">::</span>size_type       size_type<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">Container</span><span class=\\"token double-colon punctuation\\">::</span>reference       reference<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">typename</span> <span class=\\"token class-name\\">Container</span><span class=\\"token double-colon punctuation\\">::</span>const_reference const_reference<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">static_assert</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>is_same<span class=\\"token operator\\">&lt;</span>T<span class=\\"token punctuation\\">,</span> value_type<span class=\\"token operator\\">&gt;</span><span class=\\"token double-colon punctuation\\">::</span>value<span class=\\"token punctuation\\">,</span>\\n                    <span class=\\"token string\\">\\"the value_type of Container should be same with T\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    container_type c_<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 用底层容器表现 stack</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
