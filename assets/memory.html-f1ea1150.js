import{_ as a,V as s,W as n,a0 as e}from"./framework-9a29aaa0.js";const o={},p=e(`<h1 id="memory" tabindex="-1"><a class="header-anchor" href="#memory" aria-hidden="true">#</a> memory</h1><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="address-of" tabindex="-1"><a class="header-anchor" href="#address-of" aria-hidden="true">#</a> address_of</h3><p>该函数的作用是获取value的地址。但是该实现可能并不正确，当Tp类型重载了&amp;运算符时，下面的实现就不能取到真时的地址。</p><p>可以考虑使用<code>std::addressof</code>解决。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取对象地址</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> Tp<span class="token operator">*</span> <span class="token function">address_of</span><span class="token punctuation">(</span>Tp<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),t=[p];function c(r,d){return s(),n("div",null,t)}const i=a(o,[["render",c],["__file","memory.html.vue"]]);export{i as default};
