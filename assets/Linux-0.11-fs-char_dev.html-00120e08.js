import{_ as n,V as s,W as a,a0 as t}from"./framework-c954d91f.js";const p={},e=t(`<h1 id="linux-0-11-文件系统char-dev-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统char-dev-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统char_dev.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>char_dev.c文件主要负责字符设备的访问方法。</p><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="rw-ttyx" tabindex="-1"><a class="header-anchor" href="#rw-ttyx" aria-hidden="true">#</a> rw_ttyx</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_ttyx</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">,</span><span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是串口终端的读写函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rw<span class="token operator">==</span>READ<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">tty_read</span><span class="token punctuation">(</span>minor<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">tty_write</span><span class="token punctuation">(</span>minor<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rw-tty" tabindex="-1"><a class="header-anchor" href="#rw-tty" aria-hidden="true">#</a> rw_tty</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_tty</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是控制台终端的读写函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">rw_ttyx</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span>current<span class="token operator">-&gt;</span>tty<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rw-ram" tabindex="-1"><a class="header-anchor" href="#rw-ram" aria-hidden="true">#</a> rw_ram</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_ram</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>内存数据读写函数。 空壳子，该版本没有实现。</p><h3 id="rw-mem" tabindex="-1"><a class="header-anchor" href="#rw-mem" aria-hidden="true">#</a> rw_mem</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_mem</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>物理内存数据读写函数。 空壳子，该版本没有实现。</p><h3 id="rw-kmem" tabindex="-1"><a class="header-anchor" href="#rw-kmem" aria-hidden="true">#</a> rw_kmem</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_kmem</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>内核虚拟内存数据读写函数。 空壳子，该版本没有实现。</p><h3 id="rw-port" tabindex="-1"><a class="header-anchor" href="#rw-port" aria-hidden="true">#</a> rw_port</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_port</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数时端口读写的函数。</p><p>参入pos代表的是端口号。</p><p>程序内容比较简单，就是循环进行端口的读写。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token operator">*</span>pos<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span><span class="token number">65536</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>rw<span class="token operator">==</span>READ<span class="token punctuation">)</span>
			<span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span>
			<span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	i <span class="token operator">-=</span> <span class="token operator">*</span>pos<span class="token punctuation">;</span>
	<span class="token operator">*</span>pos <span class="token operator">+=</span> i<span class="token punctuation">;</span>
	<span class="token keyword">return</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rw-memory" tabindex="-1"><a class="header-anchor" href="#rw-memory" aria-hidden="true">#</a> rw_memory</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_memory</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是内存设备文件的读写函数。</p><p>下面的大多数函数都只是一个空壳子，暂未实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">switch</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">rw_ram</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">rw_mem</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">rw_kmem</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token punctuation">(</span>rw<span class="token operator">==</span>READ<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>count<span class="token punctuation">;</span>	<span class="token comment">/* rw_null */</span>
		<span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">rw_port</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rw-char" tabindex="-1"><a class="header-anchor" href="#rw-char" aria-hidden="true">#</a> rw_char</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rw_char</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数时字符设备的读写操作函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	crw_ptr call_addr<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token operator">&gt;=</span>NRDEVS<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>call_addr<span class="token operator">=</span>crw_table<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">call_addr</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span><span class="token function">MINOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span>count<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,37),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-fs-char_dev.html.vue"]]);export{r as default};
