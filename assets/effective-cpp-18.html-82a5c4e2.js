const e=JSON.parse('{"key":"v-5d012006","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-18.html","title":"effective c++ 18 让接口容易被正确使用， 不易被误用","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 18 让接口容易被正确使用， 不易被误用 总结 好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。 \\"促进正确使用\\"的办法包括接口的一致性，以及与内置类型的行为兼容。 \\"阻止误用\\"的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。 tr1::shared_ptr支持定制型删除器。这可防范DLL问题，可被用来自动解除互斥锁。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-18.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 18 让接口容易被正确使用， 不易被误用"}],["meta",{"property":"og:description","content":"effective c++ 18 让接口容易被正确使用， 不易被误用 总结 好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。 \\"促进正确使用\\"的办法包括接口的一致性，以及与内置类型的行为兼容。 \\"阻止误用\\"的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。 tr1::shared_ptr支持定制型删除器。这可防范DLL问题，可被用来自动解除互斥锁。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T06:58:32.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-11T06:58:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 18 让接口容易被正确使用， 不易被误用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-11T06:58:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683788312000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.55,"words":164},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-18.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 18 让接口容易被正确使用， 不易被误用</h1>\\n<h2> 总结</h2>\\n<ul>\\n<li>好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。</li>\\n<li>\\"促进正确使用\\"的办法包括接口的一致性，以及与内置类型的行为兼容。</li>\\n<li>\\"阻止误用\\"的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。</li>\\n<li>tr1::shared_ptr支持定制型删除器。这可防范DLL问题，可被用来自动解除互斥锁。</li>\\n</ul>\\n","autoDesc":true}');export{e as data};
