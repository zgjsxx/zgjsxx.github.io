import{_ as a,V as e,W as p,X as n,Y as t,$ as o,a0 as c,F as l}from"./framework-9a29aaa0.js";const r={},i=c(`<h1 id="地址无关代码fpic" tabindex="-1"><a class="header-anchor" href="#地址无关代码fpic" aria-hidden="true">#</a> 地址无关代码fPIC</h1><ul><li>1.模块内部的函数调用、跳转</li><li>2.模块内部的数据访问，例如本模块中定义的全局变量</li><li>3.模块外部的函数调用、跳转</li><li>4.模块外部的数据访问，例如访问其他模块中定义的全局变量</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">ext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//类型2</span>
    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//类型4</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment">//类型1</span>
    <span class="token function">ext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类型3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型1-模块内部调用或跳转" tabindex="-1"><a class="header-anchor" href="#类型1-模块内部调用或跳转" aria-hidden="true">#</a> 类型1 模块内部调用或跳转</h2><p>第一种场景是最为简单的。因为被调用的函数和调用者在同一个模块。因为它们之间的相对位置是固定的，所以这种情况比较简单。</p><p>对于现在的系统来讲，模块内部的跳转、函数调用都可以是相对地址调用，或者是基于寄存器的相对调用， 所以对于这种指令是不需要重定位的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">8048344</span> <span class="token operator">&lt;</span>bar<span class="token operator">&gt;</span><span class="token operator">:</span>
<span class="token number">8048344</span><span class="token operator">:</span>  <span class="token number">55</span>       push <span class="token operator">%</span>ebp
<span class="token number">8048345</span><span class="token operator">:</span>  <span class="token number">89</span> e5    mov <span class="token operator">%</span>esp<span class="token punctuation">,</span> <span class="token operator">%</span>ebp
<span class="token number">8048347</span><span class="token operator">:</span>  <span class="token number">5</span>d       pop <span class="token operator">%</span>ebp
<span class="token number">8048348</span><span class="token operator">:</span>  c3       ret
<span class="token number">8048349</span><span class="token operator">:</span> <span class="token operator">&lt;</span>foo<span class="token operator">&gt;</span><span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">8048357</span><span class="token operator">:</span> e8 e8 ff ff ff   call <span class="token number">8048344</span> <span class="token operator">&lt;</span>bar<span class="token operator">&gt;</span>
<span class="token number">804835</span>c<span class="token operator">:</span> b8 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>   mov $<span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token operator">%</span>eax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>foo中对bar的调用实际上是一条相对地址的调用指令， <code>e8 e8 ff ff ff</code>。</p><p>这条指令中的后4个字节是目的地址相对于当前指令的吓一跳指令的偏移。</p><p>当前指令的下一条指令是<code>b8 00 00 00 00</code>，其地址是0x804835c, <code>e8 ff ff ff</code>是-24的补码形式， 因此bar的位置在<code>0x804835c-24 = 0x8048344</code>。那么只要bar和foo的相对位置不变。这条指令是地址无关的。</p><h2 id="类型二-模块内部的数据访问" tabindex="-1"><a class="header-anchor" href="#类型二-模块内部的数据访问" aria-hidden="true">#</a> 类型二 模块内部的数据访问</h2><p>指令中不能包含数据的绝对位置， 唯一的方法就是使用相对寻址。任何一条指令与它需要访问的模块内部的数据之间的相对位置是固定的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">44</span>c <span class="token operator">&lt;</span>bar<span class="token operator">&gt;</span><span class="token operator">:</span>
<span class="token number">44</span>c<span class="token operator">:</span> <span class="token number">55</span>                     push  <span class="token operator">%</span>ebp
<span class="token number">44</span>d<span class="token operator">:</span> <span class="token number">89</span> e5                  mov  <span class="token operator">%</span>esp<span class="token punctuation">,</span> <span class="token operator">%</span>ebp
<span class="token number">44f</span><span class="token operator">:</span> e8 <span class="token number">40</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>            call <span class="token number">494</span> <span class="token operator">&lt;</span>__i686<span class="token punctuation">.</span>get_pc_thunk<span class="token punctuation">.</span>cx<span class="token operator">&gt;</span>
<span class="token number">454</span><span class="token operator">:</span> <span class="token number">81</span> c1 <span class="token number">8</span>c <span class="token number">11</span> <span class="token number">00</span> <span class="token number">00</span>      add $<span class="token number">0x118c</span><span class="token punctuation">,</span> <span class="token operator">%</span>ecx
<span class="token number">45</span>a<span class="token operator">:</span> c7 <span class="token number">81</span> <span class="token number">28</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span>   movl $<span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">(</span><span class="token operator">%</span>ecx<span class="token punctuation">)</span>      <span class="token comment">// a = 1</span>
<span class="token number">461</span><span class="token operator">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>
<span class="token number">464</span><span class="token operator">:</span> <span class="token number">8</span>b <span class="token number">81</span> f8 ff ff ff      mov <span class="token number">0xfffffff8</span><span class="token punctuation">(</span><span class="token operator">%</span>ecx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>eax
<span class="token number">46</span>a<span class="token operator">:</span> c7 <span class="token number">00</span> <span class="token number">02</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>      movl  $<span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>eax<span class="token punctuation">)</span>         <span class="token comment">// b = 2</span>
<span class="token number">470</span><span class="token operator">:</span> <span class="token number">5</span>d                     pop  <span class="token operator">%</span>ebp
<span class="token number">471</span><span class="token operator">:</span> c3                     ret

<span class="token number">000000494</span> <span class="token operator">&lt;</span>__i686<span class="token punctuation">.</span>get_pc_thunk<span class="token punctuation">.</span>cx<span class="token operator">&gt;</span><span class="token operator">:</span>
<span class="token number">494</span><span class="token operator">:</span> <span class="token number">8</span>b <span class="token number">0</span>c <span class="token number">24</span>               <span class="token function">mov</span>  <span class="token punctuation">(</span><span class="token operator">%</span>esp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>ecx
<span class="token number">497</span><span class="token operator">:</span> c3                     ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interp段" tabindex="-1"><a class="header-anchor" href="#interp段" aria-hidden="true">#</a> .interp段</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>objdump <span class="token parameter variable">-s</span> a.out <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-C</span> <span class="token number">5</span> .interp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个就是可执行文件所需要的动态链接器的路径。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>readelf <span class="token parameter variable">-l</span> a.out <span class="token operator">|</span><span class="token function">grep</span>  interpretrer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>R_X86_64_PLT32</p><h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h1>`,19),u={href:"https://blog.werner.wiki/elf-plt-got-static-analysis/",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=l("ExternalLinkIcon");return e(),p("div",null,[i,n("p",null,[n("a",u,[t("https://blog.werner.wiki/elf-plt-got-static-analysis/"),o(s)])])])}const v=a(r,[["render",k],["__file","dynamic_fpic.html.vue"]]);export{v as default};
