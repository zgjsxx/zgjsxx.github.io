import{_ as n,V as s,W as a,a0 as e}from"./framework-9a29aaa0.js";const t={},p=e(`<h1 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> stack</h1><h2 id="stack实现概述" tabindex="-1"><a class="header-anchor" href="#stack实现概述" aria-hidden="true">#</a> stack实现概述</h2><p>下面的代码是stack的类数据部分的定义，其是一个类模板。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> mystl<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">stack</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> Container                           container_type<span class="token punctuation">;</span>
    <span class="token comment">// 使用底层容器的型别</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>value_type      value_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>size_type       size_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>reference       reference<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span>

    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> value_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
                    <span class="token string">&quot;the value_type of Container should be same with T&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    container_type c_<span class="token punctuation">;</span>  <span class="token comment">// 用底层容器表现 stack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","stack.html.vue"]]);export{d as default};
