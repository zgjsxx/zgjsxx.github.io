import{_ as s,V as t,W as o,X as a,Y as e,$ as r,a0 as c,F as p}from"./framework-9a29aaa0.js";const l={},i=c(`<h2 id="编译器指令重排" tabindex="-1"><a class="header-anchor" href="#编译器指令重排" aria-hidden="true">#</a> 编译器指令重排</h2><h2 id="cpu指令重排" tabindex="-1"><a class="header-anchor" href="#cpu指令重排" aria-hidden="true">#</a> CPU指令重排</h2><h2 id="内存屏障" tabindex="-1"><a class="header-anchor" href="#内存屏障" aria-hidden="true">#</a> 内存屏障</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">::</span><span class="token operator">:</span> <span class="token string">&quot;memory&quot;</span><span class="token punctuation">)</span> is just a compiler barrier<span class="token punctuation">.</span>
<span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token string">&quot;mfence&quot;</span> <span class="token operator">::</span><span class="token operator">:</span> <span class="token string">&quot;memory&quot;</span><span class="token punctuation">)</span> is both a compiler barrier and CPU barrier<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d={href:"https://blog.csdn.net/wxj1992/article/details/104266983",target:"_blank",rel:"noopener noreferrer"};function u(h,k){const n=p("ExternalLinkIcon");return t(),o("div",null,[i,a("p",null,[e("参考文章 内存序是如何实现的 "),a("a",d,[e("https://blog.csdn.net/wxj1992/article/details/104266983"),r(n)])])])}const _=s(l,[["render",u],["__file","memory-order.html.vue"]]);export{_ as default};
