const e=JSON.parse('{"key":"v-7dca628a","path":"/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.html","title":"Linux-0.11 kernel目录进程管理system_call.s详解","lang":"zh-CN","frontmatter":{"category":["Linux"],"tag":["Linux-0.11代码解读系列"],"description":"Linux-0.11 kernel目录进程管理system_call.s详解 模块简介 过程分析 system_call ret_from_sys_call sys_fork coprocessor_error device_not_available timer_interrupt hd_interrupt floppy_interrupt do_floppy为一函数指针，将被赋值实际处理C函数指针。该指针在被交换放到eax寄存器后 就将do_floppy变量置空。然后测试eax中原指针是否为空，若是则使指针指向C函数。 - parallel_interrupt","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"Linux-0.11 kernel目录进程管理system_call.s详解"}],["meta",{"property":"og:description","content":"Linux-0.11 kernel目录进程管理system_call.s详解 模块简介 过程分析 system_call ret_from_sys_call sys_fork coprocessor_error device_not_available timer_interrupt hd_interrupt floppy_interrupt do_floppy为一函数指针，将被赋值实际处理C函数指针。该指针在被交换放到eax寄存器后 就将do_floppy变量置空。然后测试eax中原指针是否为空，若是则使指针指向C函数。 - parallel_interrupt"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T03:08:55.000Z"}],["meta",{"property":"article:tag","content":"Linux-0.11代码解读系列"}],["meta",{"property":"article:modified_time","content":"2024-04-09T03:08:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux-0.11 kernel目录进程管理system_call.s详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-09T03:08:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块简介","slug":"模块简介","link":"#模块简介","children":[]},{"level":2,"title":"过程分析","slug":"过程分析","link":"#过程分析","children":[{"level":3,"title":"system_call","slug":"system-call","link":"#system-call","children":[]},{"level":3,"title":"ret_from_sys_call","slug":"ret-from-sys-call","link":"#ret-from-sys-call","children":[]},{"level":3,"title":"sys_fork","slug":"sys-fork","link":"#sys-fork","children":[]},{"level":3,"title":"coprocessor_error","slug":"coprocessor-error","link":"#coprocessor-error","children":[]},{"level":3,"title":"device_not_available","slug":"device-not-available","link":"#device-not-available","children":[]},{"level":3,"title":"timer_interrupt","slug":"timer-interrupt","link":"#timer-interrupt","children":[]},{"level":3,"title":"hd_interrupt","slug":"hd-interrupt","link":"#hd-interrupt","children":[]},{"level":3,"title":"floppy_interrupt","slug":"floppy-interrupt","link":"#floppy-interrupt","children":[]},{"level":3,"title":"parallel_interrupt","slug":"parallel-interrupt","link":"#parallel-interrupt","children":[]}]}],"git":{"createdTime":1680579191000,"updatedTime":1712632135000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":9}]},"readingTime":{"minutes":13.7,"words":4111},"filePathRelative":"posts/Linux/kernel/Linux-0.11/Linux-0.11-kernel-system_call.md","localizedDate":"2023年4月4日","excerpt":"<ul>\\n<li><a href=\\"#linux-011-kernel%E7%9B%AE%E5%BD%95%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86system_calls%E8%AF%A6%E8%A7%A3\\">Linux-0.11 kernel目录进程管理system_call.s详解</a>\\n<ul>\\n<li><a href=\\"#%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B\\">模块简介</a></li>\\n<li><a href=\\"#%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\\">过程分析</a>\\n<ul>\\n<li><a href=\\"#system_call\\">system_call</a></li>\\n<li><a href=\\"#ret_from_sys_call\\">ret_from_sys_call</a></li>\\n<li><a href=\\"#sys_fork\\">sys_fork</a></li>\\n<li><a href=\\"#coprocessor_error\\">coprocessor_error</a></li>\\n<li><a href=\\"#device_not_available\\">device_not_available</a></li>\\n<li><a href=\\"#timer_interrupt\\">timer_interrupt</a></li>\\n<li><a href=\\"#hd_interrupt\\">hd_interrupt</a></li>\\n<li><a href=\\"#floppy_interrupt\\">floppy_interrupt</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#do_floppy%E4%B8%BA%E4%B8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%B0%86%E8%A2%AB%E8%B5%8B%E5%80%BC%E5%AE%9E%E9%99%85%E5%A4%84%E7%90%86c%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E8%AF%A5%E6%8C%87%E9%92%88%E5%9C%A8%E8%A2%AB%E4%BA%A4%E6%8D%A2%E6%94%BE%E5%88%B0eax%E5%AF%84%E5%AD%98%E5%99%A8%E5%90%8E\\">do_floppy为一函数指针，将被赋值实际处理C函数指针。该指针在被交换放到eax寄存器后</a></li>\\n<li><a href=\\"#%E5%B0%B1%E5%B0%86do_floppy%E5%8F%98%E9%87%8F%E7%BD%AE%E7%A9%BA%E7%84%B6%E5%90%8E%E6%B5%8B%E8%AF%95eax%E4%B8%AD%E5%8E%9F%E6%8C%87%E9%92%88%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E8%8B%A5%E6%98%AF%E5%88%99%E4%BD%BF%E6%8C%87%E9%92%88%E6%8C%87%E5%90%91c%E5%87%BD%E6%95%B0\\">就将do_floppy变量置空。然后测试eax中原指针是否为空，若是则使指针指向C函数。</a>\\n- <a href=\\"#parallel_interrupt\\">parallel_interrupt</a></li>\\n</ul>","autoDesc":true}');export{e as data};
