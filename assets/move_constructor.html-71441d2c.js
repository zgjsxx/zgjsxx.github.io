const n=JSON.parse('{"key":"v-ae199e4c","path":"/posts/Program_language/cpp/move_constructor.html","title":"","lang":"zh-CN","frontmatter":{"category":["C++"],"description":"什么样的类需要自定义析构函数? 首先看下面这个类，这个类需要写自定义析构函数吗？ class Student{ public: Student(std::string name , int age, int id):name_(name), age_(age), id(id_){}； //需要析构函数吗？ public: std::string getName() const{ return name_; } int getAge() const{ return age_; } int getId() const{ return id_; } private: std::string name_; int age_; int id_; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/move_constructor.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:description","content":"什么样的类需要自定义析构函数? 首先看下面这个类，这个类需要写自定义析构函数吗？ class Student{ public: Student(std::string name , int age, int id):name_(name), age_(age), id(id_){}； //需要析构函数吗？ public: std::string getName() const{ return name_; } int getAge() const{ return age_; } int getId() const{ return id_; } private: std::string name_; int age_; int id_; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-28T10:13:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-28T10:13:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-28T10:13:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么样的类需要自定义析构函数?","slug":"什么样的类需要自定义析构函数","link":"#什么样的类需要自定义析构函数","children":[]}],"git":{"createdTime":1693217597000,"updatedTime":1693217597000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":0.46,"words":138},"filePathRelative":"posts/Program_language/cpp/move_constructor.md","localizedDate":"2023年8月28日","excerpt":"<h2> 什么样的类需要自定义析构函数?</h2>\\n<p>首先看下面这个类，这个类需要写自定义析构函数吗？</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">Student</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>string name <span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> id<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">name_</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">age_</span><span class=\\"token punctuation\\">(</span>age<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">id</span><span class=\\"token punctuation\\">(</span>id_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>；\\n    <span class=\\"token comment\\">//需要析构函数吗？</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>string <span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> name_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> age_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> id_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>string name_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> age_<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> id_<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
