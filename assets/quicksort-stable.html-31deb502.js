const n=JSON.parse('{"key":"v-28526711","path":"/posts/datastructure_algorithm/quicksort-stable.html","title":"快速排序及其稳定性分析","lang":"zh-CN","frontmatter":{"category":["data structure"],"tag":["data structure"],"description":"快速排序及其稳定性分析 快速排序代码 c代码： #include &lt;stdio.h&gt; //将Int数组a中的第i个元素和第j个元素互换 void swap(int a[],int i,int j) { \\tint tmp = a[i]; \\ta[i] = a[j]; \\ta[j] =tmp; } //以第一个元素作为划分，将它放入中间 int partition(int a[],int start,int end) { \\tint i = start; \\tint j = end + 1; \\tint x = a[start]; \\twhile (1) \\t{ \\t\\twhile (a[++i]&lt;x); \\t\\twhile (a[--j]&gt;x); \\t\\tif (i&gt;=j) \\t\\t\\tbreak; \\t\\tswap(a,i,j); \\t} \\ta[start] = a[j]; \\ta[j] = x; \\treturn j; } void quickSort(int a[],int start,int end) { \\tif (start&lt;end) \\t{ \\t\\tint q = partition(a,start,end); \\t\\tquickSort(a,start,q-1); \\t\\tquickSort(a,q+1,end); \\t} } int main() { \\tint a[] = {4,2,1,5,3}; \\tquickSort(a,0,4); \\tfor (int i=0;i&lt;5;i++) \\t{ \\t\\tprintf(\\"%d \\",a[i]); \\t} }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/datastructure_algorithm/quicksort-stable.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"快速排序及其稳定性分析"}],["meta",{"property":"og:description","content":"快速排序及其稳定性分析 快速排序代码 c代码： #include &lt;stdio.h&gt; //将Int数组a中的第i个元素和第j个元素互换 void swap(int a[],int i,int j) { \\tint tmp = a[i]; \\ta[i] = a[j]; \\ta[j] =tmp; } //以第一个元素作为划分，将它放入中间 int partition(int a[],int start,int end) { \\tint i = start; \\tint j = end + 1; \\tint x = a[start]; \\twhile (1) \\t{ \\t\\twhile (a[++i]&lt;x); \\t\\twhile (a[--j]&gt;x); \\t\\tif (i&gt;=j) \\t\\t\\tbreak; \\t\\tswap(a,i,j); \\t} \\ta[start] = a[j]; \\ta[j] = x; \\treturn j; } void quickSort(int a[],int start,int end) { \\tif (start&lt;end) \\t{ \\t\\tint q = partition(a,start,end); \\t\\tquickSort(a,start,q-1); \\t\\tquickSort(a,q+1,end); \\t} } int main() { \\tint a[] = {4,2,1,5,3}; \\tquickSort(a,0,4); \\tfor (int i=0;i&lt;5;i++) \\t{ \\t\\tprintf(\\"%d \\",a[i]); \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-13T07:24:14.000Z"}],["meta",{"property":"article:tag","content":"data structure"}],["meta",{"property":"article:modified_time","content":"2024-08-13T07:24:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速排序及其稳定性分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-13T07:24:14.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"快速排序代码","slug":"快速排序代码","link":"#快速排序代码","children":[]},{"level":2,"title":"稳定性分析","slug":"稳定性分析","link":"#稳定性分析","children":[]}],"git":{"createdTime":1687673451000,"updatedTime":1723533854000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":4}]},"readingTime":{"minutes":1.49,"words":448},"filePathRelative":"posts/datastructure_algorithm/quicksort-stable.md","localizedDate":"2023年6月25日","excerpt":"<h1> 快速排序及其稳定性分析</h1>\\n<h2> 快速排序代码</h2>\\n<p>c代码：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n \\n<span class=\\"token comment\\">//将Int数组a中的第i个元素和第j个元素互换</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> j<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> tmp <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span>  <span class=\\"token operator\\">=</span>tmp<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token comment\\">//以第一个元素作为划分，将它放入中间</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">partition</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> start<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> end <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">[</span>start<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&lt;</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">--</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">&gt;=</span>j<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span>i<span class=\\"token punctuation\\">,</span>j<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\ta<span class=\\"token punctuation\\">[</span>start<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> j<span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>start<span class=\\"token operator\\">&lt;</span>end<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">int</span> q <span class=\\"token operator\\">=</span> <span class=\\"token function\\">partition</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span>start<span class=\\"token punctuation\\">,</span>end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span>start<span class=\\"token punctuation\\">,</span>q<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span>q<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d \\"</span><span class=\\"token punctuation\\">,</span>a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
