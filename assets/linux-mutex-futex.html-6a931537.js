import{_ as e,V as o,W as c,X as n,Y as s,$ as t,a0 as p,F as l}from"./framework-9a29aaa0.js";const i={},u=p(`<h1 id="深入了解glibc的互斥锁" tabindex="-1"><a class="header-anchor" href="#深入了解glibc的互斥锁" aria-hidden="true">#</a> 深入了解glibc的互斥锁</h1><p>互斥锁是<strong>多线程</strong>同步时常用的手段，使用互斥锁可以保护对共享资源的操作。 共享资源也被称为<strong>临界区</strong>，当一个线程对一个临界区加锁后，其他线程就不能进入该临界区，直到持有临界区锁的线程释放该锁。</p><p>本文以glibc中mutex的实现为例，讲解其背后的实现原理。</p><h2 id="glibc-mutex类型" tabindex="-1"><a class="header-anchor" href="#glibc-mutex类型" aria-hidden="true">#</a> glibc mutex类型</h2><p>glibc的互斥锁的类型名称为pthread_mutex_t，其结构可以用下面的结构体表示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> lock<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token keyword">int</span> owner<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nusers<span class="token punctuation">;</span>
    <span class="token keyword">int</span> kind<span class="token punctuation">;</span>
    <span class="token comment">// other ignore</span>
<span class="token punctuation">}</span> <span class="token class-name">pthread_mutex_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li>lock表示当前mutex的状态，0表示没有被加锁，而1表示mutex已经被加锁。</li><li>count表示被加锁的次数，对于不可重入锁，该值为0或者1，对于可重入锁，count可以大于1.</li><li>owner用来记录持有当前mutex的线程id</li><li>nusers用于记录多少个线程持有该互斥锁，一般来说该值只能是0或者1，但是对于读写锁，多个读线程可以共同持有锁，因此nusers通常用于读写锁的场景下。</li><li>kind表示锁的类型</li></ul><p>pthread_mutex_t锁有如下的类型</p><ul><li>PTHREAD_MUTEX_TIMED_NP： 普通锁</li><li>PTHREAD_MUTEX_RECURSIVE_NP: 可重入锁</li><li>PTHREAD_MUTEX_ERRORCHECK_NP: 检错锁</li><li>PTHREAD_MUTEX_ADAPTIVE_NP: 自适应锁</li></ul><h2 id="mutex的加锁过程" tabindex="-1"><a class="header-anchor" href="#mutex的加锁过程" aria-hidden="true">#</a> mutex的加锁过程</h2>`,11),k={href:"http://mirror.keystealth.org/gnu/libc/glibc-2.34.tar.gz%E3%80%82",target:"_blank",rel:"noopener noreferrer"},r=p(`<p>看看最简单的类型PTHREAD_MUTEX_TIMED_NP,这里调用了lll_mutex_lock_optimized方法进行加锁。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>PTHREAD_MUTEX_KIND_MASK_NP
				 <span class="token operator">|</span> PTHREAD_MUTEX_ELISION_FLAGS_NP<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">__pthread_mutex_lock_full</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_likely</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> PTHREAD_MUTEX_TIMED_NP<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">FORCE_ELISION</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token keyword">goto</span> elision<span class="token punctuation">)</span><span class="token punctuation">;</span>
    simple<span class="token operator">:</span>
      <span class="token comment">/* Normal mutex.  */</span>
      <span class="token function">LLL_MUTEX_LOCK_OPTIMIZED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">assert</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__owner <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lll_mutex_lock_optimized定义在pthread_mutex_lock.c文件中，从注释了解到，这是为单线程进行的优化，如果是单线程，则直接将mutex的__lock的值修改为1，如果不是单线程，则调用lll_lock方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LLL_MUTEX_LOCK</span></span>
<span class="token comment">/* lll_lock with single-thread optimization.  */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">lll_mutex_lock_optimized</span> <span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* The single-threaded optimization is only valid for private
     mutexes.  For process-shared mutexes, the mutex could be in a
     shared mapping, so synchronization with another process is needed
     even without any threads.  If the lock is already marked as
     acquired, POSIX requires that pthread_mutex_lock deadlocks for
     normal mutexes, so skip the optimization in that case as
     well.  */</span>
  <span class="token keyword">int</span> private <span class="token operator">=</span> <span class="token function">PTHREAD_MUTEX_PSHARED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>private <span class="token operator">==</span> LLL_PRIVATE <span class="token operator">&amp;&amp;</span> SINGLE_THREAD_P <span class="token operator">&amp;&amp;</span> mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">lll_lock</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">LLL_MUTEX_LOCK</span><span class="token expression"><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>						</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">lll_lock</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token operator">-&gt;</span>__data<span class="token punctuation">.</span>__lock<span class="token punctuation">,</span> <span class="token function">PTHREAD_MUTEX_PSHARED</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lll_lock定义在lowlevellock.h文件中，又会调用到__lll_lock方法，在__lll_lock方法中使用了CAS方法尝试对mutex的__lock值进行修改。</p><p>CAS的伪代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">CAS</span><span class="token punctuation">(</span>T<span class="token operator">*</span> val<span class="token punctuation">,</span> T new_value<span class="token punctuation">,</span> T old_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>val <span class="token operator">==</span> old_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>val <span class="token operator">=</span> new_value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里如果futex = 0，则尝试将其修改为1, 如果futex &gt;= 1,则会调用__lll_lock_wait_private或者__lll_lock_wait。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__lll_lock</span><span class="token expression"><span class="token punctuation">(</span>futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span>                                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                                                               </span><span class="token punctuation">\\</span>
   <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>                                                                   </span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span>__futex <span class="token operator">=</span> <span class="token punctuation">(</span>futex<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            </span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>__glibc_unlikely                                               </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token punctuation">(</span><span class="token function">atomic_compare_and_exchange_bool_acq</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token punctuation">{</span>                                                                </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span> <span class="token punctuation">(</span>private<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>private<span class="token punctuation">)</span> <span class="token operator">==</span> LLL_PRIVATE<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
           <span class="token expression"><span class="token function">__lll_lock_wait_private</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">)</span><span class="token punctuation">;</span>                           </span><span class="token punctuation">\\</span>
         <span class="token expression"><span class="token keyword">else</span>                                                           </span><span class="token punctuation">\\</span>
           <span class="token expression"><span class="token function">__lll_lock_wait</span> <span class="token punctuation">(</span>__futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>                          </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token punctuation">}</span>                                                                </span><span class="token punctuation">\\</span>
   <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lll_lock</span><span class="token expression"><span class="token punctuation">(</span>futex<span class="token punctuation">,</span> private<span class="token punctuation">)</span>	</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">__lll_lock</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>futex<span class="token punctuation">)</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__lll_lock_wait_private和__lll_lock_wait是类似的，其最终将调用futex_wait进行wait。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span>
<span class="token function">__lll_lock_wait_private</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>futex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>futex<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> futex<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">atomic_exchange_acquire</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    futex<span class="token operator">:</span>
      <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>lll_lock_wait_private<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> futex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">futex_wait</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> LLL_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Wait if *futex == 2.  */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__lll_lock_wait_private<span class="token punctuation">)</span>

<span class="token keyword">void</span>
<span class="token function">__lll_lock_wait</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>futex<span class="token punctuation">,</span> <span class="token keyword">int</span> private<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span>futex<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> futex<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">atomic_exchange_acquire</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    futex<span class="token operator">:</span>
      <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>lll_lock_wait<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> futex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">futex_wait</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> futex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Wait if *futex == 2.  */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在futex_wait内部，将会调用lll_futex_timed_wait方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __always_inline <span class="token keyword">int</span>
<span class="token function">futex_wait</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>futex_word<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> private<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token function">lll_futex_timed_wait</span> <span class="token punctuation">(</span>futex_word<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EAGAIN<span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EINTR<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>err<span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token operator">-</span>ETIMEDOUT<span class="token operator">:</span> <span class="token comment">/* Cannot have happened as we provided no timeout.  */</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EFAULT<span class="token operator">:</span> <span class="token comment">/* Must have been caused by a glibc or application bug.  */</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>EINVAL<span class="token operator">:</span> <span class="token comment">/* Either due to wrong alignment or due to the timeout not
		     being normalized.  Must have been caused by a glibc or
		     application bug.  */</span>
    <span class="token keyword">case</span> <span class="token operator">-</span>ENOSYS<span class="token operator">:</span> <span class="token comment">/* Must have been caused by a glibc bug.  */</span>
    <span class="token comment">/* No other errors are documented at this time.  */</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">futex_fatal_error</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lll_futex_timed_wait方法其实是对sys_futex系统调用的封装。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">lll_futex_timed_wait</span><span class="token expression"><span class="token punctuation">(</span>futexp<span class="token punctuation">,</span> val<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> private<span class="token punctuation">)</span>     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">lll_futex_syscall</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> futexp<span class="token punctuation">,</span>                                 </span><span class="token punctuation">\\</span>
		     <span class="token expression"><span class="token function">__lll_private_flag</span> <span class="token punctuation">(</span>FUTEX_WAIT<span class="token punctuation">,</span> private<span class="token punctuation">)</span><span class="token punctuation">,</span>  </span><span class="token punctuation">\\</span>
		     <span class="token expression">val<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">lll_futex_syscall</span><span class="token expression"><span class="token punctuation">(</span>nargs<span class="token punctuation">,</span> futexp<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>                                                                    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">int</span> __ret <span class="token operator">=</span> <span class="token function">INTERNAL_SYSCALL</span> <span class="token punctuation">(</span>futex<span class="token punctuation">,</span> nargs<span class="token punctuation">,</span> futexp<span class="token punctuation">,</span> op<span class="token punctuation">,</span> 	</span><span class="token punctuation">\\</span>
				       <span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>                    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">INTERNAL_SYSCALL_ERROR_P</span> <span class="token punctuation">(</span>__ret<span class="token punctuation">)</span><span class="token punctuation">)</span>         	</span><span class="token punctuation">\\</span>
     <span class="token expression"><span class="token operator">?</span> <span class="token operator">-</span><span class="token function">INTERNAL_SYSCALL_ERRNO</span> <span class="token punctuation">(</span>__ret<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     	</span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>INTERNAL_SYSCALL的第一个参数是系统调用名字，使用SYS_ify宏拼接出了系统调用号__NR_futex（202）。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_futex</span> <span class="token expression"><span class="token number">202</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">INTERNAL_SYSCALL</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">INTERNAL_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression">internal_syscall</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">nr</span> <span class="token punctuation">(</span><span class="token function">SYS_ify</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">SYS_ify</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYS_ify</span><span class="token expression"><span class="token punctuation">(</span>syscall_name<span class="token punctuation">)</span>	__NR_</span><span class="token punctuation">##</span><span class="token expression">syscall_name</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>internal_syscall4就是4个参数的系统调用方法，在方法内进入了内核态方法sys_futex。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">internal_syscall4</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">internal_syscall4</span><span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">,</span> arg4<span class="token punctuation">)</span>		</span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>									</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> resultvar<span class="token punctuation">;</span>					</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> __arg4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> __arg3<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> __arg2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> __arg1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>			 	</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> _a4<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;r10&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg4<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> _a3<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdx&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg3<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> _a2<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rsi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg2<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> _a1<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg1<span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span>							</span><span class="token punctuation">\\</span>
    <span class="token string">&quot;syscall\\n\\t&quot;</span>							<span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;=a&quot;</span> <span class="token expression"><span class="token punctuation">(</span>resultvar<span class="token punctuation">)</span>							</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;0&quot;</span> <span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a1<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a2<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a3<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a4<span class="token punctuation">)</span>		</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;memory&quot;</span><span class="token expression"><span class="token punctuation">,</span> REGISTERS_CLOBBERED_BY_SYSCALL<span class="token punctuation">)</span><span class="token punctuation">;</span>			</span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span> resultvar<span class="token punctuation">;</span>						</span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sys-futex" tabindex="-1"><a class="header-anchor" href="#sys-futex" aria-hidden="true">#</a> sys_futex</h2><p>总结下futex_wait流程：</p><p>加自旋锁 检测*uaddr是否等于val，如果不相等则会立即返回 将进程状态设置为TASK_INTERRUPTIBLE 将当期进程插入到等待队列中 释放自旋锁 创建定时任务：当超过一定时间还没被唤醒时，将进程唤醒 挂起当前进程</p><p>futex_wake流程如下：</p><p>找到uaddr对应的futex_hash_bucket，即代码中的hb 对hb加自旋锁 遍历fb的链表，找到uaddr对应的节点 调用wake_futex唤起等待的进程 释放自旋锁</p>`,24),d={href:"https://juejin.cn/post/6844903688478146574",target:"_blank",rel:"noopener noreferrer"},v={href:"http://blog.foool.net/2021/04/futex-%E7%BB%BC%E8%BF%B0/",target:"_blank",rel:"noopener noreferrer"};function m(_,b){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("本文使用的源码是glibc-2.34版本，"),n("a",k,[s("http://mirror.keystealth.org/gnu/libc/glibc-2.34.tar.gz。"),t(a)])]),r,n("p",null,[s("作者：做个好人君 链接："),n("a",d,[s("https://juejin.cn/post/6844903688478146574"),t(a)]),s(" 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),n("p",null,[n("a",v,[s("http://blog.foool.net/2021/04/futex-综述/"),t(a)])])])}const f=e(i,[["render",m],["__file","linux-mutex-futex.html.vue"]]);export{f as default};
