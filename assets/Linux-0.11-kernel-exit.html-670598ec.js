import{_ as n,V as s,W as a,a0 as p}from"./framework-c954d91f.js";const t={},e=p(`<h1 id="linux-0-11-kernel目录exit-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-kernel目录exit-c详解" aria-hidden="true">#</a> Linux-0.11 kernel目录exit.c详解</h1><h2 id="release" tabindex="-1"><a class="header-anchor" href="#release" aria-hidden="true">#</a> release</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是去释放进程在任务数组中占用的位置， 并且将进程的描述符PCB占用的内存进行释放。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token comment">//如果p为空指针什么也不做</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_TASKS <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//找到了对应的数组项</span>
        task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//将该项置空</span>
        <span class="token function">free_page</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放该内存页</span>
        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重新进行调用</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to release non-existent task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="send-sig" tabindex="-1"><a class="header-anchor" href="#send-sig" aria-hidden="true">#</a> send_sig</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">send_sig</span><span class="token punctuation">(</span><span class="token keyword">long</span> sig<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> priv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是向进程的传递一个信号。</p><p>首先对信号的数值大小做一个校验。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> sig<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> sig<span class="token operator">&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着判断发送信号的进程的有效用户和待接受信号的进程的有效用户是否相等，并判断是否是超级用户， 如果二者满足其一， 就可以设置待接受进程的信号位。否则就可以报权限错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>priv <span class="token operator">||</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>euid<span class="token operator">==</span>p<span class="token operator">-&gt;</span>euid<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  p<span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kill-session" tabindex="-1"><a class="header-anchor" href="#kill-session" aria-hidden="true">#</a> kill_session</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kill_session</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是向所有和当前进程的session相同的其他进程发送SIGHUP信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> NR_TASKS <span class="token operator">+</span> task<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>session <span class="token operator">==</span> current<span class="token operator">-&gt;</span>session<span class="token punctuation">)</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGHUP<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sys-kill" tabindex="-1"><a class="header-anchor" href="#sys-kill" aria-hidden="true">#</a> sys_kill</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>pid大于零时，pid是信号欲送往的进程的标识。</li><li>pid等于零时，信号将送往所有与调用kill()的那个进程属同一个使用组的进程。</li><li>pid等于-1时，信号将送往所有调用进程有权给其发送信号的进程，除了进程1(init)。</li><li>pid小于-1时，信号将送往以-pid为组标识的进程。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> NR_TASKS <span class="token operator">+</span> task<span class="token punctuation">;</span>
<span class="token keyword">int</span> err<span class="token punctuation">,</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">==</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">==</span> <span class="token operator">-</span>pid<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      retval <span class="token operator">=</span> err<span class="token punctuation">;</span>
<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tell-father" tabindex="-1"><a class="header-anchor" href="#tell-father" aria-hidden="true">#</a> tell_father</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tell_father</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于向父进程发送SIGCHLD信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>pid <span class="token operator">!=</span> pid<span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
<span class="token comment">/* if we don&#39;t find any fathers, we just release ourselves */</span>
<span class="token comment">/* This is not really OK. Must change it to make father 1 */</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;BAD BAD - no father found\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">release</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="do-exit" tabindex="-1"><a class="header-anchor" href="#do-exit" aria-hidden="true">#</a> do_exit</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token keyword">long</span> code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先是释放当前进程代码段和数据段的内存页。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后遍历进程表，如果当前进程有子进程，那么将子进程的父进程设置为1号进程(init进程)。如果该子进程已经处于僵死(ZOMBIE)状态，则向进程1发送子进程终止的信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_TASKS <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>father <span class="token operator">==</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>father <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_ZOMBIE<span class="token punctuation">)</span>
      <span class="token comment">/* assumption task[1] is always init */</span>
      <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sys-exit" tabindex="-1"><a class="header-anchor" href="#sys-exit" aria-hidden="true">#</a> sys_exit</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_exit</span> <span class="token punctuation">(</span><span class="token keyword">int</span> error_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的内部调用了do_exit函数实现进程的退出。</p><h2 id="sys-waitpid" tabindex="-1"><a class="header-anchor" href="#sys-waitpid" aria-hidden="true">#</a> sys_waitpid</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_waitpid</span> <span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>stat_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数是waitpid函数的系统调用，其作用是挂起当前进程，直到进程号等于入参pid的子进程退出。</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>pid &lt; -1</td><td>等待进程组号为pid绝对值的任何子进程</td></tr><tr><td>pid = -1</td><td>等待任何子进程，此时的waitpid()函数就退化成了普通的wait()函数</td></tr><tr><td>pid = 0</td><td>等待进程组号与目前进程相同的任何子进程，也就是说任何和调用waitpid()函数的进程在同一个进程组的进程</td></tr><tr><td>pid &gt; 0</td><td>等待进程号为pid的子进程</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>p <span class="token operator">||</span> <span class="token operator">*</span>p <span class="token operator">==</span> current<span class="token punctuation">)</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>father <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span><span class="token comment">//如果当前项不是当前进程的子进程</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pid <span class="token operator">!=</span> pid<span class="token punctuation">)</span><span class="token comment">//不是要寻找的子进程</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token comment">//属于同一个进程组</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> <span class="token operator">-</span>pid<span class="token punctuation">)</span><span class="token comment">//进程组号等于pid的绝对值</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Linux-0.11-kernel-exit.html.vue"]]);export{r as default};
