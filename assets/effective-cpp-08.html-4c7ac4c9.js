const n=JSON.parse('{"key":"v-c6cd9688","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-08.html","title":"effective c++ 08 别让异常逃离析构函数","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 08 别让异常逃离析构函数 本文主要讲解了在日常编码中需要注意的一个原则，即在类的析构函数中不要抛出异常。因为类的析构函数的作用是对对象的资源 进行释放。而一旦在析构函数中抛出了异常，那么某些资源就可能无法正常释放。 分析 作者使用的例子是一个数据库连接的例子。如下所示， DBConnection是一个数据库连接的类，create方法可以创建一个连接， 而close方法就用于关闭该连接，但是关闭过程中可会失败，这个时候就会抛出异常。 #include &lt;stdlib.h&gt; class DBConnection { public: \\t// Function to return DBConnection objects. \\tstatic DBConnection create() \\t{ \\t\\tstatic DBConnection db; \\t\\treturn db; \\t} \\t// Close connection; throw an exception if closing fails. \\tvoid close() \\t{ \\t\\tthrow 5; \\t} };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-08.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 08 别让异常逃离析构函数"}],["meta",{"property":"og:description","content":"effective c++ 08 别让异常逃离析构函数 本文主要讲解了在日常编码中需要注意的一个原则，即在类的析构函数中不要抛出异常。因为类的析构函数的作用是对对象的资源 进行释放。而一旦在析构函数中抛出了异常，那么某些资源就可能无法正常释放。 分析 作者使用的例子是一个数据库连接的例子。如下所示， DBConnection是一个数据库连接的类，create方法可以创建一个连接， 而close方法就用于关闭该连接，但是关闭过程中可会失败，这个时候就会抛出异常。 #include &lt;stdlib.h&gt; class DBConnection { public: \\t// Function to return DBConnection objects. \\tstatic DBConnection create() \\t{ \\t\\tstatic DBConnection db; \\t\\treturn db; \\t} \\t// Close connection; throw an exception if closing fails. \\tvoid close() \\t{ \\t\\tthrow 5; \\t} };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-12T02:09:26.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-12T02:09:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 08 别让异常逃离析构函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-12T02:09:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1683857366000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":2}]},"readingTime":{"minutes":2.5,"words":750},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-08.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 08 别让异常逃离析构函数</h1>\\n<p>本文主要讲解了在日常编码中需要注意的一个原则，即在类的析构函数中不要抛出异常。因为类的析构函数的作用是对对象的资源\\n进行释放。而一旦在析构函数中抛出了异常，那么某些资源就可能无法正常释放。</p>\\n<h2> 分析</h2>\\n<p>作者使用的例子是一个数据库连接的例子。如下所示， DBConnection是一个数据库连接的类，create方法可以创建一个连接， 而close方法就用于关闭该连接，但是关闭过程中可会失败，这个时候就会抛出异常。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdlib.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DBConnection</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// Function to return DBConnection objects.</span>\\n\\t<span class=\\"token keyword\\">static</span> DBConnection <span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">static</span> DBConnection db<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> db<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">// Close connection; throw an exception if closing fails.</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">throw</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
