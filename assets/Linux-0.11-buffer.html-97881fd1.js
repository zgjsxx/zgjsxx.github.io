import{_ as n,V as a,W as s,a0 as e}from"./framework-c954d91f.js";const t={},p=e(`<h1 id="linux-0-11-文件系统buffer-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统buffer-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统buffer.c详解</h1><h2 id="buffer-init" tabindex="-1"><a class="header-anchor" href="#buffer-init" aria-hidden="true">#</a> buffer_init</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">buffer_init</span><span class="token punctuation">(</span><span class="token keyword">long</span> buffer_end<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用主要是初始化磁盘的高速缓冲区.</p><p>刚开始使用h指向了start_buffer的位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> h <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>start_buffer定义为end的位置，即内存中system模块的结束的位置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> start_buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>end<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过这个步骤之后h实际上指向了内核高速缓冲区的低地址。</p><p>接下来使用了b指针指向了内核告诉缓冲区的高地址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>buffer_end <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>
  b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> buffer_end<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里根据buffer_end的值的不同， 决定了b的指向。</p><p>在main.c文件中给定了buffer_end的大小定义:</p><ul><li>内存大小&gt;12Mb，buffer_end=4Mb</li><li>6Mb&lt;内存大小&lt;=12Mb，buffer_end=2Mb</li><li>如果内存大小&lt;=6Mb，buffer_end=1Mb</li></ul><p>知道了buffer_end的值，那么很容易通过条件语句得到b的值。</p><p>那么为什么要对buffer_end的值进行讨论呢？</p><p>这主要是因为物理内存中640K-1M的区域内存放了显存和BIOS ROM，因此当buffer_end=1M， 高速缓冲区是一块， 如果buffer_end&gt;1M， 那么高速缓冲区是两块， 这个点通过下面这张图可以清晰的了解到。</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/buffer/buffer_init.png" alt="buffer_init" tabindex="0" loading="lazy"><figcaption>buffer_init</figcaption></figure><p>buffer_init接下来要做的就是对这些高速缓冲区进行初始化</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>b <span class="token operator">-=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  h<span class="token operator">-&gt;</span>b_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_wait <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> b<span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  h<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
  h<span class="token operator">++</span><span class="token punctuation">;</span>
  NR_BUFFERS<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0x100000</span><span class="token punctuation">)</span>
    b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0xA0000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让每一个buffer_header节点使用b_data指针指向一个数据块block(1k)。然后h指针加1，b指针减1。直到h和b指针指向的区别相交。</p><p>这些buffer_header用一个双向链表进行串联。</p><p>需要注意的是， 当内存大于6Mb时， 高速缓冲区有两块， 当b指针在移动时，如果<strong>移动到了1Mb的地址</strong>时，也就是到了显存和BIOS ROM的高地址边界时， 需要跳过它，直接来到640Kb的地址。也就是下面这两行代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0x100000</span><span class="token punctuation">)</span>
  b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0xA0000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>h指针和b指针移动进行初始化的效果如下图所示：</p><figure><img src="https://github.com/zgjsxx/static-img-repo/raw/main/blog/Linux/Linux-0.11-fs/buffer/buffer_init2.png" alt="buffer_init" tabindex="0" loading="lazy"><figcaption>buffer_init</figcaption></figure><p>最后这段代码， 将free_list指向了第一个buffer_header块。然后让首尾两个buffer_header相接， 形成完整的双向链表。 最后的话，将高速哈希表中的每一行初始化为NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>free_list <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span>
free_list<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> h<span class="token punctuation">;</span>
h<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> free_list<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_HASH<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  hash_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-buffer" tabindex="-1"><a class="header-anchor" href="#find-buffer" aria-hidden="true">#</a> find_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">find_buffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="get-hash-table" tabindex="-1"><a class="header-anchor" href="#get-hash-table" aria-hidden="true">#</a> get_hash_table</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">get_hash_table</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="getblk" tabindex="-1"><a class="header-anchor" href="#getblk" aria-hidden="true">#</a> getblk</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">getblk</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="remove-from-queues" tabindex="-1"><a class="header-anchor" href="#remove-from-queues" aria-hidden="true">#</a> remove_from_queues</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">remove_from_queues</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="insert-into-queues" tabindex="-1"><a class="header-anchor" href="#insert-into-queues" aria-hidden="true">#</a> insert_into_queues</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert_into_queues</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="brelse" tabindex="-1"><a class="header-anchor" href="#brelse" aria-hidden="true">#</a> brelse</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">brelse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> buf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="bread" tabindex="-1"><a class="header-anchor" href="#bread" aria-hidden="true">#</a> bread</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="bread-page" tabindex="-1"><a class="header-anchor" href="#bread-page" aria-hidden="true">#</a> bread_page</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">bread_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> address<span class="token punctuation">,</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="breada" tabindex="-1"><a class="header-anchor" href="#breada" aria-hidden="true">#</a> breada</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">breada</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="wait-on-buffer" tabindex="-1"><a class="header-anchor" href="#wait-on-buffer" aria-hidden="true">#</a> wait_on_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sys-sync" tabindex="-1"><a class="header-anchor" href="#sys-sync" aria-hidden="true">#</a> sys_sync</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_sync</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sync-dev" tabindex="-1"><a class="header-anchor" href="#sync-dev" aria-hidden="true">#</a> sync_dev</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sync_dev</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="invalidate-buffer" tabindex="-1"><a class="header-anchor" href="#invalidate-buffer" aria-hidden="true">#</a> invalidate_buffer</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">inline</span> <span class="token function">invalidate_buffers</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="check-disk-change" tabindex="-1"><a class="header-anchor" href="#check-disk-change" aria-hidden="true">#</a> check_disk_change</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">check_disk_change</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,56),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","Linux-0.11-buffer.html.vue"]]);export{d as default};
