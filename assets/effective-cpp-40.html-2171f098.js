const e=JSON.parse('{"key":"v-628b5cc8","path":"/posts/Program_language/cpp/effective-cpp/effective-cpp-40.html","title":"effective c++ 40 明智而审慎地使用多重继承","lang":"zh-CN","frontmatter":{"category":["C++"],"tag":["C++","effective c++读书笔记"],"description":"effective c++ 40 明智而审慎地使用多重继承 本节讲解了多重继承的话题。多重继承是大多数程序员都比较讨厌的，因为代码中一旦有多重继承，很多程序员就会心生畏惧。本节就讨论多重继承的问题以及如何正确的利用好多重继承这个方法。 分析 1.当存在菱形继承时，需要使用virtual继承 class File { }; // Virtual base class. class InputFile : virtual public File { }; // Virtual base class. class OutputFile : virtual public File { }; // Deadly Multiple Inheritance diamond. class IOFile : public InputFile, public OutputFile { };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/effective-cpp/effective-cpp-40.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:title","content":"effective c++ 40 明智而审慎地使用多重继承"}],["meta",{"property":"og:description","content":"effective c++ 40 明智而审慎地使用多重继承 本节讲解了多重继承的话题。多重继承是大多数程序员都比较讨厌的，因为代码中一旦有多重继承，很多程序员就会心生畏惧。本节就讨论多重继承的问题以及如何正确的利用好多重继承这个方法。 分析 1.当存在菱形继承时，需要使用virtual继承 class File { }; // Virtual base class. class InputFile : virtual public File { }; // Virtual base class. class OutputFile : virtual public File { }; // Deadly Multiple Inheritance diamond. class IOFile : public InputFile, public OutputFile { };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-16T03:19:53.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"effective c++读书笔记"}],["meta",{"property":"article:modified_time","content":"2023-05-16T03:19:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"effective c++ 40 明智而审慎地使用多重继承\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-16T03:19:53.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1683788312000,"updatedTime":1684207193000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":3}]},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"posts/Program_language/cpp/effective-cpp/effective-cpp-40.md","localizedDate":"2023年5月11日","excerpt":"<h1> effective c++ 40 明智而审慎地使用多重继承</h1>\\n<p>本节讲解了多重继承的话题。多重继承是大多数程序员都比较讨厌的，因为代码中一旦有多重继承，很多程序员就会心生畏惧。本节就讨论多重继承的问题以及如何正确的利用好多重继承这个方法。</p>\\n<h2> 分析</h2>\\n<p>1.当存在菱形继承时，需要使用virtual继承</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">File</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">// Virtual base class.</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">InputFile</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">File</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">// Virtual base class.</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">OutputFile</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">File</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">// Deadly Multiple Inheritance diamond.</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">IOFile</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">InputFile</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">OutputFile</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
