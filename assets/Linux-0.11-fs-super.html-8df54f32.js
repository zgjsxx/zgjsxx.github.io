import{_ as n,V as s,W as a,a0 as t}from"./framework-c954d91f.js";const p={},e=t(`<h1 id="linux-0-11-文件系统super-c详解" tabindex="-1"><a class="header-anchor" href="#linux-0-11-文件系统super-c详解" aria-hidden="true">#</a> Linux-0.11 文件系统super.c详解</h1><h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><h2 id="函数详解" tabindex="-1"><a class="header-anchor" href="#函数详解" aria-hidden="true">#</a> 函数详解</h2><h3 id="lock-super" tabindex="-1"><a class="header-anchor" href="#lock-super" aria-hidden="true">#</a> lock_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lock_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是锁定bh块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_lock<span class="token punctuation">)</span><span class="token comment">//如果已经被锁定</span>
        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将当前任务置为不可中断的等待状态，并添加到该超级快等待队列。</span>
    sb<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//锁定该超级快</span>
    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="free-super" tabindex="-1"><a class="header-anchor" href="#free-super" aria-hidden="true">#</a> free_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">free_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对指定超级块进行解锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
	sb<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//对超级块进行解锁</span>
	<span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒等待该超级块的进程</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wait-on-super" tabindex="-1"><a class="header-anchor" href="#wait-on-super" aria-hidden="true">#</a> wait_on_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">wait_on_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是等待超级块解锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关中断</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_lock<span class="token punctuation">)</span><span class="token comment">//如果已经被锁定</span>
		<span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将当前任务置为不可中断的等待状态，并添加到该超级快等待队列。</span>
	<span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开中断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-super" tabindex="-1"><a class="header-anchor" href="#get-super" aria-hidden="true">#</a> get_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> <span class="token function">get_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取指定设备的超级块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> s<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	s <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>super_block<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> NR_SUPER<span class="token operator">+</span>super_block<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">wait_on_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span>
				<span class="token keyword">return</span> s<span class="token punctuation">;</span>
			s <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>super_block<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span>
			s<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="put-super" tabindex="-1"><a class="header-anchor" href="#put-super" aria-hidden="true">#</a> put_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">put_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span>
	<span class="token comment">/* struct m_inode * inode;*/</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">==</span> ROOT_DEV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;root diskette changed: prepare for armageddon\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Mounted disk changed - tssk, tssk\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">lock_super</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	sb<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>I_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Z_MAP_SLOTS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">brelse</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">free_super</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-super" tabindex="-1"><a class="header-anchor" href="#read-super" aria-hidden="true">#</a> read_super</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> <span class="token function">read_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>读取该设备的第一个磁盘块。第0个磁盘块是引导，第一个磁盘块是超级块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		s<span class="token operator">-&gt;</span>s_dev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys-umount" tabindex="-1"><a class="header-anchor" href="#sys-umount" aria-hidden="true">#</a> sys_umount</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_umount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> dev_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sys-mount" tabindex="-1"><a class="header-anchor" href="#sys-mount" aria-hidden="true">#</a> sys_mount</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sys_mount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> dev_name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> dir_name<span class="token punctuation">,</span> <span class="token keyword">int</span> rw_flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="mount-root" tabindex="-1"><a class="header-anchor" href="#mount-root" aria-hidden="true">#</a> mount_root</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mount_root</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的作用是安装根文件系统。</p><p>该函数的最初定义了一些变量，对d_inode的结构的长度进行校验。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>free<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> mi<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bad i-node size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果根文件系统在软盘中，就提示插入跟文件系统盘。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_FILE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		file_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Insert root floppy and press ENTER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">wait_for_keypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化超级块数组。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>super_block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>super_block<span class="token punctuation">[</span>NR_SUPER<span class="token punctuation">]</span> <span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		p<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		p<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		p<span class="token operator">-&gt;</span>s_wait <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取根文件系统的超级块。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token function">read_super</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to mount root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>读取根目录的i节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mi<span class="token operator">=</span><span class="token function">iget</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span>ROOT_INO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read root i-node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数在init进程中调用，下面设置init进程PCB的pwd和root。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	mi<span class="token operator">-&gt;</span>i_count <span class="token operator">+=</span> <span class="token number">3</span> <span class="token punctuation">;</span>	<span class="token comment">/* NOTE! it is logically used 4 times, not 1 */</span>
	p<span class="token operator">-&gt;</span>s_isup <span class="token operator">=</span> p<span class="token operator">-&gt;</span>s_imount <span class="token operator">=</span> mi<span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>pwd <span class="token operator">=</span> mi<span class="token punctuation">;</span>
	current<span class="token operator">-&gt;</span>root <span class="token operator">=</span> mi<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计空闲的i节点数量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	free<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	i<span class="token operator">=</span>p<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">set_bit</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">8191</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token operator">&gt;&gt;</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span>
			free<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d free blocks\\n\\r&quot;</span><span class="token punctuation">,</span>free<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计空闲的逻辑块节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	free<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	i<span class="token operator">=</span>p<span class="token operator">-&gt;</span>s_ninodes<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">set_bit</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">8191</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token operator">&gt;&gt;</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span>
			free<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d free inodes\\n\\r&quot;</span><span class="token punctuation">,</span>free<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>s_ninodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2>`,50),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Linux-0.11-fs-super.html.vue"]]);export{r as default};
