const n=JSON.parse('{"key":"v-2c746882","path":"/posts/Program_language/cpp/cpp_T_T__t__.html","title":"","lang":"zh-CN","frontmatter":{"description":"#include &lt;string.h&gt; #include &lt;iostream&gt; class Toy { public: Toy(const char* name) { name_ = new char[20]; memset(name_, 0, 20); strcpy(name_, name); } ~Toy() { delete name_; name_ = nullptr; } Toy(Toy &amp;t) { std::cout &lt;&lt; \\"Toy(Toy &amp;t)\\" &lt;&lt; std::endl; name_ = new char[20]; strcpy(t.name_, (const char*)name_); } Toy(Toy&amp;&amp; t){ std::cout &lt;&lt; \\"Toy(Toy &amp;&amp;t)\\" &lt;&lt; std::endl; std::cout &lt;&lt;\\"move constrctor\\" &lt;&lt; std::endl; name_ = t.name_; t.name_ = nullptr; } Toy&amp; operator=(Toy &amp;t){ std::cout &lt;&lt; \\"Toy(Toy &amp;t)\\" &lt;&lt; std::endl; strcpy(t.name_, (const char*)name_); return *this; } Toy&amp; operator=(Toy &amp;&amp;t){ std::cout &lt;&lt; \\"Toy&amp; operator=(Toy &amp;&amp;t)\\" &lt;&lt; std::endl; name_ = t.name_; t.name_ = nullptr; return *this; } private: char* name_{nullptr}; }; void process(Toy t) { } int main() { Toy t(\\"baby\\"); process(t); process(std::move(t)); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Program_language/cpp/cpp_T_T__t__.html"}],["meta",{"property":"og:site_name","content":"Code Building"}],["meta",{"property":"og:description","content":"#include &lt;string.h&gt; #include &lt;iostream&gt; class Toy { public: Toy(const char* name) { name_ = new char[20]; memset(name_, 0, 20); strcpy(name_, name); } ~Toy() { delete name_; name_ = nullptr; } Toy(Toy &amp;t) { std::cout &lt;&lt; \\"Toy(Toy &amp;t)\\" &lt;&lt; std::endl; name_ = new char[20]; strcpy(t.name_, (const char*)name_); } Toy(Toy&amp;&amp; t){ std::cout &lt;&lt; \\"Toy(Toy &amp;&amp;t)\\" &lt;&lt; std::endl; std::cout &lt;&lt;\\"move constrctor\\" &lt;&lt; std::endl; name_ = t.name_; t.name_ = nullptr; } Toy&amp; operator=(Toy &amp;t){ std::cout &lt;&lt; \\"Toy(Toy &amp;t)\\" &lt;&lt; std::endl; strcpy(t.name_, (const char*)name_); return *this; } Toy&amp; operator=(Toy &amp;&amp;t){ std::cout &lt;&lt; \\"Toy&amp; operator=(Toy &amp;&amp;t)\\" &lt;&lt; std::endl; name_ = t.name_; t.name_ = nullptr; return *this; } private: char* name_{nullptr}; }; void process(Toy t) { } int main() { Toy t(\\"baby\\"); process(t); process(std::move(t)); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-14T15:45:05.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-14T15:45:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-14T15:45:05.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1686757505000,"updatedTime":1686757505000,"contributors":[{"name":"zgjsxx","email":"119160524@qq.com","commits":1}]},"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"posts/Program_language/cpp/cpp_T_T&_t&&.md","localizedDate":"2023年6月14日","excerpt":"<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Toy</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">Toy</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> name<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        name_ <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">memset</span><span class=\\"token punctuation\\">(</span>name_<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">strcpy</span><span class=\\"token punctuation\\">(</span>name_<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">Toy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">delete</span> name_<span class=\\"token punctuation\\">;</span>\\n        name_ <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">Toy</span><span class=\\"token punctuation\\">(</span>Toy <span class=\\"token operator\\">&amp;</span>t<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Toy(Toy &amp;t)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n        name_ <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">strcpy</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">.</span>name_<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>name_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">Toy</span><span class=\\"token punctuation\\">(</span>Toy<span class=\\"token operator\\">&amp;&amp;</span> t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Toy(Toy &amp;&amp;t)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token string\\">\\"move constrctor\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n        name_ <span class=\\"token operator\\">=</span> t<span class=\\"token punctuation\\">.</span>name_<span class=\\"token punctuation\\">;</span>\\n        t<span class=\\"token punctuation\\">.</span>name_ <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    Toy<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>Toy <span class=\\"token operator\\">&amp;</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Toy(Toy &amp;t)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">strcpy</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">.</span>name_<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>name_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    Toy<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>Toy <span class=\\"token operator\\">&amp;&amp;</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Toy&amp; operator=(Toy &amp;&amp;t)\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n        name_ <span class=\\"token operator\\">=</span> t<span class=\\"token punctuation\\">.</span>name_<span class=\\"token punctuation\\">;</span>\\n        t<span class=\\"token punctuation\\">.</span>name_ <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> name_<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">process</span><span class=\\"token punctuation\\">(</span>Toy t<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Toy <span class=\\"token function\\">t</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"baby\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">process</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">process</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">move</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
